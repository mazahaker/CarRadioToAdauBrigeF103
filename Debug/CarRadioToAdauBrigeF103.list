
CarRadioToAdauBrigeF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  0800d9e8  0800d9e8  0001d9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e41c  0800e41c  000202a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e41c  0800e41c  000202a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e41c  0800e41c  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e41c  0800e41c  0001e41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e424  0800e424  0001e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800e428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001058  200002a4  0800e6cc  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012fc  0800e6cc  000212fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4ba  00000000  00000000  000202cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac9  00000000  00000000  0003e787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00042250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  000438a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000071fe  00000000  00000000  00044e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018039  00000000  00000000  0004c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c68  00000000  00000000  0006405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdcc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007848  00000000  00000000  000fdd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a4 	.word	0x200002a4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d9cc 	.word	0x0800d9cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a8 	.word	0x200002a8
 800014c:	0800d9cc 	.word	0x0800d9cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4605      	mov	r5, r0
 800118c:	460c      	mov	r4, r1
 800118e:	2200      	movs	r2, #0
 8001190:	2300      	movs	r3, #0
 8001192:	4628      	mov	r0, r5
 8001194:	4621      	mov	r1, r4
 8001196:	f7ff fc11 	bl	80009bc <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f908 	bl	80003e4 <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f97e 	bl	80004d8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7fe ffc0 	bl	8000168 <__aeabi_dsub>
 80011e8:	f7ff fc4e 	bl	8000a88 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <_ZN8SigmaDSPC1EP17I2C_HandleTypeDefhhP12GPIO_TypeDeftP20__UART_HandleTypeDefPFvPcE>:
 uint8_t i2cAddress;  DSP i2c address
 uint8_t device;      The DSP type, e.g ADAU1701
 uint8_t resetPin;    pin to reset DSP (optional parameter)
 Returns:  None
 ***************************************/
SigmaDSP::SigmaDSP(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress, uint8_t device, GPIO_TypeDef *resetGPIO, uint16_t resetPin, UART_HandleTypeDef *uart, void (*addMessage)(char *msg)) :
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	460b      	mov	r3, r1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
		_hi2c(hi2c), _dspAddress(i2cAddress), _deviceType(device), _resetGPIO(resetGPIO), _resetPin(resetPin), _uart(uart), _addMessage(addMessage) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	711a      	strb	r2, [r3, #4]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	79ba      	ldrb	r2, [r7, #6]
 8001224:	731a      	strb	r2, [r3, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8bba      	ldrh	r2, [r7, #28]
 8001230:	829a      	strh	r2, [r3, #20]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a3a      	ldr	r2, [r7, #32]
 8001236:	619a      	str	r2, [r3, #24]

}
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <_ZN8SigmaDSP5resetEv>:
 Function: i2cClock()
 Purpose:  Physically resets the DSP
 Inputs:   None
 Returns:  None
 ***************************************/
void SigmaDSP::reset() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_resetGPIO, _resetPin, GPIO_PIN_RESET);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6918      	ldr	r0, [r3, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	8a9b      	ldrh	r3, [r3, #20]
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	f004 f865 	bl	8005326 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f003 fc25 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(_resetGPIO, _resetPin, GPIO_PIN_SET);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6918      	ldr	r0, [r3, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	8a9b      	ldrh	r3, [r3, #20]
 800126a:	2201      	movs	r2, #1
 800126c:	4619      	mov	r1, r3
 800126e:	f004 f85a 	bl	8005326 <HAL_GPIO_WritePin>
	//  {
	//    digitalWrite(_resetPin, LOW);
	//    delay(200);
	//    digitalWrite(_resetPin, HIGH);
	//  }
	if (_uart != NULL) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <_ZN8SigmaDSP5resetEv+0x44>
		HAL_UART_Transmit(_uart, (uint8_t*) "[adau] reset\n", 13, 2);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6998      	ldr	r0, [r3, #24]
 800127e:	2302      	movs	r3, #2
 8001280:	220d      	movs	r2, #13
 8001282:	4907      	ldr	r1, [pc, #28]	; (80012a0 <_ZN8SigmaDSP5resetEv+0x5c>)
 8001284:	f007 f911 	bl	80084aa <HAL_UART_Transmit>
	}
	if (_addMessage != NULL) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <_ZN8SigmaDSP5resetEv+0x54>
		_addMessage("[adau] reset");
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <_ZN8SigmaDSP5resetEv+0x60>)
 8001296:	4798      	blx	r3
	}
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800d9e8 	.word	0x0800d9e8
 80012a4:	0800d9f8 	.word	0x0800d9f8

080012a8 <_ZN8SigmaDSP4pingEv>:
 Returns:  0 - success: ack received
 2 - error: address send, nack received
 3 - error: data send, nack received
 4 - error: unknown i2c error
 ***************************************/
bool SigmaDSP::ping() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
	//  return _WireObject.endTransmission();
	uint8_t emptyData[] = { };
	//	HAL_I2C_IsDeviceReady(_hi2c, _dspAddress, 5, 10);

//	HAL_Delay(10);
	int res = HAL_I2C_Master_Transmit(_hi2c, _dspAddress, emptyData, sizeof(emptyData), 50);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6898      	ldr	r0, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	b299      	uxth	r1, r3
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	2332      	movs	r3, #50	; 0x32
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	f004 f9de 	bl	8005684 <HAL_I2C_Master_Transmit>
 80012c8:	4603      	mov	r3, r0
 80012ca:	60fb      	str	r3, [r7, #12]

	if (_uart != NULL) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d034      	beq.n	800133e <_ZN8SigmaDSP4pingEv+0x96>
//		HAL_UART_Transmit(_uart, (uint8_t*) "[adau] ping: ", 13, 2);

		switch (res) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d82a      	bhi.n	8001330 <_ZN8SigmaDSP4pingEv+0x88>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <_ZN8SigmaDSP4pingEv+0x38>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	08001301 	.word	0x08001301
 80012e8:	08001311 	.word	0x08001311
 80012ec:	08001321 	.word	0x08001321
		case HAL_OK:
			HAL_UART_Transmit(_uart, (uint8_t*) "ok", 2, 2);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6998      	ldr	r0, [r3, #24]
 80012f4:	2302      	movs	r3, #2
 80012f6:	2202      	movs	r2, #2
 80012f8:	4927      	ldr	r1, [pc, #156]	; (8001398 <_ZN8SigmaDSP4pingEv+0xf0>)
 80012fa:	f007 f8d6 	bl	80084aa <HAL_UART_Transmit>
			break;
 80012fe:	e017      	b.n	8001330 <_ZN8SigmaDSP4pingEv+0x88>
		case HAL_ERROR:
			HAL_UART_Transmit(_uart, (uint8_t*) "error", 5, 2);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6998      	ldr	r0, [r3, #24]
 8001304:	2302      	movs	r3, #2
 8001306:	2205      	movs	r2, #5
 8001308:	4924      	ldr	r1, [pc, #144]	; (800139c <_ZN8SigmaDSP4pingEv+0xf4>)
 800130a:	f007 f8ce 	bl	80084aa <HAL_UART_Transmit>
			break;
 800130e:	e00f      	b.n	8001330 <_ZN8SigmaDSP4pingEv+0x88>
		case HAL_BUSY:
			HAL_UART_Transmit(_uart, (uint8_t*) "busy", 4, 2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6998      	ldr	r0, [r3, #24]
 8001314:	2302      	movs	r3, #2
 8001316:	2204      	movs	r2, #4
 8001318:	4921      	ldr	r1, [pc, #132]	; (80013a0 <_ZN8SigmaDSP4pingEv+0xf8>)
 800131a:	f007 f8c6 	bl	80084aa <HAL_UART_Transmit>
			break;
 800131e:	e007      	b.n	8001330 <_ZN8SigmaDSP4pingEv+0x88>
		case HAL_TIMEOUT:
			HAL_UART_Transmit(_uart, (uint8_t*) "timeout", 7, 2);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6998      	ldr	r0, [r3, #24]
 8001324:	2302      	movs	r3, #2
 8001326:	2207      	movs	r2, #7
 8001328:	491e      	ldr	r1, [pc, #120]	; (80013a4 <_ZN8SigmaDSP4pingEv+0xfc>)
 800132a:	f007 f8be 	bl	80084aa <HAL_UART_Transmit>
			break;
 800132e:	bf00      	nop
		}

		HAL_UART_Transmit(_uart, (uint8_t*) "\n", 1, 2);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6998      	ldr	r0, [r3, #24]
 8001334:	2302      	movs	r3, #2
 8001336:	2201      	movs	r2, #1
 8001338:	491b      	ldr	r1, [pc, #108]	; (80013a8 <_ZN8SigmaDSP4pingEv+0x100>)
 800133a:	f007 f8b6 	bl	80084aa <HAL_UART_Transmit>
	}

	if (_addMessage != NULL) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01d      	beq.n	8001382 <_ZN8SigmaDSP4pingEv+0xda>
		switch (res) {
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d81a      	bhi.n	8001382 <_ZN8SigmaDSP4pingEv+0xda>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <_ZN8SigmaDSP4pingEv+0xac>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001383 	.word	0x08001383
 8001358:	08001365 	.word	0x08001365
 800135c:	0800136f 	.word	0x0800136f
 8001360:	08001379 	.word	0x08001379
		case HAL_OK:
//			_addMessage("[adau] ping: ok");
			break;
		case HAL_ERROR:
			_addMessage("[adau] ping: error");
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4810      	ldr	r0, [pc, #64]	; (80013ac <_ZN8SigmaDSP4pingEv+0x104>)
 800136a:	4798      	blx	r3
			break;
 800136c:	e009      	b.n	8001382 <_ZN8SigmaDSP4pingEv+0xda>
		case HAL_BUSY:
			_addMessage("[adau] ping: busy");
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <_ZN8SigmaDSP4pingEv+0x108>)
 8001374:	4798      	blx	r3
			break;
 8001376:	e004      	b.n	8001382 <_ZN8SigmaDSP4pingEv+0xda>
		case HAL_TIMEOUT:
			_addMessage("[adau] ping: timeout");
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <_ZN8SigmaDSP4pingEv+0x10c>)
 800137e:	4798      	blx	r3
			break;
 8001380:	bf00      	nop
		}
	}

	return HAL_OK == res;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
	//	return HAL_OK == HAL_I2C_IsDeviceReady(_hi2c, _dspAddress, 5, 100);
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800da08 	.word	0x0800da08
 800139c:	0800da0c 	.word	0x0800da0c
 80013a0:	0800da14 	.word	0x0800da14
 80013a4:	0800da1c 	.word	0x0800da1c
 80013a8:	0800da24 	.word	0x0800da24
 80013ac:	0800da28 	.word	0x0800da28
 80013b0:	0800da3c 	.word	0x0800da3c
 80013b4:	0800da50 	.word	0x0800da50

080013b8 <_ZN8SigmaDSP4muteEtbh>:
		safeload_writeRegister(startMemoryAddress++, value, false);

	safeload_writeRegister(startMemoryAddress, value, true);
}

void SigmaDSP::mute(uint16_t startMemoryAddress, bool mute, uint8_t channels) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	807b      	strh	r3, [r7, #2]
 80013ca:	460b      	mov	r3, r1
 80013cc:	707b      	strb	r3, [r7, #1]
 80013ce:	4613      	mov	r3, r2
 80013d0:	703b      	strb	r3, [r7, #0]
	static int32_t unmute = 0x80 << 16;

	for (uint8_t i = 0; i < channels - 1; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	783b      	ldrb	r3, [r7, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	429a      	cmp	r2, r3
 80013de:	da11      	bge.n	8001404 <_ZN8SigmaDSP4muteEtbh+0x4c>
		safeload_writeRegister(startMemoryAddress++, mute ? (int32_t) 0 : unmute, false);
 80013e0:	8879      	ldrh	r1, [r7, #2]
 80013e2:	1c4b      	adds	r3, r1, #1
 80013e4:	807b      	strh	r3, [r7, #2]
 80013e6:	787b      	ldrb	r3, [r7, #1]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <_ZN8SigmaDSP4muteEtbh+0x38>
 80013ec:	2200      	movs	r2, #0
 80013ee:	e001      	b.n	80013f4 <_ZN8SigmaDSP4muteEtbh+0x3c>
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <_ZN8SigmaDSP4muteEtbh+0x6c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f89c 	bl	8001534 <_ZN8SigmaDSP22safeload_writeRegisterEtlb>
	for (uint8_t i = 0; i < channels - 1; i++)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	3301      	adds	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e7e8      	b.n	80013d6 <_ZN8SigmaDSP4muteEtbh+0x1e>

	safeload_writeRegister(startMemoryAddress, mute ? (int32_t) 0 : unmute, true);
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <_ZN8SigmaDSP4muteEtbh+0x56>
 800140a:	2200      	movs	r2, #0
 800140c:	e001      	b.n	8001412 <_ZN8SigmaDSP4muteEtbh+0x5a>
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <_ZN8SigmaDSP4muteEtbh+0x6c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	8879      	ldrh	r1, [r7, #2]
 8001414:	2301      	movs	r3, #1
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f88c 	bl	8001534 <_ZN8SigmaDSP22safeload_writeRegisterEtlb>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000

08001428 <_ZN8SigmaDSP14twoChannelGainEtii>:

void SigmaDSP::twoChannelGain(uint16_t startMemoryAddress, int gain1, int gain2) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	460b      	mov	r3, r1
 8001436:	817b      	strh	r3, [r7, #10]

	//	float gain1f = gain1;
	//	float gain2f = gain2;
	//
	float _gain1 = powf(10.0, (float) gain1 / 20);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fc4f 	bl	8000cdc <__aeabi_i2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4914      	ldr	r1, [pc, #80]	; (8001494 <_ZN8SigmaDSP14twoChannelGainEtii+0x6c>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fd52 	bl	8000eec <__aeabi_fdiv>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <_ZN8SigmaDSP14twoChannelGainEtii+0x70>)
 800144e:	f007 f997 	bl	8008780 <powf>
 8001452:	6178      	str	r0, [r7, #20]
	float _gain2 = powf(10.0, (float) gain2 / 20);
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f7ff fc41 	bl	8000cdc <__aeabi_i2f>
 800145a:	4603      	mov	r3, r0
 800145c:	490d      	ldr	r1, [pc, #52]	; (8001494 <_ZN8SigmaDSP14twoChannelGainEtii+0x6c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fd44 	bl	8000eec <__aeabi_fdiv>
 8001464:	4603      	mov	r3, r0
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <_ZN8SigmaDSP14twoChannelGainEtii+0x70>)
 800146a:	f007 f989 	bl	8008780 <powf>
 800146e:	6138      	str	r0, [r7, #16]
	//	float _gain2 = pow(10, gain2 / 20); // 10^(dB / 20)
	//	float tt = ((float)level1 / 20);
	//	float lev = powf(10.0, tt);// ((float)level1 / 20);
	//	;

	safeload_writeRegister(startMemoryAddress++, _gain1, false);
 8001470:	8979      	ldrh	r1, [r7, #10]
 8001472:	1c4b      	adds	r3, r1, #1
 8001474:	817b      	strh	r3, [r7, #10]
 8001476:	2300      	movs	r3, #0
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f876 	bl	800156c <_ZN8SigmaDSP22safeload_writeRegisterEtfb>
	safeload_writeRegister(startMemoryAddress, _gain2, true);
 8001480:	8979      	ldrh	r1, [r7, #10]
 8001482:	2301      	movs	r3, #1
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f870 	bl	800156c <_ZN8SigmaDSP22safeload_writeRegisterEtfb>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	41a00000 	.word	0x41a00000
 8001498:	41200000 	.word	0x41200000

0800149c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>:
 Inputs:   uint16_t startMemoryAddress;   DSP memory address
 uint8_t *data;                 Data array to write
 bool finished;                 Indicates if this is the last packet or not
 Returns:  None
 ***************************************/
void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, uint8_t *data, bool finished) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	817b      	strh	r3, [r7, #10]
 80014ac:	4613      	mov	r3, r2
 80014ae:	727b      	strb	r3, [r7, #9]
	static uint8_t _safeload_count = 0; // Keeps track of the safeload count

	uint8_t addr[2]; // Address array

	addr[0] = (memoryAddress >> 8) & 0xFF;
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	753b      	strb	r3, [r7, #20]
	addr[1] = memoryAddress & 0xFF;
 80014ba:	897b      	ldrh	r3, [r7, #10]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	757b      	strb	r3, [r7, #21]

	writeRegister(dspRegister::SafeloadAddress0 + _safeload_count, sizeof(addr), addr); // Place passed 16-bit memory address in safeload address area
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	f603 0315 	addw	r3, r3, #2069	; 0x815
 80014ca:	b299      	uxth	r1, r3
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2202      	movs	r2, #2
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f866 	bl	80015a4 <_ZN8SigmaDSP13writeRegisterEthPKh>
	// Q: Why is the safeload registers five bytes long, while I'm loading four-byte parameters into the RAM using these registers?
	// A: The safeload registers are also used to load the slew RAM data, which is five bytes long. For parameter RAM writes using safeload,
	// the first byte of the safeload register can be set to 0x00.

	// Needs 5 bytes of data
	writeRegister(dspRegister::SafeloadData0 + _safeload_count, 5, data); // Placed passed data (5 bytes) in the next safeload data space
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80014e2:	b299      	uxth	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2205      	movs	r2, #5
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 f85b 	bl	80015a4 <_ZN8SigmaDSP13writeRegisterEthPKh>

	_safeload_count++; // Increase counter
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80014f8:	701a      	strb	r2, [r3, #0]

	if (finished == true || _safeload_count >= 5) // Max 5 safeload memory registers
 80014fa:	7a7b      	ldrb	r3, [r7, #9]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d003      	beq.n	8001508 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x6c>
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d90e      	bls.n	8001526 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x8a>
			{
		addr[0] = 0x00;
 8001508:	2300      	movs	r3, #0
 800150a:	753b      	strb	r3, [r7, #20]
		addr[1] = 0x3C; // Set the IST bit (initiate safeload transfer bit)
 800150c:	233c      	movs	r3, #60	; 0x3c
 800150e:	757b      	strb	r3, [r7, #21]
		writeRegister(dspRegister::CoreRegister, sizeof(addr), addr); // Load content from the safeload registers
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2202      	movs	r2, #2
 8001516:	f640 011c 	movw	r1, #2076	; 0x81c
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f842 	bl	80015a4 <_ZN8SigmaDSP13writeRegisterEthPKh>
		_safeload_count = 0;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
	}
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200002c0 	.word	0x200002c0

08001534 <_ZN8SigmaDSP22safeload_writeRegisterEtlb>:

void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, int32_t data, bool finished) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	461a      	mov	r2, r3
 8001540:	460b      	mov	r3, r1
 8001542:	817b      	strh	r3, [r7, #10]
 8001544:	4613      	mov	r3, r2
 8001546:	727b      	strb	r3, [r7, #9]
	uint8_t dataArray[5];
	intToFixed(data, dataArray);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	461a      	mov	r2, r3
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f8be 	bl	80016d2 <_ZN8SigmaDSP10intToFixedElPh>
	safeload_writeRegister(memoryAddress, dataArray, finished);
 8001556:	7a7b      	ldrb	r3, [r7, #9]
 8001558:	f107 0210 	add.w	r2, r7, #16
 800155c:	8979      	ldrh	r1, [r7, #10]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff ff9c 	bl	800149c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>
}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZN8SigmaDSP22safeload_writeRegisterEtfb>:

void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, float data, bool finished) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	461a      	mov	r2, r3
 8001578:	460b      	mov	r3, r1
 800157a:	817b      	strh	r3, [r7, #10]
 800157c:	4613      	mov	r3, r2
 800157e:	727b      	strb	r3, [r7, #9]
	uint8_t dataArray[5];
	floatToFixed(data, dataArray);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	461a      	mov	r2, r3
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 f873 	bl	8001674 <_ZN8SigmaDSP12floatToFixedEfPh>
	safeload_writeRegister(memoryAddress, dataArray, finished);
 800158e:	7a7b      	ldrb	r3, [r7, #9]
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff ff80 	bl	800149c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN8SigmaDSP13writeRegisterEthPKh>:
 Inputs:   uint16_t address;   			 DSP memory address
 uint8_t length;                Number of bytes to write
 uint8_t *data;                 Data array to write
 Returns:  None
 ***************************************/
void SigmaDSP::writeRegister(uint16_t address, uint8_t length, const uint8_t *data) {
 80015a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a8:	b08b      	sub	sp, #44	; 0x2c
 80015aa:	af02      	add	r7, sp, #8
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	817b      	strh	r3, [r7, #10]
 80015b4:	4613      	mov	r3, r2
 80015b6:	727b      	strb	r3, [r7, #9]
	package[1] = LSByte;
	for (uint8_t i = 2; i < length + 2; i++) {
		package[i] = data[i - 2]; // Send all bytes in passed array
	}

	HAL_I2C_Master_Transmit(_hi2c, _dspAddress, package, length + 2, 50);
 80015b8:	466b      	mov	r3, sp
 80015ba:	461e      	mov	r6, r3
	uint8_t MSByte = address >> 8;
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	77bb      	strb	r3, [r7, #30]
	uint8_t LSByte = (uint8_t) address & 0xFF;
 80015c4:	897b      	ldrh	r3, [r7, #10]
 80015c6:	777b      	strb	r3, [r7, #29]
	uint8_t package[length + 2];
 80015c8:	7a7b      	ldrb	r3, [r7, #9]
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	61b9      	str	r1, [r7, #24]
 80015ce:	460b      	mov	r3, r1
 80015d0:	3301      	adds	r3, #1
 80015d2:	2200      	movs	r2, #0
 80015d4:	4698      	mov	r8, r3
 80015d6:	4691      	mov	r9, r2
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015ec:	460b      	mov	r3, r1
 80015ee:	3301      	adds	r3, #1
 80015f0:	2200      	movs	r2, #0
 80015f2:	461c      	mov	r4, r3
 80015f4:	4615      	mov	r5, r2
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	00eb      	lsls	r3, r5, #3
 8001600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001604:	00e2      	lsls	r2, r4, #3
 8001606:	460b      	mov	r3, r1
 8001608:	3301      	adds	r3, #1
 800160a:	3307      	adds	r3, #7
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	ebad 0d03 	sub.w	sp, sp, r3
 8001614:	ab02      	add	r3, sp, #8
 8001616:	3300      	adds	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
	package[0] = MSByte;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	7fba      	ldrb	r2, [r7, #30]
 800161e:	701a      	strb	r2, [r3, #0]
	package[1] = LSByte;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	7f7a      	ldrb	r2, [r7, #29]
 8001624:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 2; i < length + 2; i++) {
 8001626:	2302      	movs	r3, #2
 8001628:	77fb      	strb	r3, [r7, #31]
 800162a:	7a7b      	ldrb	r3, [r7, #9]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	429a      	cmp	r2, r3
 8001632:	db0b      	blt.n	800164c <_ZN8SigmaDSP13writeRegisterEthPKh+0xa8>
		package[i] = data[i - 2]; // Send all bytes in passed array
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	3b02      	subs	r3, #2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	441a      	add	r2, r3
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	7811      	ldrb	r1, [r2, #0]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 2; i < length + 2; i++) {
 8001644:	7ffb      	ldrb	r3, [r7, #31]
 8001646:	3301      	adds	r3, #1
 8001648:	77fb      	strb	r3, [r7, #31]
 800164a:	e7ee      	b.n	800162a <_ZN8SigmaDSP13writeRegisterEthPKh+0x86>
	HAL_I2C_Master_Transmit(_hi2c, _dspAddress, package, length + 2, 50);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6898      	ldr	r0, [r3, #8]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	791b      	ldrb	r3, [r3, #4]
 8001654:	b299      	uxth	r1, r3
 8001656:	7a7b      	ldrb	r3, [r7, #9]
 8001658:	b29b      	uxth	r3, r3
 800165a:	3302      	adds	r3, #2
 800165c:	b29b      	uxth	r3, r3
 800165e:	2232      	movs	r2, #50	; 0x32
 8001660:	9200      	str	r2, [sp, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	f004 f80e 	bl	8005684 <HAL_I2C_Master_Transmit>
 8001668:	46b5      	mov	sp, r6
}
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001674 <_ZN8SigmaDSP12floatToFixedEfPh>:
 Purpose:  Converts a 5.23 float value to 5-byte HEX and stores it to a buffer
 Inputs:   float value;      Value to convert
 uint8_t *buffer;  Buffer to store the converted data to
 Returns:  None
 ***************************************/
void SigmaDSP::floatToFixed(float value, uint8_t *buffer) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	// Convert float to 4 byte hex
	int32_t fixedval = (value * ((int32_t) 1 << 23));
 8001680:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f7ff fb7d 	bl	8000d84 <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd55 	bl	800113c <__aeabi_f2iz>
 8001692:	4603      	mov	r3, r0
 8001694:	617b      	str	r3, [r7, #20]

	//	 Store the 4 bytes in the passed buffer
	buffer[0] = 0x00; // First must be empty
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
	buffer[1] = (fixedval >> 24) & 0xFF;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	0e1a      	lsrs	r2, r3, #24
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]
	buffer[2] = (fixedval >> 16) & 0xFF;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	141a      	asrs	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3302      	adds	r3, #2
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
	buffer[3] = (fixedval >> 8) & 0xFF;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	121a      	asrs	r2, r3, #8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3303      	adds	r3, #3
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]
	buffer[4] = fixedval & 0xFF;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3304      	adds	r3, #4
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

	//		buffer[0] = (fixedval >> 24) & 0xFF;
	//		buffer[1] = (fixedval >> 16) & 0xFF;
	//		buffer[2] = (fixedval >>  8) & 0xFF;
	//		buffer[3] = fixedval & 0xFF;
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZN8SigmaDSP10intToFixedElPh>:
 Purpose:  Converts a 28.0 integer value to 5-byte HEX and stores it to a buffer
 Inputs:   int32_t value;      Value to convert
 uint8_t *buffer;    Buffer to store the converted data to
 Returns:  None
 ***************************************/
void SigmaDSP::intToFixed(int32_t value, uint8_t *buffer) {
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	//	 Store the 4 bytes in the passed buffer
	buffer[0] = 0x00; // First must be empty
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
	buffer[1] = (value >> 24) & 0xFF;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	0e1a      	lsrs	r2, r3, #24
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
	buffer[2] = (value >> 16) & 0xFF;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	141a      	asrs	r2, r3, #16
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3302      	adds	r3, #2
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]
	buffer[3] = (value >> 8) & 0xFF;
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	121a      	asrs	r2, r3, #8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3303      	adds	r3, #3
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
	buffer[4] = value & 0xFF;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3304      	adds	r3, #4
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

	//	buffer[0] = (value >> 24) & 0xFF;
	//	buffer[1] = (value >> 16) & 0xFF;
	//	buffer[2] = (value >>  8) & 0xFF;
	//	buffer[3] = value & 0xFF;
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvPcE>:
#include "DspCommandReciver.h"
#include "LevelMapping.h"

DspCommandReciver::DspCommandReciver(GPIO_TypeDef *clockGPIO, uint16_t clockPin, GPIO_TypeDef *dataGPIO, uint16_t dataPin, UART_HandleTypeDef *uart, void (*_addMessage)(char *msg)) :
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	4613      	mov	r3, r2
 800172a:	80fb      	strh	r3, [r7, #6]
		_clockGPIO(clockGPIO), _clockPin(clockPin), _dataGPIO(dataGPIO), _dataPin(dataPin), _uart(uart), addMessage(_addMessage) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	88fa      	ldrh	r2, [r7, #6]
 800173c:	811a      	strh	r2, [r3, #8]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8c3a      	ldrh	r2, [r7, #32]
 8001748:	821a      	strh	r2, [r3, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175e:	679a      	str	r2, [r3, #120]	; 0x78
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvPcE+0xe8>)
 8001764:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8001768:	4615      	mov	r5, r2
 800176a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4a23      	ldr	r2, [pc, #140]	; (8001808 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvPcE+0xec>)
 800177a:	339c      	adds	r3, #156	; 0x9c
 800177c:	ca07      	ldmia	r2, {r0, r1, r2}
 800177e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvPcE+0xf0>)
 8001786:	33a8      	adds	r3, #168	; 0xa8
 8001788:	4611      	mov	r1, r2
 800178a:	224b      	movs	r2, #75	; 0x4b
 800178c:	4618      	mov	r0, r3
 800178e:	f007 fca3 	bl	80090d8 <memcpy>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvPcE+0xf4>)
 8001796:	f103 04f3 	add.w	r4, r3, #243	; 0xf3
 800179a:	4613      	mov	r3, r2
 800179c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800179e:	6020      	str	r0, [r4, #0]
 80017a0:	6061      	str	r1, [r4, #4]
 80017a2:	60a2      	str	r2, [r4, #8]
	clearData(buff);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	335e      	adds	r3, #94	; 0x5e
 80017a8:	4619      	mov	r1, r3
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fa61 	bl	8001c72 <_ZN17DspCommandReciver9clearDataEPa>

	volumeRead = false;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	faderCh1Read = false;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	faderCh2Read = false;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	equalizerRead = false;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	volumeChng = false;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	faderCh1Chng = false;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	faderCh2Chng = false;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	equalizerChng = false;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	changed = false;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73

	//	clearData(volume);
	//	clearData(faderCh1);
	//	clearData(faderCh2);
	//	clearData(equalizer);
}
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bdb0      	pop	{r4, r5, r7, pc}
 8001802:	bf00      	nop
 8001804:	0800da68 	.word	0x0800da68
 8001808:	0800da88 	.word	0x0800da88
 800180c:	0800da94 	.word	0x0800da94
 8001810:	0800dae0 	.word	0x0800dae0

08001814 <_ZN17DspCommandReciver11readPackageEi>:
		}
	}
}

//Вход с clock == 1
bool DspCommandReciver::readPackage(int iterator) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	//Если итератор больше номера последнего бита, то пакет битый. Выходим
	if (iterator > M_SIZE - 1) {
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b10      	cmp	r3, #16
 8001822:	dd01      	ble.n	8001828 <_ZN17DspCommandReciver11readPackageEi+0x14>
		return false;
 8001824:	2300      	movs	r3, #0
 8001826:	e050      	b.n	80018ca <_ZN17DspCommandReciver11readPackageEi+0xb6>
	}

	//считываем значение data в текущую позицию буфера
	buff[iterator] = HAL_GPIO_ReadPin(_dataGPIO, _dataPin);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8a1b      	ldrh	r3, [r3, #16]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f003 fd60 	bl	80052f8 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	b259      	sxtb	r1, r3
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	4413      	add	r3, r2
 8001842:	335e      	adds	r3, #94	; 0x5e
 8001844:	460a      	mov	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]

	//ждем пока опустится clock
	while (HAL_GPIO_ReadPin(_clockGPIO, _clockPin)) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	891b      	ldrh	r3, [r3, #8]
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f003 fd50 	bl	80052f8 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d000      	beq.n	800186a <_ZN17DspCommandReciver11readPackageEi+0x56>
 8001868:	e7ee      	b.n	8001848 <_ZN17DspCommandReciver11readPackageEi+0x34>
	}

	//когда clock опустился и data != 1, значит не конец пакета
	//если clock опустился и data == 1, значит конец пакета
	if (!HAL_GPIO_ReadPin(_dataGPIO, _dataPin)) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8a1b      	ldrh	r3, [r3, #16]
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f003 fd3f 	bl	80052f8 <HAL_GPIO_ReadPin>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d019      	beq.n	80018be <_ZN17DspCommandReciver11readPackageEi+0xaa>
		//ждем пока clock снова поднимется
		while (!HAL_GPIO_ReadPin(_clockGPIO, _clockPin))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	891b      	ldrh	r3, [r3, #8]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f003 fd2f 	bl	80052f8 <HAL_GPIO_ReadPin>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d000      	beq.n	80018ac <_ZN17DspCommandReciver11readPackageEi+0x98>
 80018aa:	e7ee      	b.n	800188a <_ZN17DspCommandReciver11readPackageEi+0x76>
			;
		//когда clock поднялся - нужно читать след бит, уходим в след уровень рекурсии для чтения
		return readPackage(++iterator);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ffad 	bl	8001814 <_ZN17DspCommandReciver11readPackageEi>
 80018ba:	4603      	mov	r3, r0
 80018bc:	e005      	b.n	80018ca <_ZN17DspCommandReciver11readPackageEi+0xb6>
//			HAL_UART_Transmit(_uart, (uint8_t*) tmp, strlen(tmp), 10);
//		}
//		if (addMessage != null) {
//			addMessage(tmp);
//		}
		if (iterator == M_SIZE - 1) {
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d101      	bne.n	80018c8 <_ZN17DspCommandReciver11readPackageEi+0xb4>
//				HAL_UART_Transmit(_uart, (uint8_t*) "PACK\n", 5, 10);
//			}
//			if (addMessage != null) {
//				addMessage("PACK");
//			}
			return true;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <_ZN17DspCommandReciver11readPackageEi+0xb6>
//				HAL_UART_Transmit(_uart, (uint8_t*) "NO PACK\n", 8, 10);
//			}
//			if (addMessage != null) {
//				addMessage("NO PACK");
//			}
			return false;
 80018c8:	2300      	movs	r3, #0

		//		return iterator == M_SIZE - 1 ? true : false;
		//		HAL_UART_Transmit(_uart, (uint8_t *)"PACK\n", 5, 10);
		//конец пакета
	}
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <_ZN17DspCommandReciver11readPackageEv>:

void DspCommandReciver::readPackage() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	//перед чтением пакета проверяем, что clock поднят
	if (!HAL_GPIO_ReadPin(_clockGPIO, _clockPin)) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f003 fd06 	bl	80052f8 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <_ZN17DspCommandReciver11readPackageEv+0x50>
		if (_uart != NULL) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <_ZN17DspCommandReciver11readPackageEv+0x3e>
			HAL_UART_Transmit(_uart, (uint8_t*) "[m-dsp] R-ERROR: clock not up\n", 30, 2);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001908:	2302      	movs	r3, #2
 800190a:	221e      	movs	r2, #30
 800190c:	4910      	ldr	r1, [pc, #64]	; (8001950 <_ZN17DspCommandReciver11readPackageEv+0x7c>)
 800190e:	f006 fdcc 	bl	80084aa <HAL_UART_Transmit>
		}
		if (addMessage != NULL) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d015      	beq.n	8001946 <_ZN17DspCommandReciver11readPackageEv+0x72>
			addMessage("[m-dsp] R-ERROR: clock not up");
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <_ZN17DspCommandReciver11readPackageEv+0x80>)
 8001920:	4798      	blx	r3
		}
		return;
 8001922:	e010      	b.n	8001946 <_ZN17DspCommandReciver11readPackageEv+0x72>
	}

	if (readPackage(0)) {
 8001924:	2100      	movs	r1, #0
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff74 	bl	8001814 <_ZN17DspCommandReciver11readPackageEi>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <_ZN17DspCommandReciver11readPackageEv+0x64>
		typeDetectAndSave();
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f894 	bl	8001a60 <_ZN17DspCommandReciver17typeDetectAndSaveEv>
	}

	clearData(buff);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	335e      	adds	r3, #94	; 0x5e
 800193c:	4619      	mov	r1, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f997 	bl	8001c72 <_ZN17DspCommandReciver9clearDataEPa>
 8001944:	e000      	b.n	8001948 <_ZN17DspCommandReciver11readPackageEv+0x74>
		return;
 8001946:	bf00      	nop
}
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800daec 	.word	0x0800daec
 8001954:	0800db0c 	.word	0x0800db0c

08001958 <_ZN17DspCommandReciver12printMsgFuncEv>:

void DspCommandReciver::printMsgFunc() {
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b0c2      	sub	sp, #264	; 0x108
 800195c:	af0a      	add	r7, sp, #40	; 0x28
 800195e:	6078      	str	r0, [r7, #4]
	int8_t total;
	int8_t vol_attv1 = getLevel(VOLUME_ATTV1, CH2);
 8001960:	2201      	movs	r2, #1
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f9a1 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 800196a:	4603      	mov	r3, r0
 800196c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
	int8_t vol_attv2 = getLevel(VOLUME_ATTV2, CH2);
 8001970:	2201      	movs	r2, #1
 8001972:	2101      	movs	r1, #1
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f999 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 800197a:	4603      	mov	r3, r0
 800197c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	int8_t fader_attv1 = getLevel(FADER_FRONT_ATTV1, CH2);
 8001980:	2201      	movs	r2, #1
 8001982:	2102      	movs	r1, #2
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f991 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
	int8_t fader_attv2 = getLevel(FADER_FRONT_ATTV2, CH2);
 8001990:	2201      	movs	r2, #1
 8001992:	2103      	movs	r1, #3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f989 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
	total = vol_attv1 + vol_attv2 + fader_attv1 + fader_attv2;
 80019a0:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 80019a4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80019a8:	4413      	add	r3, r2
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80019b0:	4413      	add	r3, r2
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80019b8:	4413      	add	r3, r2
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	char tmp[200];
	for (int i = 0; i < 200; i++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019ca:	2bc7      	cmp	r3, #199	; 0xc7
 80019cc:	dc0c      	bgt.n	80019e8 <_ZN17DspCommandReciver12printMsgFuncEv+0x90>
		tmp[i] = '\0';
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019d6:	4413      	add	r3, r2
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 200; i++) {
 80019dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019e0:	3301      	adds	r3, #1
 80019e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019e6:	e7ee      	b.n	80019c6 <_ZN17DspCommandReciver12printMsgFuncEv+0x6e>
	}
	snprintf(tmp, sizeof tmp, "%s%d%s%d%s%d%s%d%s%d", "[m-dsp] vol_attv1: ", vol_attv1, " vol_attv2: ", vol_attv2, " fader_attv1: ", fader_attv1, " fader_attv2: ", fader_attv2, " total: ", total);
 80019e8:	f997 30db 	ldrsb.w	r3, [r7, #219]	; 0xdb
 80019ec:	f997 20da 	ldrsb.w	r2, [r7, #218]	; 0xda
 80019f0:	f997 10d9 	ldrsb.w	r1, [r7, #217]	; 0xd9
 80019f4:	f997 00d8 	ldrsb.w	r0, [r7, #216]	; 0xd8
 80019f8:	f997 40d7 	ldrsb.w	r4, [r7, #215]	; 0xd7
 80019fc:	f107 050c 	add.w	r5, r7, #12
 8001a00:	9408      	str	r4, [sp, #32]
 8001a02:	4c11      	ldr	r4, [pc, #68]	; (8001a48 <_ZN17DspCommandReciver12printMsgFuncEv+0xf0>)
 8001a04:	9407      	str	r4, [sp, #28]
 8001a06:	9006      	str	r0, [sp, #24]
 8001a08:	4810      	ldr	r0, [pc, #64]	; (8001a4c <_ZN17DspCommandReciver12printMsgFuncEv+0xf4>)
 8001a0a:	9005      	str	r0, [sp, #20]
 8001a0c:	9104      	str	r1, [sp, #16]
 8001a0e:	4910      	ldr	r1, [pc, #64]	; (8001a50 <_ZN17DspCommandReciver12printMsgFuncEv+0xf8>)
 8001a10:	9103      	str	r1, [sp, #12]
 8001a12:	9202      	str	r2, [sp, #8]
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <_ZN17DspCommandReciver12printMsgFuncEv+0xfc>)
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <_ZN17DspCommandReciver12printMsgFuncEv+0x100>)
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <_ZN17DspCommandReciver12printMsgFuncEv+0x104>)
 8001a1e:	21c8      	movs	r1, #200	; 0xc8
 8001a20:	4628      	mov	r0, r5
 8001a22:	f008 f9e1 	bl	8009de8 <sniprintf>

	if (_uart != NULL) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <_ZN17DspCommandReciver12printMsgFuncEv+0xe6>
		HAL_UART_Transmit(_uart, (uint8_t*) tmp, sizeof tmp, 50);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001a32:	f107 010c 	add.w	r1, r7, #12
 8001a36:	2332      	movs	r3, #50	; 0x32
 8001a38:	22c8      	movs	r2, #200	; 0xc8
 8001a3a:	f006 fd36 	bl	80084aa <HAL_UART_Transmit>
	}

}
 8001a3e:	bf00      	nop
 8001a40:	37e0      	adds	r7, #224	; 0xe0
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bdb0      	pop	{r4, r5, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0800db58 	.word	0x0800db58
 8001a4c:	0800db64 	.word	0x0800db64
 8001a50:	0800db74 	.word	0x0800db74
 8001a54:	0800db84 	.word	0x0800db84
 8001a58:	0800db2c 	.word	0x0800db2c
 8001a5c:	0800db40 	.word	0x0800db40

08001a60 <_ZN17DspCommandReciver17typeDetectAndSaveEv>:

void DspCommandReciver::typeDetectAndSave() {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if (buff[15] == 0 && buff[16] == 0) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d114      	bne.n	8001a9c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x3c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x3c>
		volumeChng = tranferDataFromBuffer(volume, false);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3312      	adds	r3, #18
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8b7 	bl	8001bf8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		volumeRead = true;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	}
	if (buff[15] == 1 && buff[16] == 0) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12a      	bne.n	8001afc <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d125      	bne.n	8001afc <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
		if (buff[0] == 0) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f993 305e 	ldrsb.w	r3, [r3, #94]	; 0x5e
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d110      	bne.n	8001adc <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x7c>
			faderCh1Chng = tranferDataFromBuffer(faderCh1, false);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3323      	adds	r3, #35	; 0x23
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f898 	bl	8001bf8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			faderCh1Read = true;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001ada:	e00f      	b.n	8001afc <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
		} else {
			faderCh2Chng = tranferDataFromBuffer(faderCh2, false);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3334      	adds	r3, #52	; 0x34
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f887 	bl	8001bf8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			faderCh2Read = true;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}

	}
	if (buff[15] == 0 && buff[16] == 1) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d174      	bne.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d16f      	bne.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
		equalizerChng = tranferDataFromBuffer(equalizer, true);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3345      	adds	r3, #69	; 0x45
 8001b14:	2201      	movs	r2, #1
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f86d 	bl	8001bf8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		equalizerRead = true;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

		if ((volumeChng || faderCh1Chng || faderCh2Chng || (equalizerChng && eqChangedDetect)) && (volumeRead && faderCh1Read && faderCh2Read && equalizerRead)) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d113      	bne.n	8001b62 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10e      	bne.n	8001b62 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d04b      	beq.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d046      	beq.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d041      	beq.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03c      	beq.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d037      	beq.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d032      	beq.n	8001bf0 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x190>
			volumeChng = faderCh1Chng = faderCh2Chng = equalizerChng = false;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			volumeRead = faderCh1Read = faderCh2Read = equalizerRead = false;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			changed = true;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
			printMsgFunc();
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff feb4 	bl	8001958 <_ZN17DspCommandReciver12printMsgFuncEv>
			//			printToSerial(_uart);
		}
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>:

bool DspCommandReciver::tranferDataFromBuffer(int8_t *target, bool eq) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	71fb      	strb	r3, [r7, #7]
	bool targetChanged = false;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < M_SIZE; i++) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	dc28      	bgt.n	8001c66 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x6e>
		if (target[i] != buff[i]) {
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f993 2000 	ldrsb.w	r2, [r3]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	440b      	add	r3, r1
 8001c24:	335e      	adds	r3, #94	; 0x5e
 8001c26:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d017      	beq.n	8001c5e <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
			target[i] = buff[i];
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	4413      	add	r3, r2
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	440a      	add	r2, r1
 8001c3a:	325e      	adds	r2, #94	; 0x5e
 8001c3c:	f992 2000 	ldrsb.w	r2, [r2]
 8001c40:	701a      	strb	r2, [r3, #0]
			if (eq || (i != 0 && i != 1 && i != 14)) {
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d108      	bne.n	8001c5a <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x62>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d004      	beq.n	8001c5e <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b0e      	cmp	r3, #14
 8001c58:	d001      	beq.n	8001c5e <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
				targetChanged = true;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < M_SIZE; i++) {
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	3301      	adds	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e7d3      	b.n	8001c0e <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x16>
			}
		}
	}
	//	if(targetChanged) HAL_UART_Transmit(_uart, (uint8_t *)"Changed\n", 8, 10);
	return targetChanged;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <_ZN17DspCommandReciver9clearDataEPa>:
	for (uint8_t i = 0; i < sizeof(array); i++) {
		array[i] = '\0';
	}
}

void DspCommandReciver::clearData(int8_t *array) {
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
	for (int8_t i = 0; i < M_SIZE; i++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	dc0c      	bgt.n	8001ca2 <_ZN17DspCommandReciver9clearDataEPa+0x30>
		array[i] = -2;
 8001c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	22fe      	movs	r2, #254	; 0xfe
 8001c92:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < M_SIZE; i++) {
 8001c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e7ee      	b.n	8001c80 <_ZN17DspCommandReciver9clearDataEPa+0xe>
	}
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_ZN17DspCommandReciver8getLevelEhh>:

//функция получения уровня громкости. параметры тип пакета, канал 1 или 2, массив данных для разбора
int8_t DspCommandReciver::getLevel(uint8_t type, uint8_t channel) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	70bb      	strb	r3, [r7, #2]
	//в этом массиве хранятся значения для анализа
	int8_t valuesArrayForCheck[] = { -1, -1, -1, -1 };
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	60bb      	str	r3, [r7, #8]
	uint8_t width;

	//складываем значения для анализа в зависимости от типа пакета
	//из каждого пакета бере данные в нужных позициях
	//кол-во проверяемых элементов до 4 в завистимости от типа пакета
	switch (type) {
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	f200 8093 	bhi.w	8001df0 <_ZN17DspCommandReciver8getLevelEhh+0x144>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <_ZN17DspCommandReciver8getLevelEhh+0x24>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001d29 	.word	0x08001d29
 8001cd8:	08001d61 	.word	0x08001d61
 8001cdc:	08001db9 	.word	0x08001db9
	//громкость атт1 канал 1
	case VOLUME_ATTV1:
		if (channel == CH1) {
 8001ce0:	78bb      	ldrb	r3, [r7, #2]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <_ZN17DspCommandReciver8getLevelEhh+0x54>
			valuesArrayForCheck[0] = volume[2];
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001cec:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[3];
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001cf4:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = volume[4];
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001cfc:	72bb      	strb	r3, [r7, #10]
 8001cfe:	e00b      	b.n	8001d18 <_ZN17DspCommandReciver8getLevelEhh+0x6c>
		} else {
			//громкость атт1 канал 2
			valuesArrayForCheck[0] = volume[7];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001d06:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[8];
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001d0e:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = volume[9];
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8001d16:	72bb      	strb	r3, [r7, #10]
		}

		//Так же установим значения размерности целевого массива
		height = VOLUME_ATTV1_H;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	74fb      	strb	r3, [r7, #19]
		width = VOLUME_ATTV1_W;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*) volumeATTV1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	337c      	adds	r3, #124	; 0x7c
 8001d24:	617b      	str	r3, [r7, #20]
		break;
 8001d26:	e064      	b.n	8001df2 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case VOLUME_ATTV2:
		if (channel == CH1) {
 8001d28:	78bb      	ldrb	r3, [r7, #2]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d108      	bne.n	8001d40 <_ZN17DspCommandReciver8getLevelEhh+0x94>
			valuesArrayForCheck[0] = volume[5];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001d34:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[6];
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001d3c:	727b      	strb	r3, [r7, #9]
 8001d3e:	e007      	b.n	8001d50 <_ZN17DspCommandReciver8getLevelEhh+0xa4>
		} else {
			valuesArrayForCheck[0] = volume[10];
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001d46:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[11];
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8001d4e:	727b      	strb	r3, [r7, #9]
		}

		height = VOLUME_ATTV2_H;
 8001d50:	2304      	movs	r3, #4
 8001d52:	74fb      	strb	r3, [r7, #19]
		width = VOLUME_ATTV2_W;
 8001d54:	2303      	movs	r3, #3
 8001d56:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*) volumeATTV2;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	339c      	adds	r3, #156	; 0x9c
 8001d5c:	617b      	str	r3, [r7, #20]
		break;
 8001d5e:	e048      	b.n	8001df2 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case FADER_FRONT_ATTV1:
		if (channel == CH1) {
 8001d60:	78bb      	ldrb	r3, [r7, #2]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d110      	bne.n	8001d88 <_ZN17DspCommandReciver8getLevelEhh+0xdc>
			valuesArrayForCheck[0] = faderCh1[2];
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8001d6c:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh1[3];
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8001d74:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = faderCh1[4];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001d7c:	72bb      	strb	r3, [r7, #10]
			valuesArrayForCheck[3] = faderCh1[5];
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8001d84:	72fb      	strb	r3, [r7, #11]
 8001d86:	e00f      	b.n	8001da8 <_ZN17DspCommandReciver8getLevelEhh+0xfc>
		} else {
			valuesArrayForCheck[0] = faderCh2[2];
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001d8e:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh2[3];
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f993 3037 	ldrsb.w	r3, [r3, #55]	; 0x37
 8001d96:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = faderCh2[4];
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8001d9e:	72bb      	strb	r3, [r7, #10]
			valuesArrayForCheck[3] = faderCh2[5];
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8001da6:	72fb      	strb	r3, [r7, #11]
		}

		height = FADER_ATTV1_H;
 8001da8:	230f      	movs	r3, #15
 8001daa:	74fb      	strb	r3, [r7, #19]
		width = FADER_ATTV1_W;
 8001dac:	2305      	movs	r3, #5
 8001dae:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*) faderATTV1;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	33a8      	adds	r3, #168	; 0xa8
 8001db4:	617b      	str	r3, [r7, #20]
		break;
 8001db6:	e01c      	b.n	8001df2 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case FADER_FRONT_ATTV2:
		if (channel == CH1) {
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d108      	bne.n	8001dd0 <_ZN17DspCommandReciver8getLevelEhh+0x124>
			valuesArrayForCheck[0] = faderCh1[6];
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8001dc4:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh1[7];
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8001dcc:	727b      	strb	r3, [r7, #9]
 8001dce:	e007      	b.n	8001de0 <_ZN17DspCommandReciver8getLevelEhh+0x134>
		} else {
			valuesArrayForCheck[0] = faderCh2[6];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f993 303a 	ldrsb.w	r3, [r3, #58]	; 0x3a
 8001dd6:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh2[7];
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f993 303b 	ldrsb.w	r3, [r3, #59]	; 0x3b
 8001dde:	727b      	strb	r3, [r7, #9]
		}

		height = FADER_ATTV2_H;
 8001de0:	2304      	movs	r3, #4
 8001de2:	74fb      	strb	r3, [r7, #19]
		width = FADER_ATTV2_W;
 8001de4:	2303      	movs	r3, #3
 8001de6:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*) faderATTV2;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	33f3      	adds	r3, #243	; 0xf3
 8001dec:	617b      	str	r3, [r7, #20]
		break;
 8001dee:	e000      	b.n	8001df2 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	default:
		break;
 8001df0:	bf00      	nop
	}

	int8_t result = -1;
 8001df2:	23ff      	movs	r3, #255	; 0xff
 8001df4:	747b      	strb	r3, [r7, #17]
	//Будем идти по строчно в целевом массиве на каждой итерации
	//отдавая данные в функцию сверки текщих данных с iтой строкой массива
	for (int i = 0; i < height; i++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	da25      	bge.n	8001e4e <_ZN17DspCommandReciver8getLevelEhh+0x1a2>
		if (checkElement(valuesArrayForCheck, &target[i * width], i, 0)) {
 8001e02:	7cbb      	ldrb	r3, [r7, #18]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	441a      	add	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	f107 0108 	add.w	r1, r7, #8
 8001e18:	2000      	movs	r0, #0
 8001e1a:	9000      	str	r0, [sp, #0]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f852 	bl	8001ec6 <_ZN17DspCommandReciver12checkElementEPaS0_aa>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <_ZN17DspCommandReciver8getLevelEhh+0x19a>
			result = target[i * width];
 8001e32:	7cbb      	ldrb	r3, [r7, #18]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	747b      	strb	r3, [r7, #17]
			break;
 8001e44:	e003      	b.n	8001e4e <_ZN17DspCommandReciver8getLevelEhh+0x1a2>
	for (int i = 0; i < height; i++) {
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e7d5      	b.n	8001dfa <_ZN17DspCommandReciver8getLevelEhh+0x14e>
	//		char a[] = "res0 ";
	//		HAL_UART_Transmit(_uart, (uint8_t *)a, sizeof(a), 10);
	//
	//	}

	return result;
 8001e4e:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop

08001e5c <_ZN17DspCommandReciver16getAbsoluteLevelEh>:

int8_t DspCommandReciver::getAbsoluteLevel(uint8_t channel) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
	int8_t vol_attv1 = getLevel(VOLUME_ATTV1, channel);
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ff1c 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]
	int8_t vol_attv2 = getLevel(VOLUME_ATTV2, channel);
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff14 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73bb      	strb	r3, [r7, #14]
	int8_t fader_attv1 = getLevel(FADER_FRONT_ATTV1, channel);
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff0c 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 8001e94:	4603      	mov	r3, r0
 8001e96:	737b      	strb	r3, [r7, #13]
	int8_t fader_attv2 = getLevel(FADER_FRONT_ATTV2, channel);
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2103      	movs	r1, #3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ff04 	bl	8001cac <_ZN17DspCommandReciver8getLevelEhh>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	733b      	strb	r3, [r7, #12]

	return vol_attv1 + vol_attv2 + fader_attv1 + fader_attv2;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	4413      	add	r3, r2
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	7b7b      	ldrb	r3, [r7, #13]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	b25b      	sxtb	r3, r3

	//	int8_t absoluteLevel = vol_attv1 + vol_attv2 + fader_attv1 + fader_attv2;
	//	return getCorrectedLevel(absoluteLevel);
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_ZN17DspCommandReciver12checkElementEPaS0_aa>:

//функция сверки прешедших данных состокой массива
//Параметры: массив с данными для сверки, ссылка на строку из эталонного массива, индекс текущей обрабатываемой позиции в массивах
int8_t DspCommandReciver::checkElement(int8_t *valuesArrayForCheck, int8_t *targetArray, int8_t targetArrayWidth, int8_t wIdx) {
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af02      	add	r7, sp, #8
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	70fb      	strb	r3, [r7, #3]
	//если wIdx равен 4, то уже рекурсивно пройдены все элементы и стоит вернуть успех
	if (wIdx == 4) {
 8001ed4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d101      	bne.n	8001ee0 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x1a>
		return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e029      	b.n	8001f34 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	}

	//если встретили -1 в массиве для сверки, значит его значения уже пройдены и совпали с эталном, возвращаем успех
	if (valuesArrayForCheck[wIdx] == -1) {
 8001ee0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f993 3000 	ldrsb.w	r3, [r3]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d101      	bne.n	8001ef6 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x30>
		return 1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e01e      	b.n	8001f34 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	}

	//сравниваем текщий элемент из массива для сверки с эталоным (у эталоннного индекс + 1 тк первым идет значение громкости)
	if (valuesArrayForCheck[wIdx] == targetArray[wIdx + 1]) {
 8001ef6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4413      	add	r3, r2
 8001efe:	f993 2000 	ldrsb.w	r2, [r3]
 8001f02:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001f06:	3301      	adds	r3, #1
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d10e      	bne.n	8001f32 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6c>
		//если совпали, то проваливаемся в рекурсию для сравнения следующей позиции в массиве
		return checkElement(valuesArrayForCheck, targetArray, targetArrayWidth, wIdx + 1);
 8001f14:	7e3b      	ldrb	r3, [r7, #24]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff ffcc 	bl	8001ec6 <_ZN17DspCommandReciver12checkElementEPaS0_aa>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	e000      	b.n	8001f34 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	} else {
		return 0;
 8001f32:	2300      	movs	r3, #0
	}
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN17DspCommandReciver9isChangedEv>:

bool DspCommandReciver::isChanged() {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	return changed;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
	//	if(changed) {
	//		changed = false;
	//		return true;
	//	}
	//	return false;
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <_ZN17DspCommandReciver16resetChangedFlagEv>:

bool DspCommandReciver::resetChangedFlag() {
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	changed = false;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
}
 8001f64:	bf00      	nop
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <_ZN17DspCommandReciver14setChangedFlagEv>:

void DspCommandReciver::setChangedFlag() {
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	changed = true;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <_ZN23ExtDeviceCommandReciver5toIntEc>:
	inline void updateStop();
	inline void updateDiskNumber();
	inline void updateTrackNumber();
	inline void updatePlayFlag(bool play);

	inline int toInt(char ch) {
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
		return ch - 48;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	3b30      	subs	r3, #48	; 0x30
	}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <_ZN23ExtDeviceCommandReciver5toHexEc>:

	inline unsigned char toHex(char ch) {
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
		if (ch >= 'A') {
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d906      	bls.n	8001fc4 <_ZN23ExtDeviceCommandReciver5toHexEc+0x20>
			return ch - 'A' + 0xA & 0x0F;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	3b37      	subs	r3, #55	; 0x37
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e003      	b.n	8001fcc <_ZN23ExtDeviceCommandReciver5toHexEc+0x28>
		} else {
			return ch - '0' & 0x0F;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	b2db      	uxtb	r3, r3
		}
	}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <_ZN23ExtDeviceCommandReciverC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefP20__UART_HandleTypeDefPFvvES7_S7_S7_PFvPcE>:
#include "ExtDeviceCommandReciver.h"
#include <string.h>
#include "ExtDeviceCommandReciverCommands.h"

ExtDeviceCommandReciver::ExtDeviceCommandReciver(GPIO_TypeDef *_rxGPIO, uint16_t _rxPin, GPIO_TypeDef *_txGPIO, uint16_t _txPin, TIM_HandleTypeDef *_timer, UART_HandleTypeDef *_uart,
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
		void (*_playCallback)(), void (*_stopCallback)(), void (*_nextCallback)(), void (*_prevCallback)(), void (*_addMessage)(char *msg)) :
		rxGPIO(_rxGPIO), rxPin(_rxPin), txGPIO(_txGPIO), txPin(_txPin), timer(_timer), uart(_uart), playCallback(_playCallback), stopCallback(_stopCallback), nextCallback(_nextCallback), prevCallback(
				_prevCallback), addMessage(_addMessage) {
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	811a      	strh	r2, [r3, #8]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8b3a      	ldrh	r2, [r7, #24]
 8002002:	821a      	strh	r2, [r3, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a3a      	ldr	r2, [r7, #32]
 8002008:	615a      	str	r2, [r3, #20]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	619a      	str	r2, [r3, #24]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	771a      	strb	r2, [r3, #28]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	775a      	strb	r2, [r3, #29]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	779a      	strb	r2, [r3, #30]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	77da      	strb	r2, [r3, #31]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2020 	strb.w	r2, [r3, #32]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002046:	631a      	str	r2, [r3, #48]	; 0x30

}
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <_ZN23ExtDeviceCommandReciver11readCommandEv>:

//Вход с rxPin == 0
uint32_t ExtDeviceCommandReciver::readCommand() {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	return readCommand(0);
 800205c:	2100      	movs	r1, #0
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f818 	bl	8002094 <_ZN23ExtDeviceCommandReciver11readCommandEm>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>:

void ExtDeviceCommandReciver::convertToHex(uint64_t value, char *str) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	e9c7 2300 	strd	r2, r3, [r7]
	sprintf(str, "%X", value);
 800207c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002080:	4903      	ldr	r1, [pc, #12]	; (8002090 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc+0x20>)
 8002082:	69b8      	ldr	r0, [r7, #24]
 8002084:	f007 fee4 	bl	8009e50 <siprintf>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	0800db94 	.word	0x0800db94

08002094 <_ZN23ExtDeviceCommandReciver11readCommandEm>:

//Вход с rxPin == 0
uint32_t ExtDeviceCommandReciver::readCommand(uint32_t result) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
	//ждем пока сигнал поднимается
	resetMicros();
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fcff 	bl	8002aa2 <_ZN23ExtDeviceCommandReciver11resetMicrosEv>
	while (!HAL_GPIO_ReadPin(rxGPIO, rxPin)) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	891b      	ldrh	r3, [r3, #8]
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f003 f922 	bl	80052f8 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d000      	beq.n	80020c6 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x32>
 80020c4:	e7ee      	b.n	80020a4 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x10>
	}

	//проверяем за какое время поднялся
	uint16_t time = getMicros() < 1000 ? 0 : 1;
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fcdd 	bl	8002a86 <_ZN23ExtDeviceCommandReciver9getMicrosEv>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020d4:	429a      	cmp	r2, r3
 80020d6:	bf8c      	ite	hi
 80020d8:	2301      	movhi	r3, #1
 80020da:	2300      	movls	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	81bb      	strh	r3, [r7, #12]
	uint8_t currentBit = time;
 80020e0:	89bb      	ldrh	r3, [r7, #12]
 80020e2:	72fb      	strb	r3, [r7, #11]
	result = result << 1 | currentBit;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	005a      	lsls	r2, r3, #1
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	603b      	str	r3, [r7, #0]
	//ждем пока сигнал опустится или пройдет время больше ожидаемого времени между командами
	bool nonExitFromTimer = true;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
	resetMicros();
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fcd5 	bl	8002aa2 <_ZN23ExtDeviceCommandReciver11resetMicrosEv>
	while (HAL_GPIO_ReadPin(rxGPIO, rxPin) && nonExitFromTimer) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	891b      	ldrh	r3, [r3, #8]
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f003 f8f8 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x84>
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x84>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <_ZN23ExtDeviceCommandReciver11readCommandEm+0x86>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <_ZN23ExtDeviceCommandReciver11readCommandEm+0xa4>
		nonExitFromTimer = getMicros() < 3100;
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fcb1 	bl	8002a86 <_ZN23ExtDeviceCommandReciver9getMicrosEv>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	f640 431b 	movw	r3, #3099	; 0xc1b
 800212c:	429a      	cmp	r2, r3
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
	while (HAL_GPIO_ReadPin(rxGPIO, rxPin) && nonExitFromTimer) {
 8002136:	e7df      	b.n	80020f8 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x64>
	}
	//если время меньше, то значит данные еще идут иначе данных больше нет
	if (nonExitFromTimer) {
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <_ZN23ExtDeviceCommandReciver11readCommandEm+0xb4>
		result = readCommand(result);
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ffa7 	bl	8002094 <_ZN23ExtDeviceCommandReciver11readCommandEm>
 8002146:	6038      	str	r0, [r7, #0]
	}
	return result;
 8002148:	683b      	ldr	r3, [r7, #0]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <_ZN23ExtDeviceCommandReciver9writeZeroEv>:

void ExtDeviceCommandReciver::writeZero() {
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_SET);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68d8      	ldr	r0, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8a1b      	ldrh	r3, [r3, #16]
 8002162:	2201      	movs	r2, #1
 8002164:	4619      	mov	r1, r3
 8002166:	f003 f8de 	bl	8005326 <HAL_GPIO_WritePin>
	delayMicros(600);
 800216a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fca5 	bl	8002abe <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_RESET);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68d8      	ldr	r0, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8a1b      	ldrh	r3, [r3, #16]
 800217c:	2200      	movs	r2, #0
 800217e:	4619      	mov	r1, r3
 8002180:	f003 f8d1 	bl	8005326 <HAL_GPIO_WritePin>
	delayMicros(2400);
 8002184:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fc98 	bl	8002abe <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_ZN23ExtDeviceCommandReciver8writeOneEv>:

void ExtDeviceCommandReciver::writeOne() {
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_SET);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68d8      	ldr	r0, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8a1b      	ldrh	r3, [r3, #16]
 80021a6:	2201      	movs	r2, #1
 80021a8:	4619      	mov	r1, r3
 80021aa:	f003 f8bc 	bl	8005326 <HAL_GPIO_WritePin>
	delayMicros(1800);
 80021ae:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fc83 	bl	8002abe <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_RESET);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68d8      	ldr	r0, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	8a1b      	ldrh	r3, [r3, #16]
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	f003 f8af 	bl	8005326 <HAL_GPIO_WritePin>
	delayMicros(1200);
 80021c8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fc76 	bl	8002abe <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>:

void ExtDeviceCommandReciver::writeCommand(char *command, int size) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0bc      	sub	sp, #240	; 0xf0
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	if (uart != NULL) {
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d015      	beq.n	800221c <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x40>
		HAL_UART_Transmit(uart, (uint8_t*) "[mbus] S: ", 10, 2);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6958      	ldr	r0, [r3, #20]
 80021f4:	2302      	movs	r3, #2
 80021f6:	220a      	movs	r2, #10
 80021f8:	493b      	ldr	r1, [pc, #236]	; (80022e8 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x10c>)
 80021fa:	f006 f956 	bl	80084aa <HAL_UART_Transmit>
		HAL_UART_Transmit(uart, (uint8_t*) command, size, 2);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6958      	ldr	r0, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	b29a      	uxth	r2, r3
 8002206:	2302      	movs	r3, #2
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	f006 f94e 	bl	80084aa <HAL_UART_Transmit>
		HAL_UART_Transmit(uart, (uint8_t*) "\n", 1, 2);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6958      	ldr	r0, [r3, #20]
 8002212:	2302      	movs	r3, #2
 8002214:	2201      	movs	r2, #1
 8002216:	4935      	ldr	r1, [pc, #212]	; (80022ec <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x110>)
 8002218:	f006 f947 	bl	80084aa <HAL_UART_Transmit>
	}

	if (addMessage != NULL) {
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d022      	beq.n	800226a <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x8e>
		char tmp[200];
		for (int i = 0; i < 200; i++) {
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800222a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800222e:	2bc7      	cmp	r3, #199	; 0xc7
 8002230:	dc0c      	bgt.n	800224c <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x70>
			tmp[i] = '\0';
 8002232:	f107 0210 	add.w	r2, r7, #16
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223a:	4413      	add	r3, r2
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 200; i++) {
 8002240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002244:	3301      	adds	r3, #1
 8002246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800224a:	e7ee      	b.n	800222a <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x4e>
		}
		snprintf(tmp, sizeof tmp, "%s%s", "[mbus] S: ", command);
 800224c:	f107 0010 	add.w	r0, r7, #16
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x10c>)
 8002256:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x114>)
 8002258:	21c8      	movs	r1, #200	; 0xc8
 800225a:	f007 fdc5 	bl	8009de8 <sniprintf>
		addMessage(tmp);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f107 0210 	add.w	r2, r7, #16
 8002266:	4610      	mov	r0, r2
 8002268:	4798      	blx	r3
	}

	delayMicros(5000);
 800226a:	f241 3188 	movw	r1, #5000	; 0x1388
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fc25 	bl	8002abe <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	uint8_t controlSum = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	for (int i = 0; i < size - 1; i++) {
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002288:	429a      	cmp	r2, r3
 800228a:	da1e      	bge.n	80022ca <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0xee>
		uint8_t output = toHex(command[i]);
 800228c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff fe83 	bl	8001fa4 <_ZN23ExtDeviceCommandReciver5toHexEc>
 800229e:	4603      	mov	r3, r0
 80022a0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		controlSum = controlSum ^ output;
 80022a4:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 80022a8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80022ac:	4053      	eors	r3, r2
 80022ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		writeHexBitWise(output);
 80022b2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80022b6:	4619      	mov	r1, r3
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f81b 	bl	80022f4 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>
	for (int i = 0; i < size - 1; i++) {
 80022be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c2:	3301      	adds	r3, #1
 80022c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80022c8:	e7da      	b.n	8002280 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0xa4>
	}
	controlSum += 1;
 80022ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	writeHexBitWise(controlSum);
 80022d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80022d8:	4619      	mov	r1, r3
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f80a 	bl	80022f4 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>
}
 80022e0:	bf00      	nop
 80022e2:	37e8      	adds	r7, #232	; 0xe8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	0800db98 	.word	0x0800db98
 80022ec:	0800dba4 	.word	0x0800dba4
 80022f0:	0800dba8 	.word	0x0800dba8

080022f4 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>:

void ExtDeviceCommandReciver::writeHexBitWise(uint8_t command) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
	for (int8_t i = 3; i > -1; i--) {
 8002300:	2303      	movs	r3, #3
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db1c      	blt.n	8002346 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x52>
		uint8_t value = ((command & (1 << i)) >> i);
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	401a      	ands	r2, r3
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	fa42 f303 	asr.w	r3, r2, r3
 8002322:	73bb      	strb	r3, [r7, #14]
		if (value == 1) {
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d103      	bne.n	8002332 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x3e>
			writeOne();
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff33 	bl	8002196 <_ZN23ExtDeviceCommandReciver8writeOneEv>
 8002330:	e002      	b.n	8002338 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x44>
		} else {
			writeZero();
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff0d 	bl	8002152 <_ZN23ExtDeviceCommandReciver9writeZeroEv>
	for (int8_t i = 3; i > -1; i--) {
 8002338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e7de      	b.n	8002304 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x10>
		}
	}
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <_ZN23ExtDeviceCommandReciver17commandProcessingEv>:

//разбор комад
uint32_t ExtDeviceCommandReciver::commandProcessing() {
 8002350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002354:	b0c1      	sub	sp, #260	; 0x104
 8002356:	af02      	add	r7, sp, #8
 8002358:	6078      	str	r0, [r7, #4]
	//перед чтением пакета проверяем, что clock поднят
	if (HAL_GPIO_ReadPin(rxGPIO, rxPin)) {
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	891b      	ldrh	r3, [r3, #8]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f002 ffc7 	bl	80052f8 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d014      	beq.n	80023a4 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x54>
		if (uart != NULL) {
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x40>
			HAL_UART_Transmit(uart, (uint8_t*) "[mbus] R-ERROR: line not down\n", 30, 2);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6958      	ldr	r0, [r3, #20]
 8002386:	2302      	movs	r3, #2
 8002388:	221e      	movs	r2, #30
 800238a:	4960      	ldr	r1, [pc, #384]	; (800250c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1bc>)
 800238c:	f006 f88d 	bl	80084aa <HAL_UART_Transmit>
		}
		if (addMessage != NULL) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x50>
			addMessage("[mbus] R-ERROR: line not down");
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	485c      	ldr	r0, [pc, #368]	; (8002510 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1c0>)
 800239e:	4798      	blx	r3
		}
		return 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e0ae      	b.n	8002502 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1b2>
	}

	uint32_t command = readCommand();
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fe55 	bl	8002054 <_ZN23ExtDeviceCommandReciver11readCommandEv>
 80023aa:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	char res[20];
	convertToHex(command, res);
 80023ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023b2:	2200      	movs	r2, #0
 80023b4:	4698      	mov	r8, r3
 80023b6:	4691      	mov	r9, r2
 80023b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4642      	mov	r2, r8
 80023c0:	464b      	mov	r3, r9
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fe54 	bl	8002070 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>

	if (uart != NULL) {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01c      	beq.n	800240a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xba>

		HAL_UART_Transmit(uart, (uint8_t*) "[mbus] R: ", 10, 2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6958      	ldr	r0, [r3, #20]
 80023d4:	2302      	movs	r3, #2
 80023d6:	220a      	movs	r2, #10
 80023d8:	494e      	ldr	r1, [pc, #312]	; (8002514 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1c4>)
 80023da:	f006 f866 	bl	80084aa <HAL_UART_Transmit>
		HAL_UART_Transmit(uart, (uint8_t*) res, strlen(res), 2);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695e      	ldr	r6, [r3, #20]
 80023e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd feb2 	bl	8000150 <strlen>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80023f4:	2302      	movs	r3, #2
 80023f6:	4630      	mov	r0, r6
 80023f8:	f006 f857 	bl	80084aa <HAL_UART_Transmit>
		HAL_UART_Transmit(uart, (uint8_t*) "\n", 1, 2);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6958      	ldr	r0, [r3, #20]
 8002400:	2302      	movs	r3, #2
 8002402:	2201      	movs	r2, #1
 8002404:	4944      	ldr	r1, [pc, #272]	; (8002518 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1c8>)
 8002406:	f006 f850 	bl	80084aa <HAL_UART_Transmit>
	}

	if (addMessage != NULL) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d023      	beq.n	800245a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x10a>
		char tmp[200];
		for (int i = 0; i < 200; i++) {
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	2bc7      	cmp	r3, #199	; 0xc7
 800241e:	dc0c      	bgt.n	800243a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xea>
			tmp[i] = '\0';
 8002420:	f107 0208 	add.w	r2, r7, #8
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	4413      	add	r3, r2
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 200; i++) {
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002432:	3301      	adds	r3, #1
 8002434:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002438:	e7ee      	b.n	8002418 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xc8>
		}
		snprintf(tmp, sizeof tmp, "%s%s", "[mbus] R: ", res);
 800243a:	f107 0008 	add.w	r0, r7, #8
 800243e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1c4>)
 8002446:	4a35      	ldr	r2, [pc, #212]	; (800251c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1cc>)
 8002448:	21c8      	movs	r1, #200	; 0xc8
 800244a:	f007 fccd 	bl	8009de8 <sniprintf>
		addMessage(tmp);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f107 0208 	add.w	r2, r7, #8
 8002456:	4610      	mov	r0, r2
 8002458:	4798      	blx	r3
	}

	switch (command) {
 800245a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800245e:	f240 528e 	movw	r2, #1422	; 0x58e
 8002462:	4293      	cmp	r3, r2
 8002464:	d006      	beq.n	8002474 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x124>
 8002466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800246a:	f240 529d 	movw	r2, #1437	; 0x59d
 800246e:	4293      	cmp	r3, r2
 8002470:	d006      	beq.n	8002480 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x130>
 8002472:	e00b      	b.n	800248c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x13c>
	case 0x58E: {
		pong();
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f8ab 	bl	80025d0 <_ZN23ExtDeviceCommandReciver4pongEv>
		return command;
 800247a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800247e:	e040      	b.n	8002502 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1b2>
	}
	case 0x59D: {
		wakeUp();
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f8b5 	bl	80025f0 <_ZN23ExtDeviceCommandReciver6wakeUpEv>
		return command;
 8002486:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800248a:	e03a      	b.n	8002502 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1b2>

	char commandBuf[10];
	//	for (int i = 0; i < bufSize; i++) {
	//		commandBuf[i] = 'X';
	//	}
	convertToHex(command, commandBuf);
 800248c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002490:	2200      	movs	r2, #0
 8002492:	461c      	mov	r4, r3
 8002494:	4615      	mov	r5, r2
 8002496:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4622      	mov	r2, r4
 800249e:	462b      	mov	r3, r5
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fde5 	bl	8002070 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>

	//если мы пришли не по адресу 5 или не по команде Control
	if (commandBuf[0] != '5' || commandBuf[1] != '1') { //0x5130021(5)
 80024a6:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80024aa:	2b35      	cmp	r3, #53	; 0x35
 80024ac:	d103      	bne.n	80024b6 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x166>
 80024ae:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80024b2:	2b31      	cmp	r3, #49	; 0x31
 80024b4:	d002      	beq.n	80024bc <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x16c>
		return command;
 80024b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024ba:	e022      	b.n	8002502 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1b2>
	}
	//анализ подкоманды
	switch (commandBuf[2]) {
 80024bc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80024c0:	2b31      	cmp	r3, #49	; 0x31
 80024c2:	d002      	beq.n	80024ca <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x17a>
 80024c4:	2b33      	cmp	r3, #51	; 0x33
 80024c6:	d012      	beq.n	80024ee <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x19e>
 80024c8:	e019      	b.n	80024fe <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1ae>
	case '1': { // управление воспроизведением
		if (command == 0x5110127) { //команда играй
 80024ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024ce:	4a14      	ldr	r2, [pc, #80]	; (8002520 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1d0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d103      	bne.n	80024dc <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x18c>
			play();
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f8af 	bl	8002638 <_ZN23ExtDeviceCommandReciver4playEv>
		} else if (command == 0x5114024) { // команда стоп (возможно переход на другое устройство)
			stop();
		}
		break;
 80024da:	e00f      	b.n	80024fc <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1ac>
		} else if (command == 0x5114024) { // команда стоп (возможно переход на другое устройство)
 80024dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1d4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10a      	bne.n	80024fc <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1ac>
			stop();
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8c8 	bl	800267c <_ZN23ExtDeviceCommandReciver4stopEv>
		break;
 80024ec:	e006      	b.n	80024fc <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1ac>
	}
	case '3': { // переключение треков
		updateTrack(commandBuf);
 80024ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f8d7 	bl	80026a8 <_ZN23ExtDeviceCommandReciver11updateTrackEPc>
		break;
 80024fa:	e000      	b.n	80024fe <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x1ae>
		break;
 80024fc:	bf00      	nop
	}
	default:
		;
	}
	return command;
 80024fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
}
 8002502:	4618      	mov	r0, r3
 8002504:	37fc      	adds	r7, #252	; 0xfc
 8002506:	46bd      	mov	sp, r7
 8002508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800250c:	0800dbb0 	.word	0x0800dbb0
 8002510:	0800dbd0 	.word	0x0800dbd0
 8002514:	0800dbf0 	.word	0x0800dbf0
 8002518:	0800dba4 	.word	0x0800dba4
 800251c:	0800dba8 	.word	0x0800dba8
 8002520:	05110127 	.word	0x05110127
 8002524:	05114024 	.word	0x05114024

08002528 <_ZN23ExtDeviceCommandReciver8sendTimeEhh>:

void ExtDeviceCommandReciver::sendTime(uint8_t _min, uint8_t _sec) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
 8002534:	4613      	mov	r3, r2
 8002536:	70bb      	strb	r3, [r7, #2]
	min = _min;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	779a      	strb	r2, [r3, #30]
	sec = _sec;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	78ba      	ldrb	r2, [r7, #2]
 8002542:	77da      	strb	r2, [r3, #31]
	updateTrackTime();
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f99f 	bl	8002888 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv>

	if (!playing) {
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	f083 0301 	eor.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x64>
		return;
	}

	if (uart != NULL) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x48>
		HAL_UART_Transmit(uart, (uint8_t*) "[mbus] send time: ", 18, 2);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6958      	ldr	r0, [r3, #20]
 8002566:	2302      	movs	r3, #2
 8002568:	2212      	movs	r2, #18
 800256a:	490a      	ldr	r1, [pc, #40]	; (8002594 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x6c>)
 800256c:	f005 ff9d 	bl	80084aa <HAL_UART_Transmit>
	}

	if (addMessage != NULL) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x58>
		addMessage("[mbus] send time: ");
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x6c>)
 800257e:	4798      	blx	r3
	}

	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 8002580:	2210      	movs	r2, #16
 8002582:	4905      	ldr	r1, [pc, #20]	; (8002598 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x70>)
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fe29 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
 800258a:	e000      	b.n	800258e <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x66>
		return;
 800258c:	bf00      	nop
}
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	0800dbfc 	.word	0x0800dbfc
 8002598:	2000002c 	.word	0x2000002c

0800259c <_ZN23ExtDeviceCommandReciver16resetPlayingFlagEv>:

void ExtDeviceCommandReciver::resetPlayingFlag() {
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	playing = false;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <_ZN23ExtDeviceCommandReciver9isPlayingEv>:

bool ExtDeviceCommandReciver::isPlaying() {
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
	return playing;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
	...

080025d0 <_ZN23ExtDeviceCommandReciver4pongEv>:

void ExtDeviceCommandReciver::pong() {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	writeCommand(PONG, sizeof(PONG));
 80025d8:	2203      	movs	r2, #3
 80025da:	4904      	ldr	r1, [pc, #16]	; (80025ec <_ZN23ExtDeviceCommandReciver4pongEv+0x1c>)
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fdfd 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000004 	.word	0x20000004

080025f0 <_ZN23ExtDeviceCommandReciver6wakeUpEv>:

void ExtDeviceCommandReciver::wakeUp() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	writeCommand(HARDWARE_STATUS, sizeof(HARDWARE_STATUS));
 80025f8:	220c      	movs	r2, #12
 80025fa:	490b      	ldr	r1, [pc, #44]	; (8002628 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x38>)
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fded 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_COUNT, sizeof(DISC_COUNT));
 8002602:	2212      	movs	r2, #18
 8002604:	4909      	ldr	r1, [pc, #36]	; (800262c <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x3c>)
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fde8 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_INFO_WITH_TRACK_WAKEUP, sizeof(DISC_INFO_WITH_TRACK_WAKEUP));
 800260c:	220d      	movs	r2, #13
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x40>)
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fde3 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(STATUS_STOP, sizeof(STATUS_STOP));
 8002616:	2210      	movs	r2, #16
 8002618:	4906      	ldr	r1, [pc, #24]	; (8002634 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x44>)
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fdde 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	//	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000008 	.word	0x20000008
 800262c:	2000003c 	.word	0x2000003c
 8002630:	20000050 	.word	0x20000050
 8002634:	20000080 	.word	0x20000080

08002638 <_ZN23ExtDeviceCommandReciver4playEv>:

void ExtDeviceCommandReciver::play() {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	writeCommand(STATUS_SEEKING, sizeof(STATUS_SEEKING));
 8002640:	2210      	movs	r2, #16
 8002642:	490b      	ldr	r1, [pc, #44]	; (8002670 <_ZN23ExtDeviceCommandReciver4playEv+0x38>)
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff fdc9 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_INFO_WITH_TRACK_WAKEUP, sizeof(DISC_INFO_WITH_TRACK_WAKEUP));
 800264a:	220d      	movs	r2, #13
 800264c:	4909      	ldr	r1, [pc, #36]	; (8002674 <_ZN23ExtDeviceCommandReciver4playEv+0x3c>)
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fdc4 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 8002654:	2210      	movs	r2, #16
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <_ZN23ExtDeviceCommandReciver4playEv+0x40>)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fdbf 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(true);
 800265e:	2101      	movs	r1, #1
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f8dd 	bl	8002820 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000070 	.word	0x20000070
 8002674:	20000050 	.word	0x20000050
 8002678:	2000002c 	.word	0x2000002c

0800267c <_ZN23ExtDeviceCommandReciver4stopEv>:

void ExtDeviceCommandReciver::stop() {
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	updateStop();
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f943 	bl	8002910 <_ZN23ExtDeviceCommandReciver10updateStopEv>
	writeCommand(STATUS_STOP, sizeof(STATUS_STOP));
 800268a:	2210      	movs	r2, #16
 800268c:	4905      	ldr	r1, [pc, #20]	; (80026a4 <_ZN23ExtDeviceCommandReciver4stopEv+0x28>)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fda4 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(false);
 8002694:	2100      	movs	r1, #0
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8c2 	bl	8002820 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000080 	.word	0x20000080

080026a8 <_ZN23ExtDeviceCommandReciver11updateTrackEPc>:

void ExtDeviceCommandReciver::updateTrack(char *commandBuf) {
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	int oldTrack = track;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7f1b      	ldrb	r3, [r3, #28]
 80026b6:	61bb      	str	r3, [r7, #24]
	int oldDisk = disk;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7f5b      	ldrb	r3, [r3, #29]
 80026bc:	617b      	str	r3, [r7, #20]

	bool changed = false;
 80026be:	2300      	movs	r3, #0
 80026c0:	77fb      	strb	r3, [r7, #31]
	bool next = false;
 80026c2:	2300      	movs	r3, #0
 80026c4:	77bb      	strb	r3, [r7, #30]

	//проверяем пришел ли новый номер трека
	int newTrack = toInt(commandBuf[4]) * 10 + toInt(commandBuf[5]);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3304      	adds	r3, #4
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fc5b 	bl	8001f8a <_ZN23ExtDeviceCommandReciver5toIntEc>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	461c      	mov	r4, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	3305      	adds	r3, #5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fc4e 	bl	8001f8a <_ZN23ExtDeviceCommandReciver5toIntEc>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4423      	add	r3, r4
 80026f2:	613b      	str	r3, [r7, #16]
	if (newTrack != 0 && track != newTrack) {
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d027      	beq.n	800274a <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7f1b      	ldrb	r3, [r3, #28]
 80026fe:	461a      	mov	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4293      	cmp	r3, r2
 8002704:	d021      	beq.n	800274a <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		track = newTrack;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	771a      	strb	r2, [r3, #28]
		updateTrackNumber();
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f94a 	bl	80029a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv>
		changed = true;
 8002714:	2301      	movs	r3, #1
 8002716:	77fb      	strb	r3, [r7, #31]

		if (oldTrack == 99 && newTrack == 1) {
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b63      	cmp	r3, #99	; 0x63
 800271c:	d105      	bne.n	800272a <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x82>
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d102      	bne.n	800272a <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x82>
			next = true;
 8002724:	2301      	movs	r3, #1
 8002726:	77bb      	strb	r3, [r7, #30]
 8002728:	e00f      	b.n	800274a <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		} else if (oldTrack == 1 && newTrack == 99) {
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x94>
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b63      	cmp	r3, #99	; 0x63
 8002734:	d102      	bne.n	800273c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x94>
			next = false;
 8002736:	2300      	movs	r3, #0
 8002738:	77bb      	strb	r3, [r7, #30]
 800273a:	e006      	b.n	800274a <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		} else {
			next = newTrack > oldTrack ? true : false;
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	429a      	cmp	r2, r3
 8002742:	bfcc      	ite	gt
 8002744:	2301      	movgt	r3, #1
 8002746:	2300      	movle	r3, #0
 8002748:	77bb      	strb	r3, [r7, #30]
		}
	}

	//проверяем пришел ли новый номер диска
	int newDisk = toInt(commandBuf[3]);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3303      	adds	r3, #3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fc19 	bl	8001f8a <_ZN23ExtDeviceCommandReciver5toIntEc>
 8002758:	60f8      	str	r0, [r7, #12]
	if (newDisk != 0 && disk != newDisk) {
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d03b      	beq.n	80027d8 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x130>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7f5b      	ldrb	r3, [r3, #29]
 8002764:	461a      	mov	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4293      	cmp	r3, r2
 800276a:	d035      	beq.n	80027d8 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x130>
		disk = newDisk;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	775a      	strb	r2, [r3, #29]
		updateDiskNumber();
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8dd 	bl	8002934 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv>
		changed = true;
 800277a:	2301      	movs	r3, #1
 800277c:	77fb      	strb	r3, [r7, #31]

		if (oldDisk == 6 && newDisk == 1) {
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b06      	cmp	r3, #6
 8002782:	d105      	bne.n	8002790 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xe8>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xe8>
			next = true;
 800278a:	2301      	movs	r3, #1
 800278c:	77bb      	strb	r3, [r7, #30]
 800278e:	e00f      	b.n	80027b0 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x108>
		} else if (oldDisk == 1 && newDisk == 6) {
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xfa>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b06      	cmp	r3, #6
 800279a:	d102      	bne.n	80027a2 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xfa>
			next = false;
 800279c:	2300      	movs	r3, #0
 800279e:	77bb      	strb	r3, [r7, #30]
 80027a0:	e006      	b.n	80027b0 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x108>
		} else {
			next = newDisk > oldDisk ? true : false;
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	bfcc      	ite	gt
 80027aa:	2301      	movgt	r3, #1
 80027ac:	2300      	movle	r3, #0
 80027ae:	77bb      	strb	r3, [r7, #30]
		}

		writeCommand(CHANGE_DISK1, sizeof(CHANGE_DISK1));
 80027b0:	220c      	movs	r2, #12
 80027b2:	4916      	ldr	r1, [pc, #88]	; (800280c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x164>)
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fd11 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(CHANGE_DISK2, sizeof(CHANGE_DISK2));
 80027ba:	220c      	movs	r2, #12
 80027bc:	4914      	ldr	r1, [pc, #80]	; (8002810 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x168>)
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fd0c 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(STATUS_SEEKING, sizeof(STATUS_SEEKING));
 80027c4:	2210      	movs	r2, #16
 80027c6:	4913      	ldr	r1, [pc, #76]	; (8002814 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x16c>)
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fd07 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(DISC_INFO_WITH_TRACK, sizeof(DISC_INFO_WITH_TRACK));
 80027ce:	220d      	movs	r2, #13
 80027d0:	4911      	ldr	r1, [pc, #68]	; (8002818 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x170>)
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fd02 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	}
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 80027d8:	2210      	movs	r2, #16
 80027da:	4910      	ldr	r1, [pc, #64]	; (800281c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x174>)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fcfd 	bl	80021dc <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(true);
 80027e2:	2101      	movs	r1, #1
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f81b 	bl	8002820 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>

	if (changed) {
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x15c>
		if (next) {
 80027f0:	7fbb      	ldrb	r3, [r7, #30]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x156>
			(*nextCallback)();
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	4798      	blx	r3
		} else {
			(*prevCallback)();
		}
	}
}
 80027fc:	e002      	b.n	8002804 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x15c>
			(*prevCallback)();
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4798      	blx	r3
}
 8002804:	bf00      	nop
 8002806:	3724      	adds	r7, #36	; 0x24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	20000014 	.word	0x20000014
 8002810:	20000020 	.word	0x20000020
 8002814:	20000070 	.word	0x20000070
 8002818:	20000060 	.word	0x20000060
 800281c:	2000002c 	.word	0x2000002c

08002820 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>:

inline void ExtDeviceCommandReciver::updatePlayFlag(bool play) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
	if (play && playing || !play && !playing) {
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x1c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d120      	bne.n	800287e <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x5e>
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f083 0301 	eor.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x38>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284e:	f083 0301 	eor.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d112      	bne.n	800287e <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x5e>
		return;
	}

	if (play) {
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x4e>
		playing = true;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2020 	strb.w	r2, [r3, #32]
		(*playCallback)();
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	4798      	blx	r3
 800286c:	e008      	b.n	8002880 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x60>
	} else {
		playing = false;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2020 	strb.w	r2, [r3, #32]
		(*stopCallback)();
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	4798      	blx	r3
 800287c:	e000      	b.n	8002880 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x60>
		return;
 800287e:	bf00      	nop
	}
}
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv>:

inline void ExtDeviceCommandReciver::updateTrackTime() {
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	STATUS_PLAY[MIN_POS_F] = min / 10 + '0';
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7f9b      	ldrb	r3, [r3, #30]
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	08db      	lsrs	r3, r3, #3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3330      	adds	r3, #48	; 0x30
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 80028a4:	71da      	strb	r2, [r3, #7]
	STATUS_PLAY[MIN_POS_S] = min % 10 + '0';
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7f9a      	ldrb	r2, [r3, #30]
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 80028ac:	fba3 1302 	umull	r1, r3, r3, r2
 80028b0:	08d9      	lsrs	r1, r3, #3
 80028b2:	460b      	mov	r3, r1
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	3330      	adds	r3, #48	; 0x30
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 80028c4:	721a      	strb	r2, [r3, #8]
	STATUS_PLAY[SEC_POS_F] = sec / 10 + '0';
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7fdb      	ldrb	r3, [r3, #31]
 80028ca:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3330      	adds	r3, #48	; 0x30
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 80028da:	725a      	strb	r2, [r3, #9]
	STATUS_PLAY[SEC_POS_S] = sec % 10 + '0';
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7fda      	ldrb	r2, [r3, #31]
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 80028e2:	fba3 1302 	umull	r1, r3, r3, r2
 80028e6:	08d9      	lsrs	r1, r3, #3
 80028e8:	460b      	mov	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	3330      	adds	r3, #48	; 0x30
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 80028fa:	729a      	strb	r2, [r3, #10]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	cccccccd 	.word	0xcccccccd
 800290c:	2000002c 	.word	0x2000002c

08002910 <_ZN23ExtDeviceCommandReciver10updateStopEv>:

inline void ExtDeviceCommandReciver::updateStop() {
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	STATUS_STOP[DISK_POS] = disk + '0';
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7f5b      	ldrb	r3, [r3, #29]
 800291c:	3330      	adds	r3, #48	; 0x30
 800291e:	b2da      	uxtb	r2, r3
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <_ZN23ExtDeviceCommandReciver10updateStopEv+0x20>)
 8002922:	719a      	strb	r2, [r3, #6]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000080 	.word	0x20000080

08002934 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv>:

inline void ExtDeviceCommandReciver::updateDiskNumber() {
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	CHANGE_DISK2[3] = disk + '0';
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7f5b      	ldrb	r3, [r3, #29]
 8002940:	3330      	adds	r3, #48	; 0x30
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x5c>)
 8002946:	70da      	strb	r2, [r3, #3]
	STATUS_SEEKING[DISK_POS] = disk + '0';
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7f5b      	ldrb	r3, [r3, #29]
 800294c:	3330      	adds	r3, #48	; 0x30
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x60>)
 8002952:	719a      	strb	r2, [r3, #6]
	DISC_INFO_WITH_TRACK[2] = disk + '0';
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7f5b      	ldrb	r3, [r3, #29]
 8002958:	3330      	adds	r3, #48	; 0x30
 800295a:	b2da      	uxtb	r2, r3
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x64>)
 800295e:	709a      	strb	r2, [r3, #2]
	//	DISC_INFO[2] = disk + '0';
	STATUS_PLAY[DISK_POS] = disk + '0';
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7f5b      	ldrb	r3, [r3, #29]
 8002964:	3330      	adds	r3, #48	; 0x30
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x68>)
 800296a:	719a      	strb	r2, [r3, #6]
	STATUS_STOP[DISK_POS] = disk + '0';
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7f5b      	ldrb	r3, [r3, #29]
 8002970:	3330      	adds	r3, #48	; 0x30
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x6c>)
 8002976:	719a      	strb	r2, [r3, #6]
	HARDWARE_STATUS[3] = disk + '0';
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7f5b      	ldrb	r3, [r3, #29]
 800297c:	3330      	adds	r3, #48	; 0x30
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x70>)
 8002982:	70da      	strb	r2, [r3, #3]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000020 	.word	0x20000020
 8002994:	20000070 	.word	0x20000070
 8002998:	20000060 	.word	0x20000060
 800299c:	2000002c 	.word	0x2000002c
 80029a0:	20000080 	.word	0x20000080
 80029a4:	20000008 	.word	0x20000008

080029a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv>:

inline void ExtDeviceCommandReciver::updateTrackNumber() {
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	STATUS_SEEKING[TRACK_POS_F] = track / 10 + '0';
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7f1b      	ldrb	r3, [r3, #28]
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3330      	adds	r3, #48	; 0x30
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb8>)
 80029c4:	70da      	strb	r2, [r3, #3]
	STATUS_SEEKING[TRACK_POS_S] = track % 10 + '0';
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7f1a      	ldrb	r2, [r3, #28]
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 80029cc:	fba3 1302 	umull	r1, r3, r3, r2
 80029d0:	08d9      	lsrs	r1, r3, #3
 80029d2:	460b      	mov	r3, r1
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	3330      	adds	r3, #48	; 0x30
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb8>)
 80029e4:	711a      	strb	r2, [r3, #4]
	STATUS_PLAY[TRACK_POS_F] = track / 10 + '0';
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7f1b      	ldrb	r3, [r3, #28]
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3330      	adds	r3, #48	; 0x30
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xbc>)
 80029fa:	70da      	strb	r2, [r3, #3]
	STATUS_PLAY[TRACK_POS_S] = track % 10 + '0';
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7f1a      	ldrb	r2, [r3, #28]
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8002a02:	fba3 1302 	umull	r1, r3, r3, r2
 8002a06:	08d9      	lsrs	r1, r3, #3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3330      	adds	r3, #48	; 0x30
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xbc>)
 8002a1a:	711a      	strb	r2, [r3, #4]
	DISC_INFO_WITH_TRACK[3] = track / 10 + '0';
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7f1b      	ldrb	r3, [r3, #28]
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	08db      	lsrs	r3, r3, #3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3330      	adds	r3, #48	; 0x30
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xc0>)
 8002a30:	70da      	strb	r2, [r3, #3]
	DISC_INFO_WITH_TRACK[4] = track % 10 + '0';
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7f1a      	ldrb	r2, [r3, #28]
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8002a38:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3c:	08d9      	lsrs	r1, r3, #3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3330      	adds	r3, #48	; 0x30
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xc0>)
 8002a50:	711a      	strb	r2, [r3, #4]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	cccccccd 	.word	0xcccccccd
 8002a60:	20000070 	.word	0x20000070
 8002a64:	2000002c 	.word	0x2000002c
 8002a68:	20000060 	.word	0x20000060

08002a6c <_ZN23ExtDeviceCommandReciver10startTimerEv>:

//TIMER FUNC
void ExtDeviceCommandReciver::startTimer() {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(timer); // запуск таймера
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fa5d 	bl	8007f38 <HAL_TIM_Base_Start_IT>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZN23ExtDeviceCommandReciver9getMicrosEv>:

uint16_t ExtDeviceCommandReciver::getMicros() {
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(timer);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	b29b      	uxth	r3, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN23ExtDeviceCommandReciver11resetMicrosEv>:

void ExtDeviceCommandReciver::resetMicros() {
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(timer, 0);  // устанавливаем значение счетчика на 0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <_ZN23ExtDeviceCommandReciver11delayMicrosEt>:

void ExtDeviceCommandReciver::delayMicros(uint16_t us) {
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(timer, 0);  // set the counter value a 0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < us)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	bf34      	ite	cc
 8002ae2:	2301      	movcc	r3, #1
 8002ae4:	2300      	movcs	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d000      	beq.n	8002aee <_ZN23ExtDeviceCommandReciver11delayMicrosEt+0x30>
 8002aec:	e7f2      	b.n	8002ad4 <_ZN23ExtDeviceCommandReciver11delayMicrosEt+0x16>
		;  // wait for the counter to reach the us input in the parameter
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <_ZN6SerialC1EP20__UART_HandleTypeDef>:
#include "Serial.h"
#include <string.h>
#include <stdio.h>

Serial::Serial(UART_HandleTypeDef *uart):_uart(uart) {}
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <_ZN12PowerManagerC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvvES5_S5_S5_PFvPcE>:
#include "PowerManager.h"
#include <string.h>

PowerManager::PowerManager(GPIO_TypeDef *_accGPIO, uint16_t _accPin, GPIO_TypeDef *_relayGPIO, uint16_t _relayPin, UART_HandleTypeDef *_uart, void (*_accOnCallback)(), void (*_accOffCallback)(),
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
		void (*_waitOffCallback)(), void (*_offCallback)(), void (*_addMessage)(char *msg)) :
		accGPIO(_accGPIO), accPin(_accPin), relayGPIO(_relayGPIO), relayPin(_relayPin), uart(_uart), accOnCallback(_accOnCallback), accOffCallback(_accOffCallback), waitOffCallback(_waitOffCallback), offCallback(
				_offCallback), addMessage(_addMessage) {
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8b3a      	ldrh	r2, [r7, #24]
 8002b2e:	809a      	strh	r2, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	819a      	strh	r2, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a3a      	ldr	r2, [r7, #32]
 8002b4c:	619a      	str	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b52:	61da      	str	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b58:	621a      	str	r2, [r3, #32]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <_ZN12PowerManager15powerProcessingEv>:

void PowerManager::powerProcessing() {
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - time < 1000) {
 8002b9c:	f001 ff7c 	bl	8004a98 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8095 	bne.w	8002ce6 <_ZN12PowerManager15powerProcessingEv+0x152>
		return;
	} else {
		time = HAL_GetTick();
 8002bbc:	f001 ff6c 	bl	8004a98 <HAL_GetTick>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	615a      	str	r2, [r3, #20]
	}

	switch (powerState) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	f200 8092 	bhi.w	8002cf8 <_ZN12PowerManager15powerProcessingEv+0x164>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <_ZN12PowerManager15powerProcessingEv+0x48>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bf1 	.word	0x08002bf1
 8002be0:	08002c11 	.word	0x08002c11
 8002be4:	08002c27 	.word	0x08002c27
 8002be8:	08002c7d 	.word	0x08002c7d
 8002bec:	08002cc7 	.word	0x08002cc7
	case ACC_ON: {
		if (!checkAcc()) {
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f885 	bl	8002d00 <_ZN12PowerManager8checkAccEv>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d071      	beq.n	8002cea <_ZN12PowerManager15powerProcessingEv+0x156>
			changeState(ACC_OFF);
 8002c06:	2101      	movs	r1, #1
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f88b 	bl	8002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		}
		break;
 8002c0e:	e06c      	b.n	8002cea <_ZN12PowerManager15powerProcessingEv+0x156>
	}
	case ACC_OFF: {
		waitAccTime = HAL_GetTick();
 8002c10:	f001 ff42 	bl	8004a98 <HAL_GetTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
		changeState(WAIT_ACC);
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f880 	bl	8002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8002c24:	e068      	b.n	8002cf8 <_ZN12PowerManager15powerProcessingEv+0x164>
	}
	case WAIT_ACC: {
		if (checkAcc()) {
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f86a 	bl	8002d00 <_ZN12PowerManager8checkAccEv>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <_ZN12PowerManager15powerProcessingEv+0xb2>
			changeState(ACC_ON);
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f870 	bl	8002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>
			if (maxAccWaitTime < HAL_GetTick() - waitAccTime) {
				waitPowerOffTime = HAL_GetTick();
				changeState(WAIT_OFF);
			}
		}
		break;
 8002c44:	e053      	b.n	8002cee <_ZN12PowerManager15powerProcessingEv+0x15a>
			if (maxAccWaitTime < HAL_GetTick() - waitAccTime) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	461c      	mov	r4, r3
 8002c4c:	f001 ff24 	bl	8004a98 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	bf34      	ite	cc
 8002c5c:	2301      	movcc	r3, #1
 8002c5e:	2300      	movcs	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d043      	beq.n	8002cee <_ZN12PowerManager15powerProcessingEv+0x15a>
				waitPowerOffTime = HAL_GetTick();
 8002c66:	f001 ff17 	bl	8004a98 <HAL_GetTick>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
				changeState(WAIT_OFF);
 8002c72:	2103      	movs	r1, #3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f855 	bl	8002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8002c7a:	e038      	b.n	8002cee <_ZN12PowerManager15powerProcessingEv+0x15a>
	}
	case WAIT_OFF: {
		if (checkAcc()) {
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f83f 	bl	8002d00 <_ZN12PowerManager8checkAccEv>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <_ZN12PowerManager15powerProcessingEv+0x108>
			changeState(ACC_ON);
 8002c92:	2100      	movs	r1, #0
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f845 	bl	8002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		} else {
			if (maxPowerOffTime < HAL_GetTick() - waitPowerOffTime) {
				changeState(OFF);
			}
		}
		break;
 8002c9a:	e02a      	b.n	8002cf2 <_ZN12PowerManager15powerProcessingEv+0x15e>
			if (maxPowerOffTime < HAL_GetTick() - waitPowerOffTime) {
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	f001 fef9 	bl	8004a98 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	429c      	cmp	r4, r3
 8002cb0:	bf34      	ite	cc
 8002cb2:	2301      	movcc	r3, #1
 8002cb4:	2300      	movcs	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01a      	beq.n	8002cf2 <_ZN12PowerManager15powerProcessingEv+0x15e>
				changeState(OFF);
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f830 	bl	8002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8002cc4:	e015      	b.n	8002cf2 <_ZN12PowerManager15powerProcessingEv+0x15e>
	}
	case OFF: {
		if (checkAcc()) {
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f81a 	bl	8002d00 <_ZN12PowerManager8checkAccEv>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00c      	beq.n	8002cf6 <_ZN12PowerManager15powerProcessingEv+0x162>
			changeState(WAIT_ACC);
 8002cdc:	2102      	movs	r1, #2
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f820 	bl	8002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		}
		break;
 8002ce4:	e007      	b.n	8002cf6 <_ZN12PowerManager15powerProcessingEv+0x162>
		return;
 8002ce6:	bf00      	nop
 8002ce8:	e006      	b.n	8002cf8 <_ZN12PowerManager15powerProcessingEv+0x164>
		break;
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <_ZN12PowerManager15powerProcessingEv+0x164>
		break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <_ZN12PowerManager15powerProcessingEv+0x164>
		break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <_ZN12PowerManager15powerProcessingEv+0x164>
		break;
 8002cf6:	bf00      	nop
	}
	}
}
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
 8002cfe:	bf00      	nop

08002d00 <_ZN12PowerManager8checkAccEv>:

GPIO_PinState PowerManager::checkAcc() {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(accGPIO, accPin);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	899b      	ldrh	r3, [r3, #12]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f002 faf0 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <_ZN12PowerManager11changeStateENS_10PowerStateE>:

void PowerManager::changeState(PowerState newState) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
	if (powerState == newState) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f000 8095 	beq.w	8002e68 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x144>
		return;
	}
	powerState = newState;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	switch (newState) {
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	f200 8098 	bhi.w	8002e7e <_ZN12PowerManager11changeStateENS_10PowerStateE+0x15a>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x30>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002d69 	.word	0x08002d69
 8002d58:	08002da7 	.word	0x08002da7
 8002d5c:	08002dd5 	.word	0x08002dd5
 8002d60:	08002dfd 	.word	0x08002dfd
 8002d64:	08002e2b 	.word	0x08002e2b
	case ACC_ON: {
		(*accOnCallback)();
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4798      	blx	r3
		HAL_GPIO_WritePin(relayGPIO, relayPin, GPIO_PIN_SET);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	889b      	ldrh	r3, [r3, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f002 fad4 	bl	8005326 <HAL_GPIO_WritePin>
		if (uart != NULL) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x70>
			HAL_UART_Transmit(uart, (uint8_t*) "[power] acc on", 14, 2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6918      	ldr	r0, [r3, #16]
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	220e      	movs	r2, #14
 8002d8e:	493d      	ldr	r1, [pc, #244]	; (8002e84 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x160>)
 8002d90:	f005 fb8b 	bl	80084aa <HAL_UART_Transmit>
		}
		if (addMessage != NULL) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d067      	beq.n	8002e6c <_ZN12PowerManager11changeStateENS_10PowerStateE+0x148>
			addMessage("[power] acc on");
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	4838      	ldr	r0, [pc, #224]	; (8002e84 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x160>)
 8002da2:	4798      	blx	r3
		}
		break;
 8002da4:	e062      	b.n	8002e6c <_ZN12PowerManager11changeStateENS_10PowerStateE+0x148>
	}
	case ACC_OFF: {
		(*accOffCallback)();
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4798      	blx	r3
		if (uart != NULL) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
			HAL_UART_Transmit(uart, (uint8_t*) "[power] acc off", 15, 2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6918      	ldr	r0, [r3, #16]
 8002db8:	2302      	movs	r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	4932      	ldr	r1, [pc, #200]	; (8002e88 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x164>)
 8002dbe:	f005 fb74 	bl	80084aa <HAL_UART_Transmit>
		}
		if (addMessage != NULL) {
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d052      	beq.n	8002e70 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x14c>
			addMessage("[power] acc off");
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	482e      	ldr	r0, [pc, #184]	; (8002e88 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x164>)
 8002dd0:	4798      	blx	r3
		}
		break;
 8002dd2:	e04d      	b.n	8002e70 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x14c>
	}
	case WAIT_ACC: {
		if (uart != NULL) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <_ZN12PowerManager11changeStateENS_10PowerStateE+0xc6>
			HAL_UART_Transmit(uart, (uint8_t*) "[power] wait acc", 16, 2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6918      	ldr	r0, [r3, #16]
 8002de0:	2302      	movs	r3, #2
 8002de2:	2210      	movs	r2, #16
 8002de4:	4929      	ldr	r1, [pc, #164]	; (8002e8c <_ZN12PowerManager11changeStateENS_10PowerStateE+0x168>)
 8002de6:	f005 fb60 	bl	80084aa <HAL_UART_Transmit>
		}
		if (addMessage != NULL) {
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d040      	beq.n	8002e74 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x150>
			addMessage("[power] wait acc");
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	4825      	ldr	r0, [pc, #148]	; (8002e8c <_ZN12PowerManager11changeStateENS_10PowerStateE+0x168>)
 8002df8:	4798      	blx	r3
		}
		break;
 8002dfa:	e03b      	b.n	8002e74 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x150>
	}
	case WAIT_OFF: {
		(*waitOffCallback)();
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4798      	blx	r3
		if (uart != NULL) {
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xf4>
			HAL_UART_Transmit(uart, (uint8_t*) "[power] wait off", 16, 2);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6918      	ldr	r0, [r3, #16]
 8002e0e:	2302      	movs	r3, #2
 8002e10:	2210      	movs	r2, #16
 8002e12:	491f      	ldr	r1, [pc, #124]	; (8002e90 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x16c>)
 8002e14:	f005 fb49 	bl	80084aa <HAL_UART_Transmit>
		}
		if (addMessage != NULL) {
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02b      	beq.n	8002e78 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x154>
			addMessage("[power] wait off");
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	481a      	ldr	r0, [pc, #104]	; (8002e90 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x16c>)
 8002e26:	4798      	blx	r3
		}
		break;
 8002e28:	e026      	b.n	8002e78 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x154>
	}
	case OFF: {
		(*offCallback)();
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	4798      	blx	r3
		HAL_GPIO_WritePin(relayGPIO, relayPin, GPIO_PIN_RESET);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	889b      	ldrh	r3, [r3, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f002 fa73 	bl	8005326 <HAL_GPIO_WritePin>
		if (uart != NULL) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x132>
			HAL_UART_Transmit(uart, (uint8_t*) "[power] off", 11, 2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6918      	ldr	r0, [r3, #16]
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	220b      	movs	r2, #11
 8002e50:	4910      	ldr	r1, [pc, #64]	; (8002e94 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x170>)
 8002e52:	f005 fb2a 	bl	80084aa <HAL_UART_Transmit>
		}
		if (addMessage != NULL) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <_ZN12PowerManager11changeStateENS_10PowerStateE+0x158>
			addMessage("[power] off");
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x170>)
 8002e64:	4798      	blx	r3
		}
		break;
 8002e66:	e009      	b.n	8002e7c <_ZN12PowerManager11changeStateENS_10PowerStateE+0x158>
		return;
 8002e68:	bf00      	nop
 8002e6a:	e008      	b.n	8002e7e <_ZN12PowerManager11changeStateENS_10PowerStateE+0x15a>
		break;
 8002e6c:	bf00      	nop
 8002e6e:	e006      	b.n	8002e7e <_ZN12PowerManager11changeStateENS_10PowerStateE+0x15a>
		break;
 8002e70:	bf00      	nop
 8002e72:	e004      	b.n	8002e7e <_ZN12PowerManager11changeStateENS_10PowerStateE+0x15a>
		break;
 8002e74:	bf00      	nop
 8002e76:	e002      	b.n	8002e7e <_ZN12PowerManager11changeStateENS_10PowerStateE+0x15a>
		break;
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <_ZN12PowerManager11changeStateENS_10PowerStateE+0x15a>
		break;
 8002e7c:	bf00      	nop
	}
	}

}
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	0800dc10 	.word	0x0800dc10
 8002e88:	0800dc20 	.word	0x0800dc20
 8002e8c:	0800dc30 	.word	0x0800dc30
 8002e90:	0800dc44 	.word	0x0800dc44
 8002e94:	0800dc58 	.word	0x0800dc58

08002e98 <_ZN10RingBufferC1Ev>:
#include "RingBuffer.h"
#include "string.h"

RingBuffer::RingBuffer() {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4909      	ldr	r1, [pc, #36]	; (8002ee8 <_ZN10RingBufferC1Ev+0x50>)
 8002ec4:	f203 32f2 	addw	r2, r3, #1010	; 0x3f2
 8002ec8:	6808      	ldr	r0, [r1, #0]
 8002eca:	6010      	str	r0, [r2, #0]
 8002ecc:	8889      	ldrh	r1, [r1, #4]
 8002ece:	8091      	strh	r1, [r2, #4]
 8002ed0:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8002ed4:	222c      	movs	r2, #44	; 0x2c
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f006 f90b 	bl	80090f4 <memset>
}
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	0800dc64 	.word	0x0800dc64

08002eec <_ZN10RingBuffer3addEPKc>:

bool RingBuffer::add(const char *str) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
	if (!writeEnabled) {
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 33f1 	ldrb.w	r3, [r3, #1009]	; 0x3f1
 8002efc:	f083 0301 	eor.w	r3, r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <_ZN10RingBuffer3addEPKc+0x1e>
		return false;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e074      	b.n	8002ff4 <_ZN10RingBuffer3addEPKc+0x108>
	}

	if (writeIdx == readIdx) {
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d10b      	bne.n	8002f32 <_ZN10RingBuffer3addEPKc+0x46>
		if (empty) {
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <_ZN10RingBuffer3addEPKc+0x42>
			empty = false;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8002f2c:	e001      	b.n	8002f32 <_ZN10RingBuffer3addEPKc+0x46>
		} else {
			// full
			return false;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e060      	b.n	8002ff4 <_ZN10RingBuffer3addEPKc+0x108>
		}
	}

	for (int i = 0; i < bufferItemSize; i++) {
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b31      	cmp	r3, #49	; 0x31
 8002f3a:	dc0f      	bgt.n	8002f5c <_ZN10RingBuffer3addEPKc+0x70>
		buffer[writeIdx][i] = '\r';
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	2132      	movs	r1, #50	; 0x32
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	441a      	add	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	4413      	add	r3, r2
 8002f50:	220d      	movs	r2, #13
 8002f52:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < bufferItemSize; i++) {
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e7ec      	b.n	8002f36 <_ZN10RingBuffer3addEPKc+0x4a>
	}

	int len = strlen(str);
 8002f5c:	6838      	ldr	r0, [r7, #0]
 8002f5e:	f7fd f8f7 	bl	8000150 <strlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	613b      	str	r3, [r7, #16]
	if (len > bufferItemSize - 2) {
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b30      	cmp	r3, #48	; 0x30
 8002f6a:	dd01      	ble.n	8002f70 <_ZN10RingBuffer3addEPKc+0x84>
		len = bufferItemSize - 2;
 8002f6c:	2330      	movs	r3, #48	; 0x30
 8002f6e:	613b      	str	r3, [r7, #16]
	}

	buffer[writeIdx][len] = '\n';
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	2132      	movs	r1, #50	; 0x32
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	441a      	add	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	220a      	movs	r2, #10
 8002f86:	701a      	strb	r2, [r3, #0]
	buffer[writeIdx][len + 1] = '\0';
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3301      	adds	r3, #1
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	2032      	movs	r0, #50	; 0x32
 8002f96:	fb00 f202 	mul.w	r2, r0, r2
 8002f9a:	440a      	add	r2, r1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < len; i++) {
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	da13      	bge.n	8002fd6 <_ZN10RingBuffer3addEPKc+0xea>
		buffer[writeIdx][i] = str[i];
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002fba:	7810      	ldrb	r0, [r2, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	2132      	movs	r1, #50	; 0x32
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	441a      	add	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4602      	mov	r2, r0
 8002fcc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e7e7      	b.n	8002fa6 <_ZN10RingBuffer3addEPKc+0xba>
	}

	// set new writeIdx
	writeIdx = writeIdx == bufferSize - 1 ? 0 : writeIdx + 1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002fdc:	2b13      	cmp	r3, #19
 8002fde:	d004      	beq.n	8002fea <_ZN10RingBuffer3addEPKc+0xfe>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	e000      	b.n	8002fec <_ZN10RingBuffer3addEPKc+0x100>
 8002fea:	2300      	movs	r3, #0
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
	return true; //0;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZN10RingBuffer10getReadIdxEv>:

int RingBuffer::getReadIdx() {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	// empty
	if (readIdx == writeIdx && empty)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 23e8 	ldr.w	r2, [r3, #1000]	; 0x3e8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <_ZN10RingBuffer10getReadIdxEv+0x28>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <_ZN10RingBuffer10getReadIdxEv+0x28>
		return -1;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	e01e      	b.n	8003062 <_ZN10RingBuffer10getReadIdxEv+0x66>

	int ret = readIdx;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800302a:	60fb      	str	r3, [r7, #12]

	readIdx = readIdx == bufferSize - 1 ? 0 : readIdx + 1;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8003032:	2b13      	cmp	r3, #19
 8003034:	d004      	beq.n	8003040 <_ZN10RingBuffer10getReadIdxEv+0x44>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800303c:	3301      	adds	r3, #1
 800303e:	e000      	b.n	8003042 <_ZN10RingBuffer10getReadIdxEv+0x46>
 8003040:	2300      	movs	r3, #0
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	f8c2 33e8 	str.w	r3, [r2, #1000]	; 0x3e8

	// if after read buffer is empty reset 'need read' flag
	if (readIdx == writeIdx) {
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 23e8 	ldr.w	r2, [r3, #1000]	; 0x3e8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003054:	429a      	cmp	r2, r3
 8003056:	d103      	bne.n	8003060 <_ZN10RingBuffer10getReadIdxEv+0x64>
		empty = true;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	}
	return ret;
 8003060:	68fb      	ldr	r3, [r7, #12]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <_ZN10RingBuffer3getEv>:

char* RingBuffer::get() {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	int idx = getReadIdx();
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffc1 	bl	8002ffc <_ZN10RingBuffer10getReadIdxEv>
 800307a:	60f8      	str	r0, [r7, #12]
	if (idx >= 0) {
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db06      	blt.n	8003090 <_ZN10RingBuffer3getEv+0x24>
		return buffer[idx];
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2232      	movs	r2, #50	; 0x32
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	e002      	b.n	8003096 <_ZN10RingBuffer3getEv+0x2a>
	}
	return noop;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZN10RingBuffer7isEmptyEv>:

bool RingBuffer::isEmpty() {
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	return empty;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <_ZN10RingBuffer11enableWriteEb>:

void RingBuffer::enableWrite(bool enable) {
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	70fb      	strb	r3, [r7, #3]
	writeEnabled = enable;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <_ZN10RingBuffer14isWriteEnabledEv>:

bool RingBuffer::isWriteEnabled() {
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	return writeEnabled;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 33f1 	ldrb.w	r3, [r3, #1009]	; 0x3f1
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <_ZN13SerialReciverC1EP20__UART_HandleTypeDef>:
#include "SerialReciver.h"

#define WAIT_NEXT_BYTE_UART_TIME 10

SerialReciver::SerialReciver(UART_HandleTypeDef *_uart): uart(_uart) {}
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	711a      	strb	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	63da      	str	r2, [r3, #60]	; 0x3c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <_ZN13SerialReciver7getDataEPci>:

int SerialReciver::getData(char *data, int maxDataSize) {
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
	if(!hasData || HAL_GetTick() - lastReciveTime < WAIT_NEXT_BYTE_UART_TIME) {
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	791b      	ldrb	r3, [r3, #4]
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <_ZN13SerialReciver7getDataEPci+0x2a>
 8003134:	f001 fcb0 	bl	8004a98 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b09      	cmp	r3, #9
 8003142:	d801      	bhi.n	8003148 <_ZN13SerialReciver7getDataEPci+0x2e>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <_ZN13SerialReciver7getDataEPci+0x30>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <_ZN13SerialReciver7getDataEPci+0x38>
		return 0;
 800314e:	2300      	movs	r3, #0
 8003150:	e030      	b.n	80031b4 <_ZN13SerialReciver7getDataEPci+0x9a>
	}

	int size = idx == 0 ? BUFFER_SIZE : idx;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <_ZN13SerialReciver7getDataEPci+0x46>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	e000      	b.n	8003162 <_ZN13SerialReciver7getDataEPci+0x48>
 8003160:	2332      	movs	r3, #50	; 0x32
 8003162:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < size; i++) {
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	da1a      	bge.n	80031a6 <_ZN13SerialReciver7getDataEPci+0x8c>
		if (i < maxDataSize || maxDataSize == -1) {
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	db03      	blt.n	8003180 <_ZN13SerialReciver7getDataEPci+0x66>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d108      	bne.n	8003192 <_ZN13SerialReciver7getDataEPci+0x78>
			data[i] = buffer[i];
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4413      	add	r3, r2
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	440a      	add	r2, r1
 800318c:	3205      	adds	r2, #5
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	701a      	strb	r2, [r3, #0]
		}
		buffer[i] = '\0';
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4413      	add	r3, r2
 8003198:	3305      	adds	r3, #5
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++) {
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3301      	adds	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e7e0      	b.n	8003168 <_ZN13SerialReciver7getDataEPci+0x4e>
	}

	hasData = 0;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	711a      	strb	r2, [r3, #4]
	idx = 0;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	63da      	str	r2, [r3, #60]	; 0x3c
	return size;
 80031b2:	693b      	ldr	r3, [r7, #16]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <_ZN13SerialReciver22reciveInterruptHandlerEv>:

void SerialReciver::reciveInterruptHandler() {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	if((uart->Instance->SR & USART_SR_RXNE) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x38>
	{
		buffer[idx] = (uint8_t)(uart->Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	b2d1      	uxtb	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	460a      	mov	r2, r1
 80031f2:	715a      	strb	r2, [r3, #5]
	}
	//		if(sim[idx] == end){
	//			hasData = 1;
	//		}
	idx = idx == BUFFER_SIZE-1 ? 0 : idx + 1;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	2b31      	cmp	r3, #49	; 0x31
 80031fa:	d003      	beq.n	8003204 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x48>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	3301      	adds	r3, #1
 8003202:	e000      	b.n	8003206 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x4a>
 8003204:	2300      	movs	r3, #0
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	63d3      	str	r3, [r2, #60]	; 0x3c
	hasData=1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	711a      	strb	r2, [r3, #4]
	lastReciveTime = HAL_GetTick();
 8003210:	f001 fc42 	bl	8004a98 <HAL_GetTick>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	2b00      	cmp	r3, #0
 8003234:	db0c      	blt.n	8003250 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	4907      	ldr	r1, [pc, #28]	; (800325c <__NVIC_ClearPendingIRQ+0x38>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2001      	movs	r0, #1
 8003246:	fa00 f202 	lsl.w	r2, r0, r2
 800324a:	3360      	adds	r3, #96	; 0x60
 800324c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000e100 	.word	0xe000e100

08003260 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003264:	f3bf 8f4f 	dsb	sy
}
 8003268:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <__NVIC_SystemReset+0x24>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003272:	4904      	ldr	r1, [pc, #16]	; (8003284 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_SystemReset+0x28>)
 8003276:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003278:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800327a:	f3bf 8f4f 	dsb	sy
}
 800327e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <__NVIC_SystemReset+0x20>
 8003284:	e000ed00 	.word	0xe000ed00
 8003288:	05fa0004 	.word	0x05fa0004

0800328c <_ZN10RingBuffer11getItemSizeEv>:
	char* get();
	bool isEmpty();
	void enableWrite(bool enable);
	bool isWriteEnabled();

	static const int getItemSize() {
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
		return bufferItemSize;
 8003290:	2332      	movs	r3, #50	; 0x32
	}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <_ZN10RingBuffer10clearArrayEPci>:

	static void clearArray(char *str, int size) {
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < size; i++) {
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	da08      	bge.n	80032c2 <_ZN10RingBuffer10clearArrayEPci+0x28>
			str[i] = '\0';
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < size; i++) {
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3301      	adds	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e7f2      	b.n	80032a8 <_ZN10RingBuffer10clearArrayEPci+0xe>
		}
	}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80032d0:	f001 fb8a 	bl	80049e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80032d4:	f000 f85a 	bl	800338c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80032d8:	f000 fa10 	bl	80036fc <_ZL12MX_GPIO_Initv>
	MX_TIM4_Init();
 80032dc:	f000 f982 	bl	80035e4 <_ZL12MX_TIM4_Initv>
	MX_I2C2_Init();
 80032e0:	f000 f8ec 	bl	80034bc <_ZL12MX_I2C2_Initv>
	MX_TIM1_Init();
 80032e4:	f000 f91e 	bl	8003524 <_ZL12MX_TIM1_Initv>
	MX_I2C1_Init();
 80032e8:	f000 f8b4 	bl	8003454 <_ZL12MX_I2C1_Initv>
	MX_USART2_UART_Init();
 80032ec:	f000 f9d8 	bl	80036a0 <_ZL19MX_USART2_UART_Initv>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80032f0:	f000 f89b 	bl	800342a <_ZL12MX_NVIC_Initv>
	/* USER CODE BEGIN 2 */

	extDeviceCommandReciver.startTimer();
 80032f4:	481c      	ldr	r0, [pc, #112]	; (8003368 <main+0x9c>)
 80032f6:	f7ff fbb9 	bl	8002a6c <_ZN23ExtDeviceCommandReciver10startTimerEv>

	HAL_Delay(100);
 80032fa:	2064      	movs	r0, #100	; 0x64
 80032fc:	f001 fbd6 	bl	8004aac <HAL_Delay>

	inputDataBuffer.enableWrite(true);
 8003300:	2101      	movs	r1, #1
 8003302:	481a      	ldr	r0, [pc, #104]	; (800336c <main+0xa0>)
 8003304:	f7ff fed7 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>
	commandBuffer.enableWrite(androidConnected);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <main+0xa4>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	4819      	ldr	r0, [pc, #100]	; (8003374 <main+0xa8>)
 8003310:	f7ff fed1 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>
	infoBuffer.enableWrite(debug);
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <main+0xac>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	4818      	ldr	r0, [pc, #96]	; (800337c <main+0xb0>)
 800331c:	f7ff fecb 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>
	infoBuffer.add("[stm32] started");
 8003320:	4917      	ldr	r1, [pc, #92]	; (8003380 <main+0xb4>)
 8003322:	4816      	ldr	r0, [pc, #88]	; (800337c <main+0xb0>)
 8003324:	f7ff fde2 	bl	8002eec <_ZN10RingBuffer3addEPKc>

	resetAdauCmd();
 8003328:	f000 fee2 	bl	80040f0 <resetAdauCmd>

	if (UART_MODE) {
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // включить прерывания usart'a
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <main+0xb8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <main+0xb8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0220 	orr.w	r2, r2, #32
 800333a:	60da      	str	r2, [r3, #12]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		powerManager.powerProcessing();
 800333c:	4812      	ldr	r0, [pc, #72]	; (8003388 <main+0xbc>)
 800333e:	f7ff fc29 	bl	8002b94 <_ZN12PowerManager15powerProcessingEv>
		volumeProcessing();
 8003342:	f000 fce1 	bl	8003d08 <volumeProcessing>
		muteProcessing();
 8003346:	f000 ff37 	bl	80041b8 <muteProcessing>
		timeProcessing();
 800334a:	f000 fc99 	bl	8003c80 <timeProcessing>
		monitorProcessing();
 800334e:	f000 fdd3 	bl	8003ef8 <monitorProcessing>
		amplifierProcessing();
 8003352:	f000 fd7d 	bl	8003e50 <amplifierProcessing>
		executeInputCmd();
 8003356:	f000 fae5 	bl	8003924 <executeInputCmd>

		cmdInfoToBuffer();
 800335a:	f000 fee3 	bl	8004124 <cmdInfoToBuffer>
			}
			processI2C();
		}

		if (UART_MODE) {
			processUART();
 800335e:	f000 fbb9 	bl	8003ad4 <processUART>
		}

		checkConnection();
 8003362:	f000 fc55 	bl	8003c10 <checkConnection>
		powerManager.powerProcessing();
 8003366:	e7e9      	b.n	800333c <main+0x70>
 8003368:	200005bc 	.word	0x200005bc
 800336c:	20000ec0 	.word	0x20000ec0
 8003370:	2000047c 	.word	0x2000047c
 8003374:	20000a9c 	.word	0x20000a9c
 8003378:	200000b8 	.word	0x200000b8
 800337c:	20000678 	.word	0x20000678
 8003380:	0800dd1c 	.word	0x0800dd1c
 8003384:	200003fc 	.word	0x200003fc
 8003388:	200005f0 	.word	0x200005f0

0800338c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b090      	sub	sp, #64	; 0x40
 8003390:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003392:	f107 0318 	add.w	r3, r7, #24
 8003396:	2228      	movs	r2, #40	; 0x28
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f005 feaa 	bl	80090f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	60da      	str	r2, [r3, #12]
 80033ac:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80033b8:	2300      	movs	r3, #0
 80033ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033bc:	2301      	movs	r3, #1
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c0:	2302      	movs	r3, #2
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f004 f945 	bl	8007664 <HAL_RCC_OscConfig>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 80033ea:	f000 ffa7 	bl	800433c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033ee:	230f      	movs	r3, #15
 80033f0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f2:	2302      	movs	r3, #2
 80033f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f004 fbad 	bl	8007b68 <HAL_RCC_ClockConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 800341e:	f000 ff8d 	bl	800433c <Error_Handler>
	}
}
 8003422:	bf00      	nop
 8003424:	3740      	adds	r7, #64	; 0x40
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZL12MX_NVIC_Initv>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800342a:	b580      	push	{r7, lr}
 800342c:	af00      	add	r7, sp, #0
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	210f      	movs	r1, #15
 8003432:	2006      	movs	r0, #6
 8003434:	f001 fc59 	bl	8004cea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003438:	2006      	movs	r0, #6
 800343a:	f001 fc72 	bl	8004d22 <HAL_NVIC_EnableIRQ>
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	2017      	movs	r0, #23
 8003444:	f001 fc51 	bl	8004cea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003448:	2017      	movs	r0, #23
 800344a:	f001 fc6a 	bl	8004d22 <HAL_NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800345a:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <_ZL12MX_I2C1_Initv+0x60>)
 800345c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8003460:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <_ZL12MX_I2C1_Initv+0x64>)
 8003462:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 16;
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800346c:	2210      	movs	r2, #16
 800346e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8003472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003476:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003490:	4807      	ldr	r0, [pc, #28]	; (80034b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8003492:	f001 ff83 	bl	800539c <HAL_I2C_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 80034a6:	f000 ff49 	bl	800433c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200002c4 	.word	0x200002c4
 80034b4:	40005400 	.word	0x40005400
 80034b8:	000186a0 	.word	0x000186a0

080034bc <_ZL12MX_I2C2_Initv>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <_ZL12MX_I2C2_Initv+0x60>)
 80034c4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034c8:	4a15      	ldr	r2, [pc, #84]	; (8003520 <_ZL12MX_I2C2_Initv+0x64>)
 80034ca:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034de:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80034f8:	4807      	ldr	r0, [pc, #28]	; (8003518 <_ZL12MX_I2C2_Initv+0x5c>)
 80034fa:	f001 ff4f 	bl	800539c <HAL_I2C_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <_ZL12MX_I2C2_Initv+0x56>
		Error_Handler();
 800350e:	f000 ff15 	bl	800433c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000318 	.word	0x20000318
 800351c:	40005800 	.word	0x40005800
 8003520:	000186a0 	.word	0x000186a0

08003524 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800352a:	f107 0308 	add.w	r3, r7, #8
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003538:	463b      	mov	r3, r7
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003540:	4b26      	ldr	r3, [pc, #152]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 8003542:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <_ZL12MX_TIM1_Initv+0xbc>)
 8003544:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8003546:	4b25      	ldr	r3, [pc, #148]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 8003548:	2247      	movs	r2, #71	; 0x47
 800354a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 8003554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003558:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 8003562:	2200      	movs	r2, #0
 8003564:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800356c:	481b      	ldr	r0, [pc, #108]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 800356e:	f004 fc93 	bl	8007e98 <HAL_TIM_Base_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <_ZL12MX_TIM1_Initv+0x62>
		Error_Handler();
 8003582:	f000 fedb 	bl	800433c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800358a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800358c:	f107 0308 	add.w	r3, r7, #8
 8003590:	4619      	mov	r1, r3
 8003592:	4812      	ldr	r0, [pc, #72]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 8003594:	f004 fd22 	bl	8007fdc <HAL_TIM_ConfigClockSource>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <_ZL12MX_TIM1_Initv+0x88>
		Error_Handler();
 80035a8:	f000 fec8 	bl	800433c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035ac:	2320      	movs	r3, #32
 80035ae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80035b4:	463b      	mov	r3, r7
 80035b6:	4619      	mov	r1, r3
 80035b8:	4808      	ldr	r0, [pc, #32]	; (80035dc <_ZL12MX_TIM1_Initv+0xb8>)
 80035ba:	f004 fecb 	bl	8008354 <HAL_TIMEx_MasterConfigSynchronization>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <_ZL12MX_TIM1_Initv+0xae>
		Error_Handler();
 80035ce:	f000 feb5 	bl	800433c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000036c 	.word	0x2000036c
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80035ea:	f107 0308 	add.w	r3, r7, #8
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80035f8:	463b      	mov	r3, r7
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 8003602:	4a26      	ldr	r2, [pc, #152]	; (800369c <_ZL12MX_TIM4_Initv+0xb8>)
 8003604:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 36000 - 1;
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 8003608:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800360c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 8003616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003622:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8003628:	481b      	ldr	r0, [pc, #108]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 800362a:	f004 fc35 	bl	8007e98 <HAL_TIM_Base_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <_ZL12MX_TIM4_Initv+0x5e>
		Error_Handler();
 800363e:	f000 fe7d 	bl	800433c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003646:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	4619      	mov	r1, r3
 800364e:	4812      	ldr	r0, [pc, #72]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 8003650:	f004 fcc4 	bl	8007fdc <HAL_TIM_ConfigClockSource>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <_ZL12MX_TIM4_Initv+0x84>
		Error_Handler();
 8003664:	f000 fe6a 	bl	800433c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003668:	2320      	movs	r3, #32
 800366a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003670:	463b      	mov	r3, r7
 8003672:	4619      	mov	r1, r3
 8003674:	4808      	ldr	r0, [pc, #32]	; (8003698 <_ZL12MX_TIM4_Initv+0xb4>)
 8003676:	f004 fe6d 	bl	8008354 <HAL_TIMEx_MasterConfigSynchronization>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <_ZL12MX_TIM4_Initv+0xaa>
		Error_Handler();
 800368a:	f000 fe57 	bl	800433c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200003b4 	.word	0x200003b4
 800369c:	40000800 	.word	0x40000800

080036a0 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036a6:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80036a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036c6:	220c      	movs	r2, #12
 80036c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80036d6:	4807      	ldr	r0, [pc, #28]	; (80036f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80036d8:	f004 fe9a 	bl	8008410 <HAL_UART_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 80036ec:	f000 fe26 	bl	800433c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200003fc 	.word	0x200003fc
 80036f8:	40004400 	.word	0x40004400

080036fc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003702:	f107 0310 	add.w	r3, r7, #16
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003710:	4b62      	ldr	r3, [pc, #392]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4a61      	ldr	r2, [pc, #388]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 8003716:	f043 0310 	orr.w	r3, r3, #16
 800371a:	6193      	str	r3, [r2, #24]
 800371c:	4b5f      	ldr	r3, [pc, #380]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003728:	4b5c      	ldr	r3, [pc, #368]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	4a5b      	ldr	r2, [pc, #364]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 800372e:	f043 0320 	orr.w	r3, r3, #32
 8003732:	6193      	str	r3, [r2, #24]
 8003734:	4b59      	ldr	r3, [pc, #356]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003740:	4b56      	ldr	r3, [pc, #344]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	4a55      	ldr	r2, [pc, #340]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	6193      	str	r3, [r2, #24]
 800374c:	4b53      	ldr	r3, [pc, #332]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003758:	4b50      	ldr	r3, [pc, #320]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4a4f      	ldr	r2, [pc, #316]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 800375e:	f043 0308 	orr.w	r3, r3, #8
 8003762:	6193      	str	r3, [r2, #24]
 8003764:	4b4d      	ldr	r3, [pc, #308]	; (800389c <_ZL12MX_GPIO_Initv+0x1a0>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_Pin | MONITOR_OPEN_Pin, GPIO_PIN_RESET);
 8003770:	2200      	movs	r2, #0
 8003772:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003776:	484a      	ldr	r0, [pc, #296]	; (80038a0 <_ZL12MX_GPIO_Initv+0x1a4>)
 8003778:	f001 fdd5 	bl	8005326 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ADAU_RESET_Pin | POWER_RELAY_Pin, GPIO_PIN_SET);
 800377c:	2201      	movs	r2, #1
 800377e:	2111      	movs	r1, #17
 8003780:	4848      	ldr	r0, [pc, #288]	; (80038a4 <_ZL12MX_GPIO_Initv+0x1a8>)
 8003782:	f001 fdd0 	bl	8005326 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
 8003786:	2200      	movs	r2, #0
 8003788:	2120      	movs	r1, #32
 800378a:	4846      	ldr	r0, [pc, #280]	; (80038a4 <_ZL12MX_GPIO_Initv+0x1a8>)
 800378c:	f001 fdcb 	bl	8005326 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, MBUS_TX_Pin | I2C_EVENT_Pin, GPIO_PIN_RESET);
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003796:	4844      	ldr	r0, [pc, #272]	; (80038a8 <_ZL12MX_GPIO_Initv+0x1ac>)
 8003798:	f001 fdc5 	bl	8005326 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800379c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	2302      	movs	r3, #2
 80037ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80037ae:	f107 0310 	add.w	r3, r7, #16
 80037b2:	4619      	mov	r1, r3
 80037b4:	483a      	ldr	r0, [pc, #232]	; (80038a0 <_ZL12MX_GPIO_Initv+0x1a4>)
 80037b6:	f001 fb5f 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pin : MONITOR_OPEN_Pin */
	GPIO_InitStruct.Pin = MONITOR_OPEN_Pin;
 80037ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c0:	2301      	movs	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037c4:	2302      	movs	r3, #2
 80037c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2302      	movs	r3, #2
 80037ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MONITOR_OPEN_GPIO_Port, &GPIO_InitStruct);
 80037cc:	f107 0310 	add.w	r3, r7, #16
 80037d0:	4619      	mov	r1, r3
 80037d2:	4833      	ldr	r0, [pc, #204]	; (80038a0 <_ZL12MX_GPIO_Initv+0x1a4>)
 80037d4:	f001 fb50 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pin : ADAU_RESET_Pin */
	GPIO_InitStruct.Pin = ADAU_RESET_Pin;
 80037d8:	2301      	movs	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037dc:	2301      	movs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	2302      	movs	r3, #2
 80037e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ADAU_RESET_GPIO_Port, &GPIO_InitStruct);
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	4619      	mov	r1, r3
 80037ee:	482d      	ldr	r0, [pc, #180]	; (80038a4 <_ZL12MX_GPIO_Initv+0x1a8>)
 80037f0:	f001 fb42 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pins : AC_Pin DSP_DATA_Pin */
	GPIO_InitStruct.Pin = AC_Pin | DSP_DATA_Pin;
 80037f4:	2382      	movs	r3, #130	; 0x82
 80037f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037fc:	2302      	movs	r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4619      	mov	r1, r3
 8003806:	4827      	ldr	r0, [pc, #156]	; (80038a4 <_ZL12MX_GPIO_Initv+0x1a8>)
 8003808:	f001 fb36 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pins : POWER_RELAY_Pin AMPLIFIER_RELAY_Pin */
	GPIO_InitStruct.Pin = POWER_RELAY_Pin | AMPLIFIER_RELAY_Pin;
 800380c:	2330      	movs	r3, #48	; 0x30
 800380e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003810:	2301      	movs	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003814:	2302      	movs	r3, #2
 8003816:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2302      	movs	r3, #2
 800381a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381c:	f107 0310 	add.w	r3, r7, #16
 8003820:	4619      	mov	r1, r3
 8003822:	4820      	ldr	r0, [pc, #128]	; (80038a4 <_ZL12MX_GPIO_Initv+0x1a8>)
 8003824:	f001 fb28 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pin : DSP_CLOCK_Pin */
	GPIO_InitStruct.Pin = DSP_CLOCK_Pin;
 8003828:	2340      	movs	r3, #64	; 0x40
 800382a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800382c:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <_ZL12MX_GPIO_Initv+0x1b0>)
 800382e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003830:	2302      	movs	r3, #2
 8003832:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DSP_CLOCK_GPIO_Port, &GPIO_InitStruct);
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	4619      	mov	r1, r3
 800383a:	481a      	ldr	r0, [pc, #104]	; (80038a4 <_ZL12MX_GPIO_Initv+0x1a8>)
 800383c:	f001 fb1c 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pin : MBUS_RX_Pin */
	GPIO_InitStruct.Pin = MBUS_RX_Pin;
 8003840:	2301      	movs	r3, #1
 8003842:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003844:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003846:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003848:	2301      	movs	r3, #1
 800384a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MBUS_RX_GPIO_Port, &GPIO_InitStruct);
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	4619      	mov	r1, r3
 8003852:	4815      	ldr	r0, [pc, #84]	; (80038a8 <_ZL12MX_GPIO_Initv+0x1ac>)
 8003854:	f001 fb10 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pin : MBUS_TX_Pin */
	GPIO_InitStruct.Pin = MBUS_TX_Pin;
 8003858:	2302      	movs	r3, #2
 800385a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003860:	2302      	movs	r3, #2
 8003862:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003864:	2303      	movs	r3, #3
 8003866:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MBUS_TX_GPIO_Port, &GPIO_InitStruct);
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	4619      	mov	r1, r3
 800386e:	480e      	ldr	r0, [pc, #56]	; (80038a8 <_ZL12MX_GPIO_Initv+0x1ac>)
 8003870:	f001 fb02 	bl	8004e78 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C_EVENT_Pin */
	GPIO_InitStruct.Pin = I2C_EVENT_Pin;
 8003874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003878:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800387e:	2302      	movs	r3, #2
 8003880:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003882:	2301      	movs	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2C_EVENT_GPIO_Port, &GPIO_InitStruct);
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4619      	mov	r1, r3
 800388c:	4806      	ldr	r0, [pc, #24]	; (80038a8 <_ZL12MX_GPIO_Initv+0x1ac>)
 800388e:	f001 faf3 	bl	8004e78 <HAL_GPIO_Init>

}
 8003892:	bf00      	nop
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	40011000 	.word	0x40011000
 80038a4:	40010800 	.word	0x40010800
 80038a8:	40010c00 	.word	0x40010c00
 80038ac:	10110000 	.word	0x10110000
 80038b0:	10210000 	.word	0x10210000

080038b4 <HAL_I2C_ListenCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f001 ffdf 	bl	8005880 <HAL_I2C_EnableListen_IT>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]

}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	70fb      	strb	r3, [r7, #3]
 80038e8:	4613      	mov	r3, r2
 80038ea:	803b      	strh	r3, [r7, #0]
	UNUSED(AddrMatchCode);

	if (hi2c->Instance == I2C1) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0a      	ldr	r2, [pc, #40]	; (800391c <HAL_I2C_AddrCallback+0x40>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10d      	bne.n	8003912 <HAL_I2C_AddrCallback+0x36>
		switch (TransferDirection) {
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_I2C_AddrCallback+0x26>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d004      	beq.n	800390a <HAL_I2C_AddrCallback+0x2e>
		case I2C_DIRECTION_TRANSMIT:
			state = 2;
			break;
		};
	};
}
 8003900:	e007      	b.n	8003912 <HAL_I2C_AddrCallback+0x36>
			state = 1;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <HAL_I2C_AddrCallback+0x44>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
			break;
 8003908:	e003      	b.n	8003912 <HAL_I2C_AddrCallback+0x36>
			state = 2;
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_I2C_AddrCallback+0x44>)
 800390c:	2202      	movs	r2, #2
 800390e:	601a      	str	r2, [r3, #0]
			break;
 8003910:	bf00      	nop
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	40005400 	.word	0x40005400
 8003920:	20000480 	.word	0x20000480

08003924 <executeInputCmd>:

void setupReadFlagGPIO(bool enable) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void executeInputCmd() {
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
	if (!inputDataBuffer.isEmpty()) {
 800392a:	4850      	ldr	r0, [pc, #320]	; (8003a6c <executeInputCmd+0x148>)
 800392c:	f7ff fbb7 	bl	800309e <_ZN10RingBuffer7isEmptyEv>
 8003930:	4603      	mov	r3, r0
 8003932:	f083 0301 	eor.w	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8093 	beq.w	8003a64 <executeInputCmd+0x140>
		bool state = infoBuffer.isWriteEnabled();
 800393e:	484c      	ldr	r0, [pc, #304]	; (8003a70 <executeInputCmd+0x14c>)
 8003940:	f7ff fbc8 	bl	80030d4 <_ZN10RingBuffer14isWriteEnabledEv>
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
		infoBuffer.enableWrite(true);
 8003948:	2101      	movs	r1, #1
 800394a:	4849      	ldr	r0, [pc, #292]	; (8003a70 <executeInputCmd+0x14c>)
 800394c:	f7ff fbb3 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>

		char *buffItem = inputDataBuffer.get();
 8003950:	4846      	ldr	r0, [pc, #280]	; (8003a6c <executeInputCmd+0x148>)
 8003952:	f7ff fb8b 	bl	800306c <_ZN10RingBuffer3getEv>
 8003956:	6038      	str	r0, [r7, #0]
		if (strstr(buffItem, pong) != NULL || strstr(buffItem, connected) != NULL) {
 8003958:	4b46      	ldr	r3, [pc, #280]	; (8003a74 <executeInputCmd+0x150>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4619      	mov	r1, r3
 800395e:	6838      	ldr	r0, [r7, #0]
 8003960:	f006 fa96 	bl	8009e90 <strstr>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <executeInputCmd+0x54>
 800396a:	4943      	ldr	r1, [pc, #268]	; (8003a78 <executeInputCmd+0x154>)
 800396c:	6838      	ldr	r0, [r7, #0]
 800396e:	f006 fa8f 	bl	8009e90 <strstr>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01d      	beq.n	80039b4 <executeInputCmd+0x90>
			if (!androidConnected) {
 8003978:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <executeInputCmd+0x158>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	f083 0301 	eor.w	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d010      	beq.n	80039a8 <executeInputCmd+0x84>
				infoBuffer.add("[action] connected");
 8003986:	493e      	ldr	r1, [pc, #248]	; (8003a80 <executeInputCmd+0x15c>)
 8003988:	4839      	ldr	r0, [pc, #228]	; (8003a70 <executeInputCmd+0x14c>)
 800398a:	f7ff faaf 	bl	8002eec <_ZN10RingBuffer3addEPKc>
				androidConnected = true;
 800398e:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <executeInputCmd+0x158>)
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
				commandBuffer.enableWrite(true);
 8003994:	2101      	movs	r1, #1
 8003996:	483b      	ldr	r0, [pc, #236]	; (8003a84 <executeInputCmd+0x160>)
 8003998:	f7ff fb8d 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>
				if (playing) {
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <executeInputCmd+0x164>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <executeInputCmd+0x84>
					playTrack();
 80039a4:	f000 fb3e 	bl	8004024 <playTrack>
				}
			}
			lastPongTime = HAL_GetTick();
 80039a8:	f001 f876 	bl	8004a98 <HAL_GetTick>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <executeInputCmd+0x168>)
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e052      	b.n	8003a5a <executeInputCmd+0x136>
		} else if (strstr(buffItem, disconnected) != NULL) {
 80039b4:	4936      	ldr	r1, [pc, #216]	; (8003a90 <executeInputCmd+0x16c>)
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	f006 fa6a 	bl	8009e90 <strstr>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <executeInputCmd+0xb6>
			infoBuffer.add("[action] disconnected");
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <executeInputCmd+0x170>)
 80039c4:	482a      	ldr	r0, [pc, #168]	; (8003a70 <executeInputCmd+0x14c>)
 80039c6:	f7ff fa91 	bl	8002eec <_ZN10RingBuffer3addEPKc>
			androidConnected = false;
 80039ca:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <executeInputCmd+0x158>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
			commandBuffer.enableWrite(false);
 80039d0:	2100      	movs	r1, #0
 80039d2:	482c      	ldr	r0, [pc, #176]	; (8003a84 <executeInputCmd+0x160>)
 80039d4:	f7ff fb6f 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>
 80039d8:	e03f      	b.n	8003a5a <executeInputCmd+0x136>
		} else if (strstr(buffItem, debugCmd) != NULL) {
 80039da:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <executeInputCmd+0x174>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f006 fa55 	bl	8009e90 <strstr>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d017      	beq.n	8003a1c <executeInputCmd+0xf8>
			debug = !debug;
 80039ec:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <executeInputCmd+0x178>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <executeInputCmd+0x178>)
 80039f8:	701a      	strb	r2, [r3, #0]
			state = debug;
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <executeInputCmd+0x178>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
			if (debug) {
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <executeInputCmd+0x178>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <executeInputCmd+0xee>
				infoBuffer.add("[action] debug on");
 8003a08:	4925      	ldr	r1, [pc, #148]	; (8003aa0 <executeInputCmd+0x17c>)
 8003a0a:	4819      	ldr	r0, [pc, #100]	; (8003a70 <executeInputCmd+0x14c>)
 8003a0c:	f7ff fa6e 	bl	8002eec <_ZN10RingBuffer3addEPKc>
 8003a10:	e023      	b.n	8003a5a <executeInputCmd+0x136>
			} else {
				infoBuffer.add("[action] debug off");
 8003a12:	4924      	ldr	r1, [pc, #144]	; (8003aa4 <executeInputCmd+0x180>)
 8003a14:	4816      	ldr	r0, [pc, #88]	; (8003a70 <executeInputCmd+0x14c>)
 8003a16:	f7ff fa69 	bl	8002eec <_ZN10RingBuffer3addEPKc>
 8003a1a:	e01e      	b.n	8003a5a <executeInputCmd+0x136>
			}
		} else if (strstr(buffItem, adauResetCmd) != NULL) {
 8003a1c:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <executeInputCmd+0x184>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	f006 fa34 	bl	8009e90 <strstr>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <executeInputCmd+0x118>
			infoBuffer.add("[action] reset adau1701");
 8003a2e:	491f      	ldr	r1, [pc, #124]	; (8003aac <executeInputCmd+0x188>)
 8003a30:	480f      	ldr	r0, [pc, #60]	; (8003a70 <executeInputCmd+0x14c>)
 8003a32:	f7ff fa5b 	bl	8002eec <_ZN10RingBuffer3addEPKc>
			resetAdauCmd();
 8003a36:	f000 fb5b 	bl	80040f0 <resetAdauCmd>
 8003a3a:	e00e      	b.n	8003a5a <executeInputCmd+0x136>
		} else if (strstr(buffItem, stmResetCmd) != NULL) {
 8003a3c:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <executeInputCmd+0x18c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	6838      	ldr	r0, [r7, #0]
 8003a44:	f006 fa24 	bl	8009e90 <strstr>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <executeInputCmd+0x136>
			infoBuffer.add("[action] reset stm32");
 8003a4e:	4919      	ldr	r1, [pc, #100]	; (8003ab4 <executeInputCmd+0x190>)
 8003a50:	4807      	ldr	r0, [pc, #28]	; (8003a70 <executeInputCmd+0x14c>)
 8003a52:	f7ff fa4b 	bl	8002eec <_ZN10RingBuffer3addEPKc>
			NVIC_SystemReset();
 8003a56:	f7ff fc03 	bl	8003260 <__NVIC_SystemReset>
		}

		infoBuffer.enableWrite(state);
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4804      	ldr	r0, [pc, #16]	; (8003a70 <executeInputCmd+0x14c>)
 8003a60:	f7ff fb29 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>
	}

}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000ec0 	.word	0x20000ec0
 8003a70:	20000678 	.word	0x20000678
 8003a74:	200000b4 	.word	0x200000b4
 8003a78:	0800def4 	.word	0x0800def4
 8003a7c:	2000047c 	.word	0x2000047c
 8003a80:	0800dd2c 	.word	0x0800dd2c
 8003a84:	20000a9c 	.word	0x20000a9c
 8003a88:	20000472 	.word	0x20000472
 8003a8c:	20000478 	.word	0x20000478
 8003a90:	0800df20 	.word	0x0800df20
 8003a94:	0800dd40 	.word	0x0800dd40
 8003a98:	200000b0 	.word	0x200000b0
 8003a9c:	200000b8 	.word	0x200000b8
 8003aa0:	0800dd58 	.word	0x0800dd58
 8003aa4:	0800dd6c 	.word	0x0800dd6c
 8003aa8:	200000a8 	.word	0x200000a8
 8003aac:	0800dd80 	.word	0x0800dd80
 8003ab0:	200000ac 	.word	0x200000ac
 8003ab4:	0800dd98 	.word	0x0800dd98

08003ab8 <addToBuffer>:

void addToBuffer(char *str) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	infoBuffer.add(str);
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <addToBuffer+0x18>)
 8003ac4:	f7ff fa12 	bl	8002eec <_ZN10RingBuffer3addEPKc>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000678 	.word	0x20000678

08003ad4 <processUART>:
	default:
		;
	}
}

void processUART() {
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
	if (serialReciver.getData(tmp, RingBuffer::getItemSize())) {
 8003ada:	f7ff fbd7 	bl	800328c <_ZN10RingBuffer11getItemSizeEv>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4941      	ldr	r1, [pc, #260]	; (8003be8 <processUART+0x114>)
 8003ae4:	4841      	ldr	r0, [pc, #260]	; (8003bec <processUART+0x118>)
 8003ae6:	f7ff fb18 	bl	800311a <_ZN13SerialReciver7getDataEPci>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d019      	beq.n	8003b2e <processUART+0x5a>

//		HAL_UART_Transmit(&huart2, (uint8_t*) "DATA\n", 5, 3);
		bool state = infoBuffer.isWriteEnabled();
 8003afa:	483d      	ldr	r0, [pc, #244]	; (8003bf0 <processUART+0x11c>)
 8003afc:	f7ff faea 	bl	80030d4 <_ZN10RingBuffer14isWriteEnabledEv>
 8003b00:	4603      	mov	r3, r0
 8003b02:	71fb      	strb	r3, [r7, #7]
		infoBuffer.enableWrite(true);
 8003b04:	2101      	movs	r1, #1
 8003b06:	483a      	ldr	r0, [pc, #232]	; (8003bf0 <processUART+0x11c>)
 8003b08:	f7ff fad5 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>
		infoBuffer.add("Received");
 8003b0c:	4939      	ldr	r1, [pc, #228]	; (8003bf4 <processUART+0x120>)
 8003b0e:	4838      	ldr	r0, [pc, #224]	; (8003bf0 <processUART+0x11c>)
 8003b10:	f7ff f9ec 	bl	8002eec <_ZN10RingBuffer3addEPKc>
		infoBuffer.add(tmp);
 8003b14:	4934      	ldr	r1, [pc, #208]	; (8003be8 <processUART+0x114>)
 8003b16:	4836      	ldr	r0, [pc, #216]	; (8003bf0 <processUART+0x11c>)
 8003b18:	f7ff f9e8 	bl	8002eec <_ZN10RingBuffer3addEPKc>
		infoBuffer.enableWrite(state);
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4833      	ldr	r0, [pc, #204]	; (8003bf0 <processUART+0x11c>)
 8003b22:	f7ff fac8 	bl	80030b6 <_ZN10RingBuffer11enableWriteEb>

		inputDataBuffer.add(tmp);
 8003b26:	4930      	ldr	r1, [pc, #192]	; (8003be8 <processUART+0x114>)
 8003b28:	4833      	ldr	r0, [pc, #204]	; (8003bf8 <processUART+0x124>)
 8003b2a:	f7ff f9df 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	}

	if (!androidConnected) {
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <processUART+0x128>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f083 0301 	eor.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d021      	beq.n	8003b80 <processUART+0xac>
		if (HAL_GetTick() - lastPingTime > 2000) {
 8003b3c:	f000 ffac 	bl	8004a98 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <processUART+0x12c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b4c:	bf8c      	ite	hi
 8003b4e:	2301      	movhi	r3, #1
 8003b50:	2300      	movls	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d042      	beq.n	8003bde <processUART+0x10a>
			HAL_UART_Transmit(&huart2, (uint8_t*) ping, strlen(ping), 3);
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <processUART+0x130>)
 8003b5a:	681c      	ldr	r4, [r3, #0]
 8003b5c:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <processUART+0x130>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc faf5 	bl	8000150 <strlen>
 8003b66:	4603      	mov	r3, r0
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4826      	ldr	r0, [pc, #152]	; (8003c08 <processUART+0x134>)
 8003b70:	f004 fc9b 	bl	80084aa <HAL_UART_Transmit>
			lastPingTime = HAL_GetTick();
 8003b74:	f000 ff90 	bl	8004a98 <HAL_GetTick>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <processUART+0x12c>)
 8003b7c:	6013      	str	r3, [r2, #0]
		} else if (!infoBuffer.isEmpty()) {
			item = infoBuffer.get();
			HAL_UART_Transmit(&huart2, (uint8_t*) item, strlen(item), 3);
		}
	}
}
 8003b7e:	e02e      	b.n	8003bde <processUART+0x10a>
		if (!commandBuffer.isEmpty()) {
 8003b80:	4822      	ldr	r0, [pc, #136]	; (8003c0c <processUART+0x138>)
 8003b82:	f7ff fa8c 	bl	800309e <_ZN10RingBuffer7isEmptyEv>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f083 0301 	eor.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00e      	beq.n	8003bb0 <processUART+0xdc>
			item = commandBuffer.get();
 8003b92:	481e      	ldr	r0, [pc, #120]	; (8003c0c <processUART+0x138>)
 8003b94:	f7ff fa6a 	bl	800306c <_ZN10RingBuffer3getEv>
 8003b98:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) item, strlen(item), 3);
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f7fc fad8 	bl	8000150 <strlen>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	4817      	ldr	r0, [pc, #92]	; (8003c08 <processUART+0x134>)
 8003baa:	f004 fc7e 	bl	80084aa <HAL_UART_Transmit>
}
 8003bae:	e016      	b.n	8003bde <processUART+0x10a>
		} else if (!infoBuffer.isEmpty()) {
 8003bb0:	480f      	ldr	r0, [pc, #60]	; (8003bf0 <processUART+0x11c>)
 8003bb2:	f7ff fa74 	bl	800309e <_ZN10RingBuffer7isEmptyEv>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f083 0301 	eor.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <processUART+0x10a>
			item = infoBuffer.get();
 8003bc2:	480b      	ldr	r0, [pc, #44]	; (8003bf0 <processUART+0x11c>)
 8003bc4:	f7ff fa52 	bl	800306c <_ZN10RingBuffer3getEv>
 8003bc8:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) item, strlen(item), 3);
 8003bca:	6838      	ldr	r0, [r7, #0]
 8003bcc:	f7fc fac0 	bl	8000150 <strlen>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	480b      	ldr	r0, [pc, #44]	; (8003c08 <processUART+0x134>)
 8003bda:	f004 fc66 	bl	80084aa <HAL_UART_Transmit>
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd90      	pop	{r4, r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000440 	.word	0x20000440
 8003bec:	20000634 	.word	0x20000634
 8003bf0:	20000678 	.word	0x20000678
 8003bf4:	0800ddb0 	.word	0x0800ddb0
 8003bf8:	20000ec0 	.word	0x20000ec0
 8003bfc:	2000047c 	.word	0x2000047c
 8003c00:	20000474 	.word	0x20000474
 8003c04:	200000a4 	.word	0x200000a4
 8003c08:	200003fc 	.word	0x200003fc
 8003c0c:	20000a9c 	.word	0x20000a9c

08003c10 <checkConnection>:

void checkConnection() {
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
//				infoBuffer.add(ping);
//				lastPingTime = HAL_GetTick();
//			}
//		}
//	}
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <clearPendingInterrupt>:

void clearPendingInterrupt() {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
	EXTI->PR = EXTI_PR_PR0; //Сбрасываем флаг прерывания
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <clearPendingInterrupt+0x24>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8003c26:	2006      	movs	r0, #6
 8003c28:	f7ff fafc 	bl	8003224 <__NVIC_ClearPendingIRQ>
	EXTI->PR = EXTI_PR_PR9; //Сбрасываем флаг прерывания
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <clearPendingInterrupt+0x24>)
 8003c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c32:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8003c34:	2017      	movs	r0, #23
 8003c36:	f7ff faf5 	bl	8003224 <__NVIC_ClearPendingIRQ>
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40010400 	.word	0x40010400

08003c44 <dataRequestInterrupt>:

void dataRequestInterrupt() {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	dspCommandReciver.readPackage();
 8003c48:	4803      	ldr	r0, [pc, #12]	; (8003c58 <dataRequestInterrupt+0x14>)
 8003c4a:	f7fd fe43 	bl	80018d4 <_ZN17DspCommandReciver11readPackageEv>
	clearPendingInterrupt();
 8003c4e:	f7ff ffe5 	bl	8003c1c <clearPendingInterrupt>
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200004bc 	.word	0x200004bc

08003c5c <mBusRequestInterrupt>:

void mBusRequestInterrupt() {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	extDeviceCommandReciver.commandProcessing();
 8003c60:	4805      	ldr	r0, [pc, #20]	; (8003c78 <mBusRequestInterrupt+0x1c>)
 8003c62:	f7fe fb75 	bl	8002350 <_ZN23ExtDeviceCommandReciver17commandProcessingEv>
	sysTime = HAL_GetTick();
 8003c66:	f000 ff17 	bl	8004a98 <HAL_GetTick>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4a03      	ldr	r2, [pc, #12]	; (8003c7c <mBusRequestInterrupt+0x20>)
 8003c6e:	6013      	str	r3, [r2, #0]
	clearPendingInterrupt();
 8003c70:	f7ff ffd4 	bl	8003c1c <clearPendingInterrupt>
}
 8003c74:	bf00      	nop
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	200005bc 	.word	0x200005bc
 8003c7c:	20000484 	.word	0x20000484

08003c80 <timeProcessing>:

void timeProcessing() {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
	uint32_t newSysTime = HAL_GetTick();
 8003c86:	f000 ff07 	bl	8004a98 <HAL_GetTick>
 8003c8a:	6078      	str	r0, [r7, #4]
	if (newSysTime - sysTime > sendTimePeriod && extDeviceCommandReciver.isPlaying()) {
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <timeProcessing+0x74>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	1ad2      	subs	r2, r2, r3
 8003c94:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <timeProcessing+0x78>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d907      	bls.n	8003cac <timeProcessing+0x2c>
 8003c9c:	4817      	ldr	r0, [pc, #92]	; (8003cfc <timeProcessing+0x7c>)
 8003c9e:	f7fe fc8a 	bl	80025b6 <_ZN23ExtDeviceCommandReciver9isPlayingEv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <timeProcessing+0x2c>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <timeProcessing+0x2e>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01b      	beq.n	8003cea <timeProcessing+0x6a>
		sysTime = newSysTime;
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <timeProcessing+0x74>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6013      	str	r3, [r2, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003cb8:	2006      	movs	r0, #6
 8003cba:	f001 f840 	bl	8004d3e <HAL_NVIC_DisableIRQ>
		extDeviceCommandReciver.sendTime(abs(volumeLastValue), sendAdauLastStatus ? 1 : 2);
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <timeProcessing+0x80>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bfb8      	it	lt
 8003cc6:	425b      	neglt	r3, r3
 8003cc8:	b2d9      	uxtb	r1, r3
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <timeProcessing+0x84>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <timeProcessing+0x56>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <timeProcessing+0x58>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4808      	ldr	r0, [pc, #32]	; (8003cfc <timeProcessing+0x7c>)
 8003cdc:	f7fe fc24 	bl	8002528 <_ZN23ExtDeviceCommandReciver8sendTimeEhh>
		clearPendingInterrupt();
 8003ce0:	f7ff ff9c 	bl	8003c1c <clearPendingInterrupt>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ce4:	2006      	movs	r0, #6
 8003ce6:	f001 f81c 	bl	8004d22 <HAL_NVIC_EnableIRQ>
	}
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000484 	.word	0x20000484
 8003cf8:	200000bc 	.word	0x200000bc
 8003cfc:	200005bc 	.word	0x200005bc
 8003d00:	20000488 	.word	0x20000488
 8003d04:	2000048c 	.word	0x2000048c

08003d08 <volumeProcessing>:

void volumeProcessing() {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af04      	add	r7, sp, #16
	if (dspCommandReciver.isChanged()) {
 8003d0e:	4844      	ldr	r0, [pc, #272]	; (8003e20 <volumeProcessing+0x118>)
 8003d10:	f7fe f914 	bl	8001f3c <_ZN17DspCommandReciver9isChangedEv>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d07f      	beq.n	8003e1a <volumeProcessing+0x112>
		if (HAL_GetTick() - lastVolumeChanged < 50) {
 8003d1a:	f000 febd 	bl	8004a98 <HAL_GetTick>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a40      	ldr	r2, [pc, #256]	; (8003e24 <volumeProcessing+0x11c>)
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	2b31      	cmp	r3, #49	; 0x31
 8003d28:	bf94      	ite	ls
 8003d2a:	2301      	movls	r3, #1
 8003d2c:	2300      	movhi	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d16f      	bne.n	8003e14 <volumeProcessing+0x10c>
			return;
		}

		int8_t level1 = dspCommandReciver.getAbsoluteLevel(CH1);
 8003d34:	2100      	movs	r1, #0
 8003d36:	483a      	ldr	r0, [pc, #232]	; (8003e20 <volumeProcessing+0x118>)
 8003d38:	f7fe f890 	bl	8001e5c <_ZN17DspCommandReciver16getAbsoluteLevelEh>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
		int8_t level2 = dspCommandReciver.getAbsoluteLevel(CH2);
 8003d40:	2101      	movs	r1, #1
 8003d42:	4837      	ldr	r0, [pc, #220]	; (8003e20 <volumeProcessing+0x118>)
 8003d44:	f7fe f88a 	bl	8001e5c <_ZN17DspCommandReciver16getAbsoluteLevelEh>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	71bb      	strb	r3, [r7, #6]

//		char res[100];
		RingBuffer::clearArray(tmp, 50);
 8003d4c:	2132      	movs	r1, #50	; 0x32
 8003d4e:	4836      	ldr	r0, [pc, #216]	; (8003e28 <volumeProcessing+0x120>)
 8003d50:	f7ff faa3 	bl	800329a <_ZN10RingBuffer10clearArrayEPci>
		snprintf(tmp, 50, "%s%d%s%d", "[volume] changed (DB) CH1:", level1, " CH2:", level2);
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8003d5c:	9202      	str	r2, [sp, #8]
 8003d5e:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <volumeProcessing+0x124>)
 8003d60:	9201      	str	r2, [sp, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <volumeProcessing+0x128>)
 8003d66:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <volumeProcessing+0x12c>)
 8003d68:	2132      	movs	r1, #50	; 0x32
 8003d6a:	482f      	ldr	r0, [pc, #188]	; (8003e28 <volumeProcessing+0x120>)
 8003d6c:	f006 f83c 	bl	8009de8 <sniprintf>
		infoBuffer.add(tmp);
 8003d70:	492d      	ldr	r1, [pc, #180]	; (8003e28 <volumeProcessing+0x120>)
 8003d72:	4831      	ldr	r0, [pc, #196]	; (8003e38 <volumeProcessing+0x130>)
 8003d74:	f7ff f8ba 	bl	8002eec <_ZN10RingBuffer3addEPKc>

		bool connected = dsp.ping();
 8003d78:	4830      	ldr	r0, [pc, #192]	; (8003e3c <volumeProcessing+0x134>)
 8003d7a:	f7fd fa95 	bl	80012a8 <_ZN8SigmaDSP4pingEv>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
		if (!connected) {
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d020      	beq.n	8003dd0 <volumeProcessing+0xc8>
			for (int i = 0; i < 5 && !connected; i++) {
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	dc1b      	bgt.n	8003dd0 <volumeProcessing+0xc8>
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <volumeProcessing+0xc8>
				infoBuffer.add("[adau] reconnect");
 8003d9e:	4928      	ldr	r1, [pc, #160]	; (8003e40 <volumeProcessing+0x138>)
 8003da0:	4825      	ldr	r0, [pc, #148]	; (8003e38 <volumeProcessing+0x130>)
 8003da2:	f7ff f8a3 	bl	8002eec <_ZN10RingBuffer3addEPKc>
				HAL_I2C_DeInit(&hi2c2);
 8003da6:	4827      	ldr	r0, [pc, #156]	; (8003e44 <volumeProcessing+0x13c>)
 8003da8:	f001 fc3c 	bl	8005624 <HAL_I2C_DeInit>
				HAL_Delay(20);
 8003dac:	2014      	movs	r0, #20
 8003dae:	f000 fe7d 	bl	8004aac <HAL_Delay>
				HAL_I2C_Init(&hi2c2);
 8003db2:	4824      	ldr	r0, [pc, #144]	; (8003e44 <volumeProcessing+0x13c>)
 8003db4:	f001 faf2 	bl	800539c <HAL_I2C_Init>
				HAL_Delay(20);
 8003db8:	2014      	movs	r0, #20
 8003dba:	f000 fe77 	bl	8004aac <HAL_Delay>
				connected = dsp.ping();
 8003dbe:	481f      	ldr	r0, [pc, #124]	; (8003e3c <volumeProcessing+0x134>)
 8003dc0:	f7fd fa72 	bl	80012a8 <_ZN8SigmaDSP4pingEv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]
			for (int i = 0; i < 5 && !connected; i++) {
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	e7e0      	b.n	8003d92 <volumeProcessing+0x8a>
			}
		}

		dspCommandReciver.resetChangedFlag();
 8003dd0:	4813      	ldr	r0, [pc, #76]	; (8003e20 <volumeProcessing+0x118>)
 8003dd2:	f7fe f8bf 	bl	8001f54 <_ZN17DspCommandReciver16resetChangedFlagEv>

		volumeLastValue = level1;
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <volumeProcessing+0x140>)
 8003ddc:	6013      	str	r3, [r2, #0]
		sendAdauLastStatus = connected;
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <volumeProcessing+0x144>)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	7013      	strb	r3, [r2, #0]

		if (!connected) {
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d113      	bne.n	8003e18 <volumeProcessing+0x110>
			return;
		}
		HAL_Delay(20);
 8003df0:	2014      	movs	r0, #20
 8003df2:	f000 fe5b 	bl	8004aac <HAL_Delay>
		dsp.twoChannelGain(MOD_DIGITALINPUTGAIN_ALG0_GAIN1940ALGNS8_ADDR, level1, level2);
 8003df6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003dfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003dfe:	2108      	movs	r1, #8
 8003e00:	480e      	ldr	r0, [pc, #56]	; (8003e3c <volumeProcessing+0x134>)
 8003e02:	f7fd fb11 	bl	8001428 <_ZN8SigmaDSP14twoChannelGainEtii>
		lastVolumeChanged = HAL_GetTick();
 8003e06:	f000 fe47 	bl	8004a98 <HAL_GetTick>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <volumeProcessing+0x11c>)
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e002      	b.n	8003e1a <volumeProcessing+0x112>
			return;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <volumeProcessing+0x112>
			return;
 8003e18:	bf00      	nop
	}
}
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200004bc 	.word	0x200004bc
 8003e24:	20000498 	.word	0x20000498
 8003e28:	20000440 	.word	0x20000440
 8003e2c:	0800dde4 	.word	0x0800dde4
 8003e30:	0800ddbc 	.word	0x0800ddbc
 8003e34:	0800ddd8 	.word	0x0800ddd8
 8003e38:	20000678 	.word	0x20000678
 8003e3c:	200004a0 	.word	0x200004a0
 8003e40:	0800ddec 	.word	0x0800ddec
 8003e44:	20000318 	.word	0x20000318
 8003e48:	20000488 	.word	0x20000488
 8003e4c:	2000048c 	.word	0x2000048c

08003e50 <amplifierProcessing>:

void amplifierProcessing() {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
	if (amplifierReadyToStart) {
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <amplifierProcessing+0x88>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <amplifierProcessing+0x52>
		if (HAL_GetTick() - amplifierStartTime > amplifierStartTimePeriod && !HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
 8003e5c:	f000 fe1c 	bl	8004a98 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <amplifierProcessing+0x8c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <amplifierProcessing+0x90>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d908      	bls.n	8003e82 <amplifierProcessing+0x32>
 8003e70:	2120      	movs	r1, #32
 8003e72:	481c      	ldr	r0, [pc, #112]	; (8003ee4 <amplifierProcessing+0x94>)
 8003e74:	f001 fa40 	bl	80052f8 <HAL_GPIO_ReadPin>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <amplifierProcessing+0x32>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <amplifierProcessing+0x34>
 8003e82:	2300      	movs	r3, #0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d024      	beq.n	8003ed2 <amplifierProcessing+0x82>
			HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_SET);
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2120      	movs	r1, #32
 8003e8c:	4815      	ldr	r0, [pc, #84]	; (8003ee4 <amplifierProcessing+0x94>)
 8003e8e:	f001 fa4a 	bl	8005326 <HAL_GPIO_WritePin>
			amplifierStarted = true;
 8003e92:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <amplifierProcessing+0x98>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
			infoBuffer.add("[amplifier] power on");
 8003e98:	4914      	ldr	r1, [pc, #80]	; (8003eec <amplifierProcessing+0x9c>)
 8003e9a:	4815      	ldr	r0, [pc, #84]	; (8003ef0 <amplifierProcessing+0xa0>)
 8003e9c:	f7ff f826 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	} else if (HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
		HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
		amplifierStarted = false;
		infoBuffer.add("[amplifier] power off");
	}
}
 8003ea0:	e017      	b.n	8003ed2 <amplifierProcessing+0x82>
	} else if (HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	480f      	ldr	r0, [pc, #60]	; (8003ee4 <amplifierProcessing+0x94>)
 8003ea6:	f001 fa27 	bl	80052f8 <HAL_GPIO_ReadPin>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <amplifierProcessing+0x82>
		HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	4809      	ldr	r0, [pc, #36]	; (8003ee4 <amplifierProcessing+0x94>)
 8003ec0:	f001 fa31 	bl	8005326 <HAL_GPIO_WritePin>
		amplifierStarted = false;
 8003ec4:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <amplifierProcessing+0x98>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
		infoBuffer.add("[amplifier] power off");
 8003eca:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <amplifierProcessing+0xa4>)
 8003ecc:	4808      	ldr	r0, [pc, #32]	; (8003ef0 <amplifierProcessing+0xa0>)
 8003ece:	f7ff f80d 	bl	8002eec <_ZN10RingBuffer3addEPKc>
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000048d 	.word	0x2000048d
 8003edc:	20000490 	.word	0x20000490
 8003ee0:	200000c0 	.word	0x200000c0
 8003ee4:	40010800 	.word	0x40010800
 8003ee8:	2000048e 	.word	0x2000048e
 8003eec:	0800de00 	.word	0x0800de00
 8003ef0:	20000678 	.word	0x20000678
 8003ef4:	0800de18 	.word	0x0800de18

08003ef8 <monitorProcessing>:

void monitorProcessing() {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
	if (monitorOpen) {
 8003efc:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <monitorProcessing+0x70>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <monitorProcessing+0x3c>
		if (!HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
 8003f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f08:	4818      	ldr	r0, [pc, #96]	; (8003f6c <monitorProcessing+0x74>)
 8003f0a:	f001 f9f5 	bl	80052f8 <HAL_GPIO_ReadPin>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf0c      	ite	eq
 8003f14:	2301      	moveq	r3, #1
 8003f16:	2300      	movne	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d021      	beq.n	8003f62 <monitorProcessing+0x6a>
			HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_SET);
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f24:	4811      	ldr	r0, [pc, #68]	; (8003f6c <monitorProcessing+0x74>)
 8003f26:	f001 f9fe 	bl	8005326 <HAL_GPIO_WritePin>
			infoBuffer.add("[monitor] open");
 8003f2a:	4911      	ldr	r1, [pc, #68]	; (8003f70 <monitorProcessing+0x78>)
 8003f2c:	4811      	ldr	r0, [pc, #68]	; (8003f74 <monitorProcessing+0x7c>)
 8003f2e:	f7fe ffdd 	bl	8002eec <_ZN10RingBuffer3addEPKc>
		}
	} else if (HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
		HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_RESET);
		infoBuffer.add("[monitor] close");
	}
}
 8003f32:	e016      	b.n	8003f62 <monitorProcessing+0x6a>
	} else if (HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
 8003f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f38:	480c      	ldr	r0, [pc, #48]	; (8003f6c <monitorProcessing+0x74>)
 8003f3a:	f001 f9dd 	bl	80052f8 <HAL_GPIO_ReadPin>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <monitorProcessing+0x6a>
		HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_RESET);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f54:	4805      	ldr	r0, [pc, #20]	; (8003f6c <monitorProcessing+0x74>)
 8003f56:	f001 f9e6 	bl	8005326 <HAL_GPIO_WritePin>
		infoBuffer.add("[monitor] close");
 8003f5a:	4907      	ldr	r1, [pc, #28]	; (8003f78 <monitorProcessing+0x80>)
 8003f5c:	4805      	ldr	r0, [pc, #20]	; (8003f74 <monitorProcessing+0x7c>)
 8003f5e:	f7fe ffc5 	bl	8002eec <_ZN10RingBuffer3addEPKc>
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000494 	.word	0x20000494
 8003f6c:	40011000 	.word	0x40011000
 8003f70:	0800de30 	.word	0x0800de30
 8003f74:	20000678 	.word	0x20000678
 8003f78:	0800de40 	.word	0x0800de40

08003f7c <accOn>:

void accOn() {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
	//через 10 сек вкл усилитель и снять mute
	amplifierReadyToStart = true;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <accOn+0x20>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
	amplifierStartTime = HAL_GetTick();
 8003f86:	f000 fd87 	bl	8004a98 <HAL_GetTick>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <accOn+0x24>)
 8003f8e:	6013      	str	r3, [r2, #0]
	monitorOpen = true;
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <accOn+0x28>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000048d 	.word	0x2000048d
 8003fa0:	20000490 	.word	0x20000490
 8003fa4:	20000494 	.word	0x20000494

08003fa8 <accOff>:

void accOff() {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
	amplifierReadyToStart = false;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <accOff+0x28>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
	extDeviceCommandReciver.resetPlayingFlag();
 8003fb2:	4808      	ldr	r0, [pc, #32]	; (8003fd4 <accOff+0x2c>)
 8003fb4:	f7fe faf2 	bl	800259c <_ZN23ExtDeviceCommandReciver16resetPlayingFlagEv>

	if (androidConnected) {
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <accOff+0x30>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <accOff+0x24>
		commandBuffer.add(stop);
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <accOff+0x34>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4806      	ldr	r0, [pc, #24]	; (8003fe0 <accOff+0x38>)
 8003fc8:	f7fe ff90 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	}
//	android.stop();
}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	2000048d 	.word	0x2000048d
 8003fd4:	200005bc 	.word	0x200005bc
 8003fd8:	2000047c 	.word	0x2000047c
 8003fdc:	20000094 	.word	0x20000094
 8003fe0:	20000a9c 	.word	0x20000a9c

08003fe4 <waitOff>:

void waitOff() {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
	if (androidConnected) {
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <waitOff+0x24>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <waitOff+0x18>
		commandBuffer.add(shutdown);
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <waitOff+0x28>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4806      	ldr	r0, [pc, #24]	; (8004010 <waitOff+0x2c>)
 8003ff8:	f7fe ff78 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	}
	monitorOpen = false;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <waitOff+0x30>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
//	android.shutdown();
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	2000047c 	.word	0x2000047c
 800400c:	200000a0 	.word	0x200000a0
 8004010:	20000a9c 	.word	0x20000a9c
 8004014:	20000494 	.word	0x20000494

08004018 <off>:

void off() {
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <playTrack>:

void playTrack() {
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
	playing = true;
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <playTrack+0x24>)
 800402a:	2201      	movs	r2, #1
 800402c:	701a      	strb	r2, [r3, #0]
	if (androidConnected) {
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <playTrack+0x28>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <playTrack+0x1e>
		commandBuffer.add(play);
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <playTrack+0x2c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	4805      	ldr	r0, [pc, #20]	; (8004054 <playTrack+0x30>)
 800403e:	f7fe ff55 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	}
//	android.play();
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000472 	.word	0x20000472
 800404c:	2000047c 	.word	0x2000047c
 8004050:	20000090 	.word	0x20000090
 8004054:	20000a9c 	.word	0x20000a9c

08004058 <stopTrack>:

void stopTrack() {
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
	playing = false;
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <stopTrack+0x24>)
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
	if (androidConnected) {
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <stopTrack+0x28>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <stopTrack+0x1e>
		commandBuffer.add(stop);
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <stopTrack+0x2c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4619      	mov	r1, r3
 8004070:	4805      	ldr	r0, [pc, #20]	; (8004088 <stopTrack+0x30>)
 8004072:	f7fe ff3b 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	}
//	android.stop();
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000472 	.word	0x20000472
 8004080:	2000047c 	.word	0x2000047c
 8004084:	20000094 	.word	0x20000094
 8004088:	20000a9c 	.word	0x20000a9c

0800408c <nextTrack>:

void nextTrack() {
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
	if (androidConnected) {
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <nextTrack+0x1c>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <nextTrack+0x18>
		commandBuffer.add(next);
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <nextTrack+0x20>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	4804      	ldr	r0, [pc, #16]	; (80040b0 <nextTrack+0x24>)
 80040a0:	f7fe ff24 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	}
//	android.next();
}
 80040a4:	bf00      	nop
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	2000047c 	.word	0x2000047c
 80040ac:	20000098 	.word	0x20000098
 80040b0:	20000a9c 	.word	0x20000a9c

080040b4 <prevTrack>:

void prevTrack() {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	if (androidConnected) {
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <prevTrack+0x1c>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <prevTrack+0x18>
		commandBuffer.add(prev);
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <prevTrack+0x20>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4619      	mov	r1, r3
 80040c6:	4804      	ldr	r0, [pc, #16]	; (80040d8 <prevTrack+0x24>)
 80040c8:	f7fe ff10 	bl	8002eec <_ZN10RingBuffer3addEPKc>
	}
//	android.prev();
}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	2000047c 	.word	0x2000047c
 80040d4:	2000009c 	.word	0x2000009c
 80040d8:	20000a9c 	.word	0x20000a9c

080040dc <uartRequestInterrupt>:

void uartRequestInterrupt() {
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
	serialReciver.reciveInterruptHandler();
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <uartRequestInterrupt+0x10>)
 80040e2:	f7ff f86b 	bl	80031bc <_ZN13SerialReciver22reciveInterruptHandlerEv>
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000634 	.word	0x20000634

080040f0 <resetAdauCmd>:

void resetAdauCmd() {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	dsp.reset();
 80040f4:	4808      	ldr	r0, [pc, #32]	; (8004118 <resetAdauCmd+0x28>)
 80040f6:	f7fd f8a5 	bl	8001244 <_ZN8SigmaDSP5resetEv>
	dspCommandReciver.setChangedFlag();
 80040fa:	4808      	ldr	r0, [pc, #32]	; (800411c <resetAdauCmd+0x2c>)
 80040fc:	f7fd ff38 	bl	8001f70 <_ZN17DspCommandReciver14setChangedFlagEv>
	HAL_Delay(100);
 8004100:	2064      	movs	r0, #100	; 0x64
 8004102:	f000 fcd3 	bl	8004aac <HAL_Delay>
	lastVolumeChanged = HAL_GetTick();
 8004106:	f000 fcc7 	bl	8004a98 <HAL_GetTick>
 800410a:	4603      	mov	r3, r0
 800410c:	461a      	mov	r2, r3
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <resetAdauCmd+0x30>)
 8004110:	601a      	str	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200004a0 	.word	0x200004a0
 800411c:	200004bc 	.word	0x200004bc
 8004120:	20000498 	.word	0x20000498

08004124 <cmdInfoToBuffer>:

void cmdInfoToBuffer() {
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af06      	add	r7, sp, #24
	if (HAL_GetTick() - lastInfoSend < 30000) {
 800412a:	f000 fcb5 	bl	8004a98 <HAL_GetTick>
 800412e:	4603      	mov	r3, r0
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <cmdInfoToBuffer+0x70>)
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	f247 522f 	movw	r2, #29999	; 0x752f
 800413a:	4293      	cmp	r3, r2
 800413c:	bf94      	ite	ls
 800413e:	2301      	movls	r3, #1
 8004140:	2300      	movhi	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d121      	bne.n	800418c <cmdInfoToBuffer+0x68>
		return;
	}

//	char res[50];
	RingBuffer::clearArray(tmp, 50);
 8004148:	2132      	movs	r1, #50	; 0x32
 800414a:	4813      	ldr	r0, [pc, #76]	; (8004198 <cmdInfoToBuffer+0x74>)
 800414c:	f7ff f8a5 	bl	800329a <_ZN10RingBuffer10clearArrayEPci>
	snprintf(tmp, 50, "%s%s%s%s%s%s", "[Available commands] ", adauResetCmd, ", ", stmResetCmd, ", ", debugCmd);
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <cmdInfoToBuffer+0x78>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <cmdInfoToBuffer+0x7c>)
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	4912      	ldr	r1, [pc, #72]	; (80041a4 <cmdInfoToBuffer+0x80>)
 800415a:	6809      	ldr	r1, [r1, #0]
 800415c:	9104      	str	r1, [sp, #16]
 800415e:	4912      	ldr	r1, [pc, #72]	; (80041a8 <cmdInfoToBuffer+0x84>)
 8004160:	9103      	str	r1, [sp, #12]
 8004162:	9202      	str	r2, [sp, #8]
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <cmdInfoToBuffer+0x84>)
 8004166:	9201      	str	r2, [sp, #4]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	4b10      	ldr	r3, [pc, #64]	; (80041ac <cmdInfoToBuffer+0x88>)
 800416c:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <cmdInfoToBuffer+0x8c>)
 800416e:	2132      	movs	r1, #50	; 0x32
 8004170:	4809      	ldr	r0, [pc, #36]	; (8004198 <cmdInfoToBuffer+0x74>)
 8004172:	f005 fe39 	bl	8009de8 <sniprintf>
	infoBuffer.add(tmp);
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <cmdInfoToBuffer+0x74>)
 8004178:	480e      	ldr	r0, [pc, #56]	; (80041b4 <cmdInfoToBuffer+0x90>)
 800417a:	f7fe feb7 	bl	8002eec <_ZN10RingBuffer3addEPKc>

	lastInfoSend = HAL_GetTick();
 800417e:	f000 fc8b 	bl	8004a98 <HAL_GetTick>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	4b03      	ldr	r3, [pc, #12]	; (8004194 <cmdInfoToBuffer+0x70>)
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e000      	b.n	800418e <cmdInfoToBuffer+0x6a>
		return;
 800418c:	bf00      	nop
}
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	2000049c 	.word	0x2000049c
 8004198:	20000440 	.word	0x20000440
 800419c:	200000a8 	.word	0x200000a8
 80041a0:	200000ac 	.word	0x200000ac
 80041a4:	200000b0 	.word	0x200000b0
 80041a8:	0800de78 	.word	0x0800de78
 80041ac:	0800de50 	.word	0x0800de50
 80041b0:	0800de68 	.word	0x0800de68
 80041b4:	20000678 	.word	0x20000678

080041b8 <muteProcessing>:

void muteProcessing() {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	// если магнитола устанавливает уровень -94db и ниже, то это == общему mute
	if (volumeLastValue <= -94 || !amplifierStarted) {
 80041bc:	4b18      	ldr	r3, [pc, #96]	; (8004220 <muteProcessing+0x68>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f113 0f5d 	cmn.w	r3, #93	; 0x5d
 80041c4:	db06      	blt.n	80041d4 <muteProcessing+0x1c>
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <muteProcessing+0x6c>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f083 0301 	eor.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <muteProcessing+0x2a>
		muteRadioFunc(true);
 80041d4:	2001      	movs	r0, #1
 80041d6:	f000 f82d 	bl	8004234 <muteRadioFunc>
		muteAndroidFunc(true);
 80041da:	2001      	movs	r0, #1
 80041dc:	f000 f86c 	bl	80042b8 <muteAndroidFunc>
 80041e0:	e01b      	b.n	800421a <muteProcessing+0x62>
//			muteAndroidFunc(true);
//		}

		//режим с не отключаемым андроидом
		//если на чейнджер была команда плей, то выключим радио, иначе включим радио
		if (extDeviceCommandReciver.isPlaying()) {
 80041e2:	4811      	ldr	r0, [pc, #68]	; (8004228 <muteProcessing+0x70>)
 80041e4:	f7fe f9e7 	bl	80025b6 <_ZN23ExtDeviceCommandReciver9isPlayingEv>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <muteProcessing+0x3e>
			muteRadioFunc(true);
 80041ee:	2001      	movs	r0, #1
 80041f0:	f000 f820 	bl	8004234 <muteRadioFunc>
 80041f4:	e00d      	b.n	8004212 <muteProcessing+0x5a>
		} else {
			if (muteAndroid && muteRadio) {
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <muteProcessing+0x74>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d006      	beq.n	800420c <muteProcessing+0x54>
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <muteProcessing+0x78>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <muteProcessing+0x54>
				// если пришли сюда, то магнитола только включилась и везде mute, при этом уровень громкости не -94, усилители включены и к чейджеру не обращались
				muteRadio = true;
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <muteProcessing+0x78>)
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
			}
			muteRadioFunc(false);
 800420c:	2000      	movs	r0, #0
 800420e:	f000 f811 	bl	8004234 <muteRadioFunc>
		}
		// андроид включим всегда
		muteAndroidFunc(false);
 8004212:	2000      	movs	r0, #0
 8004214:	f000 f850 	bl	80042b8 <muteAndroidFunc>
	}
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000488 	.word	0x20000488
 8004224:	2000048e 	.word	0x2000048e
 8004228:	200005bc 	.word	0x200005bc
 800422c:	20000496 	.word	0x20000496
 8004230:	20000495 	.word	0x20000495

08004234 <muteRadioFunc>:

void muteRadioFunc(bool mute) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
	if (!muteRadio && mute) {
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <muteRadioFunc+0x70>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	f083 0301 	eor.w	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <muteRadioFunc+0x3a>
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <muteRadioFunc+0x3a>
		dsp.mute(MOD_MUTEANALOG_ALG0_MUTENOSLEWALG1MUTE_ADDR, true,
 8004252:	2302      	movs	r3, #2
 8004254:	2201      	movs	r2, #1
 8004256:	2104      	movs	r1, #4
 8004258:	4813      	ldr	r0, [pc, #76]	; (80042a8 <muteRadioFunc+0x74>)
 800425a:	f7fd f8ad 	bl	80013b8 <_ZN8SigmaDSP4muteEtbh>
		MOD_MUTEANALOG_COUNT);
		muteRadio = true;
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <muteRadioFunc+0x70>)
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
		infoBuffer.add("[volume] radio mute on");
 8004264:	4911      	ldr	r1, [pc, #68]	; (80042ac <muteRadioFunc+0x78>)
 8004266:	4812      	ldr	r0, [pc, #72]	; (80042b0 <muteRadioFunc+0x7c>)
 8004268:	f7fe fe40 	bl	8002eec <_ZN10RingBuffer3addEPKc>
		dsp.mute(MOD_MUTEANALOG_ALG0_MUTENOSLEWALG1MUTE_ADDR, false,
		MOD_MUTEANALOG_COUNT);
		muteRadio = false;
		infoBuffer.add("[volume] radio mute off");
	}
}
 800426c:	e016      	b.n	800429c <muteRadioFunc+0x68>
	} else if (muteRadio && !mute) {
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <muteRadioFunc+0x70>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d012      	beq.n	800429c <muteRadioFunc+0x68>
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	f083 0301 	eor.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00c      	beq.n	800429c <muteRadioFunc+0x68>
		dsp.mute(MOD_MUTEANALOG_ALG0_MUTENOSLEWALG1MUTE_ADDR, false,
 8004282:	2302      	movs	r3, #2
 8004284:	2200      	movs	r2, #0
 8004286:	2104      	movs	r1, #4
 8004288:	4807      	ldr	r0, [pc, #28]	; (80042a8 <muteRadioFunc+0x74>)
 800428a:	f7fd f895 	bl	80013b8 <_ZN8SigmaDSP4muteEtbh>
		muteRadio = false;
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <muteRadioFunc+0x70>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
		infoBuffer.add("[volume] radio mute off");
 8004294:	4907      	ldr	r1, [pc, #28]	; (80042b4 <muteRadioFunc+0x80>)
 8004296:	4806      	ldr	r0, [pc, #24]	; (80042b0 <muteRadioFunc+0x7c>)
 8004298:	f7fe fe28 	bl	8002eec <_ZN10RingBuffer3addEPKc>
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000495 	.word	0x20000495
 80042a8:	200004a0 	.word	0x200004a0
 80042ac:	0800de7c 	.word	0x0800de7c
 80042b0:	20000678 	.word	0x20000678
 80042b4:	0800de94 	.word	0x0800de94

080042b8 <muteAndroidFunc>:

void muteAndroidFunc(bool mute) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
	if (!muteAndroid && mute) {
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <muteAndroidFunc+0x70>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f083 0301 	eor.w	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <muteAndroidFunc+0x3a>
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <muteAndroidFunc+0x3a>
		dsp.mute(MOD_MUTEDIGITAL_ALG0_MUTENOSLEWALG3MUTE_ADDR, true,
 80042d6:	2302      	movs	r3, #2
 80042d8:	2201      	movs	r2, #1
 80042da:	2106      	movs	r1, #6
 80042dc:	4813      	ldr	r0, [pc, #76]	; (800432c <muteAndroidFunc+0x74>)
 80042de:	f7fd f86b 	bl	80013b8 <_ZN8SigmaDSP4muteEtbh>
		MOD_MUTEDIGITAL_COUNT);
		muteAndroid = true;
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <muteAndroidFunc+0x70>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
		infoBuffer.add("[volume] android mute on");
 80042e8:	4911      	ldr	r1, [pc, #68]	; (8004330 <muteAndroidFunc+0x78>)
 80042ea:	4812      	ldr	r0, [pc, #72]	; (8004334 <muteAndroidFunc+0x7c>)
 80042ec:	f7fe fdfe 	bl	8002eec <_ZN10RingBuffer3addEPKc>
		dsp.mute(MOD_MUTEDIGITAL_ALG0_MUTENOSLEWALG3MUTE_ADDR, false,
		MOD_MUTEDIGITAL_COUNT);
		muteAndroid = false;
		infoBuffer.add("[volume] android mute off");
	}
}
 80042f0:	e016      	b.n	8004320 <muteAndroidFunc+0x68>
	} else if (muteAndroid && !mute) {
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <muteAndroidFunc+0x70>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <muteAndroidFunc+0x68>
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	f083 0301 	eor.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <muteAndroidFunc+0x68>
		dsp.mute(MOD_MUTEDIGITAL_ALG0_MUTENOSLEWALG3MUTE_ADDR, false,
 8004306:	2302      	movs	r3, #2
 8004308:	2200      	movs	r2, #0
 800430a:	2106      	movs	r1, #6
 800430c:	4807      	ldr	r0, [pc, #28]	; (800432c <muteAndroidFunc+0x74>)
 800430e:	f7fd f853 	bl	80013b8 <_ZN8SigmaDSP4muteEtbh>
		muteAndroid = false;
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <muteAndroidFunc+0x70>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
		infoBuffer.add("[volume] android mute off");
 8004318:	4907      	ldr	r1, [pc, #28]	; (8004338 <muteAndroidFunc+0x80>)
 800431a:	4806      	ldr	r0, [pc, #24]	; (8004334 <muteAndroidFunc+0x7c>)
 800431c:	f7fe fde6 	bl	8002eec <_ZN10RingBuffer3addEPKc>
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000496 	.word	0x20000496
 800432c:	200004a0 	.word	0x200004a0
 8004330:	0800deac 	.word	0x0800deac
 8004334:	20000678 	.word	0x20000678
 8004338:	0800dec8 	.word	0x0800dec8

0800433c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <_Z41__static_initialization_and_destruction_0ii>:
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af08      	add	r7, sp, #32
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d159      	bne.n	800440c <_Z41__static_initialization_and_destruction_0ii+0xc4>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800435e:	4293      	cmp	r3, r2
 8004360:	d154      	bne.n	800440c <_Z41__static_initialization_and_destruction_0ii+0xc4>
SigmaDSP dsp(&hi2c2, DSP_I2C_ADDRESS, ADAU1701, GPIOA, ADAU_RESET_Pin, NULL, addToBuffer);
 8004362:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	2300      	movs	r3, #0
 8004368:	9302      	str	r3, [sp, #8]
 800436a:	2301      	movs	r3, #1
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	2268      	movs	r2, #104	; 0x68
 8004376:	4929      	ldr	r1, [pc, #164]	; (800441c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004378:	4829      	ldr	r0, [pc, #164]	; (8004420 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800437a:	f7fc ff3d 	bl	80011f8 <_ZN8SigmaDSPC1EP17I2C_HandleTypeDefhhP12GPIO_TypeDeftP20__UART_HandleTypeDefPFvPcE>
DspCommandReciver dspCommandReciver(GPIOA, DSP_CLOCK_Pin, GPIOA, DSP_DATA_Pin, NULL, addToBuffer);
 800437e:	4b25      	ldr	r3, [pc, #148]	; (8004414 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004380:	9302      	str	r3, [sp, #8]
 8004382:	2300      	movs	r3, #0
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	4b23      	ldr	r3, [pc, #140]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800438c:	2240      	movs	r2, #64	; 0x40
 800438e:	4922      	ldr	r1, [pc, #136]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004390:	4824      	ldr	r0, [pc, #144]	; (8004424 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004392:	f7fd f9c3 	bl	800171c <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvPcE>
ExtDeviceCommandReciver extDeviceCommandReciver(GPIOB, MBUS_RX_Pin, GPIOB, MBUS_TX_Pin, &htim1, NULL, playTrack, stopTrack, nextTrack, prevTrack, addToBuffer);
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004398:	9307      	str	r3, [sp, #28]
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800439c:	9306      	str	r3, [sp, #24]
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80043a0:	9305      	str	r3, [sp, #20]
 80043a2:	4b23      	ldr	r3, [pc, #140]	; (8004430 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	2300      	movs	r3, #0
 80043ac:	9302      	str	r3, [sp, #8]
 80043ae:	4b22      	ldr	r3, [pc, #136]	; (8004438 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	2302      	movs	r3, #2
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	4920      	ldr	r1, [pc, #128]	; (800443c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80043bc:	4820      	ldr	r0, [pc, #128]	; (8004440 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80043be:	f7fd fe0a 	bl	8001fd6 <_ZN23ExtDeviceCommandReciverC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefP20__UART_HandleTypeDefPFvvES7_S7_S7_PFvPcE>
PowerManager powerManager(GPIOA, AC_Pin, GPIOA, POWER_RELAY_Pin, NULL, accOn, accOff, waitOff, off, addToBuffer);
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80043c4:	9306      	str	r3, [sp, #24]
 80043c6:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80043c8:	9305      	str	r3, [sp, #20]
 80043ca:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80043cc:	9304      	str	r3, [sp, #16]
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80043d0:	9303      	str	r3, [sp, #12]
 80043d2:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80043d4:	9302      	str	r3, [sp, #8]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	2310      	movs	r3, #16
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80043e0:	2202      	movs	r2, #2
 80043e2:	490d      	ldr	r1, [pc, #52]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80043e4:	481b      	ldr	r0, [pc, #108]	; (8004454 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80043e6:	f7fe fb95 	bl	8002b14 <_ZN12PowerManagerC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvvES5_S5_S5_PFvPcE>
SerialReciver serialReciver(&huart2);
 80043ea:	491b      	ldr	r1, [pc, #108]	; (8004458 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80043ec:	481b      	ldr	r0, [pc, #108]	; (800445c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80043ee:	f7fe fe7d 	bl	80030ec <_ZN13SerialReciverC1EP20__UART_HandleTypeDef>
Serial serial(&huart2);
 80043f2:	4919      	ldr	r1, [pc, #100]	; (8004458 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80043f4:	481a      	ldr	r0, [pc, #104]	; (8004460 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80043f6:	f7fe fb7f 	bl	8002af8 <_ZN6SerialC1EP20__UART_HandleTypeDef>
RingBuffer infoBuffer;
 80043fa:	481a      	ldr	r0, [pc, #104]	; (8004464 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80043fc:	f7fe fd4c 	bl	8002e98 <_ZN10RingBufferC1Ev>
RingBuffer commandBuffer;
 8004400:	4819      	ldr	r0, [pc, #100]	; (8004468 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8004402:	f7fe fd49 	bl	8002e98 <_ZN10RingBufferC1Ev>
RingBuffer inputDataBuffer;
 8004406:	4819      	ldr	r0, [pc, #100]	; (800446c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004408:	f7fe fd46 	bl	8002e98 <_ZN10RingBufferC1Ev>
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	08003ab9 	.word	0x08003ab9
 8004418:	40010800 	.word	0x40010800
 800441c:	20000318 	.word	0x20000318
 8004420:	200004a0 	.word	0x200004a0
 8004424:	200004bc 	.word	0x200004bc
 8004428:	080040b5 	.word	0x080040b5
 800442c:	0800408d 	.word	0x0800408d
 8004430:	08004059 	.word	0x08004059
 8004434:	08004025 	.word	0x08004025
 8004438:	2000036c 	.word	0x2000036c
 800443c:	40010c00 	.word	0x40010c00
 8004440:	200005bc 	.word	0x200005bc
 8004444:	08004019 	.word	0x08004019
 8004448:	08003fe5 	.word	0x08003fe5
 800444c:	08003fa9 	.word	0x08003fa9
 8004450:	08003f7d 	.word	0x08003f7d
 8004454:	200005f0 	.word	0x200005f0
 8004458:	200003fc 	.word	0x200003fc
 800445c:	20000634 	.word	0x20000634
 8004460:	20000674 	.word	0x20000674
 8004464:	20000678 	.word	0x20000678
 8004468:	20000a9c 	.word	0x20000a9c
 800446c:	20000ec0 	.word	0x20000ec0

08004470 <_GLOBAL__sub_I_hi2c1>:
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
 8004474:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004478:	2001      	movs	r0, #1
 800447a:	f7ff ff65 	bl	8004348 <_Z41__static_initialization_and_destruction_0ii>
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_MspInit+0x5c>)
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_MspInit+0x5c>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6193      	str	r3, [r2, #24]
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_MspInit+0x5c>)
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_MspInit+0x5c>)
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HAL_MspInit+0x5c>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	61d3      	str	r3, [r2, #28]
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_MspInit+0x5c>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_MspInit+0x60>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_MspInit+0x60>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40010000 	.word	0x40010000

080044e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	f107 0318 	add.w	r3, r7, #24
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a33      	ldr	r2, [pc, #204]	; (80045cc <HAL_I2C_MspInit+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d134      	bne.n	800456e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	4a31      	ldr	r2, [pc, #196]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 800450a:	f043 0308 	orr.w	r3, r3, #8
 800450e:	6193      	str	r3, [r2, #24]
 8004510:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800451c:	23c0      	movs	r3, #192	; 0xc0
 800451e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004520:	2312      	movs	r3, #18
 8004522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004524:	2303      	movs	r3, #3
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004528:	f107 0318 	add.w	r3, r7, #24
 800452c:	4619      	mov	r1, r3
 800452e:	4829      	ldr	r0, [pc, #164]	; (80045d4 <HAL_I2C_MspInit+0xf0>)
 8004530:	f000 fca2 	bl	8004e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004534:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	4a25      	ldr	r2, [pc, #148]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 800453a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800453e:	61d3      	str	r3, [r2, #28]
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 14, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	210e      	movs	r1, #14
 8004550:	201f      	movs	r0, #31
 8004552:	f000 fbca 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004556:	201f      	movs	r0, #31
 8004558:	f000 fbe3 	bl	8004d22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 14, 0);
 800455c:	2200      	movs	r2, #0
 800455e:	210e      	movs	r1, #14
 8004560:	2020      	movs	r0, #32
 8004562:	f000 fbc2 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004566:	2020      	movs	r0, #32
 8004568:	f000 fbdb 	bl	8004d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800456c:	e029      	b.n	80045c2 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <HAL_I2C_MspInit+0xf4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d124      	bne.n	80045c2 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 800457e:	f043 0308 	orr.w	r3, r3, #8
 8004582:	6193      	str	r3, [r2, #24]
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADAU_SCL_Pin|ADAU_SDA_Pin;
 8004590:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004596:	2312      	movs	r3, #18
 8004598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800459a:	2303      	movs	r3, #3
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459e:	f107 0318 	add.w	r3, r7, #24
 80045a2:	4619      	mov	r1, r3
 80045a4:	480b      	ldr	r0, [pc, #44]	; (80045d4 <HAL_I2C_MspInit+0xf0>)
 80045a6:	f000 fc67 	bl	8004e78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 80045b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045b4:	61d3      	str	r3, [r2, #28]
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_I2C_MspInit+0xec>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
}
 80045c2:	bf00      	nop
 80045c4:	3728      	adds	r7, #40	; 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40005400 	.word	0x40005400
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40010c00 	.word	0x40010c00
 80045d8:	40005800 	.word	0x40005800

080045dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_I2C_MspDeInit+0x70>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d114      	bne.n	8004618 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80045ee:	4b18      	ldr	r3, [pc, #96]	; (8004650 <HAL_I2C_MspDeInit+0x74>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4a17      	ldr	r2, [pc, #92]	; (8004650 <HAL_I2C_MspDeInit+0x74>)
 80045f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045f8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80045fa:	2140      	movs	r1, #64	; 0x40
 80045fc:	4815      	ldr	r0, [pc, #84]	; (8004654 <HAL_I2C_MspDeInit+0x78>)
 80045fe:	f000 fdbf 	bl	8005180 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	4813      	ldr	r0, [pc, #76]	; (8004654 <HAL_I2C_MspDeInit+0x78>)
 8004606:	f000 fdbb 	bl	8005180 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800460a:	201f      	movs	r0, #31
 800460c:	f000 fb97 	bl	8004d3e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004610:	2020      	movs	r0, #32
 8004612:	f000 fb94 	bl	8004d3e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8004616:	e014      	b.n	8004642 <HAL_I2C_MspDeInit+0x66>
  else if(hi2c->Instance==I2C2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <HAL_I2C_MspDeInit+0x7c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10f      	bne.n	8004642 <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_I2C_MspDeInit+0x74>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <HAL_I2C_MspDeInit+0x74>)
 8004628:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800462c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(ADAU_SCL_GPIO_Port, ADAU_SCL_Pin);
 800462e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004632:	4808      	ldr	r0, [pc, #32]	; (8004654 <HAL_I2C_MspDeInit+0x78>)
 8004634:	f000 fda4 	bl	8005180 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(ADAU_SDA_GPIO_Port, ADAU_SDA_Pin);
 8004638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800463c:	4805      	ldr	r0, [pc, #20]	; (8004654 <HAL_I2C_MspDeInit+0x78>)
 800463e:	f000 fd9f 	bl	8005180 <HAL_GPIO_DeInit>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40005400 	.word	0x40005400
 8004650:	40021000 	.word	0x40021000
 8004654:	40010c00 	.word	0x40010c00
 8004658:	40005800 	.word	0x40005800

0800465c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <HAL_TIM_Base_MspInit+0x58>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10c      	bne.n	8004688 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_TIM_Base_MspInit+0x5c>)
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <HAL_TIM_Base_MspInit+0x5c>)
 8004674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004678:	6193      	str	r3, [r2, #24]
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <HAL_TIM_Base_MspInit+0x5c>)
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004686:	e010      	b.n	80046aa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0b      	ldr	r2, [pc, #44]	; (80046bc <HAL_TIM_Base_MspInit+0x60>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10b      	bne.n	80046aa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_TIM_Base_MspInit+0x5c>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <HAL_TIM_Base_MspInit+0x5c>)
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	61d3      	str	r3, [r2, #28]
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_TIM_Base_MspInit+0x5c>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40000800 	.word	0x40000800

080046c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_UART_MspInit+0x98>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d137      	bne.n	8004750 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_UART_MspInit+0x9c>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_UART_MspInit+0x9c>)
 80046e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ea:	61d3      	str	r3, [r2, #28]
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_UART_MspInit+0x9c>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_UART_MspInit+0x9c>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	4a17      	ldr	r2, [pc, #92]	; (800475c <HAL_UART_MspInit+0x9c>)
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	6193      	str	r3, [r2, #24]
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_UART_MspInit+0x9c>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004710:	2304      	movs	r3, #4
 8004712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004718:	2303      	movs	r3, #3
 800471a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	4619      	mov	r1, r3
 8004722:	480f      	ldr	r0, [pc, #60]	; (8004760 <HAL_UART_MspInit+0xa0>)
 8004724:	f000 fba8 	bl	8004e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004728:	2308      	movs	r3, #8
 800472a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004734:	f107 0310 	add.w	r3, r7, #16
 8004738:	4619      	mov	r1, r3
 800473a:	4809      	ldr	r0, [pc, #36]	; (8004760 <HAL_UART_MspInit+0xa0>)
 800473c:	f000 fb9c 	bl	8004e78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004740:	2200      	movs	r2, #0
 8004742:	2100      	movs	r1, #0
 8004744:	2026      	movs	r0, #38	; 0x26
 8004746:	f000 fad0 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800474a:	2026      	movs	r0, #38	; 0x26
 800474c:	f000 fae9 	bl	8004d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004750:	bf00      	nop
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40004400 	.word	0x40004400
 800475c:	40021000 	.word	0x40021000
 8004760:	40010800 	.word	0x40010800

08004764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004774:	e7fe      	b.n	8004774 <HardFault_Handler+0x4>

08004776 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800477a:	e7fe      	b.n	800477a <MemManage_Handler+0x4>

0800477c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004780:	e7fe      	b.n	8004780 <BusFault_Handler+0x4>

08004782 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004786:	e7fe      	b.n	8004786 <UsageFault_Handler+0x4>

08004788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047b0:	f000 f960 	bl	8004a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	mBusRequestInterrupt();
 80047bc:	f7ff fa4e 	bl	8003c5c <mBusRequestInterrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MBUS_RX_Pin);
 80047c0:	2001      	movs	r0, #1
 80047c2:	f000 fdc9 	bl	8005358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}

080047ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataRequestInterrupt();
 80047ce:	f7ff fa39 	bl	8003c44 <dataRequestInterrupt>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSP_CLOCK_Pin);
 80047d2:	2040      	movs	r0, #64	; 0x40
 80047d4:	f000 fdc0 	bl	8005358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <I2C1_EV_IRQHandler+0x10>)
 80047e2:	f001 f882 	bl	80058ea <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	200002c4 	.word	0x200002c4

080047f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <I2C1_ER_IRQHandler+0x10>)
 80047f6:	f001 f9e9 	bl	8005bcc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200002c4 	.word	0x200002c4

08004804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uartRequestInterrupt();
 8004808:	f7ff fc68 	bl	80040dc <uartRequestInterrupt>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}

08004810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
	return 1;
 8004814:	2301      	movs	r3, #1
}
 8004816:	4618      	mov	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <_kill>:

int _kill(int pid, int sig)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004828:	f004 fc2c 	bl	8009084 <__errno>
 800482c:	4603      	mov	r3, r0
 800482e:	2216      	movs	r2, #22
 8004830:	601a      	str	r2, [r3, #0]
	return -1;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_exit>:

void _exit (int status)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004846:	f04f 31ff 	mov.w	r1, #4294967295
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ffe7 	bl	800481e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004850:	e7fe      	b.n	8004850 <_exit+0x12>

08004852 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e00a      	b.n	800487a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004864:	f3af 8000 	nop.w
 8004868:	4601      	mov	r1, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	60ba      	str	r2, [r7, #8]
 8004870:	b2ca      	uxtb	r2, r1
 8004872:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3301      	adds	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	dbf0      	blt.n	8004864 <_read+0x12>
	}

return len;
 8004882:	687b      	ldr	r3, [r7, #4]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e009      	b.n	80048b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	60ba      	str	r2, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3301      	adds	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	dbf1      	blt.n	800489e <_write+0x12>
	}
	return len;
 80048ba:	687b      	ldr	r3, [r7, #4]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <_close>:

int _close(int file)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	return -1;
 80048cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048ea:	605a      	str	r2, [r3, #4]
	return 0;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <_isatty>:

int _isatty(int file)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	return 1;
 8004900:	2301      	movs	r3, #1
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	return 0;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <_sbrk+0x5c>)
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <_sbrk+0x60>)
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <_sbrk+0x64>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <_sbrk+0x64>)
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <_sbrk+0x68>)
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <_sbrk+0x64>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d207      	bcs.n	8004964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004954:	f004 fb96 	bl	8009084 <__errno>
 8004958:	4603      	mov	r3, r0
 800495a:	220c      	movs	r2, #12
 800495c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	e009      	b.n	8004978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <_sbrk+0x64>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <_sbrk+0x64>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <_sbrk+0x64>)
 8004974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004976:	68fb      	ldr	r3, [r7, #12]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20005000 	.word	0x20005000
 8004984:	00000400 	.word	0x00000400
 8004988:	200012e4 	.word	0x200012e4
 800498c:	20001300 	.word	0x20001300

08004990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800499c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800499e:	e003      	b.n	80049a8 <LoopCopyDataInit>

080049a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80049a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80049a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80049a6:	3104      	adds	r1, #4

080049a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80049a8:	480a      	ldr	r0, [pc, #40]	; (80049d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80049ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80049ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80049b0:	d3f6      	bcc.n	80049a0 <CopyDataInit>
  ldr r2, =_sbss
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80049b4:	e002      	b.n	80049bc <LoopFillZerobss>

080049b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80049b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80049b8:	f842 3b04 	str.w	r3, [r2], #4

080049bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80049be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80049c0:	d3f9      	bcc.n	80049b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80049c2:	f7ff ffe5 	bl	8004990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049c6:	f004 fb63 	bl	8009090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049ca:	f7fe fc7f 	bl	80032cc <main>
  bx lr
 80049ce:	4770      	bx	lr
  ldr r3, =_sidata
 80049d0:	0800e428 	.word	0x0800e428
  ldr r0, =_sdata
 80049d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80049d8:	200002a4 	.word	0x200002a4
  ldr r2, =_sbss
 80049dc:	200002a4 	.word	0x200002a4
  ldr r3, = _ebss
 80049e0:	200012fc 	.word	0x200012fc

080049e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049e4:	e7fe      	b.n	80049e4 <ADC1_2_IRQHandler>
	...

080049e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <HAL_Init+0x28>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a07      	ldr	r2, [pc, #28]	; (8004a10 <HAL_Init+0x28>)
 80049f2:	f043 0310 	orr.w	r3, r3, #16
 80049f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049f8:	2003      	movs	r0, #3
 80049fa:	f000 f96b 	bl	8004cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049fe:	2000      	movs	r0, #0
 8004a00:	f000 f808 	bl	8004a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a04:	f7ff fd3c 	bl	8004480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40022000 	.word	0x40022000

08004a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a1c:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <HAL_InitTick+0x54>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_InitTick+0x58>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f991 	bl	8004d5a <HAL_SYSTICK_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e00e      	b.n	8004a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b0f      	cmp	r3, #15
 8004a46:	d80a      	bhi.n	8004a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	f000 f94b 	bl	8004cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a54:	4a06      	ldr	r2, [pc, #24]	; (8004a70 <HAL_InitTick+0x5c>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e000      	b.n	8004a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	200000c4 	.word	0x200000c4
 8004a6c:	200000cc 	.word	0x200000cc
 8004a70:	200000c8 	.word	0x200000c8

08004a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_IncTick+0x1c>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_IncTick+0x20>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4413      	add	r3, r2
 8004a84:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <HAL_IncTick+0x20>)
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	200000cc 	.word	0x200000cc
 8004a94:	200012e8 	.word	0x200012e8

08004a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a9c:	4b02      	ldr	r3, [pc, #8]	; (8004aa8 <HAL_GetTick+0x10>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	200012e8 	.word	0x200012e8

08004aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ab4:	f7ff fff0 	bl	8004a98 <HAL_GetTick>
 8004ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d005      	beq.n	8004ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_Delay+0x44>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ad2:	bf00      	nop
 8004ad4:	f7ff ffe0 	bl	8004a98 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d8f7      	bhi.n	8004ad4 <HAL_Delay+0x28>
  {
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200000cc 	.word	0x200000cc

08004af4 <__NVIC_SetPriorityGrouping>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <__NVIC_SetPriorityGrouping+0x44>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b10:	4013      	ands	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b26:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <__NVIC_SetPriorityGrouping+0x44>)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	60d3      	str	r3, [r2, #12]
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <__NVIC_GetPriorityGrouping>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b40:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <__NVIC_GetPriorityGrouping+0x18>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	0a1b      	lsrs	r3, r3, #8
 8004b46:	f003 0307 	and.w	r3, r3, #7
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <__NVIC_EnableIRQ>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db0b      	blt.n	8004b82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	f003 021f 	and.w	r2, r3, #31
 8004b70:	4906      	ldr	r1, [pc, #24]	; (8004b8c <__NVIC_EnableIRQ+0x34>)
 8004b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2001      	movs	r0, #1
 8004b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	e000e100 	.word	0xe000e100

08004b90 <__NVIC_DisableIRQ>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	db12      	blt.n	8004bc8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	f003 021f 	and.w	r2, r3, #31
 8004ba8:	490a      	ldr	r1, [pc, #40]	; (8004bd4 <__NVIC_DisableIRQ+0x44>)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb6:	3320      	adds	r3, #32
 8004bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bbc:	f3bf 8f4f 	dsb	sy
}
 8004bc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bc2:	f3bf 8f6f 	isb	sy
}
 8004bc6:	bf00      	nop
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	e000e100 	.word	0xe000e100

08004bd8 <__NVIC_SetPriority>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	6039      	str	r1, [r7, #0]
 8004be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db0a      	blt.n	8004c02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	490c      	ldr	r1, [pc, #48]	; (8004c24 <__NVIC_SetPriority+0x4c>)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	0112      	lsls	r2, r2, #4
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c00:	e00a      	b.n	8004c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4908      	ldr	r1, [pc, #32]	; (8004c28 <__NVIC_SetPriority+0x50>)
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	3b04      	subs	r3, #4
 8004c10:	0112      	lsls	r2, r2, #4
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	440b      	add	r3, r1
 8004c16:	761a      	strb	r2, [r3, #24]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000e100 	.word	0xe000e100
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <NVIC_EncodePriority>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b089      	sub	sp, #36	; 0x24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f1c3 0307 	rsb	r3, r3, #7
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	bf28      	it	cs
 8004c4a:	2304      	movcs	r3, #4
 8004c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3304      	adds	r3, #4
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d902      	bls.n	8004c5c <NVIC_EncodePriority+0x30>
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3b03      	subs	r3, #3
 8004c5a:	e000      	b.n	8004c5e <NVIC_EncodePriority+0x32>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	401a      	ands	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c74:	f04f 31ff 	mov.w	r1, #4294967295
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	43d9      	mvns	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c84:	4313      	orrs	r3, r2
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3724      	adds	r7, #36	; 0x24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca0:	d301      	bcc.n	8004ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e00f      	b.n	8004cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <SysTick_Config+0x40>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cae:	210f      	movs	r1, #15
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	f7ff ff90 	bl	8004bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <SysTick_Config+0x40>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cbe:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <SysTick_Config+0x40>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010

08004cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff09 	bl	8004af4 <__NVIC_SetPriorityGrouping>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cfc:	f7ff ff1e 	bl	8004b3c <__NVIC_GetPriorityGrouping>
 8004d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	6978      	ldr	r0, [r7, #20]
 8004d08:	f7ff ff90 	bl	8004c2c <NVIC_EncodePriority>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff5f 	bl	8004bd8 <__NVIC_SetPriority>
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff11 	bl	8004b58 <__NVIC_EnableIRQ>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	4603      	mov	r3, r0
 8004d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff1f 	bl	8004b90 <__NVIC_DisableIRQ>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ff94 	bl	8004c90 <SysTick_Config>
 8004d68:	4603      	mov	r3, r0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d005      	beq.n	8004d96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	e051      	b.n	8004e3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 020e 	bic.w	r2, r2, #14
 8004da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <HAL_DMA_Abort_IT+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d029      	beq.n	8004e14 <HAL_DMA_Abort_IT+0xa0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a20      	ldr	r2, [pc, #128]	; (8004e48 <HAL_DMA_Abort_IT+0xd4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d022      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x9c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_DMA_Abort_IT+0xd8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d01a      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x96>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <HAL_DMA_Abort_IT+0xdc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d012      	beq.n	8004e04 <HAL_DMA_Abort_IT+0x90>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <HAL_DMA_Abort_IT+0xe0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00a      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x8a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <HAL_DMA_Abort_IT+0xe4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d102      	bne.n	8004df8 <HAL_DMA_Abort_IT+0x84>
 8004df2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004df6:	e00e      	b.n	8004e16 <HAL_DMA_Abort_IT+0xa2>
 8004df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dfc:	e00b      	b.n	8004e16 <HAL_DMA_Abort_IT+0xa2>
 8004dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e02:	e008      	b.n	8004e16 <HAL_DMA_Abort_IT+0xa2>
 8004e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e08:	e005      	b.n	8004e16 <HAL_DMA_Abort_IT+0xa2>
 8004e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e0e:	e002      	b.n	8004e16 <HAL_DMA_Abort_IT+0xa2>
 8004e10:	2310      	movs	r3, #16
 8004e12:	e000      	b.n	8004e16 <HAL_DMA_Abort_IT+0xa2>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <HAL_DMA_Abort_IT+0xe8>)
 8004e18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
    } 
  }
  return status;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40020008 	.word	0x40020008
 8004e48:	4002001c 	.word	0x4002001c
 8004e4c:	40020030 	.word	0x40020030
 8004e50:	40020044 	.word	0x40020044
 8004e54:	40020058 	.word	0x40020058
 8004e58:	4002006c 	.word	0x4002006c
 8004e5c:	40020000 	.word	0x40020000

08004e60 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b08b      	sub	sp, #44	; 0x2c
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e82:	2300      	movs	r3, #0
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e86:	2300      	movs	r3, #0
 8004e88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e8a:	e169      	b.n	8005160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	f040 8158 	bne.w	800515a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4a9a      	ldr	r2, [pc, #616]	; (8005118 <HAL_GPIO_Init+0x2a0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d05e      	beq.n	8004f72 <HAL_GPIO_Init+0xfa>
 8004eb4:	4a98      	ldr	r2, [pc, #608]	; (8005118 <HAL_GPIO_Init+0x2a0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d875      	bhi.n	8004fa6 <HAL_GPIO_Init+0x12e>
 8004eba:	4a98      	ldr	r2, [pc, #608]	; (800511c <HAL_GPIO_Init+0x2a4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d058      	beq.n	8004f72 <HAL_GPIO_Init+0xfa>
 8004ec0:	4a96      	ldr	r2, [pc, #600]	; (800511c <HAL_GPIO_Init+0x2a4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d86f      	bhi.n	8004fa6 <HAL_GPIO_Init+0x12e>
 8004ec6:	4a96      	ldr	r2, [pc, #600]	; (8005120 <HAL_GPIO_Init+0x2a8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d052      	beq.n	8004f72 <HAL_GPIO_Init+0xfa>
 8004ecc:	4a94      	ldr	r2, [pc, #592]	; (8005120 <HAL_GPIO_Init+0x2a8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d869      	bhi.n	8004fa6 <HAL_GPIO_Init+0x12e>
 8004ed2:	4a94      	ldr	r2, [pc, #592]	; (8005124 <HAL_GPIO_Init+0x2ac>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d04c      	beq.n	8004f72 <HAL_GPIO_Init+0xfa>
 8004ed8:	4a92      	ldr	r2, [pc, #584]	; (8005124 <HAL_GPIO_Init+0x2ac>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d863      	bhi.n	8004fa6 <HAL_GPIO_Init+0x12e>
 8004ede:	4a92      	ldr	r2, [pc, #584]	; (8005128 <HAL_GPIO_Init+0x2b0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d046      	beq.n	8004f72 <HAL_GPIO_Init+0xfa>
 8004ee4:	4a90      	ldr	r2, [pc, #576]	; (8005128 <HAL_GPIO_Init+0x2b0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d85d      	bhi.n	8004fa6 <HAL_GPIO_Init+0x12e>
 8004eea:	2b12      	cmp	r3, #18
 8004eec:	d82a      	bhi.n	8004f44 <HAL_GPIO_Init+0xcc>
 8004eee:	2b12      	cmp	r3, #18
 8004ef0:	d859      	bhi.n	8004fa6 <HAL_GPIO_Init+0x12e>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <HAL_GPIO_Init+0x80>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f73 	.word	0x08004f73
 8004efc:	08004f4d 	.word	0x08004f4d
 8004f00:	08004f5f 	.word	0x08004f5f
 8004f04:	08004fa1 	.word	0x08004fa1
 8004f08:	08004fa7 	.word	0x08004fa7
 8004f0c:	08004fa7 	.word	0x08004fa7
 8004f10:	08004fa7 	.word	0x08004fa7
 8004f14:	08004fa7 	.word	0x08004fa7
 8004f18:	08004fa7 	.word	0x08004fa7
 8004f1c:	08004fa7 	.word	0x08004fa7
 8004f20:	08004fa7 	.word	0x08004fa7
 8004f24:	08004fa7 	.word	0x08004fa7
 8004f28:	08004fa7 	.word	0x08004fa7
 8004f2c:	08004fa7 	.word	0x08004fa7
 8004f30:	08004fa7 	.word	0x08004fa7
 8004f34:	08004fa7 	.word	0x08004fa7
 8004f38:	08004fa7 	.word	0x08004fa7
 8004f3c:	08004f55 	.word	0x08004f55
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	4a79      	ldr	r2, [pc, #484]	; (800512c <HAL_GPIO_Init+0x2b4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f4a:	e02c      	b.n	8004fa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	623b      	str	r3, [r7, #32]
          break;
 8004f52:	e029      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	623b      	str	r3, [r7, #32]
          break;
 8004f5c:	e024      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	3308      	adds	r3, #8
 8004f64:	623b      	str	r3, [r7, #32]
          break;
 8004f66:	e01f      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	623b      	str	r3, [r7, #32]
          break;
 8004f70:	e01a      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	623b      	str	r3, [r7, #32]
          break;
 8004f7e:	e013      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d105      	bne.n	8004f94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f88:	2308      	movs	r3, #8
 8004f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	611a      	str	r2, [r3, #16]
          break;
 8004f92:	e009      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f94:	2308      	movs	r3, #8
 8004f96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	615a      	str	r2, [r3, #20]
          break;
 8004f9e:	e003      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	623b      	str	r3, [r7, #32]
          break;
 8004fa4:	e000      	b.n	8004fa8 <HAL_GPIO_Init+0x130>
          break;
 8004fa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2bff      	cmp	r3, #255	; 0xff
 8004fac:	d801      	bhi.n	8004fb2 <HAL_GPIO_Init+0x13a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	e001      	b.n	8004fb6 <HAL_GPIO_Init+0x13e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2bff      	cmp	r3, #255	; 0xff
 8004fbc:	d802      	bhi.n	8004fc4 <HAL_GPIO_Init+0x14c>
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	e002      	b.n	8004fca <HAL_GPIO_Init+0x152>
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	3b08      	subs	r3, #8
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	210f      	movs	r1, #15
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	401a      	ands	r2, r3
 8004fdc:	6a39      	ldr	r1, [r7, #32]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80b1 	beq.w	800515a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ff8:	4b4d      	ldr	r3, [pc, #308]	; (8005130 <HAL_GPIO_Init+0x2b8>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4a4c      	ldr	r2, [pc, #304]	; (8005130 <HAL_GPIO_Init+0x2b8>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6193      	str	r3, [r2, #24]
 8005004:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <HAL_GPIO_Init+0x2b8>)
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005010:	4a48      	ldr	r2, [pc, #288]	; (8005134 <HAL_GPIO_Init+0x2bc>)
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	3302      	adds	r3, #2
 8005018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	220f      	movs	r2, #15
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a40      	ldr	r2, [pc, #256]	; (8005138 <HAL_GPIO_Init+0x2c0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_GPIO_Init+0x1ec>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a3f      	ldr	r2, [pc, #252]	; (800513c <HAL_GPIO_Init+0x2c4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00d      	beq.n	8005060 <HAL_GPIO_Init+0x1e8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3e      	ldr	r2, [pc, #248]	; (8005140 <HAL_GPIO_Init+0x2c8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <HAL_GPIO_Init+0x1e4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3d      	ldr	r2, [pc, #244]	; (8005144 <HAL_GPIO_Init+0x2cc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <HAL_GPIO_Init+0x1e0>
 8005054:	2303      	movs	r3, #3
 8005056:	e006      	b.n	8005066 <HAL_GPIO_Init+0x1ee>
 8005058:	2304      	movs	r3, #4
 800505a:	e004      	b.n	8005066 <HAL_GPIO_Init+0x1ee>
 800505c:	2302      	movs	r3, #2
 800505e:	e002      	b.n	8005066 <HAL_GPIO_Init+0x1ee>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_GPIO_Init+0x1ee>
 8005064:	2300      	movs	r3, #0
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	f002 0203 	and.w	r2, r2, #3
 800506c:	0092      	lsls	r2, r2, #2
 800506e:	4093      	lsls	r3, r2
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005076:	492f      	ldr	r1, [pc, #188]	; (8005134 <HAL_GPIO_Init+0x2bc>)
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	3302      	adds	r3, #2
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d006      	beq.n	800509e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005090:	4b2d      	ldr	r3, [pc, #180]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	492c      	ldr	r1, [pc, #176]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]
 800509c:	e006      	b.n	80050ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800509e:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	4928      	ldr	r1, [pc, #160]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d006      	beq.n	80050c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050b8:	4b23      	ldr	r3, [pc, #140]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	4922      	ldr	r1, [pc, #136]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]
 80050c4:	e006      	b.n	80050d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050c6:	4b20      	ldr	r3, [pc, #128]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	491e      	ldr	r1, [pc, #120]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d006      	beq.n	80050ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	4918      	ldr	r1, [pc, #96]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]
 80050ec:	e006      	b.n	80050fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	4914      	ldr	r1, [pc, #80]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d021      	beq.n	800514c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	490e      	ldr	r1, [pc, #56]	; (8005148 <HAL_GPIO_Init+0x2d0>)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	60cb      	str	r3, [r1, #12]
 8005114:	e021      	b.n	800515a <HAL_GPIO_Init+0x2e2>
 8005116:	bf00      	nop
 8005118:	10320000 	.word	0x10320000
 800511c:	10310000 	.word	0x10310000
 8005120:	10220000 	.word	0x10220000
 8005124:	10210000 	.word	0x10210000
 8005128:	10120000 	.word	0x10120000
 800512c:	10110000 	.word	0x10110000
 8005130:	40021000 	.word	0x40021000
 8005134:	40010000 	.word	0x40010000
 8005138:	40010800 	.word	0x40010800
 800513c:	40010c00 	.word	0x40010c00
 8005140:	40011000 	.word	0x40011000
 8005144:	40011400 	.word	0x40011400
 8005148:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_GPIO_Init+0x304>)
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	43db      	mvns	r3, r3
 8005154:	4909      	ldr	r1, [pc, #36]	; (800517c <HAL_GPIO_Init+0x304>)
 8005156:	4013      	ands	r3, r2
 8005158:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	3301      	adds	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	fa22 f303 	lsr.w	r3, r2, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	f47f ae8e 	bne.w	8004e8c <HAL_GPIO_Init+0x14>
  }
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	372c      	adds	r7, #44	; 0x2c
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	40010400 	.word	0x40010400

08005180 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005180:	b480      	push	{r7}
 8005182:	b089      	sub	sp, #36	; 0x24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800518e:	e09a      	b.n	80052c6 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005190:	2201      	movs	r2, #1
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 808d 	beq.w	80052c0 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80051a6:	4a4e      	ldr	r2, [pc, #312]	; (80052e0 <HAL_GPIO_DeInit+0x160>)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	3302      	adds	r3, #2
 80051ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	220f      	movs	r2, #15
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4013      	ands	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a46      	ldr	r2, [pc, #280]	; (80052e4 <HAL_GPIO_DeInit+0x164>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <HAL_GPIO_DeInit+0x78>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a45      	ldr	r2, [pc, #276]	; (80052e8 <HAL_GPIO_DeInit+0x168>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00d      	beq.n	80051f4 <HAL_GPIO_DeInit+0x74>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a44      	ldr	r2, [pc, #272]	; (80052ec <HAL_GPIO_DeInit+0x16c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <HAL_GPIO_DeInit+0x70>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a43      	ldr	r2, [pc, #268]	; (80052f0 <HAL_GPIO_DeInit+0x170>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d101      	bne.n	80051ec <HAL_GPIO_DeInit+0x6c>
 80051e8:	2303      	movs	r3, #3
 80051ea:	e006      	b.n	80051fa <HAL_GPIO_DeInit+0x7a>
 80051ec:	2304      	movs	r3, #4
 80051ee:	e004      	b.n	80051fa <HAL_GPIO_DeInit+0x7a>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e002      	b.n	80051fa <HAL_GPIO_DeInit+0x7a>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <HAL_GPIO_DeInit+0x7a>
 80051f8:	2300      	movs	r3, #0
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	f002 0203 	and.w	r2, r2, #3
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	4093      	lsls	r3, r2
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	429a      	cmp	r2, r3
 8005208:	d132      	bne.n	8005270 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	220f      	movs	r2, #15
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800521a:	4a31      	ldr	r2, [pc, #196]	; (80052e0 <HAL_GPIO_DeInit+0x160>)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	3302      	adds	r3, #2
 8005222:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	43da      	mvns	r2, r3
 800522a:	482d      	ldr	r0, [pc, #180]	; (80052e0 <HAL_GPIO_DeInit+0x160>)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	089b      	lsrs	r3, r3, #2
 8005230:	400a      	ands	r2, r1
 8005232:	3302      	adds	r3, #2
 8005234:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005238:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	43db      	mvns	r3, r3
 8005240:	492c      	ldr	r1, [pc, #176]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 8005242:	4013      	ands	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005246:	4b2b      	ldr	r3, [pc, #172]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	43db      	mvns	r3, r3
 800524e:	4929      	ldr	r1, [pc, #164]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 8005250:	4013      	ands	r3, r2
 8005252:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	43db      	mvns	r3, r3
 800525c:	4925      	ldr	r1, [pc, #148]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 800525e:	4013      	ands	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005262:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	43db      	mvns	r3, r3
 800526a:	4922      	ldr	r1, [pc, #136]	; (80052f4 <HAL_GPIO_DeInit+0x174>)
 800526c:	4013      	ands	r3, r2
 800526e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2bff      	cmp	r3, #255	; 0xff
 8005274:	d801      	bhi.n	800527a <HAL_GPIO_DeInit+0xfa>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	e001      	b.n	800527e <HAL_GPIO_DeInit+0xfe>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2bff      	cmp	r3, #255	; 0xff
 8005284:	d802      	bhi.n	800528c <HAL_GPIO_DeInit+0x10c>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	e002      	b.n	8005292 <HAL_GPIO_DeInit+0x112>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3b08      	subs	r3, #8
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	210f      	movs	r1, #15
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	2104      	movs	r1, #4
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
    }

    position++;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	3301      	adds	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	fa22 f303 	lsr.w	r3, r2, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f47f af5e 	bne.w	8005190 <HAL_GPIO_DeInit+0x10>
  }
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	3724      	adds	r7, #36	; 0x24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40010800 	.word	0x40010800
 80052e8:	40010c00 	.word	0x40010c00
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40011400 	.word	0x40011400
 80052f4:	40010400 	.word	0x40010400

080052f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	e001      	b.n	800531a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr

08005326 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	807b      	strh	r3, [r7, #2]
 8005332:	4613      	mov	r3, r2
 8005334:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005336:	787b      	ldrb	r3, [r7, #1]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800533c:	887a      	ldrh	r2, [r7, #2]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005342:	e003      	b.n	800534c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005344:	887b      	ldrh	r3, [r7, #2]
 8005346:	041a      	lsls	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	611a      	str	r2, [r3, #16]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
	...

08005358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d006      	beq.n	800537c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800536e:	4a05      	ldr	r2, [pc, #20]	; (8005384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f806 	bl	8005388 <HAL_GPIO_EXTI_Callback>
  }
}
 800537c:	bf00      	nop
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40010400 	.word	0x40010400

08005388 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e12b      	b.n	8005606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff f88e 	bl	80044e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2224      	movs	r2, #36	; 0x24
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005400:	f002 fd04 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 8005404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4a81      	ldr	r2, [pc, #516]	; (8005610 <HAL_I2C_Init+0x274>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d807      	bhi.n	8005420 <HAL_I2C_Init+0x84>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a80      	ldr	r2, [pc, #512]	; (8005614 <HAL_I2C_Init+0x278>)
 8005414:	4293      	cmp	r3, r2
 8005416:	bf94      	ite	ls
 8005418:	2301      	movls	r3, #1
 800541a:	2300      	movhi	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e006      	b.n	800542e <HAL_I2C_Init+0x92>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a7d      	ldr	r2, [pc, #500]	; (8005618 <HAL_I2C_Init+0x27c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	bf94      	ite	ls
 8005428:	2301      	movls	r3, #1
 800542a:	2300      	movhi	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e0e7      	b.n	8005606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a78      	ldr	r2, [pc, #480]	; (800561c <HAL_I2C_Init+0x280>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	0c9b      	lsrs	r3, r3, #18
 8005440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a6a      	ldr	r2, [pc, #424]	; (8005610 <HAL_I2C_Init+0x274>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d802      	bhi.n	8005470 <HAL_I2C_Init+0xd4>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	3301      	adds	r3, #1
 800546e:	e009      	b.n	8005484 <HAL_I2C_Init+0xe8>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	4a69      	ldr	r2, [pc, #420]	; (8005620 <HAL_I2C_Init+0x284>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	099b      	lsrs	r3, r3, #6
 8005482:	3301      	adds	r3, #1
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	430b      	orrs	r3, r1
 800548a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	495c      	ldr	r1, [pc, #368]	; (8005610 <HAL_I2C_Init+0x274>)
 80054a0:	428b      	cmp	r3, r1
 80054a2:	d819      	bhi.n	80054d8 <HAL_I2C_Init+0x13c>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1e59      	subs	r1, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b2:	1c59      	adds	r1, r3, #1
 80054b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054b8:	400b      	ands	r3, r1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_I2C_Init+0x138>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1e59      	subs	r1, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054cc:	3301      	adds	r3, #1
 80054ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d2:	e051      	b.n	8005578 <HAL_I2C_Init+0x1dc>
 80054d4:	2304      	movs	r3, #4
 80054d6:	e04f      	b.n	8005578 <HAL_I2C_Init+0x1dc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d111      	bne.n	8005504 <HAL_I2C_Init+0x168>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1e58      	subs	r0, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	440b      	add	r3, r1
 80054ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80054f2:	3301      	adds	r3, #1
 80054f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e012      	b.n	800552a <HAL_I2C_Init+0x18e>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1e58      	subs	r0, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6859      	ldr	r1, [r3, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	0099      	lsls	r1, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	fbb0 f3f3 	udiv	r3, r0, r3
 800551a:	3301      	adds	r3, #1
 800551c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_Init+0x196>
 800552e:	2301      	movs	r3, #1
 8005530:	e022      	b.n	8005578 <HAL_I2C_Init+0x1dc>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10e      	bne.n	8005558 <HAL_I2C_Init+0x1bc>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1e58      	subs	r0, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	440b      	add	r3, r1
 8005548:	fbb0 f3f3 	udiv	r3, r0, r3
 800554c:	3301      	adds	r3, #1
 800554e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005556:	e00f      	b.n	8005578 <HAL_I2C_Init+0x1dc>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1e58      	subs	r0, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	0099      	lsls	r1, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	fbb0 f3f3 	udiv	r3, r0, r3
 800556e:	3301      	adds	r3, #1
 8005570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	6809      	ldr	r1, [r1, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6911      	ldr	r1, [r2, #16]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68d2      	ldr	r2, [r2, #12]
 80055b2:	4311      	orrs	r1, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	430b      	orrs	r3, r1
 80055ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	000186a0 	.word	0x000186a0
 8005614:	001e847f 	.word	0x001e847f
 8005618:	003d08ff 	.word	0x003d08ff
 800561c:	431bde83 	.word	0x431bde83
 8005620:	10624dd3 	.word	0x10624dd3

08005624 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e021      	b.n	800567a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2224      	movs	r2, #36	; 0x24
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fe ffc4 	bl	80045dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	817b      	strh	r3, [r7, #10]
 8005694:	4613      	mov	r3, r2
 8005696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005698:	f7ff f9fe 	bl	8004a98 <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	f040 80e0 	bne.w	800586c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	2319      	movs	r3, #25
 80056b2:	2201      	movs	r2, #1
 80056b4:	4970      	ldr	r1, [pc, #448]	; (8005878 <HAL_I2C_Master_Transmit+0x1f4>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f001 fe02 	bl	80072c0 <I2C_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
 80056c4:	e0d3      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_I2C_Master_Transmit+0x50>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0cc      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d007      	beq.n	80056fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2210      	movs	r2, #16
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	893a      	ldrh	r2, [r7, #8]
 800572a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a50      	ldr	r2, [pc, #320]	; (800587c <HAL_I2C_Master_Transmit+0x1f8>)
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800573c:	8979      	ldrh	r1, [r7, #10]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f001 fc92 	bl	800706c <I2C_MasterRequestWrite>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e08d      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005768:	e066      	b.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f001 fe7c 	bl	800746c <I2C_WaitOnTXEFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d107      	bne.n	8005792 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e06b      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d11b      	bne.n	800580c <HAL_I2C_Master_Transmit+0x188>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	6a39      	ldr	r1, [r7, #32]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f001 fe6c 	bl	80074ee <I2C_WaitOnBTFFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b04      	cmp	r3, #4
 8005822:	d107      	bne.n	8005834 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e01a      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d194      	bne.n	800576a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	00100002 	.word	0x00100002
 800587c:	ffff0000 	.word	0xffff0000

08005880 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b20      	cmp	r3, #32
 8005892:	d124      	bne.n	80058de <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2228      	movs	r2, #40	; 0x28
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d007      	beq.n	80058ba <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80058d8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr

080058ea <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b088      	sub	sp, #32
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800590a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b10      	cmp	r3, #16
 8005918:	d003      	beq.n	8005922 <HAL_I2C_EV_IRQHandler+0x38>
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	f040 80c1 	bne.w	8005aa4 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10d      	bne.n	8005958 <HAL_I2C_EV_IRQHandler+0x6e>
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005942:	d003      	beq.n	800594c <HAL_I2C_EV_IRQHandler+0x62>
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800594a:	d101      	bne.n	8005950 <HAL_I2C_EV_IRQHandler+0x66>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_I2C_EV_IRQHandler+0x68>
 8005950:	2300      	movs	r3, #0
 8005952:	2b01      	cmp	r3, #1
 8005954:	f000 8132 	beq.w	8005bbc <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00c      	beq.n	800597c <HAL_I2C_EV_IRQHandler+0x92>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	0a5b      	lsrs	r3, r3, #9
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d006      	beq.n	800597c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 fe5e 	bl	8007630 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fd58 	bl	800642a <I2C_Master_SB>
 800597a:	e092      	b.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	08db      	lsrs	r3, r3, #3
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <HAL_I2C_EV_IRQHandler+0xb2>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	0a5b      	lsrs	r3, r3, #9
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fdcd 	bl	8006534 <I2C_Master_ADD10>
 800599a:	e082      	b.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <HAL_I2C_EV_IRQHandler+0xd2>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	0a5b      	lsrs	r3, r3, #9
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fde6 	bl	8006586 <I2C_Master_ADDR>
 80059ba:	e072      	b.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	089b      	lsrs	r3, r3, #2
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d03b      	beq.n	8005a40 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d6:	f000 80f3 	beq.w	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	09db      	lsrs	r3, r3, #7
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00f      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0x11c>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	0a9b      	lsrs	r3, r3, #10
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0x11c>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	089b      	lsrs	r3, r3, #2
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9d2 	bl	8005da8 <I2C_MasterTransmit_TXE>
 8005a04:	e04d      	b.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80d6 	beq.w	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	0a5b      	lsrs	r3, r3, #9
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80cf 	beq.w	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	2b21      	cmp	r3, #33	; 0x21
 8005a26:	d103      	bne.n	8005a30 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa59 	bl	8005ee0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a2e:	e0c7      	b.n	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	f040 80c4 	bne.w	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fac7 	bl	8005fcc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a3e:	e0bf      	b.n	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4e:	f000 80b7 	beq.w	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	099b      	lsrs	r3, r3, #6
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x194>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	0a9b      	lsrs	r3, r3, #10
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x194>
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	089b      	lsrs	r3, r3, #2
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fb3c 	bl	80060f4 <I2C_MasterReceive_RXNE>
 8005a7c:	e011      	b.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 809a 	beq.w	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	0a5b      	lsrs	r3, r3, #9
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8093 	beq.w	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fbdb 	bl	8006256 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aa0:	e08e      	b.n	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005aa2:	e08d      	b.n	8005bc0 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e007      	b.n	8005ac6 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <HAL_I2C_EV_IRQHandler+0x20e>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	0a5b      	lsrs	r3, r3, #9
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005aee:	69b9      	ldr	r1, [r7, #24]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 ff9f 	bl	8006a34 <I2C_Slave_ADDR>
 8005af6:	e066      	b.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HAL_I2C_EV_IRQHandler+0x22e>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	0a5b      	lsrs	r3, r3, #9
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 ffd9 	bl	8006ac8 <I2C_Slave_STOPF>
 8005b16:	e056      	b.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	2b21      	cmp	r3, #33	; 0x21
 8005b1c:	d002      	beq.n	8005b24 <HAL_I2C_EV_IRQHandler+0x23a>
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	2b29      	cmp	r3, #41	; 0x29
 8005b22:	d125      	bne.n	8005b70 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	09db      	lsrs	r3, r3, #7
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00f      	beq.n	8005b50 <HAL_I2C_EV_IRQHandler+0x266>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	0a9b      	lsrs	r3, r3, #10
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d009      	beq.n	8005b50 <HAL_I2C_EV_IRQHandler+0x266>
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d103      	bne.n	8005b50 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 feb7 	bl	80068bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b4e:	e039      	b.n	8005bc4 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	089b      	lsrs	r3, r3, #2
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d033      	beq.n	8005bc4 <HAL_I2C_EV_IRQHandler+0x2da>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	0a5b      	lsrs	r3, r3, #9
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02d      	beq.n	8005bc4 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fee4 	bl	8006936 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b6e:	e029      	b.n	8005bc4 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	099b      	lsrs	r3, r3, #6
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00f      	beq.n	8005b9c <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	0a9b      	lsrs	r3, r3, #10
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d009      	beq.n	8005b9c <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 feee 	bl	8006976 <I2C_SlaveReceive_RXNE>
 8005b9a:	e014      	b.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	0a5b      	lsrs	r3, r3, #9
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 ff1c 	bl	80069f2 <I2C_SlaveReceive_BTF>
 8005bba:	e004      	b.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005bbc:	bf00      	nop
 8005bbe:	e002      	b.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bc4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bee:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d016      	beq.n	8005c2a <HAL_I2C_ER_IRQHandler+0x5e>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d010      	beq.n	8005c2a <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c18:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c28:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	0a5b      	lsrs	r3, r3, #9
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00e      	beq.n	8005c54 <HAL_I2C_ER_IRQHandler+0x88>
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005c52:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	0a9b      	lsrs	r3, r3, #10
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d03f      	beq.n	8005ce0 <HAL_I2C_ER_IRQHandler+0x114>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d039      	beq.n	8005ce0 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005c6c:	7efb      	ldrb	r3, [r7, #27]
 8005c6e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005c86:	7ebb      	ldrb	r3, [r7, #26]
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d112      	bne.n	8005cb2 <HAL_I2C_ER_IRQHandler+0xe6>
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10f      	bne.n	8005cb2 <HAL_I2C_ER_IRQHandler+0xe6>
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	2b21      	cmp	r3, #33	; 0x21
 8005c96:	d008      	beq.n	8005caa <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	2b29      	cmp	r3, #41	; 0x29
 8005c9c:	d005      	beq.n	8005caa <HAL_I2C_ER_IRQHandler+0xde>
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ca0:	2b28      	cmp	r3, #40	; 0x28
 8005ca2:	d106      	bne.n	8005cb2 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b21      	cmp	r3, #33	; 0x21
 8005ca8:	d103      	bne.n	8005cb2 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 f83c 	bl	8006d28 <I2C_Slave_AF>
 8005cb0:	e016      	b.n	8005ce0 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cba:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	f043 0304 	orr.w	r3, r3, #4
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005cc4:	7efb      	ldrb	r3, [r7, #27]
 8005cc6:	2b10      	cmp	r3, #16
 8005cc8:	d002      	beq.n	8005cd0 <HAL_I2C_ER_IRQHandler+0x104>
 8005cca:	7efb      	ldrb	r3, [r7, #27]
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d107      	bne.n	8005ce0 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cde:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	0adb      	lsrs	r3, r3, #11
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <HAL_I2C_ER_IRQHandler+0x13e>
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	f043 0308 	orr.w	r3, r3, #8
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005d08:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 f873 	bl	8006e08 <I2C_ITError>
  }
}
 8005d22:	bf00      	nop
 8005d24:	3728      	adds	r7, #40	; 0x28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr

08005da8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d150      	bne.n	8005e70 <I2C_MasterTransmit_TXE+0xc8>
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b21      	cmp	r3, #33	; 0x21
 8005dd2:	d14d      	bne.n	8005e70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d01d      	beq.n	8005e16 <I2C_MasterTransmit_TXE+0x6e>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d01a      	beq.n	8005e16 <I2C_MasterTransmit_TXE+0x6e>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005de6:	d016      	beq.n	8005e16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005df6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2211      	movs	r2, #17
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff ff8b 	bl	8005d2a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e14:	e060      	b.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d107      	bne.n	8005e60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff8a 	bl	8005d72 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e5e:	e03b      	b.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff5e 	bl	8005d2a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e6e:	e033      	b.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b21      	cmp	r3, #33	; 0x21
 8005e74:	d005      	beq.n	8005e82 <I2C_MasterTransmit_TXE+0xda>
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d12d      	bne.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b22      	cmp	r3, #34	; 0x22
 8005e80:	d12a      	bne.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d108      	bne.n	8005e9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e9c:	e01c      	b.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d103      	bne.n	8005eb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f88e 	bl	8005fcc <I2C_MemoryTransmit_TXE_BTF>
}
 8005eb0:	e012      	b.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ed6:	e7ff      	b.n	8005ed8 <I2C_MasterTransmit_TXE+0x130>
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b21      	cmp	r3, #33	; 0x21
 8005ef8:	d164      	bne.n	8005fc4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005f28:	e04c      	b.n	8005fc4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d01d      	beq.n	8005f6c <I2C_MasterTransmit_BTF+0x8c>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d01a      	beq.n	8005f6c <I2C_MasterTransmit_BTF+0x8c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f3c:	d016      	beq.n	8005f6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2211      	movs	r2, #17
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fee0 	bl	8005d2a <HAL_I2C_MasterTxCpltCallback>
}
 8005f6a:	e02b      	b.n	8005fc4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d107      	bne.n	8005fb6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fedf 	bl	8005d72 <HAL_I2C_MemTxCpltCallback>
}
 8005fb4:	e006      	b.n	8005fc4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff feb3 	bl	8005d2a <HAL_I2C_MasterTxCpltCallback>
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11d      	bne.n	8006020 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10b      	bne.n	8006004 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006002:	e073      	b.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006008:	b29b      	uxth	r3, r3
 800600a:	121b      	asrs	r3, r3, #8
 800600c:	b2da      	uxtb	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800601e:	e065      	b.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	2b01      	cmp	r3, #1
 8006026:	d10b      	bne.n	8006040 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602c:	b2da      	uxtb	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800603e:	e055      	b.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	2b02      	cmp	r3, #2
 8006046:	d151      	bne.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b22      	cmp	r3, #34	; 0x22
 800604c:	d10d      	bne.n	800606a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800605c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006068:	e040      	b.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	2b21      	cmp	r3, #33	; 0x21
 8006078:	d112      	bne.n	80060a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800609e:	e025      	b.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d120      	bne.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b21      	cmp	r3, #33	; 0x21
 80060ae:	d11d      	bne.n	80060ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fe43 	bl	8005d72 <HAL_I2C_MemTxCpltCallback>
}
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b22      	cmp	r3, #34	; 0x22
 8006106:	f040 80a2 	bne.w	800624e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b03      	cmp	r3, #3
 8006116:	d921      	bls.n	800615c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b03      	cmp	r3, #3
 8006146:	f040 8082 	bne.w	800624e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006158:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800615a:	e078      	b.n	800624e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	2b02      	cmp	r3, #2
 8006162:	d074      	beq.n	800624e <I2C_MasterReceive_RXNE+0x15a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d002      	beq.n	8006170 <I2C_MasterReceive_RXNE+0x7c>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d16e      	bne.n	800624e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 f9fd 	bl	8007570 <I2C_WaitOnSTOPRequestThroughIT>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d142      	bne.n	8006202 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800619a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d10a      	bne.n	80061ec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fdcd 	bl	8005d84 <HAL_I2C_MemRxCpltCallback>
}
 80061ea:	e030      	b.n	800624e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2212      	movs	r2, #18
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fd9e 	bl	8005d3c <HAL_I2C_MasterRxCpltCallback>
}
 8006200:	e025      	b.n	800624e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006210:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fd fb3e 	bl	80038ca <HAL_I2C_ErrorCallback>
}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b04      	cmp	r3, #4
 800626c:	d11b      	bne.n	80062a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80062a4:	e0bd      	b.n	8006422 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d129      	bne.n	8006304 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d00a      	beq.n	80062dc <I2C_MasterReceive_BTF+0x86>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d007      	beq.n	80062dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006302:	e08e      	b.n	8006422 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d176      	bne.n	80063fc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d002      	beq.n	800631a <I2C_MasterReceive_BTF+0xc4>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b10      	cmp	r3, #16
 8006318:	d108      	bne.n	800632c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e019      	b.n	8006360 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b04      	cmp	r3, #4
 8006330:	d002      	beq.n	8006338 <I2C_MasterReceive_BTF+0xe2>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d108      	bne.n	800634a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e00a      	b.n	8006360 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b10      	cmp	r3, #16
 800634e:	d007      	beq.n	8006360 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80063ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d10a      	bne.n	80063e6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fcd0 	bl	8005d84 <HAL_I2C_MemRxCpltCallback>
}
 80063e4:	e01d      	b.n	8006422 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2212      	movs	r2, #18
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fca1 	bl	8005d3c <HAL_I2C_MasterRxCpltCallback>
}
 80063fa:	e012      	b.n	8006422 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d117      	bne.n	800646e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006456:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006458:	e067      	b.n	800652a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	611a      	str	r2, [r3, #16]
}
 800646c:	e05d      	b.n	800652a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006476:	d133      	bne.n	80064e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b21      	cmp	r3, #33	; 0x21
 8006482:	d109      	bne.n	8006498 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006494:	611a      	str	r2, [r3, #16]
 8006496:	e008      	b.n	80064aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <I2C_Master_SB+0x92>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d108      	bne.n	80064ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d032      	beq.n	800652a <I2C_Master_SB+0x100>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d02d      	beq.n	800652a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064dc:	605a      	str	r2, [r3, #4]
}
 80064de:	e024      	b.n	800652a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10e      	bne.n	8006506 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	11db      	asrs	r3, r3, #7
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 0306 	and.w	r3, r3, #6
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f063 030f 	orn	r3, r3, #15
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	611a      	str	r2, [r3, #16]
}
 8006504:	e011      	b.n	800652a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650a:	2b01      	cmp	r3, #1
 800650c:	d10d      	bne.n	800652a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	b29b      	uxth	r3, r3
 8006514:	11db      	asrs	r3, r3, #7
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 0306 	and.w	r3, r3, #6
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f063 030e 	orn	r3, r3, #14
 8006522:	b2da      	uxtb	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	611a      	str	r2, [r3, #16]
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	b2da      	uxtb	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <I2C_Master_ADD10+0x26>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	d108      	bne.n	800656c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00c      	beq.n	800657c <I2C_Master_ADD10+0x48>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657a:	605a      	str	r2, [r3, #4]
  }
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006586:	b480      	push	{r7}
 8006588:	b091      	sub	sp, #68	; 0x44
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b22      	cmp	r3, #34	; 0x22
 80065ae:	f040 8174 	bne.w	800689a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <I2C_Master_ADDR+0x54>
 80065ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d10b      	bne.n	80065da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c2:	2300      	movs	r3, #0
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	633b      	str	r3, [r7, #48]	; 0x30
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	e16b      	b.n	80068b2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11d      	bne.n	800661e <I2C_Master_ADDR+0x98>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065ea:	d118      	bne.n	800661e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ec:	2300      	movs	r3, #0
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006610:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	651a      	str	r2, [r3, #80]	; 0x50
 800661c:	e149      	b.n	80068b2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006628:	2300      	movs	r3, #0
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e120      	b.n	8006892 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b01      	cmp	r3, #1
 8006658:	f040 808a 	bne.w	8006770 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006662:	d137      	bne.n	80066d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006672:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006682:	d113      	bne.n	80066ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006692:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006694:	2300      	movs	r3, #0
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	e0f2      	b.n	8006892 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ac:	2300      	movs	r3, #0
 80066ae:	623b      	str	r3, [r7, #32]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	623b      	str	r3, [r7, #32]
 80066c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e0de      	b.n	8006892 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d02e      	beq.n	8006738 <I2C_Master_ADDR+0x1b2>
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d02b      	beq.n	8006738 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	2b12      	cmp	r3, #18
 80066e4:	d102      	bne.n	80066ec <I2C_Master_ADDR+0x166>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d125      	bne.n	8006738 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00e      	beq.n	8006710 <I2C_Master_ADDR+0x18a>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d00b      	beq.n	8006710 <I2C_Master_ADDR+0x18a>
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d008      	beq.n	8006710 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e007      	b.n	8006720 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800671e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	e0ac      	b.n	8006892 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006746:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006748:	2300      	movs	r3, #0
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e090      	b.n	8006892 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d158      	bne.n	800682c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b04      	cmp	r3, #4
 800677e:	d021      	beq.n	80067c4 <I2C_Master_ADDR+0x23e>
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	2b02      	cmp	r3, #2
 8006784:	d01e      	beq.n	80067c4 <I2C_Master_ADDR+0x23e>
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2b10      	cmp	r3, #16
 800678a:	d01b      	beq.n	80067c4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800679a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	e012      	b.n	80067ea <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f8:	d14b      	bne.n	8006892 <I2C_Master_ADDR+0x30c>
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006800:	d00b      	beq.n	800681a <I2C_Master_ADDR+0x294>
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	2b01      	cmp	r3, #1
 8006806:	d008      	beq.n	800681a <I2C_Master_ADDR+0x294>
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	2b08      	cmp	r3, #8
 800680c:	d005      	beq.n	800681a <I2C_Master_ADDR+0x294>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b10      	cmp	r3, #16
 8006812:	d002      	beq.n	800681a <I2C_Master_ADDR+0x294>
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	2b20      	cmp	r3, #32
 8006818:	d13b      	bne.n	8006892 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006828:	605a      	str	r2, [r3, #4]
 800682a:	e032      	b.n	8006892 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800683a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800684a:	d117      	bne.n	800687c <I2C_Master_ADDR+0x2f6>
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006852:	d00b      	beq.n	800686c <I2C_Master_ADDR+0x2e6>
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	2b01      	cmp	r3, #1
 8006858:	d008      	beq.n	800686c <I2C_Master_ADDR+0x2e6>
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	2b08      	cmp	r3, #8
 800685e:	d005      	beq.n	800686c <I2C_Master_ADDR+0x2e6>
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	2b10      	cmp	r3, #16
 8006864:	d002      	beq.n	800686c <I2C_Master_ADDR+0x2e6>
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	2b20      	cmp	r3, #32
 800686a:	d107      	bne.n	800687c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800687a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006898:	e00b      	b.n	80068b2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	68bb      	ldr	r3, [r7, #8]
}
 80068b0:	e7ff      	b.n	80068b2 <I2C_Master_ADDR+0x32c>
 80068b2:	bf00      	nop
 80068b4:	3744      	adds	r7, #68	; 0x44
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bc80      	pop	{r7}
 80068ba:	4770      	bx	lr

080068bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d02b      	beq.n	800692e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d114      	bne.n	800692e <I2C_SlaveTransmit_TXE+0x72>
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b29      	cmp	r3, #41	; 0x29
 8006908:	d111      	bne.n	800692e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006918:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2228      	movs	r2, #40	; 0x28
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fa10 	bl	8005d4e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d011      	beq.n	800696c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr

08006976 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d02c      	beq.n	80069ea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d114      	bne.n	80069ea <I2C_SlaveReceive_RXNE+0x74>
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b2a      	cmp	r3, #42	; 0x2a
 80069c4:	d111      	bne.n	80069ea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2222      	movs	r2, #34	; 0x22
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2228      	movs	r2, #40	; 0x28
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff f9bb 	bl	8005d60 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d012      	beq.n	8006a2a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a4e:	2b28      	cmp	r3, #40	; 0x28
 8006a50:	d127      	bne.n	8006aa2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a60:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	089b      	lsrs	r3, r3, #2
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	09db      	lsrs	r3, r3, #7
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	81bb      	strh	r3, [r7, #12]
 8006a84:	e002      	b.n	8006a8c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a94:	89ba      	ldrh	r2, [r7, #12]
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fc ff1e 	bl	80038dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006aa0:	e00e      	b.n	8006ac0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60bb      	str	r3, [r7, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0201 	orr.w	r2, r2, #1
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b24:	d172      	bne.n	8006c0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b22      	cmp	r3, #34	; 0x22
 8006b2a:	d002      	beq.n	8006b32 <I2C_Slave_STOPF+0x6a>
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b30:	d135      	bne.n	8006b9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f043 0204 	orr.w	r2, r3, #4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe f978 	bl	8004e60 <HAL_DMA_GetState>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d049      	beq.n	8006c0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	4a69      	ldr	r2, [pc, #420]	; (8006d20 <I2C_Slave_STOPF+0x258>)
 8006b7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe f8f6 	bl	8004d74 <HAL_DMA_Abort_IT>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d03d      	beq.n	8006c0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b9c:	e035      	b.n	8006c0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f043 0204 	orr.w	r2, r3, #4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe f942 	bl	8004e60 <HAL_DMA_GetState>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d014      	beq.n	8006c0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	4a4e      	ldr	r2, [pc, #312]	; (8006d20 <I2C_Slave_STOPF+0x258>)
 8006be8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe f8c0 	bl	8004d74 <HAL_DMA_Abort_IT>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	e000      	b.n	8006c0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d03e      	beq.n	8006c94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d112      	bne.n	8006c4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d112      	bne.n	8006c7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	f043 0204 	orr.w	r2, r3, #4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f8b3 	bl	8006e08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ca2:	e039      	b.n	8006d18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca8:	d109      	bne.n	8006cbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2228      	movs	r2, #40	; 0x28
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff f851 	bl	8005d60 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b28      	cmp	r3, #40	; 0x28
 8006cc8:	d111      	bne.n	8006cee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <I2C_Slave_STOPF+0x25c>)
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fc fde4 	bl	80038b4 <HAL_I2C_ListenCpltCallback>
}
 8006cec:	e014      	b.n	8006d18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	2b22      	cmp	r3, #34	; 0x22
 8006cf4:	d002      	beq.n	8006cfc <I2C_Slave_STOPF+0x234>
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	2b22      	cmp	r3, #34	; 0x22
 8006cfa:	d10d      	bne.n	8006d18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff f824 	bl	8005d60 <HAL_I2C_SlaveRxCpltCallback>
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	08007171 	.word	0x08007171
 8006d24:	ffff0000 	.word	0xffff0000

08006d28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d002      	beq.n	8006d4a <I2C_Slave_AF+0x22>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d129      	bne.n	8006d9e <I2C_Slave_AF+0x76>
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b28      	cmp	r3, #40	; 0x28
 8006d4e:	d126      	bne.n	8006d9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a2c      	ldr	r2, [pc, #176]	; (8006e04 <I2C_Slave_AF+0xdc>)
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fc fd8c 	bl	80038b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006d9c:	e02e      	b.n	8006dfc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b21      	cmp	r3, #33	; 0x21
 8006da2:	d126      	bne.n	8006df2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <I2C_Slave_AF+0xdc>)
 8006da8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2221      	movs	r2, #33	; 0x21
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fe ffaf 	bl	8005d4e <HAL_I2C_SlaveTxCpltCallback>
}
 8006df0:	e004      	b.n	8006dfc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dfa:	615a      	str	r2, [r3, #20]
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	ffff0000 	.word	0xffff0000

08006e08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d002      	beq.n	8006e2c <I2C_ITError+0x24>
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d10a      	bne.n	8006e42 <I2C_ITError+0x3a>
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b22      	cmp	r3, #34	; 0x22
 8006e30:	d107      	bne.n	8006e42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e48:	2b28      	cmp	r3, #40	; 0x28
 8006e4a:	d107      	bne.n	8006e5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2228      	movs	r2, #40	; 0x28
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e5a:	e015      	b.n	8006e88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6a:	d00a      	beq.n	8006e82 <I2C_ITError+0x7a>
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b60      	cmp	r3, #96	; 0x60
 8006e70:	d007      	beq.n	8006e82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e96:	d161      	bne.n	8006f5c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ea6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d020      	beq.n	8006ef6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	4a6a      	ldr	r2, [pc, #424]	; (8007064 <I2C_ITError+0x25c>)
 8006eba:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fd ff57 	bl	8004d74 <HAL_DMA_Abort_IT>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8089 	beq.w	8006fe0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	e074      	b.n	8006fe0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	4a5a      	ldr	r2, [pc, #360]	; (8007064 <I2C_ITError+0x25c>)
 8006efc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fd ff36 	bl	8004d74 <HAL_DMA_Abort_IT>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d068      	beq.n	8006fe0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b40      	cmp	r3, #64	; 0x40
 8006f1a:	d10b      	bne.n	8006f34 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0201 	bic.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f56:	4610      	mov	r0, r2
 8006f58:	4798      	blx	r3
 8006f5a:	e041      	b.n	8006fe0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b60      	cmp	r3, #96	; 0x60
 8006f66:	d125      	bne.n	8006fb4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d10b      	bne.n	8006f9c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fe fef2 	bl	8005d96 <HAL_I2C_AbortCpltCallback>
 8006fb2:	e015      	b.n	8006fe0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d10b      	bne.n	8006fda <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fc fc75 	bl	80038ca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10e      	bne.n	800700e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800701c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007024:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b04      	cmp	r3, #4
 8007030:	d113      	bne.n	800705a <I2C_ITError+0x252>
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b28      	cmp	r3, #40	; 0x28
 8007036:	d110      	bne.n	800705a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a0b      	ldr	r2, [pc, #44]	; (8007068 <I2C_ITError+0x260>)
 800703c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fc fc2d 	bl	80038b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	08007171 	.word	0x08007171
 8007068:	ffff0000 	.word	0xffff0000

0800706c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	460b      	mov	r3, r1
 800707a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d006      	beq.n	8007096 <I2C_MasterRequestWrite+0x2a>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d003      	beq.n	8007096 <I2C_MasterRequestWrite+0x2a>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007094:	d108      	bne.n	80070a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e00b      	b.n	80070c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	2b12      	cmp	r3, #18
 80070ae:	d107      	bne.n	80070c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f8f7 	bl	80072c0 <I2C_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e6:	d103      	bne.n	80070f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e035      	b.n	8007160 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fc:	d108      	bne.n	8007110 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070fe:	897b      	ldrh	r3, [r7, #10]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800710c:	611a      	str	r2, [r3, #16]
 800710e:	e01b      	b.n	8007148 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007110:	897b      	ldrh	r3, [r7, #10]
 8007112:	11db      	asrs	r3, r3, #7
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f003 0306 	and.w	r3, r3, #6
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f063 030f 	orn	r3, r3, #15
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	490e      	ldr	r1, [pc, #56]	; (8007168 <I2C_MasterRequestWrite+0xfc>)
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f91d 	bl	800736e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e010      	b.n	8007160 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800713e:	897b      	ldrh	r3, [r7, #10]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4907      	ldr	r1, [pc, #28]	; (800716c <I2C_MasterRequestWrite+0x100>)
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f90d 	bl	800736e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	00010008 	.word	0x00010008
 800716c:	00010002 	.word	0x00010002

08007170 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007188:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800718a:	4b4b      	ldr	r3, [pc, #300]	; (80072b8 <I2C_DMAAbort+0x148>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	08db      	lsrs	r3, r3, #3
 8007190:	4a4a      	ldr	r2, [pc, #296]	; (80072bc <I2C_DMAAbort+0x14c>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	0a1a      	lsrs	r2, r3, #8
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	00da      	lsls	r2, r3, #3
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f043 0220 	orr.w	r2, r3, #32
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80071b6:	e00a      	b.n	80071ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071cc:	d0ea      	beq.n	80071a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	2200      	movs	r2, #0
 80071dc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	2200      	movs	r2, #0
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2200      	movs	r2, #0
 8007202:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	2200      	movs	r2, #0
 8007212:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	2200      	movs	r2, #0
 8007222:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b60      	cmp	r3, #96	; 0x60
 800723e:	d10e      	bne.n	800725e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2200      	movs	r2, #0
 8007254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007256:	6978      	ldr	r0, [r7, #20]
 8007258:	f7fe fd9d 	bl	8005d96 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800725c:	e027      	b.n	80072ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800725e:	7cfb      	ldrb	r3, [r7, #19]
 8007260:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007264:	2b28      	cmp	r3, #40	; 0x28
 8007266:	d117      	bne.n	8007298 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007286:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2200      	movs	r2, #0
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2228      	movs	r2, #40	; 0x28
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007296:	e007      	b.n	80072a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80072a8:	6978      	ldr	r0, [r7, #20]
 80072aa:	f7fc fb0e 	bl	80038ca <HAL_I2C_ErrorCallback>
}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200000c4 	.word	0x200000c4
 80072bc:	14f8b589 	.word	0x14f8b589

080072c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072d0:	e025      	b.n	800731e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d021      	beq.n	800731e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072da:	f7fd fbdd 	bl	8004a98 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d302      	bcc.n	80072f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d116      	bne.n	800731e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	f043 0220 	orr.w	r2, r3, #32
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e023      	b.n	8007366 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	0c1b      	lsrs	r3, r3, #16
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b01      	cmp	r3, #1
 8007326:	d10d      	bne.n	8007344 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	43da      	mvns	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4013      	ands	r3, r2
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	bf0c      	ite	eq
 800733a:	2301      	moveq	r3, #1
 800733c:	2300      	movne	r3, #0
 800733e:	b2db      	uxtb	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	e00c      	b.n	800735e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	43da      	mvns	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4013      	ands	r3, r2
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d0b6      	beq.n	80072d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800737c:	e051      	b.n	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738c:	d123      	bne.n	80073d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f043 0204 	orr.w	r2, r3, #4
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e046      	b.n	8007464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d021      	beq.n	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073de:	f7fd fb5b 	bl	8004a98 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d302      	bcc.n	80073f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d116      	bne.n	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f043 0220 	orr.w	r2, r3, #32
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e020      	b.n	8007464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b01      	cmp	r3, #1
 800742a:	d10c      	bne.n	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	43da      	mvns	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf14      	ite	ne
 800743e:	2301      	movne	r3, #1
 8007440:	2300      	moveq	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	e00b      	b.n	800745e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	43da      	mvns	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4013      	ands	r3, r2
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	bf14      	ite	ne
 8007458:	2301      	movne	r3, #1
 800745a:	2300      	moveq	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d18d      	bne.n	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007478:	e02d      	b.n	80074d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f8aa 	bl	80075d4 <I2C_IsAcknowledgeFailed>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e02d      	b.n	80074e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d021      	beq.n	80074d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007492:	f7fd fb01 	bl	8004a98 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d302      	bcc.n	80074a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	f043 0220 	orr.w	r2, r3, #32
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e007      	b.n	80074e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e0:	2b80      	cmp	r3, #128	; 0x80
 80074e2:	d1ca      	bne.n	800747a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074fa:	e02d      	b.n	8007558 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f869 	bl	80075d4 <I2C_IsAcknowledgeFailed>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e02d      	b.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007512:	d021      	beq.n	8007558 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007514:	f7fd fac0 	bl	8004a98 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d302      	bcc.n	800752a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d116      	bne.n	8007558 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	f043 0220 	orr.w	r2, r3, #32
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e007      	b.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b04      	cmp	r3, #4
 8007564:	d1ca      	bne.n	80074fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800757c:	4b13      	ldr	r3, [pc, #76]	; (80075cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	0a1a      	lsrs	r2, r3, #8
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3b01      	subs	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d107      	bne.n	80075ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f043 0220 	orr.w	r2, r3, #32
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e008      	b.n	80075c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075bc:	d0e9      	beq.n	8007592 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	200000c4 	.word	0x200000c4
 80075d0:	14f8b589 	.word	0x14f8b589

080075d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ea:	d11b      	bne.n	8007624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	f043 0204 	orr.w	r2, r3, #4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007640:	d103      	bne.n	800764a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007648:	e007      	b.n	800765a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007652:	d102      	bne.n	800765a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2208      	movs	r2, #8
 8007658:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e272      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 8087 	beq.w	8007792 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007684:	4b92      	ldr	r3, [pc, #584]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f003 030c 	and.w	r3, r3, #12
 800768c:	2b04      	cmp	r3, #4
 800768e:	d00c      	beq.n	80076aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007690:	4b8f      	ldr	r3, [pc, #572]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f003 030c 	and.w	r3, r3, #12
 8007698:	2b08      	cmp	r3, #8
 800769a:	d112      	bne.n	80076c2 <HAL_RCC_OscConfig+0x5e>
 800769c:	4b8c      	ldr	r3, [pc, #560]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d10b      	bne.n	80076c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076aa:	4b89      	ldr	r3, [pc, #548]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d06c      	beq.n	8007790 <HAL_RCC_OscConfig+0x12c>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d168      	bne.n	8007790 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e24c      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ca:	d106      	bne.n	80076da <HAL_RCC_OscConfig+0x76>
 80076cc:	4b80      	ldr	r3, [pc, #512]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a7f      	ldr	r2, [pc, #508]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80076d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	e02e      	b.n	8007738 <HAL_RCC_OscConfig+0xd4>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10c      	bne.n	80076fc <HAL_RCC_OscConfig+0x98>
 80076e2:	4b7b      	ldr	r3, [pc, #492]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a7a      	ldr	r2, [pc, #488]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80076e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	4b78      	ldr	r3, [pc, #480]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a77      	ldr	r2, [pc, #476]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80076f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e01d      	b.n	8007738 <HAL_RCC_OscConfig+0xd4>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007704:	d10c      	bne.n	8007720 <HAL_RCC_OscConfig+0xbc>
 8007706:	4b72      	ldr	r3, [pc, #456]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a71      	ldr	r2, [pc, #452]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 800770c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	4b6f      	ldr	r3, [pc, #444]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a6e      	ldr	r2, [pc, #440]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	e00b      	b.n	8007738 <HAL_RCC_OscConfig+0xd4>
 8007720:	4b6b      	ldr	r3, [pc, #428]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a6a      	ldr	r2, [pc, #424]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4b68      	ldr	r3, [pc, #416]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a67      	ldr	r2, [pc, #412]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007736:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d013      	beq.n	8007768 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007740:	f7fd f9aa 	bl	8004a98 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007748:	f7fd f9a6 	bl	8004a98 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b64      	cmp	r3, #100	; 0x64
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e200      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800775a:	4b5d      	ldr	r3, [pc, #372]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f0      	beq.n	8007748 <HAL_RCC_OscConfig+0xe4>
 8007766:	e014      	b.n	8007792 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007768:	f7fd f996 	bl	8004a98 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007770:	f7fd f992 	bl	8004a98 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b64      	cmp	r3, #100	; 0x64
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e1ec      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007782:	4b53      	ldr	r3, [pc, #332]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f0      	bne.n	8007770 <HAL_RCC_OscConfig+0x10c>
 800778e:	e000      	b.n	8007792 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d063      	beq.n	8007866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800779e:	4b4c      	ldr	r3, [pc, #304]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f003 030c 	and.w	r3, r3, #12
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80077aa:	4b49      	ldr	r3, [pc, #292]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f003 030c 	and.w	r3, r3, #12
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d11c      	bne.n	80077f0 <HAL_RCC_OscConfig+0x18c>
 80077b6:	4b46      	ldr	r3, [pc, #280]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d116      	bne.n	80077f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077c2:	4b43      	ldr	r3, [pc, #268]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <HAL_RCC_OscConfig+0x176>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d001      	beq.n	80077da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e1c0      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077da:	4b3d      	ldr	r3, [pc, #244]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	4939      	ldr	r1, [pc, #228]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ee:	e03a      	b.n	8007866 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d020      	beq.n	800783a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077f8:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <HAL_RCC_OscConfig+0x270>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077fe:	f7fd f94b 	bl	8004a98 <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007804:	e008      	b.n	8007818 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007806:	f7fd f947 	bl	8004a98 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e1a1      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007818:	4b2d      	ldr	r3, [pc, #180]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007824:	4b2a      	ldr	r3, [pc, #168]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	4927      	ldr	r1, [pc, #156]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 8007834:	4313      	orrs	r3, r2
 8007836:	600b      	str	r3, [r1, #0]
 8007838:	e015      	b.n	8007866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800783a:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <HAL_RCC_OscConfig+0x270>)
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007840:	f7fd f92a 	bl	8004a98 <HAL_GetTick>
 8007844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007848:	f7fd f926 	bl	8004a98 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e180      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800785a:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f0      	bne.n	8007848 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d03a      	beq.n	80078e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d019      	beq.n	80078ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800787a:	4b17      	ldr	r3, [pc, #92]	; (80078d8 <HAL_RCC_OscConfig+0x274>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007880:	f7fd f90a 	bl	8004a98 <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007888:	f7fd f906 	bl	8004a98 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e160      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800789a:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <HAL_RCC_OscConfig+0x26c>)
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80078a6:	2001      	movs	r0, #1
 80078a8:	f000 fad8 	bl	8007e5c <RCC_Delay>
 80078ac:	e01c      	b.n	80078e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <HAL_RCC_OscConfig+0x274>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078b4:	f7fd f8f0 	bl	8004a98 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078ba:	e00f      	b.n	80078dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078bc:	f7fd f8ec 	bl	8004a98 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d908      	bls.n	80078dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e146      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
 80078ce:	bf00      	nop
 80078d0:	40021000 	.word	0x40021000
 80078d4:	42420000 	.word	0x42420000
 80078d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078dc:	4b92      	ldr	r3, [pc, #584]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e9      	bne.n	80078bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80a6 	beq.w	8007a42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078f6:	2300      	movs	r3, #0
 80078f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078fa:	4b8b      	ldr	r3, [pc, #556]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10d      	bne.n	8007922 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007906:	4b88      	ldr	r3, [pc, #544]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	4a87      	ldr	r2, [pc, #540]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 800790c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007910:	61d3      	str	r3, [r2, #28]
 8007912:	4b85      	ldr	r3, [pc, #532]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791a:	60bb      	str	r3, [r7, #8]
 800791c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800791e:	2301      	movs	r3, #1
 8007920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007922:	4b82      	ldr	r3, [pc, #520]	; (8007b2c <HAL_RCC_OscConfig+0x4c8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d118      	bne.n	8007960 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800792e:	4b7f      	ldr	r3, [pc, #508]	; (8007b2c <HAL_RCC_OscConfig+0x4c8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a7e      	ldr	r2, [pc, #504]	; (8007b2c <HAL_RCC_OscConfig+0x4c8>)
 8007934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800793a:	f7fd f8ad 	bl	8004a98 <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007942:	f7fd f8a9 	bl	8004a98 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b64      	cmp	r3, #100	; 0x64
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e103      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007954:	4b75      	ldr	r3, [pc, #468]	; (8007b2c <HAL_RCC_OscConfig+0x4c8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d106      	bne.n	8007976 <HAL_RCC_OscConfig+0x312>
 8007968:	4b6f      	ldr	r3, [pc, #444]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	4a6e      	ldr	r2, [pc, #440]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	6213      	str	r3, [r2, #32]
 8007974:	e02d      	b.n	80079d2 <HAL_RCC_OscConfig+0x36e>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10c      	bne.n	8007998 <HAL_RCC_OscConfig+0x334>
 800797e:	4b6a      	ldr	r3, [pc, #424]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	4a69      	ldr	r2, [pc, #420]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	6213      	str	r3, [r2, #32]
 800798a:	4b67      	ldr	r3, [pc, #412]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	4a66      	ldr	r2, [pc, #408]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007990:	f023 0304 	bic.w	r3, r3, #4
 8007994:	6213      	str	r3, [r2, #32]
 8007996:	e01c      	b.n	80079d2 <HAL_RCC_OscConfig+0x36e>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	2b05      	cmp	r3, #5
 800799e:	d10c      	bne.n	80079ba <HAL_RCC_OscConfig+0x356>
 80079a0:	4b61      	ldr	r3, [pc, #388]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	4a60      	ldr	r2, [pc, #384]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079a6:	f043 0304 	orr.w	r3, r3, #4
 80079aa:	6213      	str	r3, [r2, #32]
 80079ac:	4b5e      	ldr	r3, [pc, #376]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	4a5d      	ldr	r2, [pc, #372]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6213      	str	r3, [r2, #32]
 80079b8:	e00b      	b.n	80079d2 <HAL_RCC_OscConfig+0x36e>
 80079ba:	4b5b      	ldr	r3, [pc, #364]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	4a5a      	ldr	r2, [pc, #360]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079c0:	f023 0301 	bic.w	r3, r3, #1
 80079c4:	6213      	str	r3, [r2, #32]
 80079c6:	4b58      	ldr	r3, [pc, #352]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	4a57      	ldr	r2, [pc, #348]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079cc:	f023 0304 	bic.w	r3, r3, #4
 80079d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d015      	beq.n	8007a06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079da:	f7fd f85d 	bl	8004a98 <HAL_GetTick>
 80079de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e0:	e00a      	b.n	80079f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e2:	f7fd f859 	bl	8004a98 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e0b1      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f8:	4b4b      	ldr	r3, [pc, #300]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ee      	beq.n	80079e2 <HAL_RCC_OscConfig+0x37e>
 8007a04:	e014      	b.n	8007a30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a06:	f7fd f847 	bl	8004a98 <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a0c:	e00a      	b.n	8007a24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0e:	f7fd f843 	bl	8004a98 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d901      	bls.n	8007a24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e09b      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a24:	4b40      	ldr	r3, [pc, #256]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1ee      	bne.n	8007a0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d105      	bne.n	8007a42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a36:	4b3c      	ldr	r3, [pc, #240]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	4a3b      	ldr	r2, [pc, #236]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8087 	beq.w	8007b5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a4c:	4b36      	ldr	r3, [pc, #216]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f003 030c 	and.w	r3, r3, #12
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d061      	beq.n	8007b1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d146      	bne.n	8007aee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a60:	4b33      	ldr	r3, [pc, #204]	; (8007b30 <HAL_RCC_OscConfig+0x4cc>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a66:	f7fd f817 	bl	8004a98 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6e:	f7fd f813 	bl	8004a98 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e06d      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a80:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f0      	bne.n	8007a6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a94:	d108      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	4921      	ldr	r1, [pc, #132]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007aa8:	4b1f      	ldr	r3, [pc, #124]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a19      	ldr	r1, [r3, #32]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	491b      	ldr	r1, [pc, #108]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ac0:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <HAL_RCC_OscConfig+0x4cc>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac6:	f7fc ffe7 	bl	8004a98 <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007acc:	e008      	b.n	8007ae0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ace:	f7fc ffe3 	bl	8004a98 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d901      	bls.n	8007ae0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e03d      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ae0:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0f0      	beq.n	8007ace <HAL_RCC_OscConfig+0x46a>
 8007aec:	e035      	b.n	8007b5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aee:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <HAL_RCC_OscConfig+0x4cc>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af4:	f7fc ffd0 	bl	8004a98 <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007afc:	f7fc ffcc 	bl	8004a98 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e026      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b0e:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <HAL_RCC_OscConfig+0x4c4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1f0      	bne.n	8007afc <HAL_RCC_OscConfig+0x498>
 8007b1a:	e01e      	b.n	8007b5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d107      	bne.n	8007b34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e019      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	40007000 	.word	0x40007000
 8007b30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007b34:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <HAL_RCC_OscConfig+0x500>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d106      	bne.n	8007b56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d001      	beq.n	8007b5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40021000 	.word	0x40021000

08007b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0d0      	b.n	8007d1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b7c:	4b6a      	ldr	r3, [pc, #424]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d910      	bls.n	8007bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b8a:	4b67      	ldr	r3, [pc, #412]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f023 0207 	bic.w	r2, r3, #7
 8007b92:	4965      	ldr	r1, [pc, #404]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b9a:	4b63      	ldr	r3, [pc, #396]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d001      	beq.n	8007bac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e0b8      	b.n	8007d1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d020      	beq.n	8007bfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bc4:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4a58      	ldr	r2, [pc, #352]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bdc:	4b53      	ldr	r3, [pc, #332]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4a52      	ldr	r2, [pc, #328]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007be2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007be6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be8:	4b50      	ldr	r3, [pc, #320]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	494d      	ldr	r1, [pc, #308]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d040      	beq.n	8007c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c0e:	4b47      	ldr	r3, [pc, #284]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d115      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e07f      	b.n	8007d1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d107      	bne.n	8007c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c26:	4b41      	ldr	r3, [pc, #260]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e073      	b.n	8007d1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e06b      	b.n	8007d1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c46:	4b39      	ldr	r3, [pc, #228]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f023 0203 	bic.w	r2, r3, #3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4936      	ldr	r1, [pc, #216]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c58:	f7fc ff1e 	bl	8004a98 <HAL_GetTick>
 8007c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5e:	e00a      	b.n	8007c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c60:	f7fc ff1a 	bl	8004a98 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e053      	b.n	8007d1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c76:	4b2d      	ldr	r3, [pc, #180]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f003 020c 	and.w	r2, r3, #12
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d1eb      	bne.n	8007c60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c88:	4b27      	ldr	r3, [pc, #156]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d210      	bcs.n	8007cb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c96:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f023 0207 	bic.w	r2, r3, #7
 8007c9e:	4922      	ldr	r1, [pc, #136]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca6:	4b20      	ldr	r3, [pc, #128]	; (8007d28 <HAL_RCC_ClockConfig+0x1c0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d001      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e032      	b.n	8007d1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc4:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4916      	ldr	r1, [pc, #88]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	490e      	ldr	r1, [pc, #56]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cf6:	f000 f821 	bl	8007d3c <HAL_RCC_GetSysClockFreq>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <HAL_RCC_ClockConfig+0x1c4>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	490a      	ldr	r1, [pc, #40]	; (8007d30 <HAL_RCC_ClockConfig+0x1c8>)
 8007d08:	5ccb      	ldrb	r3, [r1, r3]
 8007d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0e:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <HAL_RCC_ClockConfig+0x1cc>)
 8007d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <HAL_RCC_ClockConfig+0x1d0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fc fe7c 	bl	8004a14 <HAL_InitTick>

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40022000 	.word	0x40022000
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	0800df44 	.word	0x0800df44
 8007d34:	200000c4 	.word	0x200000c4
 8007d38:	200000c8 	.word	0x200000c8

08007d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d3c:	b490      	push	{r4, r7}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007d42:	4b29      	ldr	r3, [pc, #164]	; (8007de8 <HAL_RCC_GetSysClockFreq+0xac>)
 8007d44:	1d3c      	adds	r4, r7, #4
 8007d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007d4c:	f240 2301 	movw	r3, #513	; 0x201
 8007d50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	2300      	movs	r3, #0
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d66:	4b21      	ldr	r3, [pc, #132]	; (8007dec <HAL_RCC_GetSysClockFreq+0xb0>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 030c 	and.w	r3, r3, #12
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d002      	beq.n	8007d7c <HAL_RCC_GetSysClockFreq+0x40>
 8007d76:	2b08      	cmp	r3, #8
 8007d78:	d003      	beq.n	8007d82 <HAL_RCC_GetSysClockFreq+0x46>
 8007d7a:	e02b      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d7c:	4b1c      	ldr	r3, [pc, #112]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d7e:	623b      	str	r3, [r7, #32]
      break;
 8007d80:	e02b      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	0c9b      	lsrs	r3, r3, #18
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	3328      	adds	r3, #40	; 0x28
 8007d8c:	443b      	add	r3, r7
 8007d8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007d92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d012      	beq.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d9e:	4b13      	ldr	r3, [pc, #76]	; (8007dec <HAL_RCC_GetSysClockFreq+0xb0>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	0c5b      	lsrs	r3, r3, #17
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	3328      	adds	r3, #40	; 0x28
 8007daa:	443b      	add	r3, r7
 8007dac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007db0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	4a0e      	ldr	r2, [pc, #56]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007db6:	fb03 f202 	mul.w	r2, r3, r2
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc2:	e004      	b.n	8007dce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4a0b      	ldr	r2, [pc, #44]	; (8007df4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dc8:	fb02 f303 	mul.w	r3, r2, r3
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	623b      	str	r3, [r7, #32]
      break;
 8007dd2:	e002      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007dd6:	623b      	str	r3, [r7, #32]
      break;
 8007dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3728      	adds	r7, #40	; 0x28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc90      	pop	{r4, r7}
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	0800dee4 	.word	0x0800dee4
 8007dec:	40021000 	.word	0x40021000
 8007df0:	007a1200 	.word	0x007a1200
 8007df4:	003d0900 	.word	0x003d0900

08007df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr
 8007e08:	200000c4 	.word	0x200000c4

08007e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e10:	f7ff fff2 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	4903      	ldr	r1, [pc, #12]	; (8007e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e22:	5ccb      	ldrb	r3, [r1, r3]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	0800df54 	.word	0x0800df54

08007e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e38:	f7ff ffde 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	0adb      	lsrs	r3, r3, #11
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	4903      	ldr	r1, [pc, #12]	; (8007e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e4a:	5ccb      	ldrb	r3, [r1, r3]
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40021000 	.word	0x40021000
 8007e58:	0800df54 	.word	0x0800df54

08007e5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <RCC_Delay+0x34>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <RCC_Delay+0x38>)
 8007e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6e:	0a5b      	lsrs	r3, r3, #9
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	fb02 f303 	mul.w	r3, r2, r3
 8007e76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e78:	bf00      	nop
  }
  while (Delay --);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1e5a      	subs	r2, r3, #1
 8007e7e:	60fa      	str	r2, [r7, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f9      	bne.n	8007e78 <RCC_Delay+0x1c>
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr
 8007e90:	200000c4 	.word	0x200000c4
 8007e94:	10624dd3 	.word	0x10624dd3

08007e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e041      	b.n	8007f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fc fbcc 	bl	800465c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	f000 f944 	bl	8008164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d001      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e03a      	b.n	8007fc6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0201 	orr.w	r2, r2, #1
 8007f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a18      	ldr	r2, [pc, #96]	; (8007fd0 <HAL_TIM_Base_Start_IT+0x98>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00e      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0x58>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7a:	d009      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0x58>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a14      	ldr	r2, [pc, #80]	; (8007fd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d004      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0x58>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d111      	bne.n	8007fb4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b06      	cmp	r3, #6
 8007fa0:	d010      	beq.n	8007fc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb2:	e007      	b.n	8007fc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0201 	orr.w	r2, r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000800 	.word	0x40000800

08007fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIM_ConfigClockSource+0x18>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e0b3      	b.n	800815c <HAL_TIM_ConfigClockSource+0x180>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800801a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802c:	d03e      	beq.n	80080ac <HAL_TIM_ConfigClockSource+0xd0>
 800802e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008032:	f200 8087 	bhi.w	8008144 <HAL_TIM_ConfigClockSource+0x168>
 8008036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803a:	f000 8085 	beq.w	8008148 <HAL_TIM_ConfigClockSource+0x16c>
 800803e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008042:	d87f      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
 8008044:	2b70      	cmp	r3, #112	; 0x70
 8008046:	d01a      	beq.n	800807e <HAL_TIM_ConfigClockSource+0xa2>
 8008048:	2b70      	cmp	r3, #112	; 0x70
 800804a:	d87b      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
 800804c:	2b60      	cmp	r3, #96	; 0x60
 800804e:	d050      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x116>
 8008050:	2b60      	cmp	r3, #96	; 0x60
 8008052:	d877      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
 8008054:	2b50      	cmp	r3, #80	; 0x50
 8008056:	d03c      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0xf6>
 8008058:	2b50      	cmp	r3, #80	; 0x50
 800805a:	d873      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	d058      	beq.n	8008112 <HAL_TIM_ConfigClockSource+0x136>
 8008060:	2b40      	cmp	r3, #64	; 0x40
 8008062:	d86f      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
 8008064:	2b30      	cmp	r3, #48	; 0x30
 8008066:	d064      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x156>
 8008068:	2b30      	cmp	r3, #48	; 0x30
 800806a:	d86b      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
 800806c:	2b20      	cmp	r3, #32
 800806e:	d060      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x156>
 8008070:	2b20      	cmp	r3, #32
 8008072:	d867      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d05c      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x156>
 8008078:	2b10      	cmp	r3, #16
 800807a:	d05a      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800807c:	e062      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6899      	ldr	r1, [r3, #8]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f000 f942 	bl	8008316 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	609a      	str	r2, [r3, #8]
      break;
 80080aa:	e04e      	b.n	800814a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	6899      	ldr	r1, [r3, #8]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f000 f92b 	bl	8008316 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ce:	609a      	str	r2, [r3, #8]
      break;
 80080d0:	e03b      	b.n	800814a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6859      	ldr	r1, [r3, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	461a      	mov	r2, r3
 80080e0:	f000 f8a2 	bl	8008228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2150      	movs	r1, #80	; 0x50
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 f8f9 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 80080f0:	e02b      	b.n	800814a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6859      	ldr	r1, [r3, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	461a      	mov	r2, r3
 8008100:	f000 f8c0 	bl	8008284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2160      	movs	r1, #96	; 0x60
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f8e9 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 8008110:	e01b      	b.n	800814a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6859      	ldr	r1, [r3, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	461a      	mov	r2, r3
 8008120:	f000 f882 	bl	8008228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2140      	movs	r1, #64	; 0x40
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f8d9 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 8008130:	e00b      	b.n	800814a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4619      	mov	r1, r3
 800813c:	4610      	mov	r0, r2
 800813e:	f000 f8d0 	bl	80082e2 <TIM_ITRx_SetConfig>
        break;
 8008142:	e002      	b.n	800814a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008144:	bf00      	nop
 8008146:	e000      	b.n	800814a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008148:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a29      	ldr	r2, [pc, #164]	; (800821c <TIM_Base_SetConfig+0xb8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00b      	beq.n	8008194 <TIM_Base_SetConfig+0x30>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d007      	beq.n	8008194 <TIM_Base_SetConfig+0x30>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a26      	ldr	r2, [pc, #152]	; (8008220 <TIM_Base_SetConfig+0xbc>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_Base_SetConfig+0x30>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a25      	ldr	r2, [pc, #148]	; (8008224 <TIM_Base_SetConfig+0xc0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d108      	bne.n	80081a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a1c      	ldr	r2, [pc, #112]	; (800821c <TIM_Base_SetConfig+0xb8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00b      	beq.n	80081c6 <TIM_Base_SetConfig+0x62>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b4:	d007      	beq.n	80081c6 <TIM_Base_SetConfig+0x62>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a19      	ldr	r2, [pc, #100]	; (8008220 <TIM_Base_SetConfig+0xbc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d003      	beq.n	80081c6 <TIM_Base_SetConfig+0x62>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a18      	ldr	r2, [pc, #96]	; (8008224 <TIM_Base_SetConfig+0xc0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d108      	bne.n	80081d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a07      	ldr	r2, [pc, #28]	; (800821c <TIM_Base_SetConfig+0xb8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d103      	bne.n	800820c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	691a      	ldr	r2, [r3, #16]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	615a      	str	r2, [r3, #20]
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr
 800821c:	40012c00 	.word	0x40012c00
 8008220:	40000400 	.word	0x40000400
 8008224:	40000800 	.word	0x40000800

08008228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f023 0201 	bic.w	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f023 030a 	bic.w	r3, r3, #10
 8008264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	bc80      	pop	{r7}
 8008282:	4770      	bx	lr

08008284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f023 0210 	bic.w	r2, r3, #16
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	031b      	lsls	r3, r3, #12
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	621a      	str	r2, [r3, #32]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	f043 0307 	orr.w	r3, r3, #7
 8008304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	609a      	str	r2, [r3, #8]
}
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008316:	b480      	push	{r7}
 8008318:	b087      	sub	sp, #28
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
 8008322:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008330:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	021a      	lsls	r2, r3, #8
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	431a      	orrs	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4313      	orrs	r3, r2
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	609a      	str	r2, [r3, #8]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008368:	2302      	movs	r3, #2
 800836a:	e046      	b.n	80083fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a16      	ldr	r2, [pc, #88]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00e      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b8:	d009      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d004      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a10      	ldr	r2, [pc, #64]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d10c      	bne.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc80      	pop	{r7}
 8008402:	4770      	bx	lr
 8008404:	40012c00 	.word	0x40012c00
 8008408:	40000400 	.word	0x40000400
 800840c:	40000800 	.word	0x40000800

08008410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e03f      	b.n	80084a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fc f942 	bl	80046c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2224      	movs	r2, #36	; 0x24
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f905 	bl	8008664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	695a      	ldr	r2, [r3, #20]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b08a      	sub	sp, #40	; 0x28
 80084ae:	af02      	add	r7, sp, #8
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	4613      	mov	r3, r2
 80084b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d17c      	bne.n	80085c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <HAL_UART_Transmit+0x2c>
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e075      	b.n	80085c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <HAL_UART_Transmit+0x3e>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e06e      	b.n	80085c6 <HAL_UART_Transmit+0x11c>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2221      	movs	r2, #33	; 0x21
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084fe:	f7fc facb 	bl	8004a98 <HAL_GetTick>
 8008502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	88fa      	ldrh	r2, [r7, #6]
 800850e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008518:	d108      	bne.n	800852c <HAL_UART_Transmit+0x82>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d104      	bne.n	800852c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	e003      	b.n	8008534 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800853c:	e02a      	b.n	8008594 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	2180      	movs	r1, #128	; 0x80
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 f840 	bl	80085ce <UART_WaitOnFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e036      	b.n	80085c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10b      	bne.n	8008576 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800856c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	3302      	adds	r3, #2
 8008572:	61bb      	str	r3, [r7, #24]
 8008574:	e007      	b.n	8008586 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	781a      	ldrb	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	3301      	adds	r3, #1
 8008584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800858a:	b29b      	uxth	r3, r3
 800858c:	3b01      	subs	r3, #1
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1cf      	bne.n	800853e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2200      	movs	r2, #0
 80085a6:	2140      	movs	r1, #64	; 0x40
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 f810 	bl	80085ce <UART_WaitOnFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e006      	b.n	80085c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	e000      	b.n	80085c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085c4:	2302      	movs	r3, #2
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	603b      	str	r3, [r7, #0]
 80085da:	4613      	mov	r3, r2
 80085dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085de:	e02c      	b.n	800863a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d028      	beq.n	800863a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <UART_WaitOnFlagUntilTimeout+0x30>
 80085ee:	f7fc fa53 	bl	8004a98 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d21d      	bcs.n	800863a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800860c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	695a      	ldr	r2, [r3, #20]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0201 	bic.w	r2, r2, #1
 800861c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2220      	movs	r2, #32
 8008622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e00f      	b.n	800865a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4013      	ands	r3, r2
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	bf0c      	ite	eq
 800864a:	2301      	moveq	r3, #1
 800864c:	2300      	movne	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	429a      	cmp	r2, r3
 8008656:	d0c3      	beq.n	80085e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800869e:	f023 030c 	bic.w	r3, r3, #12
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	430b      	orrs	r3, r1
 80086aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a2c      	ldr	r2, [pc, #176]	; (8008778 <UART_SetConfig+0x114>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d103      	bne.n	80086d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086cc:	f7ff fbb2 	bl	8007e34 <HAL_RCC_GetPCLK2Freq>
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	e002      	b.n	80086da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80086d4:	f7ff fb9a 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 80086d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009a      	lsls	r2, r3, #2
 80086e4:	441a      	add	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f0:	4a22      	ldr	r2, [pc, #136]	; (800877c <UART_SetConfig+0x118>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	0119      	lsls	r1, r3, #4
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009a      	lsls	r2, r3, #2
 8008704:	441a      	add	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008710:	4b1a      	ldr	r3, [pc, #104]	; (800877c <UART_SetConfig+0x118>)
 8008712:	fba3 0302 	umull	r0, r3, r3, r2
 8008716:	095b      	lsrs	r3, r3, #5
 8008718:	2064      	movs	r0, #100	; 0x64
 800871a:	fb00 f303 	mul.w	r3, r0, r3
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	3332      	adds	r3, #50	; 0x32
 8008724:	4a15      	ldr	r2, [pc, #84]	; (800877c <UART_SetConfig+0x118>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008730:	4419      	add	r1, r3
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009a      	lsls	r2, r3, #2
 800873c:	441a      	add	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	fbb2 f2f3 	udiv	r2, r2, r3
 8008748:	4b0c      	ldr	r3, [pc, #48]	; (800877c <UART_SetConfig+0x118>)
 800874a:	fba3 0302 	umull	r0, r3, r3, r2
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	2064      	movs	r0, #100	; 0x64
 8008752:	fb00 f303 	mul.w	r3, r0, r3
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	3332      	adds	r3, #50	; 0x32
 800875c:	4a07      	ldr	r2, [pc, #28]	; (800877c <UART_SetConfig+0x118>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	f003 020f 	and.w	r2, r3, #15
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	440a      	add	r2, r1
 800876e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	40013800 	.word	0x40013800
 800877c:	51eb851f 	.word	0x51eb851f

08008780 <powf>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	460c      	mov	r4, r1
 8008784:	4606      	mov	r6, r0
 8008786:	f000 f849 	bl	800881c <__ieee754_powf>
 800878a:	4621      	mov	r1, r4
 800878c:	4605      	mov	r5, r0
 800878e:	4620      	mov	r0, r4
 8008790:	f7f8 fcbe 	bl	8001110 <__aeabi_fcmpun>
 8008794:	bb68      	cbnz	r0, 80087f2 <powf+0x72>
 8008796:	2100      	movs	r1, #0
 8008798:	4630      	mov	r0, r6
 800879a:	f7f8 fc87 	bl	80010ac <__aeabi_fcmpeq>
 800879e:	b190      	cbz	r0, 80087c6 <powf+0x46>
 80087a0:	2100      	movs	r1, #0
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7f8 fc82 	bl	80010ac <__aeabi_fcmpeq>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d133      	bne.n	8008814 <powf+0x94>
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fc14 	bl	8008fda <finitef>
 80087b2:	b1f0      	cbz	r0, 80087f2 <powf+0x72>
 80087b4:	2100      	movs	r1, #0
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7f8 fc82 	bl	80010c0 <__aeabi_fcmplt>
 80087bc:	b1c8      	cbz	r0, 80087f2 <powf+0x72>
 80087be:	f000 fc61 	bl	8009084 <__errno>
 80087c2:	2322      	movs	r3, #34	; 0x22
 80087c4:	e014      	b.n	80087f0 <powf+0x70>
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 fc07 	bl	8008fda <finitef>
 80087cc:	b998      	cbnz	r0, 80087f6 <powf+0x76>
 80087ce:	4630      	mov	r0, r6
 80087d0:	f000 fc03 	bl	8008fda <finitef>
 80087d4:	b178      	cbz	r0, 80087f6 <powf+0x76>
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fbff 	bl	8008fda <finitef>
 80087dc:	b158      	cbz	r0, 80087f6 <powf+0x76>
 80087de:	4629      	mov	r1, r5
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7f8 fc95 	bl	8001110 <__aeabi_fcmpun>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d0e9      	beq.n	80087be <powf+0x3e>
 80087ea:	f000 fc4b 	bl	8009084 <__errno>
 80087ee:	2321      	movs	r3, #33	; 0x21
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	4628      	mov	r0, r5
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
 80087f6:	2100      	movs	r1, #0
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7f8 fc57 	bl	80010ac <__aeabi_fcmpeq>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0f7      	beq.n	80087f2 <powf+0x72>
 8008802:	4630      	mov	r0, r6
 8008804:	f000 fbe9 	bl	8008fda <finitef>
 8008808:	2800      	cmp	r0, #0
 800880a:	d0f2      	beq.n	80087f2 <powf+0x72>
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fbe4 	bl	8008fda <finitef>
 8008812:	e7d3      	b.n	80087bc <powf+0x3c>
 8008814:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8008818:	e7eb      	b.n	80087f2 <powf+0x72>
	...

0800881c <__ieee754_powf>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8008824:	4681      	mov	r9, r0
 8008826:	460f      	mov	r7, r1
 8008828:	4680      	mov	r8, r0
 800882a:	460c      	mov	r4, r1
 800882c:	b087      	sub	sp, #28
 800882e:	d10d      	bne.n	800884c <__ieee754_powf+0x30>
 8008830:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8008834:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008838:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 800883c:	f240 8338 	bls.w	8008eb0 <__ieee754_powf+0x694>
 8008840:	4639      	mov	r1, r7
 8008842:	4648      	mov	r0, r9
 8008844:	f7f8 f996 	bl	8000b74 <__addsf3>
 8008848:	4601      	mov	r1, r0
 800884a:	e040      	b.n	80088ce <__ieee754_powf+0xb2>
 800884c:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008850:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008854:	dcf4      	bgt.n	8008840 <__ieee754_powf+0x24>
 8008856:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800885a:	dd08      	ble.n	800886e <__ieee754_powf+0x52>
 800885c:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8008860:	d1ee      	bne.n	8008840 <__ieee754_powf+0x24>
 8008862:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 8008866:	0064      	lsls	r4, r4, #1
 8008868:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800886c:	e7e6      	b.n	800883c <__ieee754_powf+0x20>
 800886e:	2800      	cmp	r0, #0
 8008870:	da20      	bge.n	80088b4 <__ieee754_powf+0x98>
 8008872:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 8008876:	da2e      	bge.n	80088d6 <__ieee754_powf+0xba>
 8008878:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800887c:	f2c0 831d 	blt.w	8008eba <__ieee754_powf+0x69e>
 8008880:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8008884:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008888:	fa4a f503 	asr.w	r5, sl, r3
 800888c:	fa05 f303 	lsl.w	r3, r5, r3
 8008890:	4553      	cmp	r3, sl
 8008892:	f040 8312 	bne.w	8008eba <__ieee754_powf+0x69e>
 8008896:	f005 0501 	and.w	r5, r5, #1
 800889a:	f1c5 0502 	rsb	r5, r5, #2
 800889e:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 80088a2:	d120      	bne.n	80088e6 <__ieee754_powf+0xca>
 80088a4:	2c00      	cmp	r4, #0
 80088a6:	4649      	mov	r1, r9
 80088a8:	da11      	bge.n	80088ce <__ieee754_powf+0xb2>
 80088aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80088ae:	f7f8 fb1d 	bl	8000eec <__aeabi_fdiv>
 80088b2:	e7c9      	b.n	8008848 <__ieee754_powf+0x2c>
 80088b4:	2500      	movs	r5, #0
 80088b6:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 80088ba:	d1f0      	bne.n	800889e <__ieee754_powf+0x82>
 80088bc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80088c0:	f000 82f6 	beq.w	8008eb0 <__ieee754_powf+0x694>
 80088c4:	dd09      	ble.n	80088da <__ieee754_powf+0xbe>
 80088c6:	2c00      	cmp	r4, #0
 80088c8:	f2c0 82f5 	blt.w	8008eb6 <__ieee754_powf+0x69a>
 80088cc:	4639      	mov	r1, r7
 80088ce:	4608      	mov	r0, r1
 80088d0:	b007      	add	sp, #28
 80088d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	2502      	movs	r5, #2
 80088d8:	e7ed      	b.n	80088b6 <__ieee754_powf+0x9a>
 80088da:	2c00      	cmp	r4, #0
 80088dc:	f280 82eb 	bge.w	8008eb6 <__ieee754_powf+0x69a>
 80088e0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80088e4:	e7f3      	b.n	80088ce <__ieee754_powf+0xb2>
 80088e6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80088ea:	d104      	bne.n	80088f6 <__ieee754_powf+0xda>
 80088ec:	4649      	mov	r1, r9
 80088ee:	4648      	mov	r0, r9
 80088f0:	f7f8 fa48 	bl	8000d84 <__aeabi_fmul>
 80088f4:	e7a8      	b.n	8008848 <__ieee754_powf+0x2c>
 80088f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80088fa:	4648      	mov	r0, r9
 80088fc:	d107      	bne.n	800890e <__ieee754_powf+0xf2>
 80088fe:	f1b8 0f00 	cmp.w	r8, #0
 8008902:	db04      	blt.n	800890e <__ieee754_powf+0xf2>
 8008904:	b007      	add	sp, #28
 8008906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	f000 baef 	b.w	8008eec <__ieee754_sqrtf>
 800890e:	f000 fb61 	bl	8008fd4 <fabsf>
 8008912:	4601      	mov	r1, r0
 8008914:	b126      	cbz	r6, 8008920 <__ieee754_powf+0x104>
 8008916:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800891a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800891e:	d118      	bne.n	8008952 <__ieee754_powf+0x136>
 8008920:	2c00      	cmp	r4, #0
 8008922:	da04      	bge.n	800892e <__ieee754_powf+0x112>
 8008924:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008928:	f7f8 fae0 	bl	8000eec <__aeabi_fdiv>
 800892c:	4601      	mov	r1, r0
 800892e:	f1b8 0f00 	cmp.w	r8, #0
 8008932:	dacc      	bge.n	80088ce <__ieee754_powf+0xb2>
 8008934:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 8008938:	ea56 0305 	orrs.w	r3, r6, r5
 800893c:	d104      	bne.n	8008948 <__ieee754_powf+0x12c>
 800893e:	4608      	mov	r0, r1
 8008940:	f7f8 f916 	bl	8000b70 <__aeabi_fsub>
 8008944:	4601      	mov	r1, r0
 8008946:	e7b2      	b.n	80088ae <__ieee754_powf+0x92>
 8008948:	2d01      	cmp	r5, #1
 800894a:	d1c0      	bne.n	80088ce <__ieee754_powf+0xb2>
 800894c:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008950:	e77a      	b.n	8008848 <__ieee754_powf+0x2c>
 8008952:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8008956:	3b01      	subs	r3, #1
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	432b      	orrs	r3, r5
 800895c:	d101      	bne.n	8008962 <__ieee754_powf+0x146>
 800895e:	4649      	mov	r1, r9
 8008960:	e7ed      	b.n	800893e <__ieee754_powf+0x122>
 8008962:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8008966:	f340 809f 	ble.w	8008aa8 <__ieee754_powf+0x28c>
 800896a:	4b48      	ldr	r3, [pc, #288]	; (8008a8c <__ieee754_powf+0x270>)
 800896c:	429e      	cmp	r6, r3
 800896e:	dc07      	bgt.n	8008980 <__ieee754_powf+0x164>
 8008970:	2c00      	cmp	r4, #0
 8008972:	da0a      	bge.n	800898a <__ieee754_powf+0x16e>
 8008974:	2000      	movs	r0, #0
 8008976:	b007      	add	sp, #28
 8008978:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	f000 bb20 	b.w	8008fc0 <__math_oflowf>
 8008980:	4b43      	ldr	r3, [pc, #268]	; (8008a90 <__ieee754_powf+0x274>)
 8008982:	429e      	cmp	r6, r3
 8008984:	dd07      	ble.n	8008996 <__ieee754_powf+0x17a>
 8008986:	2c00      	cmp	r4, #0
 8008988:	dcf4      	bgt.n	8008974 <__ieee754_powf+0x158>
 800898a:	2000      	movs	r0, #0
 800898c:	b007      	add	sp, #28
 800898e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008992:	f000 bb11 	b.w	8008fb8 <__math_uflowf>
 8008996:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800899a:	f7f8 f8e9 	bl	8000b70 <__aeabi_fsub>
 800899e:	493d      	ldr	r1, [pc, #244]	; (8008a94 <__ieee754_powf+0x278>)
 80089a0:	4606      	mov	r6, r0
 80089a2:	f7f8 f9ef 	bl	8000d84 <__aeabi_fmul>
 80089a6:	493c      	ldr	r1, [pc, #240]	; (8008a98 <__ieee754_powf+0x27c>)
 80089a8:	4680      	mov	r8, r0
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7f8 f9ea 	bl	8000d84 <__aeabi_fmul>
 80089b0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80089b4:	4681      	mov	r9, r0
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7f8 f9e4 	bl	8000d84 <__aeabi_fmul>
 80089bc:	4601      	mov	r1, r0
 80089be:	4837      	ldr	r0, [pc, #220]	; (8008a9c <__ieee754_powf+0x280>)
 80089c0:	f7f8 f8d6 	bl	8000b70 <__aeabi_fsub>
 80089c4:	4631      	mov	r1, r6
 80089c6:	f7f8 f9dd 	bl	8000d84 <__aeabi_fmul>
 80089ca:	4601      	mov	r1, r0
 80089cc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80089d0:	f7f8 f8ce 	bl	8000b70 <__aeabi_fsub>
 80089d4:	4631      	mov	r1, r6
 80089d6:	4682      	mov	sl, r0
 80089d8:	4630      	mov	r0, r6
 80089da:	f7f8 f9d3 	bl	8000d84 <__aeabi_fmul>
 80089de:	4601      	mov	r1, r0
 80089e0:	4650      	mov	r0, sl
 80089e2:	f7f8 f9cf 	bl	8000d84 <__aeabi_fmul>
 80089e6:	492e      	ldr	r1, [pc, #184]	; (8008aa0 <__ieee754_powf+0x284>)
 80089e8:	f7f8 f9cc 	bl	8000d84 <__aeabi_fmul>
 80089ec:	4601      	mov	r1, r0
 80089ee:	4648      	mov	r0, r9
 80089f0:	f7f8 f8be 	bl	8000b70 <__aeabi_fsub>
 80089f4:	4601      	mov	r1, r0
 80089f6:	4606      	mov	r6, r0
 80089f8:	4640      	mov	r0, r8
 80089fa:	f7f8 f8bb 	bl	8000b74 <__addsf3>
 80089fe:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008a02:	f029 090f 	bic.w	r9, r9, #15
 8008a06:	4641      	mov	r1, r8
 8008a08:	4648      	mov	r0, r9
 8008a0a:	f7f8 f8b1 	bl	8000b70 <__aeabi_fsub>
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7f8 f8ad 	bl	8000b70 <__aeabi_fsub>
 8008a16:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	3d01      	subs	r5, #1
 8008a1e:	f024 040f 	bic.w	r4, r4, #15
 8008a22:	432b      	orrs	r3, r5
 8008a24:	4606      	mov	r6, r0
 8008a26:	4621      	mov	r1, r4
 8008a28:	4638      	mov	r0, r7
 8008a2a:	bf14      	ite	ne
 8008a2c:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8008a30:	4d1c      	ldreq	r5, [pc, #112]	; (8008aa4 <__ieee754_powf+0x288>)
 8008a32:	f7f8 f89d 	bl	8000b70 <__aeabi_fsub>
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f8 f9a4 	bl	8000d84 <__aeabi_fmul>
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	4680      	mov	r8, r0
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7f8 f99f 	bl	8000d84 <__aeabi_fmul>
 8008a46:	4601      	mov	r1, r0
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f7f8 f893 	bl	8000b74 <__addsf3>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4606      	mov	r6, r0
 8008a52:	4648      	mov	r0, r9
 8008a54:	f7f8 f996 	bl	8000d84 <__aeabi_fmul>
 8008a58:	4601      	mov	r1, r0
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	4681      	mov	r9, r0
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7f8 f888 	bl	8000b74 <__addsf3>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	4682      	mov	sl, r0
 8008a68:	4680      	mov	r8, r0
 8008a6a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8008a6e:	f340 8201 	ble.w	8008e74 <__ieee754_powf+0x658>
 8008a72:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8008a76:	f340 814f 	ble.w	8008d18 <__ieee754_powf+0x4fc>
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f7f8 fb1f 	bl	80010c0 <__aeabi_fcmplt>
 8008a82:	3800      	subs	r0, #0
 8008a84:	bf18      	it	ne
 8008a86:	2001      	movne	r0, #1
 8008a88:	e775      	b.n	8008976 <__ieee754_powf+0x15a>
 8008a8a:	bf00      	nop
 8008a8c:	3f7ffff3 	.word	0x3f7ffff3
 8008a90:	3f800007 	.word	0x3f800007
 8008a94:	3fb8aa00 	.word	0x3fb8aa00
 8008a98:	36eca570 	.word	0x36eca570
 8008a9c:	3eaaaaab 	.word	0x3eaaaaab
 8008aa0:	3fb8aa3b 	.word	0x3fb8aa3b
 8008aa4:	bf800000 	.word	0xbf800000
 8008aa8:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8008aac:	f040 8111 	bne.w	8008cd2 <__ieee754_powf+0x4b6>
 8008ab0:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8008ab4:	f7f8 f966 	bl	8000d84 <__aeabi_fmul>
 8008ab8:	f06f 0217 	mvn.w	r2, #23
 8008abc:	4606      	mov	r6, r0
 8008abe:	15f3      	asrs	r3, r6, #23
 8008ac0:	3b7f      	subs	r3, #127	; 0x7f
 8008ac2:	4413      	add	r3, r2
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	4b85      	ldr	r3, [pc, #532]	; (8008cdc <__ieee754_powf+0x4c0>)
 8008ac8:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8008acc:	4298      	cmp	r0, r3
 8008ace:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8008ad2:	dd08      	ble.n	8008ae6 <__ieee754_powf+0x2ca>
 8008ad4:	4b82      	ldr	r3, [pc, #520]	; (8008ce0 <__ieee754_powf+0x4c4>)
 8008ad6:	4298      	cmp	r0, r3
 8008ad8:	f340 80fd 	ble.w	8008cd6 <__ieee754_powf+0x4ba>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	9900      	ldr	r1, [sp, #0]
 8008aec:	4a7d      	ldr	r2, [pc, #500]	; (8008ce4 <__ieee754_powf+0x4c8>)
 8008aee:	4630      	mov	r0, r6
 8008af0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008af4:	9603      	str	r6, [sp, #12]
 8008af6:	4611      	mov	r1, r2
 8008af8:	9205      	str	r2, [sp, #20]
 8008afa:	f7f8 f839 	bl	8000b70 <__aeabi_fsub>
 8008afe:	9a05      	ldr	r2, [sp, #20]
 8008b00:	9b03      	ldr	r3, [sp, #12]
 8008b02:	4683      	mov	fp, r0
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	9203      	str	r2, [sp, #12]
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	f7f8 f832 	bl	8000b74 <__addsf3>
 8008b10:	4601      	mov	r1, r0
 8008b12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008b16:	f7f8 f9e9 	bl	8000eec <__aeabi_fdiv>
 8008b1a:	4682      	mov	sl, r0
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	4658      	mov	r0, fp
 8008b20:	f7f8 f930 	bl	8000d84 <__aeabi_fmul>
 8008b24:	1076      	asrs	r6, r6, #1
 8008b26:	9b00      	ldr	r3, [sp, #0]
 8008b28:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8008b2c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008b30:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8008b34:	f029 090f 	bic.w	r9, r9, #15
 8008b38:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4648      	mov	r0, r9
 8008b42:	f7f8 f91f 	bl	8000d84 <__aeabi_fmul>
 8008b46:	4601      	mov	r1, r0
 8008b48:	4658      	mov	r0, fp
 8008b4a:	f7f8 f811 	bl	8000b70 <__aeabi_fsub>
 8008b4e:	9a03      	ldr	r2, [sp, #12]
 8008b50:	4683      	mov	fp, r0
 8008b52:	4611      	mov	r1, r2
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7f8 f80b 	bl	8000b70 <__aeabi_fsub>
 8008b5a:	9b04      	ldr	r3, [sp, #16]
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7f8 f806 	bl	8000b70 <__aeabi_fsub>
 8008b64:	4649      	mov	r1, r9
 8008b66:	f7f8 f90d 	bl	8000d84 <__aeabi_fmul>
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f7f7 ffff 	bl	8000b70 <__aeabi_fsub>
 8008b72:	4651      	mov	r1, sl
 8008b74:	f7f8 f906 	bl	8000d84 <__aeabi_fmul>
 8008b78:	4641      	mov	r1, r8
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	f7f8 f901 	bl	8000d84 <__aeabi_fmul>
 8008b82:	4606      	mov	r6, r0
 8008b84:	4958      	ldr	r1, [pc, #352]	; (8008ce8 <__ieee754_powf+0x4cc>)
 8008b86:	f7f8 f8fd 	bl	8000d84 <__aeabi_fmul>
 8008b8a:	4958      	ldr	r1, [pc, #352]	; (8008cec <__ieee754_powf+0x4d0>)
 8008b8c:	f7f7 fff2 	bl	8000b74 <__addsf3>
 8008b90:	4631      	mov	r1, r6
 8008b92:	f7f8 f8f7 	bl	8000d84 <__aeabi_fmul>
 8008b96:	4956      	ldr	r1, [pc, #344]	; (8008cf0 <__ieee754_powf+0x4d4>)
 8008b98:	f7f7 ffec 	bl	8000b74 <__addsf3>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	f7f8 f8f1 	bl	8000d84 <__aeabi_fmul>
 8008ba2:	4954      	ldr	r1, [pc, #336]	; (8008cf4 <__ieee754_powf+0x4d8>)
 8008ba4:	f7f7 ffe6 	bl	8000b74 <__addsf3>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	f7f8 f8eb 	bl	8000d84 <__aeabi_fmul>
 8008bae:	4952      	ldr	r1, [pc, #328]	; (8008cf8 <__ieee754_powf+0x4dc>)
 8008bb0:	f7f7 ffe0 	bl	8000b74 <__addsf3>
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	f7f8 f8e5 	bl	8000d84 <__aeabi_fmul>
 8008bba:	4950      	ldr	r1, [pc, #320]	; (8008cfc <__ieee754_powf+0x4e0>)
 8008bbc:	f7f7 ffda 	bl	8000b74 <__addsf3>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4683      	mov	fp, r0
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7f8 f8dd 	bl	8000d84 <__aeabi_fmul>
 8008bca:	4601      	mov	r1, r0
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f7f8 f8d9 	bl	8000d84 <__aeabi_fmul>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f7f7 ffcc 	bl	8000b74 <__addsf3>
 8008bdc:	4651      	mov	r1, sl
 8008bde:	f7f8 f8d1 	bl	8000d84 <__aeabi_fmul>
 8008be2:	4631      	mov	r1, r6
 8008be4:	f7f7 ffc6 	bl	8000b74 <__addsf3>
 8008be8:	4649      	mov	r1, r9
 8008bea:	4683      	mov	fp, r0
 8008bec:	4648      	mov	r0, r9
 8008bee:	f7f8 f8c9 	bl	8000d84 <__aeabi_fmul>
 8008bf2:	4943      	ldr	r1, [pc, #268]	; (8008d00 <__ieee754_powf+0x4e4>)
 8008bf4:	9003      	str	r0, [sp, #12]
 8008bf6:	f7f7 ffbd 	bl	8000b74 <__addsf3>
 8008bfa:	4659      	mov	r1, fp
 8008bfc:	f7f7 ffba 	bl	8000b74 <__addsf3>
 8008c00:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008c04:	f026 060f 	bic.w	r6, r6, #15
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4648      	mov	r0, r9
 8008c0c:	f7f8 f8ba 	bl	8000d84 <__aeabi_fmul>
 8008c10:	493b      	ldr	r1, [pc, #236]	; (8008d00 <__ieee754_powf+0x4e4>)
 8008c12:	4681      	mov	r9, r0
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7f7 ffab 	bl	8000b70 <__aeabi_fsub>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	f7f7 ffa7 	bl	8000b70 <__aeabi_fsub>
 8008c22:	4601      	mov	r1, r0
 8008c24:	4658      	mov	r0, fp
 8008c26:	f7f7 ffa3 	bl	8000b70 <__aeabi_fsub>
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	f7f8 f8aa 	bl	8000d84 <__aeabi_fmul>
 8008c30:	4631      	mov	r1, r6
 8008c32:	4680      	mov	r8, r0
 8008c34:	4650      	mov	r0, sl
 8008c36:	f7f8 f8a5 	bl	8000d84 <__aeabi_fmul>
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	4640      	mov	r0, r8
 8008c3e:	f7f7 ff99 	bl	8000b74 <__addsf3>
 8008c42:	4682      	mov	sl, r0
 8008c44:	4601      	mov	r1, r0
 8008c46:	4648      	mov	r0, r9
 8008c48:	f7f7 ff94 	bl	8000b74 <__addsf3>
 8008c4c:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008c50:	f026 060f 	bic.w	r6, r6, #15
 8008c54:	4630      	mov	r0, r6
 8008c56:	492b      	ldr	r1, [pc, #172]	; (8008d04 <__ieee754_powf+0x4e8>)
 8008c58:	f7f8 f894 	bl	8000d84 <__aeabi_fmul>
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	4680      	mov	r8, r0
 8008c60:	4630      	mov	r0, r6
 8008c62:	f7f7 ff85 	bl	8000b70 <__aeabi_fsub>
 8008c66:	4601      	mov	r1, r0
 8008c68:	4650      	mov	r0, sl
 8008c6a:	f7f7 ff81 	bl	8000b70 <__aeabi_fsub>
 8008c6e:	4926      	ldr	r1, [pc, #152]	; (8008d08 <__ieee754_powf+0x4ec>)
 8008c70:	f7f8 f888 	bl	8000d84 <__aeabi_fmul>
 8008c74:	4925      	ldr	r1, [pc, #148]	; (8008d0c <__ieee754_powf+0x4f0>)
 8008c76:	4681      	mov	r9, r0
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7f8 f883 	bl	8000d84 <__aeabi_fmul>
 8008c7e:	4601      	mov	r1, r0
 8008c80:	4648      	mov	r0, r9
 8008c82:	f7f7 ff77 	bl	8000b74 <__addsf3>
 8008c86:	4b22      	ldr	r3, [pc, #136]	; (8008d10 <__ieee754_powf+0x4f4>)
 8008c88:	9a00      	ldr	r2, [sp, #0]
 8008c8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c8e:	f7f7 ff71 	bl	8000b74 <__addsf3>
 8008c92:	4606      	mov	r6, r0
 8008c94:	9801      	ldr	r0, [sp, #4]
 8008c96:	f7f8 f821 	bl	8000cdc <__aeabi_i2f>
 8008c9a:	4682      	mov	sl, r0
 8008c9c:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <__ieee754_powf+0x4f8>)
 8008c9e:	9a00      	ldr	r2, [sp, #0]
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f7f7 ff64 	bl	8000b74 <__addsf3>
 8008cac:	4659      	mov	r1, fp
 8008cae:	f7f7 ff61 	bl	8000b74 <__addsf3>
 8008cb2:	4651      	mov	r1, sl
 8008cb4:	f7f7 ff5e 	bl	8000b74 <__addsf3>
 8008cb8:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008cbc:	f029 090f 	bic.w	r9, r9, #15
 8008cc0:	4651      	mov	r1, sl
 8008cc2:	4648      	mov	r0, r9
 8008cc4:	f7f7 ff54 	bl	8000b70 <__aeabi_fsub>
 8008cc8:	4659      	mov	r1, fp
 8008cca:	f7f7 ff51 	bl	8000b70 <__aeabi_fsub>
 8008cce:	4641      	mov	r1, r8
 8008cd0:	e69b      	b.n	8008a0a <__ieee754_powf+0x1ee>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	e6f3      	b.n	8008abe <__ieee754_powf+0x2a2>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e706      	b.n	8008ae8 <__ieee754_powf+0x2cc>
 8008cda:	bf00      	nop
 8008cdc:	001cc471 	.word	0x001cc471
 8008ce0:	005db3d6 	.word	0x005db3d6
 8008ce4:	0800df5c 	.word	0x0800df5c
 8008ce8:	3e53f142 	.word	0x3e53f142
 8008cec:	3e6c3255 	.word	0x3e6c3255
 8008cf0:	3e8ba305 	.word	0x3e8ba305
 8008cf4:	3eaaaaab 	.word	0x3eaaaaab
 8008cf8:	3edb6db7 	.word	0x3edb6db7
 8008cfc:	3f19999a 	.word	0x3f19999a
 8008d00:	40400000 	.word	0x40400000
 8008d04:	3f763800 	.word	0x3f763800
 8008d08:	3f76384f 	.word	0x3f76384f
 8008d0c:	369dc3a0 	.word	0x369dc3a0
 8008d10:	0800df6c 	.word	0x0800df6c
 8008d14:	0800df64 	.word	0x0800df64
 8008d18:	f040 80c2 	bne.w	8008ea0 <__ieee754_powf+0x684>
 8008d1c:	4968      	ldr	r1, [pc, #416]	; (8008ec0 <__ieee754_powf+0x6a4>)
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7f7 ff28 	bl	8000b74 <__addsf3>
 8008d24:	4639      	mov	r1, r7
 8008d26:	4681      	mov	r9, r0
 8008d28:	4650      	mov	r0, sl
 8008d2a:	f7f7 ff21 	bl	8000b70 <__aeabi_fsub>
 8008d2e:	4601      	mov	r1, r0
 8008d30:	4648      	mov	r0, r9
 8008d32:	f7f8 f9e3 	bl	80010fc <__aeabi_fcmpgt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f47f ae9f 	bne.w	8008a7a <__ieee754_powf+0x25e>
 8008d3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d40:	15e4      	asrs	r4, r4, #23
 8008d42:	3c7e      	subs	r4, #126	; 0x7e
 8008d44:	4123      	asrs	r3, r4
 8008d46:	4443      	add	r3, r8
 8008d48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008d4c:	495d      	ldr	r1, [pc, #372]	; (8008ec4 <__ieee754_powf+0x6a8>)
 8008d4e:	3a7f      	subs	r2, #127	; 0x7f
 8008d50:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008d54:	4111      	asrs	r1, r2
 8008d56:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8008d5a:	f1c2 0217 	rsb	r2, r2, #23
 8008d5e:	4114      	asrs	r4, r2
 8008d60:	f1b8 0f00 	cmp.w	r8, #0
 8008d64:	4638      	mov	r0, r7
 8008d66:	ea23 0101 	bic.w	r1, r3, r1
 8008d6a:	bfb8      	it	lt
 8008d6c:	4264      	neglt	r4, r4
 8008d6e:	f7f7 feff 	bl	8000b70 <__aeabi_fsub>
 8008d72:	4681      	mov	r9, r0
 8008d74:	4631      	mov	r1, r6
 8008d76:	4648      	mov	r0, r9
 8008d78:	f7f7 fefc 	bl	8000b74 <__addsf3>
 8008d7c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8008d80:	f027 070f 	bic.w	r7, r7, #15
 8008d84:	4638      	mov	r0, r7
 8008d86:	4950      	ldr	r1, [pc, #320]	; (8008ec8 <__ieee754_powf+0x6ac>)
 8008d88:	f7f7 fffc 	bl	8000d84 <__aeabi_fmul>
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	4680      	mov	r8, r0
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7f7 feed 	bl	8000b70 <__aeabi_fsub>
 8008d96:	4601      	mov	r1, r0
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7f7 fee9 	bl	8000b70 <__aeabi_fsub>
 8008d9e:	494b      	ldr	r1, [pc, #300]	; (8008ecc <__ieee754_powf+0x6b0>)
 8008da0:	f7f7 fff0 	bl	8000d84 <__aeabi_fmul>
 8008da4:	494a      	ldr	r1, [pc, #296]	; (8008ed0 <__ieee754_powf+0x6b4>)
 8008da6:	4606      	mov	r6, r0
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7f7 ffeb 	bl	8000d84 <__aeabi_fmul>
 8008dae:	4601      	mov	r1, r0
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7f7 fedf 	bl	8000b74 <__addsf3>
 8008db6:	4607      	mov	r7, r0
 8008db8:	4601      	mov	r1, r0
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f7f7 feda 	bl	8000b74 <__addsf3>
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	f7f7 fed4 	bl	8000b70 <__aeabi_fsub>
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f7f7 fed0 	bl	8000b70 <__aeabi_fsub>
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4680      	mov	r8, r0
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f7f7 ffd5 	bl	8000d84 <__aeabi_fmul>
 8008dda:	4607      	mov	r7, r0
 8008ddc:	493d      	ldr	r1, [pc, #244]	; (8008ed4 <__ieee754_powf+0x6b8>)
 8008dde:	f7f7 ffd1 	bl	8000d84 <__aeabi_fmul>
 8008de2:	493d      	ldr	r1, [pc, #244]	; (8008ed8 <__ieee754_powf+0x6bc>)
 8008de4:	f7f7 fec4 	bl	8000b70 <__aeabi_fsub>
 8008de8:	4639      	mov	r1, r7
 8008dea:	f7f7 ffcb 	bl	8000d84 <__aeabi_fmul>
 8008dee:	493b      	ldr	r1, [pc, #236]	; (8008edc <__ieee754_powf+0x6c0>)
 8008df0:	f7f7 fec0 	bl	8000b74 <__addsf3>
 8008df4:	4639      	mov	r1, r7
 8008df6:	f7f7 ffc5 	bl	8000d84 <__aeabi_fmul>
 8008dfa:	4939      	ldr	r1, [pc, #228]	; (8008ee0 <__ieee754_powf+0x6c4>)
 8008dfc:	f7f7 feb8 	bl	8000b70 <__aeabi_fsub>
 8008e00:	4639      	mov	r1, r7
 8008e02:	f7f7 ffbf 	bl	8000d84 <__aeabi_fmul>
 8008e06:	4937      	ldr	r1, [pc, #220]	; (8008ee4 <__ieee754_powf+0x6c8>)
 8008e08:	f7f7 feb4 	bl	8000b74 <__addsf3>
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 ffb9 	bl	8000d84 <__aeabi_fmul>
 8008e12:	4601      	mov	r1, r0
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7f7 feab 	bl	8000b70 <__aeabi_fsub>
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f7f7 ffb0 	bl	8000d84 <__aeabi_fmul>
 8008e24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008e28:	4681      	mov	r9, r0
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f7f7 fea0 	bl	8000b70 <__aeabi_fsub>
 8008e30:	4601      	mov	r1, r0
 8008e32:	4648      	mov	r0, r9
 8008e34:	f7f8 f85a 	bl	8000eec <__aeabi_fdiv>
 8008e38:	4641      	mov	r1, r8
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7f7 ffa1 	bl	8000d84 <__aeabi_fmul>
 8008e42:	4641      	mov	r1, r8
 8008e44:	f7f7 fe96 	bl	8000b74 <__addsf3>
 8008e48:	4601      	mov	r1, r0
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7f7 fe90 	bl	8000b70 <__aeabi_fsub>
 8008e50:	4631      	mov	r1, r6
 8008e52:	f7f7 fe8d 	bl	8000b70 <__aeabi_fsub>
 8008e56:	4601      	mov	r1, r0
 8008e58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008e5c:	f7f7 fe88 	bl	8000b70 <__aeabi_fsub>
 8008e60:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e68:	da20      	bge.n	8008eac <__ieee754_powf+0x690>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	f000 f8be 	bl	8008fec <scalbnf>
 8008e70:	4629      	mov	r1, r5
 8008e72:	e53d      	b.n	80088f0 <__ieee754_powf+0xd4>
 8008e74:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <__ieee754_powf+0x6cc>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	dd07      	ble.n	8008e8a <__ieee754_powf+0x66e>
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f7f8 f91f 	bl	80010c0 <__aeabi_fcmplt>
 8008e82:	3800      	subs	r0, #0
 8008e84:	bf18      	it	ne
 8008e86:	2001      	movne	r0, #1
 8008e88:	e580      	b.n	800898c <__ieee754_powf+0x170>
 8008e8a:	d109      	bne.n	8008ea0 <__ieee754_powf+0x684>
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f7f7 fe6f 	bl	8000b70 <__aeabi_fsub>
 8008e92:	4631      	mov	r1, r6
 8008e94:	f7f8 f928 	bl	80010e8 <__aeabi_fcmpge>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f43f af4f 	beq.w	8008d3c <__ieee754_powf+0x520>
 8008e9e:	e7ec      	b.n	8008e7a <__ieee754_powf+0x65e>
 8008ea0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008ea4:	f73f af4a 	bgt.w	8008d3c <__ieee754_powf+0x520>
 8008ea8:	2400      	movs	r4, #0
 8008eaa:	e763      	b.n	8008d74 <__ieee754_powf+0x558>
 8008eac:	4618      	mov	r0, r3
 8008eae:	e7df      	b.n	8008e70 <__ieee754_powf+0x654>
 8008eb0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008eb4:	e50b      	b.n	80088ce <__ieee754_powf+0xb2>
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	e509      	b.n	80088ce <__ieee754_powf+0xb2>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	e4ef      	b.n	800889e <__ieee754_powf+0x82>
 8008ebe:	bf00      	nop
 8008ec0:	3338aa3c 	.word	0x3338aa3c
 8008ec4:	007fffff 	.word	0x007fffff
 8008ec8:	3f317200 	.word	0x3f317200
 8008ecc:	3f317218 	.word	0x3f317218
 8008ed0:	35bfbe8c 	.word	0x35bfbe8c
 8008ed4:	3331bb4c 	.word	0x3331bb4c
 8008ed8:	35ddea0e 	.word	0x35ddea0e
 8008edc:	388ab355 	.word	0x388ab355
 8008ee0:	3b360b61 	.word	0x3b360b61
 8008ee4:	3e2aaaab 	.word	0x3e2aaaab
 8008ee8:	43160000 	.word	0x43160000

08008eec <__ieee754_sqrtf>:
 8008eec:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008ef0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	4604      	mov	r4, r0
 8008efa:	d309      	bcc.n	8008f10 <__ieee754_sqrtf+0x24>
 8008efc:	4601      	mov	r1, r0
 8008efe:	f7f7 ff41 	bl	8000d84 <__aeabi_fmul>
 8008f02:	4601      	mov	r1, r0
 8008f04:	4620      	mov	r0, r4
 8008f06:	f7f7 fe35 	bl	8000b74 <__addsf3>
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	2a00      	cmp	r2, #0
 8008f12:	d0fb      	beq.n	8008f0c <__ieee754_sqrtf+0x20>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	da06      	bge.n	8008f26 <__ieee754_sqrtf+0x3a>
 8008f18:	4601      	mov	r1, r0
 8008f1a:	f7f7 fe29 	bl	8000b70 <__aeabi_fsub>
 8008f1e:	4601      	mov	r1, r0
 8008f20:	f7f7 ffe4 	bl	8000eec <__aeabi_fdiv>
 8008f24:	e7f1      	b.n	8008f0a <__ieee754_sqrtf+0x1e>
 8008f26:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008f2a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008f2e:	d029      	beq.n	8008f84 <__ieee754_sqrtf+0x98>
 8008f30:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008f34:	07cb      	lsls	r3, r1, #31
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008f3e:	f04f 0419 	mov.w	r4, #25
 8008f42:	461e      	mov	r6, r3
 8008f44:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008f48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008f4c:	bf58      	it	pl
 8008f4e:	0052      	lslpl	r2, r2, #1
 8008f50:	1040      	asrs	r0, r0, #1
 8008f52:	0052      	lsls	r2, r2, #1
 8008f54:	1875      	adds	r5, r6, r1
 8008f56:	4295      	cmp	r5, r2
 8008f58:	bfde      	ittt	le
 8008f5a:	186e      	addle	r6, r5, r1
 8008f5c:	1b52      	suble	r2, r2, r5
 8008f5e:	185b      	addle	r3, r3, r1
 8008f60:	3c01      	subs	r4, #1
 8008f62:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008f66:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008f6a:	d1f3      	bne.n	8008f54 <__ieee754_sqrtf+0x68>
 8008f6c:	b112      	cbz	r2, 8008f74 <__ieee754_sqrtf+0x88>
 8008f6e:	3301      	adds	r3, #1
 8008f70:	f023 0301 	bic.w	r3, r3, #1
 8008f74:	105c      	asrs	r4, r3, #1
 8008f76:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008f7a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008f7e:	e7c5      	b.n	8008f0c <__ieee754_sqrtf+0x20>
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	3201      	adds	r2, #1
 8008f84:	0218      	lsls	r0, r3, #8
 8008f86:	d5fb      	bpl.n	8008f80 <__ieee754_sqrtf+0x94>
 8008f88:	3a01      	subs	r2, #1
 8008f8a:	1a89      	subs	r1, r1, r2
 8008f8c:	e7d0      	b.n	8008f30 <__ieee754_sqrtf+0x44>

08008f8e <with_errnof>:
 8008f8e:	b538      	push	{r3, r4, r5, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	f000 f876 	bl	8009084 <__errno>
 8008f98:	6005      	str	r5, [r0, #0]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}

08008f9e <xflowf>:
 8008f9e:	b508      	push	{r3, lr}
 8008fa0:	b140      	cbz	r0, 8008fb4 <xflowf+0x16>
 8008fa2:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008fa6:	f7f7 feed 	bl	8000d84 <__aeabi_fmul>
 8008faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fae:	2122      	movs	r1, #34	; 0x22
 8008fb0:	f7ff bfed 	b.w	8008f8e <with_errnof>
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	e7f6      	b.n	8008fa6 <xflowf+0x8>

08008fb8 <__math_uflowf>:
 8008fb8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008fbc:	f7ff bfef 	b.w	8008f9e <xflowf>

08008fc0 <__math_oflowf>:
 8008fc0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8008fc4:	f7ff bfeb 	b.w	8008f9e <xflowf>

08008fc8 <nan>:
 8008fc8:	2000      	movs	r0, #0
 8008fca:	4901      	ldr	r1, [pc, #4]	; (8008fd0 <nan+0x8>)
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	7ff80000 	.word	0x7ff80000

08008fd4 <fabsf>:
 8008fd4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008fd8:	4770      	bx	lr

08008fda <finitef>:
 8008fda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008fde:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008fe2:	bfac      	ite	ge
 8008fe4:	2000      	movge	r0, #0
 8008fe6:	2001      	movlt	r0, #1
 8008fe8:	4770      	bx	lr
	...

08008fec <scalbnf>:
 8008fec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	d02a      	beq.n	8009050 <scalbnf+0x64>
 8008ffa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ffe:	d304      	bcc.n	800900a <scalbnf+0x1e>
 8009000:	4601      	mov	r1, r0
 8009002:	f7f7 fdb7 	bl	8000b74 <__addsf3>
 8009006:	4603      	mov	r3, r0
 8009008:	e022      	b.n	8009050 <scalbnf+0x64>
 800900a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800900e:	d117      	bne.n	8009040 <scalbnf+0x54>
 8009010:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009014:	f7f7 feb6 	bl	8000d84 <__aeabi_fmul>
 8009018:	4a17      	ldr	r2, [pc, #92]	; (8009078 <scalbnf+0x8c>)
 800901a:	4603      	mov	r3, r0
 800901c:	4295      	cmp	r5, r2
 800901e:	db0b      	blt.n	8009038 <scalbnf+0x4c>
 8009020:	4604      	mov	r4, r0
 8009022:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009026:	3a19      	subs	r2, #25
 8009028:	442a      	add	r2, r5
 800902a:	2afe      	cmp	r2, #254	; 0xfe
 800902c:	dd0a      	ble.n	8009044 <scalbnf+0x58>
 800902e:	4913      	ldr	r1, [pc, #76]	; (800907c <scalbnf+0x90>)
 8009030:	4618      	mov	r0, r3
 8009032:	f361 001e 	bfi	r0, r1, #0, #31
 8009036:	e000      	b.n	800903a <scalbnf+0x4e>
 8009038:	4911      	ldr	r1, [pc, #68]	; (8009080 <scalbnf+0x94>)
 800903a:	f7f7 fea3 	bl	8000d84 <__aeabi_fmul>
 800903e:	e7e2      	b.n	8009006 <scalbnf+0x1a>
 8009040:	0dd2      	lsrs	r2, r2, #23
 8009042:	e7f1      	b.n	8009028 <scalbnf+0x3c>
 8009044:	2a00      	cmp	r2, #0
 8009046:	dd05      	ble.n	8009054 <scalbnf+0x68>
 8009048:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800904c:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8009050:	4618      	mov	r0, r3
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	f112 0f16 	cmn.w	r2, #22
 8009058:	da05      	bge.n	8009066 <scalbnf+0x7a>
 800905a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800905e:	4295      	cmp	r5, r2
 8009060:	dce5      	bgt.n	800902e <scalbnf+0x42>
 8009062:	4907      	ldr	r1, [pc, #28]	; (8009080 <scalbnf+0x94>)
 8009064:	e7e4      	b.n	8009030 <scalbnf+0x44>
 8009066:	3219      	adds	r2, #25
 8009068:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800906c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009070:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8009074:	e7e1      	b.n	800903a <scalbnf+0x4e>
 8009076:	bf00      	nop
 8009078:	ffff3cb0 	.word	0xffff3cb0
 800907c:	7149f2ca 	.word	0x7149f2ca
 8009080:	0da24260 	.word	0x0da24260

08009084 <__errno>:
 8009084:	4b01      	ldr	r3, [pc, #4]	; (800908c <__errno+0x8>)
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	200000d0 	.word	0x200000d0

08009090 <__libc_init_array>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	2600      	movs	r6, #0
 8009094:	4d0c      	ldr	r5, [pc, #48]	; (80090c8 <__libc_init_array+0x38>)
 8009096:	4c0d      	ldr	r4, [pc, #52]	; (80090cc <__libc_init_array+0x3c>)
 8009098:	1b64      	subs	r4, r4, r5
 800909a:	10a4      	asrs	r4, r4, #2
 800909c:	42a6      	cmp	r6, r4
 800909e:	d109      	bne.n	80090b4 <__libc_init_array+0x24>
 80090a0:	f004 fc94 	bl	800d9cc <_init>
 80090a4:	2600      	movs	r6, #0
 80090a6:	4d0a      	ldr	r5, [pc, #40]	; (80090d0 <__libc_init_array+0x40>)
 80090a8:	4c0a      	ldr	r4, [pc, #40]	; (80090d4 <__libc_init_array+0x44>)
 80090aa:	1b64      	subs	r4, r4, r5
 80090ac:	10a4      	asrs	r4, r4, #2
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	d105      	bne.n	80090be <__libc_init_array+0x2e>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b8:	4798      	blx	r3
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7ee      	b.n	800909c <__libc_init_array+0xc>
 80090be:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c2:	4798      	blx	r3
 80090c4:	3601      	adds	r6, #1
 80090c6:	e7f2      	b.n	80090ae <__libc_init_array+0x1e>
 80090c8:	0800e41c 	.word	0x0800e41c
 80090cc:	0800e41c 	.word	0x0800e41c
 80090d0:	0800e41c 	.word	0x0800e41c
 80090d4:	0800e424 	.word	0x0800e424

080090d8 <memcpy>:
 80090d8:	440a      	add	r2, r1
 80090da:	4291      	cmp	r1, r2
 80090dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e0:	d100      	bne.n	80090e4 <memcpy+0xc>
 80090e2:	4770      	bx	lr
 80090e4:	b510      	push	{r4, lr}
 80090e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ea:	4291      	cmp	r1, r2
 80090ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f0:	d1f9      	bne.n	80090e6 <memcpy+0xe>
 80090f2:	bd10      	pop	{r4, pc}

080090f4 <memset>:
 80090f4:	4603      	mov	r3, r0
 80090f6:	4402      	add	r2, r0
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d100      	bne.n	80090fe <memset+0xa>
 80090fc:	4770      	bx	lr
 80090fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009102:	e7f9      	b.n	80090f8 <memset+0x4>

08009104 <__cvt>:
 8009104:	2b00      	cmp	r3, #0
 8009106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910a:	461f      	mov	r7, r3
 800910c:	bfbb      	ittet	lt
 800910e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009112:	461f      	movlt	r7, r3
 8009114:	2300      	movge	r3, #0
 8009116:	232d      	movlt	r3, #45	; 0x2d
 8009118:	b088      	sub	sp, #32
 800911a:	4614      	mov	r4, r2
 800911c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800911e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009120:	7013      	strb	r3, [r2, #0]
 8009122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009124:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009128:	f023 0820 	bic.w	r8, r3, #32
 800912c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009130:	d005      	beq.n	800913e <__cvt+0x3a>
 8009132:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009136:	d100      	bne.n	800913a <__cvt+0x36>
 8009138:	3501      	adds	r5, #1
 800913a:	2302      	movs	r3, #2
 800913c:	e000      	b.n	8009140 <__cvt+0x3c>
 800913e:	2303      	movs	r3, #3
 8009140:	aa07      	add	r2, sp, #28
 8009142:	9204      	str	r2, [sp, #16]
 8009144:	aa06      	add	r2, sp, #24
 8009146:	e9cd a202 	strd	sl, r2, [sp, #8]
 800914a:	e9cd 3500 	strd	r3, r5, [sp]
 800914e:	4622      	mov	r2, r4
 8009150:	463b      	mov	r3, r7
 8009152:	f001 fdcd 	bl	800acf0 <_dtoa_r>
 8009156:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800915a:	4606      	mov	r6, r0
 800915c:	d102      	bne.n	8009164 <__cvt+0x60>
 800915e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009160:	07db      	lsls	r3, r3, #31
 8009162:	d522      	bpl.n	80091aa <__cvt+0xa6>
 8009164:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009168:	eb06 0905 	add.w	r9, r6, r5
 800916c:	d110      	bne.n	8009190 <__cvt+0x8c>
 800916e:	7833      	ldrb	r3, [r6, #0]
 8009170:	2b30      	cmp	r3, #48	; 0x30
 8009172:	d10a      	bne.n	800918a <__cvt+0x86>
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	4620      	mov	r0, r4
 800917a:	4639      	mov	r1, r7
 800917c:	f7f7 fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8009180:	b918      	cbnz	r0, 800918a <__cvt+0x86>
 8009182:	f1c5 0501 	rsb	r5, r5, #1
 8009186:	f8ca 5000 	str.w	r5, [sl]
 800918a:	f8da 3000 	ldr.w	r3, [sl]
 800918e:	4499      	add	r9, r3
 8009190:	2200      	movs	r2, #0
 8009192:	2300      	movs	r3, #0
 8009194:	4620      	mov	r0, r4
 8009196:	4639      	mov	r1, r7
 8009198:	f7f7 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800919c:	b108      	cbz	r0, 80091a2 <__cvt+0x9e>
 800919e:	f8cd 901c 	str.w	r9, [sp, #28]
 80091a2:	2230      	movs	r2, #48	; 0x30
 80091a4:	9b07      	ldr	r3, [sp, #28]
 80091a6:	454b      	cmp	r3, r9
 80091a8:	d307      	bcc.n	80091ba <__cvt+0xb6>
 80091aa:	4630      	mov	r0, r6
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091b0:	1b9b      	subs	r3, r3, r6
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	b008      	add	sp, #32
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	1c59      	adds	r1, r3, #1
 80091bc:	9107      	str	r1, [sp, #28]
 80091be:	701a      	strb	r2, [r3, #0]
 80091c0:	e7f0      	b.n	80091a4 <__cvt+0xa0>

080091c2 <__exponent>:
 80091c2:	4603      	mov	r3, r0
 80091c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c6:	2900      	cmp	r1, #0
 80091c8:	f803 2b02 	strb.w	r2, [r3], #2
 80091cc:	bfb6      	itet	lt
 80091ce:	222d      	movlt	r2, #45	; 0x2d
 80091d0:	222b      	movge	r2, #43	; 0x2b
 80091d2:	4249      	neglt	r1, r1
 80091d4:	2909      	cmp	r1, #9
 80091d6:	7042      	strb	r2, [r0, #1]
 80091d8:	dd2b      	ble.n	8009232 <__exponent+0x70>
 80091da:	f10d 0407 	add.w	r4, sp, #7
 80091de:	46a4      	mov	ip, r4
 80091e0:	270a      	movs	r7, #10
 80091e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80091e6:	460a      	mov	r2, r1
 80091e8:	46a6      	mov	lr, r4
 80091ea:	fb07 1516 	mls	r5, r7, r6, r1
 80091ee:	2a63      	cmp	r2, #99	; 0x63
 80091f0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80091f4:	4631      	mov	r1, r6
 80091f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80091fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091fe:	dcf0      	bgt.n	80091e2 <__exponent+0x20>
 8009200:	3130      	adds	r1, #48	; 0x30
 8009202:	f1ae 0502 	sub.w	r5, lr, #2
 8009206:	f804 1c01 	strb.w	r1, [r4, #-1]
 800920a:	4629      	mov	r1, r5
 800920c:	1c44      	adds	r4, r0, #1
 800920e:	4561      	cmp	r1, ip
 8009210:	d30a      	bcc.n	8009228 <__exponent+0x66>
 8009212:	f10d 0209 	add.w	r2, sp, #9
 8009216:	eba2 020e 	sub.w	r2, r2, lr
 800921a:	4565      	cmp	r5, ip
 800921c:	bf88      	it	hi
 800921e:	2200      	movhi	r2, #0
 8009220:	4413      	add	r3, r2
 8009222:	1a18      	subs	r0, r3, r0
 8009224:	b003      	add	sp, #12
 8009226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009228:	f811 2b01 	ldrb.w	r2, [r1], #1
 800922c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009230:	e7ed      	b.n	800920e <__exponent+0x4c>
 8009232:	2330      	movs	r3, #48	; 0x30
 8009234:	3130      	adds	r1, #48	; 0x30
 8009236:	7083      	strb	r3, [r0, #2]
 8009238:	70c1      	strb	r1, [r0, #3]
 800923a:	1d03      	adds	r3, r0, #4
 800923c:	e7f1      	b.n	8009222 <__exponent+0x60>
	...

08009240 <_printf_float>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	b091      	sub	sp, #68	; 0x44
 8009246:	460c      	mov	r4, r1
 8009248:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800924c:	4616      	mov	r6, r2
 800924e:	461f      	mov	r7, r3
 8009250:	4605      	mov	r5, r0
 8009252:	f002 fea1 	bl	800bf98 <_localeconv_r>
 8009256:	6803      	ldr	r3, [r0, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	9309      	str	r3, [sp, #36]	; 0x24
 800925c:	f7f6 ff78 	bl	8000150 <strlen>
 8009260:	2300      	movs	r3, #0
 8009262:	930e      	str	r3, [sp, #56]	; 0x38
 8009264:	f8d8 3000 	ldr.w	r3, [r8]
 8009268:	900a      	str	r0, [sp, #40]	; 0x28
 800926a:	3307      	adds	r3, #7
 800926c:	f023 0307 	bic.w	r3, r3, #7
 8009270:	f103 0208 	add.w	r2, r3, #8
 8009274:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009278:	f8d4 b000 	ldr.w	fp, [r4]
 800927c:	f8c8 2000 	str.w	r2, [r8]
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009288:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800928c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009290:	930b      	str	r3, [sp, #44]	; 0x2c
 8009292:	f04f 32ff 	mov.w	r2, #4294967295
 8009296:	4640      	mov	r0, r8
 8009298:	4b9c      	ldr	r3, [pc, #624]	; (800950c <_printf_float+0x2cc>)
 800929a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800929c:	f7f7 fbb6 	bl	8000a0c <__aeabi_dcmpun>
 80092a0:	bb70      	cbnz	r0, 8009300 <_printf_float+0xc0>
 80092a2:	f04f 32ff 	mov.w	r2, #4294967295
 80092a6:	4640      	mov	r0, r8
 80092a8:	4b98      	ldr	r3, [pc, #608]	; (800950c <_printf_float+0x2cc>)
 80092aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092ac:	f7f7 fb90 	bl	80009d0 <__aeabi_dcmple>
 80092b0:	bb30      	cbnz	r0, 8009300 <_printf_float+0xc0>
 80092b2:	2200      	movs	r2, #0
 80092b4:	2300      	movs	r3, #0
 80092b6:	4640      	mov	r0, r8
 80092b8:	4651      	mov	r1, sl
 80092ba:	f7f7 fb7f 	bl	80009bc <__aeabi_dcmplt>
 80092be:	b110      	cbz	r0, 80092c6 <_printf_float+0x86>
 80092c0:	232d      	movs	r3, #45	; 0x2d
 80092c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c6:	4b92      	ldr	r3, [pc, #584]	; (8009510 <_printf_float+0x2d0>)
 80092c8:	4892      	ldr	r0, [pc, #584]	; (8009514 <_printf_float+0x2d4>)
 80092ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092ce:	bf94      	ite	ls
 80092d0:	4698      	movls	r8, r3
 80092d2:	4680      	movhi	r8, r0
 80092d4:	2303      	movs	r3, #3
 80092d6:	f04f 0a00 	mov.w	sl, #0
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	f02b 0304 	bic.w	r3, fp, #4
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	4633      	mov	r3, r6
 80092e4:	4621      	mov	r1, r4
 80092e6:	4628      	mov	r0, r5
 80092e8:	9700      	str	r7, [sp, #0]
 80092ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80092ec:	f000 f9d4 	bl	8009698 <_printf_common>
 80092f0:	3001      	adds	r0, #1
 80092f2:	f040 8090 	bne.w	8009416 <_printf_float+0x1d6>
 80092f6:	f04f 30ff 	mov.w	r0, #4294967295
 80092fa:	b011      	add	sp, #68	; 0x44
 80092fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009300:	4642      	mov	r2, r8
 8009302:	4653      	mov	r3, sl
 8009304:	4640      	mov	r0, r8
 8009306:	4651      	mov	r1, sl
 8009308:	f7f7 fb80 	bl	8000a0c <__aeabi_dcmpun>
 800930c:	b148      	cbz	r0, 8009322 <_printf_float+0xe2>
 800930e:	f1ba 0f00 	cmp.w	sl, #0
 8009312:	bfb8      	it	lt
 8009314:	232d      	movlt	r3, #45	; 0x2d
 8009316:	4880      	ldr	r0, [pc, #512]	; (8009518 <_printf_float+0x2d8>)
 8009318:	bfb8      	it	lt
 800931a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800931e:	4b7f      	ldr	r3, [pc, #508]	; (800951c <_printf_float+0x2dc>)
 8009320:	e7d3      	b.n	80092ca <_printf_float+0x8a>
 8009322:	6863      	ldr	r3, [r4, #4]
 8009324:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	d142      	bne.n	80093b2 <_printf_float+0x172>
 800932c:	2306      	movs	r3, #6
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	9206      	str	r2, [sp, #24]
 8009334:	aa0e      	add	r2, sp, #56	; 0x38
 8009336:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800933a:	aa0d      	add	r2, sp, #52	; 0x34
 800933c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009340:	9203      	str	r2, [sp, #12]
 8009342:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009346:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	6863      	ldr	r3, [r4, #4]
 800934e:	4642      	mov	r2, r8
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	4628      	mov	r0, r5
 8009354:	4653      	mov	r3, sl
 8009356:	910b      	str	r1, [sp, #44]	; 0x2c
 8009358:	f7ff fed4 	bl	8009104 <__cvt>
 800935c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800935e:	4680      	mov	r8, r0
 8009360:	2947      	cmp	r1, #71	; 0x47
 8009362:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009364:	d108      	bne.n	8009378 <_printf_float+0x138>
 8009366:	1cc8      	adds	r0, r1, #3
 8009368:	db02      	blt.n	8009370 <_printf_float+0x130>
 800936a:	6863      	ldr	r3, [r4, #4]
 800936c:	4299      	cmp	r1, r3
 800936e:	dd40      	ble.n	80093f2 <_printf_float+0x1b2>
 8009370:	f1a9 0902 	sub.w	r9, r9, #2
 8009374:	fa5f f989 	uxtb.w	r9, r9
 8009378:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800937c:	d81f      	bhi.n	80093be <_printf_float+0x17e>
 800937e:	464a      	mov	r2, r9
 8009380:	3901      	subs	r1, #1
 8009382:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009386:	910d      	str	r1, [sp, #52]	; 0x34
 8009388:	f7ff ff1b 	bl	80091c2 <__exponent>
 800938c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800938e:	4682      	mov	sl, r0
 8009390:	1813      	adds	r3, r2, r0
 8009392:	2a01      	cmp	r2, #1
 8009394:	6123      	str	r3, [r4, #16]
 8009396:	dc02      	bgt.n	800939e <_printf_float+0x15e>
 8009398:	6822      	ldr	r2, [r4, #0]
 800939a:	07d2      	lsls	r2, r2, #31
 800939c:	d501      	bpl.n	80093a2 <_printf_float+0x162>
 800939e:	3301      	adds	r3, #1
 80093a0:	6123      	str	r3, [r4, #16]
 80093a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d09b      	beq.n	80092e2 <_printf_float+0xa2>
 80093aa:	232d      	movs	r3, #45	; 0x2d
 80093ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b0:	e797      	b.n	80092e2 <_printf_float+0xa2>
 80093b2:	2947      	cmp	r1, #71	; 0x47
 80093b4:	d1bc      	bne.n	8009330 <_printf_float+0xf0>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1ba      	bne.n	8009330 <_printf_float+0xf0>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e7b7      	b.n	800932e <_printf_float+0xee>
 80093be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80093c2:	d118      	bne.n	80093f6 <_printf_float+0x1b6>
 80093c4:	2900      	cmp	r1, #0
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	dd0b      	ble.n	80093e2 <_printf_float+0x1a2>
 80093ca:	6121      	str	r1, [r4, #16]
 80093cc:	b913      	cbnz	r3, 80093d4 <_printf_float+0x194>
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	07d0      	lsls	r0, r2, #31
 80093d2:	d502      	bpl.n	80093da <_printf_float+0x19a>
 80093d4:	3301      	adds	r3, #1
 80093d6:	440b      	add	r3, r1
 80093d8:	6123      	str	r3, [r4, #16]
 80093da:	f04f 0a00 	mov.w	sl, #0
 80093de:	65a1      	str	r1, [r4, #88]	; 0x58
 80093e0:	e7df      	b.n	80093a2 <_printf_float+0x162>
 80093e2:	b913      	cbnz	r3, 80093ea <_printf_float+0x1aa>
 80093e4:	6822      	ldr	r2, [r4, #0]
 80093e6:	07d2      	lsls	r2, r2, #31
 80093e8:	d501      	bpl.n	80093ee <_printf_float+0x1ae>
 80093ea:	3302      	adds	r3, #2
 80093ec:	e7f4      	b.n	80093d8 <_printf_float+0x198>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e7f2      	b.n	80093d8 <_printf_float+0x198>
 80093f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80093f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093f8:	4299      	cmp	r1, r3
 80093fa:	db05      	blt.n	8009408 <_printf_float+0x1c8>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	6121      	str	r1, [r4, #16]
 8009400:	07d8      	lsls	r0, r3, #31
 8009402:	d5ea      	bpl.n	80093da <_printf_float+0x19a>
 8009404:	1c4b      	adds	r3, r1, #1
 8009406:	e7e7      	b.n	80093d8 <_printf_float+0x198>
 8009408:	2900      	cmp	r1, #0
 800940a:	bfcc      	ite	gt
 800940c:	2201      	movgt	r2, #1
 800940e:	f1c1 0202 	rsble	r2, r1, #2
 8009412:	4413      	add	r3, r2
 8009414:	e7e0      	b.n	80093d8 <_printf_float+0x198>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	055a      	lsls	r2, r3, #21
 800941a:	d407      	bmi.n	800942c <_printf_float+0x1ec>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	4642      	mov	r2, r8
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	d12b      	bne.n	8009482 <_printf_float+0x242>
 800942a:	e764      	b.n	80092f6 <_printf_float+0xb6>
 800942c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009430:	f240 80dd 	bls.w	80095ee <_printf_float+0x3ae>
 8009434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009438:	2200      	movs	r2, #0
 800943a:	2300      	movs	r3, #0
 800943c:	f7f7 fab4 	bl	80009a8 <__aeabi_dcmpeq>
 8009440:	2800      	cmp	r0, #0
 8009442:	d033      	beq.n	80094ac <_printf_float+0x26c>
 8009444:	2301      	movs	r3, #1
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	4a35      	ldr	r2, [pc, #212]	; (8009520 <_printf_float+0x2e0>)
 800944c:	47b8      	blx	r7
 800944e:	3001      	adds	r0, #1
 8009450:	f43f af51 	beq.w	80092f6 <_printf_float+0xb6>
 8009454:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009458:	429a      	cmp	r2, r3
 800945a:	db02      	blt.n	8009462 <_printf_float+0x222>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	07d8      	lsls	r0, r3, #31
 8009460:	d50f      	bpl.n	8009482 <_printf_float+0x242>
 8009462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	f43f af42 	beq.w	80092f6 <_printf_float+0xb6>
 8009472:	f04f 0800 	mov.w	r8, #0
 8009476:	f104 091a 	add.w	r9, r4, #26
 800947a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800947c:	3b01      	subs	r3, #1
 800947e:	4543      	cmp	r3, r8
 8009480:	dc09      	bgt.n	8009496 <_printf_float+0x256>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	079b      	lsls	r3, r3, #30
 8009486:	f100 8102 	bmi.w	800968e <_printf_float+0x44e>
 800948a:	68e0      	ldr	r0, [r4, #12]
 800948c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800948e:	4298      	cmp	r0, r3
 8009490:	bfb8      	it	lt
 8009492:	4618      	movlt	r0, r3
 8009494:	e731      	b.n	80092fa <_printf_float+0xba>
 8009496:	2301      	movs	r3, #1
 8009498:	464a      	mov	r2, r9
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	f43f af28 	beq.w	80092f6 <_printf_float+0xb6>
 80094a6:	f108 0801 	add.w	r8, r8, #1
 80094aa:	e7e6      	b.n	800947a <_printf_float+0x23a>
 80094ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dc38      	bgt.n	8009524 <_printf_float+0x2e4>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4631      	mov	r1, r6
 80094b6:	4628      	mov	r0, r5
 80094b8:	4a19      	ldr	r2, [pc, #100]	; (8009520 <_printf_float+0x2e0>)
 80094ba:	47b8      	blx	r7
 80094bc:	3001      	adds	r0, #1
 80094be:	f43f af1a 	beq.w	80092f6 <_printf_float+0xb6>
 80094c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80094c6:	4313      	orrs	r3, r2
 80094c8:	d102      	bne.n	80094d0 <_printf_float+0x290>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	07d9      	lsls	r1, r3, #31
 80094ce:	d5d8      	bpl.n	8009482 <_printf_float+0x242>
 80094d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f af0b 	beq.w	80092f6 <_printf_float+0xb6>
 80094e0:	f04f 0900 	mov.w	r9, #0
 80094e4:	f104 0a1a 	add.w	sl, r4, #26
 80094e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ea:	425b      	negs	r3, r3
 80094ec:	454b      	cmp	r3, r9
 80094ee:	dc01      	bgt.n	80094f4 <_printf_float+0x2b4>
 80094f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094f2:	e794      	b.n	800941e <_printf_float+0x1de>
 80094f4:	2301      	movs	r3, #1
 80094f6:	4652      	mov	r2, sl
 80094f8:	4631      	mov	r1, r6
 80094fa:	4628      	mov	r0, r5
 80094fc:	47b8      	blx	r7
 80094fe:	3001      	adds	r0, #1
 8009500:	f43f aef9 	beq.w	80092f6 <_printf_float+0xb6>
 8009504:	f109 0901 	add.w	r9, r9, #1
 8009508:	e7ee      	b.n	80094e8 <_printf_float+0x2a8>
 800950a:	bf00      	nop
 800950c:	7fefffff 	.word	0x7fefffff
 8009510:	0800df78 	.word	0x0800df78
 8009514:	0800df7c 	.word	0x0800df7c
 8009518:	0800df84 	.word	0x0800df84
 800951c:	0800df80 	.word	0x0800df80
 8009520:	0800df88 	.word	0x0800df88
 8009524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009528:	429a      	cmp	r2, r3
 800952a:	bfa8      	it	ge
 800952c:	461a      	movge	r2, r3
 800952e:	2a00      	cmp	r2, #0
 8009530:	4691      	mov	r9, r2
 8009532:	dc37      	bgt.n	80095a4 <_printf_float+0x364>
 8009534:	f04f 0b00 	mov.w	fp, #0
 8009538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800953c:	f104 021a 	add.w	r2, r4, #26
 8009540:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009544:	ebaa 0309 	sub.w	r3, sl, r9
 8009548:	455b      	cmp	r3, fp
 800954a:	dc33      	bgt.n	80095b4 <_printf_float+0x374>
 800954c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009550:	429a      	cmp	r2, r3
 8009552:	db3b      	blt.n	80095cc <_printf_float+0x38c>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	07da      	lsls	r2, r3, #31
 8009558:	d438      	bmi.n	80095cc <_printf_float+0x38c>
 800955a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800955c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800955e:	eba3 020a 	sub.w	r2, r3, sl
 8009562:	eba3 0901 	sub.w	r9, r3, r1
 8009566:	4591      	cmp	r9, r2
 8009568:	bfa8      	it	ge
 800956a:	4691      	movge	r9, r2
 800956c:	f1b9 0f00 	cmp.w	r9, #0
 8009570:	dc34      	bgt.n	80095dc <_printf_float+0x39c>
 8009572:	f04f 0800 	mov.w	r8, #0
 8009576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800957a:	f104 0a1a 	add.w	sl, r4, #26
 800957e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009582:	1a9b      	subs	r3, r3, r2
 8009584:	eba3 0309 	sub.w	r3, r3, r9
 8009588:	4543      	cmp	r3, r8
 800958a:	f77f af7a 	ble.w	8009482 <_printf_float+0x242>
 800958e:	2301      	movs	r3, #1
 8009590:	4652      	mov	r2, sl
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	47b8      	blx	r7
 8009598:	3001      	adds	r0, #1
 800959a:	f43f aeac 	beq.w	80092f6 <_printf_float+0xb6>
 800959e:	f108 0801 	add.w	r8, r8, #1
 80095a2:	e7ec      	b.n	800957e <_printf_float+0x33e>
 80095a4:	4613      	mov	r3, r2
 80095a6:	4631      	mov	r1, r6
 80095a8:	4642      	mov	r2, r8
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b8      	blx	r7
 80095ae:	3001      	adds	r0, #1
 80095b0:	d1c0      	bne.n	8009534 <_printf_float+0x2f4>
 80095b2:	e6a0      	b.n	80092f6 <_printf_float+0xb6>
 80095b4:	2301      	movs	r3, #1
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80095bc:	47b8      	blx	r7
 80095be:	3001      	adds	r0, #1
 80095c0:	f43f ae99 	beq.w	80092f6 <_printf_float+0xb6>
 80095c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095c6:	f10b 0b01 	add.w	fp, fp, #1
 80095ca:	e7b9      	b.n	8009540 <_printf_float+0x300>
 80095cc:	4631      	mov	r1, r6
 80095ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	d1bf      	bne.n	800955a <_printf_float+0x31a>
 80095da:	e68c      	b.n	80092f6 <_printf_float+0xb6>
 80095dc:	464b      	mov	r3, r9
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	eb08 020a 	add.w	r2, r8, sl
 80095e6:	47b8      	blx	r7
 80095e8:	3001      	adds	r0, #1
 80095ea:	d1c2      	bne.n	8009572 <_printf_float+0x332>
 80095ec:	e683      	b.n	80092f6 <_printf_float+0xb6>
 80095ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095f0:	2a01      	cmp	r2, #1
 80095f2:	dc01      	bgt.n	80095f8 <_printf_float+0x3b8>
 80095f4:	07db      	lsls	r3, r3, #31
 80095f6:	d537      	bpl.n	8009668 <_printf_float+0x428>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4642      	mov	r2, r8
 80095fc:	4631      	mov	r1, r6
 80095fe:	4628      	mov	r0, r5
 8009600:	47b8      	blx	r7
 8009602:	3001      	adds	r0, #1
 8009604:	f43f ae77 	beq.w	80092f6 <_printf_float+0xb6>
 8009608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f ae6f 	beq.w	80092f6 <_printf_float+0xb6>
 8009618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800961c:	2200      	movs	r2, #0
 800961e:	2300      	movs	r3, #0
 8009620:	f7f7 f9c2 	bl	80009a8 <__aeabi_dcmpeq>
 8009624:	b9d8      	cbnz	r0, 800965e <_printf_float+0x41e>
 8009626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009628:	f108 0201 	add.w	r2, r8, #1
 800962c:	3b01      	subs	r3, #1
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	d10e      	bne.n	8009656 <_printf_float+0x416>
 8009638:	e65d      	b.n	80092f6 <_printf_float+0xb6>
 800963a:	2301      	movs	r3, #1
 800963c:	464a      	mov	r2, r9
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f ae56 	beq.w	80092f6 <_printf_float+0xb6>
 800964a:	f108 0801 	add.w	r8, r8, #1
 800964e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009650:	3b01      	subs	r3, #1
 8009652:	4543      	cmp	r3, r8
 8009654:	dcf1      	bgt.n	800963a <_printf_float+0x3fa>
 8009656:	4653      	mov	r3, sl
 8009658:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800965c:	e6e0      	b.n	8009420 <_printf_float+0x1e0>
 800965e:	f04f 0800 	mov.w	r8, #0
 8009662:	f104 091a 	add.w	r9, r4, #26
 8009666:	e7f2      	b.n	800964e <_printf_float+0x40e>
 8009668:	2301      	movs	r3, #1
 800966a:	4642      	mov	r2, r8
 800966c:	e7df      	b.n	800962e <_printf_float+0x3ee>
 800966e:	2301      	movs	r3, #1
 8009670:	464a      	mov	r2, r9
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	f43f ae3c 	beq.w	80092f6 <_printf_float+0xb6>
 800967e:	f108 0801 	add.w	r8, r8, #1
 8009682:	68e3      	ldr	r3, [r4, #12]
 8009684:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009686:	1a5b      	subs	r3, r3, r1
 8009688:	4543      	cmp	r3, r8
 800968a:	dcf0      	bgt.n	800966e <_printf_float+0x42e>
 800968c:	e6fd      	b.n	800948a <_printf_float+0x24a>
 800968e:	f04f 0800 	mov.w	r8, #0
 8009692:	f104 0919 	add.w	r9, r4, #25
 8009696:	e7f4      	b.n	8009682 <_printf_float+0x442>

08009698 <_printf_common>:
 8009698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	4616      	mov	r6, r2
 800969e:	4699      	mov	r9, r3
 80096a0:	688a      	ldr	r2, [r1, #8]
 80096a2:	690b      	ldr	r3, [r1, #16]
 80096a4:	4607      	mov	r7, r0
 80096a6:	4293      	cmp	r3, r2
 80096a8:	bfb8      	it	lt
 80096aa:	4613      	movlt	r3, r2
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096b2:	460c      	mov	r4, r1
 80096b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096b8:	b10a      	cbz	r2, 80096be <_printf_common+0x26>
 80096ba:	3301      	adds	r3, #1
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	0699      	lsls	r1, r3, #26
 80096c2:	bf42      	ittt	mi
 80096c4:	6833      	ldrmi	r3, [r6, #0]
 80096c6:	3302      	addmi	r3, #2
 80096c8:	6033      	strmi	r3, [r6, #0]
 80096ca:	6825      	ldr	r5, [r4, #0]
 80096cc:	f015 0506 	ands.w	r5, r5, #6
 80096d0:	d106      	bne.n	80096e0 <_printf_common+0x48>
 80096d2:	f104 0a19 	add.w	sl, r4, #25
 80096d6:	68e3      	ldr	r3, [r4, #12]
 80096d8:	6832      	ldr	r2, [r6, #0]
 80096da:	1a9b      	subs	r3, r3, r2
 80096dc:	42ab      	cmp	r3, r5
 80096de:	dc28      	bgt.n	8009732 <_printf_common+0x9a>
 80096e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096e4:	1e13      	subs	r3, r2, #0
 80096e6:	6822      	ldr	r2, [r4, #0]
 80096e8:	bf18      	it	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	0692      	lsls	r2, r2, #26
 80096ee:	d42d      	bmi.n	800974c <_printf_common+0xb4>
 80096f0:	4649      	mov	r1, r9
 80096f2:	4638      	mov	r0, r7
 80096f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096f8:	47c0      	blx	r8
 80096fa:	3001      	adds	r0, #1
 80096fc:	d020      	beq.n	8009740 <_printf_common+0xa8>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	68e5      	ldr	r5, [r4, #12]
 8009702:	f003 0306 	and.w	r3, r3, #6
 8009706:	2b04      	cmp	r3, #4
 8009708:	bf18      	it	ne
 800970a:	2500      	movne	r5, #0
 800970c:	6832      	ldr	r2, [r6, #0]
 800970e:	f04f 0600 	mov.w	r6, #0
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	bf08      	it	eq
 8009716:	1aad      	subeq	r5, r5, r2
 8009718:	6922      	ldr	r2, [r4, #16]
 800971a:	bf08      	it	eq
 800971c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009720:	4293      	cmp	r3, r2
 8009722:	bfc4      	itt	gt
 8009724:	1a9b      	subgt	r3, r3, r2
 8009726:	18ed      	addgt	r5, r5, r3
 8009728:	341a      	adds	r4, #26
 800972a:	42b5      	cmp	r5, r6
 800972c:	d11a      	bne.n	8009764 <_printf_common+0xcc>
 800972e:	2000      	movs	r0, #0
 8009730:	e008      	b.n	8009744 <_printf_common+0xac>
 8009732:	2301      	movs	r3, #1
 8009734:	4652      	mov	r2, sl
 8009736:	4649      	mov	r1, r9
 8009738:	4638      	mov	r0, r7
 800973a:	47c0      	blx	r8
 800973c:	3001      	adds	r0, #1
 800973e:	d103      	bne.n	8009748 <_printf_common+0xb0>
 8009740:	f04f 30ff 	mov.w	r0, #4294967295
 8009744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009748:	3501      	adds	r5, #1
 800974a:	e7c4      	b.n	80096d6 <_printf_common+0x3e>
 800974c:	2030      	movs	r0, #48	; 0x30
 800974e:	18e1      	adds	r1, r4, r3
 8009750:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800975a:	4422      	add	r2, r4
 800975c:	3302      	adds	r3, #2
 800975e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009762:	e7c5      	b.n	80096f0 <_printf_common+0x58>
 8009764:	2301      	movs	r3, #1
 8009766:	4622      	mov	r2, r4
 8009768:	4649      	mov	r1, r9
 800976a:	4638      	mov	r0, r7
 800976c:	47c0      	blx	r8
 800976e:	3001      	adds	r0, #1
 8009770:	d0e6      	beq.n	8009740 <_printf_common+0xa8>
 8009772:	3601      	adds	r6, #1
 8009774:	e7d9      	b.n	800972a <_printf_common+0x92>
	...

08009778 <_printf_i>:
 8009778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800977c:	7e0f      	ldrb	r7, [r1, #24]
 800977e:	4691      	mov	r9, r2
 8009780:	2f78      	cmp	r7, #120	; 0x78
 8009782:	4680      	mov	r8, r0
 8009784:	460c      	mov	r4, r1
 8009786:	469a      	mov	sl, r3
 8009788:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800978a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800978e:	d807      	bhi.n	80097a0 <_printf_i+0x28>
 8009790:	2f62      	cmp	r7, #98	; 0x62
 8009792:	d80a      	bhi.n	80097aa <_printf_i+0x32>
 8009794:	2f00      	cmp	r7, #0
 8009796:	f000 80d9 	beq.w	800994c <_printf_i+0x1d4>
 800979a:	2f58      	cmp	r7, #88	; 0x58
 800979c:	f000 80a4 	beq.w	80098e8 <_printf_i+0x170>
 80097a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097a8:	e03a      	b.n	8009820 <_printf_i+0xa8>
 80097aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097ae:	2b15      	cmp	r3, #21
 80097b0:	d8f6      	bhi.n	80097a0 <_printf_i+0x28>
 80097b2:	a101      	add	r1, pc, #4	; (adr r1, 80097b8 <_printf_i+0x40>)
 80097b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b8:	08009811 	.word	0x08009811
 80097bc:	08009825 	.word	0x08009825
 80097c0:	080097a1 	.word	0x080097a1
 80097c4:	080097a1 	.word	0x080097a1
 80097c8:	080097a1 	.word	0x080097a1
 80097cc:	080097a1 	.word	0x080097a1
 80097d0:	08009825 	.word	0x08009825
 80097d4:	080097a1 	.word	0x080097a1
 80097d8:	080097a1 	.word	0x080097a1
 80097dc:	080097a1 	.word	0x080097a1
 80097e0:	080097a1 	.word	0x080097a1
 80097e4:	08009933 	.word	0x08009933
 80097e8:	08009855 	.word	0x08009855
 80097ec:	08009915 	.word	0x08009915
 80097f0:	080097a1 	.word	0x080097a1
 80097f4:	080097a1 	.word	0x080097a1
 80097f8:	08009955 	.word	0x08009955
 80097fc:	080097a1 	.word	0x080097a1
 8009800:	08009855 	.word	0x08009855
 8009804:	080097a1 	.word	0x080097a1
 8009808:	080097a1 	.word	0x080097a1
 800980c:	0800991d 	.word	0x0800991d
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	1d1a      	adds	r2, r3, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	602a      	str	r2, [r5, #0]
 8009818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800981c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009820:	2301      	movs	r3, #1
 8009822:	e0a4      	b.n	800996e <_printf_i+0x1f6>
 8009824:	6820      	ldr	r0, [r4, #0]
 8009826:	6829      	ldr	r1, [r5, #0]
 8009828:	0606      	lsls	r6, r0, #24
 800982a:	f101 0304 	add.w	r3, r1, #4
 800982e:	d50a      	bpl.n	8009846 <_printf_i+0xce>
 8009830:	680e      	ldr	r6, [r1, #0]
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	2e00      	cmp	r6, #0
 8009836:	da03      	bge.n	8009840 <_printf_i+0xc8>
 8009838:	232d      	movs	r3, #45	; 0x2d
 800983a:	4276      	negs	r6, r6
 800983c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009840:	230a      	movs	r3, #10
 8009842:	485e      	ldr	r0, [pc, #376]	; (80099bc <_printf_i+0x244>)
 8009844:	e019      	b.n	800987a <_printf_i+0x102>
 8009846:	680e      	ldr	r6, [r1, #0]
 8009848:	f010 0f40 	tst.w	r0, #64	; 0x40
 800984c:	602b      	str	r3, [r5, #0]
 800984e:	bf18      	it	ne
 8009850:	b236      	sxthne	r6, r6
 8009852:	e7ef      	b.n	8009834 <_printf_i+0xbc>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	6820      	ldr	r0, [r4, #0]
 8009858:	1d19      	adds	r1, r3, #4
 800985a:	6029      	str	r1, [r5, #0]
 800985c:	0601      	lsls	r1, r0, #24
 800985e:	d501      	bpl.n	8009864 <_printf_i+0xec>
 8009860:	681e      	ldr	r6, [r3, #0]
 8009862:	e002      	b.n	800986a <_printf_i+0xf2>
 8009864:	0646      	lsls	r6, r0, #25
 8009866:	d5fb      	bpl.n	8009860 <_printf_i+0xe8>
 8009868:	881e      	ldrh	r6, [r3, #0]
 800986a:	2f6f      	cmp	r7, #111	; 0x6f
 800986c:	bf0c      	ite	eq
 800986e:	2308      	moveq	r3, #8
 8009870:	230a      	movne	r3, #10
 8009872:	4852      	ldr	r0, [pc, #328]	; (80099bc <_printf_i+0x244>)
 8009874:	2100      	movs	r1, #0
 8009876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800987a:	6865      	ldr	r5, [r4, #4]
 800987c:	2d00      	cmp	r5, #0
 800987e:	bfa8      	it	ge
 8009880:	6821      	ldrge	r1, [r4, #0]
 8009882:	60a5      	str	r5, [r4, #8]
 8009884:	bfa4      	itt	ge
 8009886:	f021 0104 	bicge.w	r1, r1, #4
 800988a:	6021      	strge	r1, [r4, #0]
 800988c:	b90e      	cbnz	r6, 8009892 <_printf_i+0x11a>
 800988e:	2d00      	cmp	r5, #0
 8009890:	d04d      	beq.n	800992e <_printf_i+0x1b6>
 8009892:	4615      	mov	r5, r2
 8009894:	fbb6 f1f3 	udiv	r1, r6, r3
 8009898:	fb03 6711 	mls	r7, r3, r1, r6
 800989c:	5dc7      	ldrb	r7, [r0, r7]
 800989e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098a2:	4637      	mov	r7, r6
 80098a4:	42bb      	cmp	r3, r7
 80098a6:	460e      	mov	r6, r1
 80098a8:	d9f4      	bls.n	8009894 <_printf_i+0x11c>
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d10b      	bne.n	80098c6 <_printf_i+0x14e>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	07de      	lsls	r6, r3, #31
 80098b2:	d508      	bpl.n	80098c6 <_printf_i+0x14e>
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	6861      	ldr	r1, [r4, #4]
 80098b8:	4299      	cmp	r1, r3
 80098ba:	bfde      	ittt	le
 80098bc:	2330      	movle	r3, #48	; 0x30
 80098be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098c6:	1b52      	subs	r2, r2, r5
 80098c8:	6122      	str	r2, [r4, #16]
 80098ca:	464b      	mov	r3, r9
 80098cc:	4621      	mov	r1, r4
 80098ce:	4640      	mov	r0, r8
 80098d0:	f8cd a000 	str.w	sl, [sp]
 80098d4:	aa03      	add	r2, sp, #12
 80098d6:	f7ff fedf 	bl	8009698 <_printf_common>
 80098da:	3001      	adds	r0, #1
 80098dc:	d14c      	bne.n	8009978 <_printf_i+0x200>
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	b004      	add	sp, #16
 80098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e8:	4834      	ldr	r0, [pc, #208]	; (80099bc <_printf_i+0x244>)
 80098ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098ee:	6829      	ldr	r1, [r5, #0]
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80098f6:	6029      	str	r1, [r5, #0]
 80098f8:	061d      	lsls	r5, r3, #24
 80098fa:	d514      	bpl.n	8009926 <_printf_i+0x1ae>
 80098fc:	07df      	lsls	r7, r3, #31
 80098fe:	bf44      	itt	mi
 8009900:	f043 0320 	orrmi.w	r3, r3, #32
 8009904:	6023      	strmi	r3, [r4, #0]
 8009906:	b91e      	cbnz	r6, 8009910 <_printf_i+0x198>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	f023 0320 	bic.w	r3, r3, #32
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	2310      	movs	r3, #16
 8009912:	e7af      	b.n	8009874 <_printf_i+0xfc>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	f043 0320 	orr.w	r3, r3, #32
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	2378      	movs	r3, #120	; 0x78
 800991e:	4828      	ldr	r0, [pc, #160]	; (80099c0 <_printf_i+0x248>)
 8009920:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009924:	e7e3      	b.n	80098ee <_printf_i+0x176>
 8009926:	0659      	lsls	r1, r3, #25
 8009928:	bf48      	it	mi
 800992a:	b2b6      	uxthmi	r6, r6
 800992c:	e7e6      	b.n	80098fc <_printf_i+0x184>
 800992e:	4615      	mov	r5, r2
 8009930:	e7bb      	b.n	80098aa <_printf_i+0x132>
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	6826      	ldr	r6, [r4, #0]
 8009936:	1d18      	adds	r0, r3, #4
 8009938:	6961      	ldr	r1, [r4, #20]
 800993a:	6028      	str	r0, [r5, #0]
 800993c:	0635      	lsls	r5, r6, #24
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	d501      	bpl.n	8009946 <_printf_i+0x1ce>
 8009942:	6019      	str	r1, [r3, #0]
 8009944:	e002      	b.n	800994c <_printf_i+0x1d4>
 8009946:	0670      	lsls	r0, r6, #25
 8009948:	d5fb      	bpl.n	8009942 <_printf_i+0x1ca>
 800994a:	8019      	strh	r1, [r3, #0]
 800994c:	2300      	movs	r3, #0
 800994e:	4615      	mov	r5, r2
 8009950:	6123      	str	r3, [r4, #16]
 8009952:	e7ba      	b.n	80098ca <_printf_i+0x152>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	2100      	movs	r1, #0
 8009958:	1d1a      	adds	r2, r3, #4
 800995a:	602a      	str	r2, [r5, #0]
 800995c:	681d      	ldr	r5, [r3, #0]
 800995e:	6862      	ldr	r2, [r4, #4]
 8009960:	4628      	mov	r0, r5
 8009962:	f002 fb37 	bl	800bfd4 <memchr>
 8009966:	b108      	cbz	r0, 800996c <_printf_i+0x1f4>
 8009968:	1b40      	subs	r0, r0, r5
 800996a:	6060      	str	r0, [r4, #4]
 800996c:	6863      	ldr	r3, [r4, #4]
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	2300      	movs	r3, #0
 8009972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009976:	e7a8      	b.n	80098ca <_printf_i+0x152>
 8009978:	462a      	mov	r2, r5
 800997a:	4649      	mov	r1, r9
 800997c:	4640      	mov	r0, r8
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	47d0      	blx	sl
 8009982:	3001      	adds	r0, #1
 8009984:	d0ab      	beq.n	80098de <_printf_i+0x166>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	079b      	lsls	r3, r3, #30
 800998a:	d413      	bmi.n	80099b4 <_printf_i+0x23c>
 800998c:	68e0      	ldr	r0, [r4, #12]
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	4298      	cmp	r0, r3
 8009992:	bfb8      	it	lt
 8009994:	4618      	movlt	r0, r3
 8009996:	e7a4      	b.n	80098e2 <_printf_i+0x16a>
 8009998:	2301      	movs	r3, #1
 800999a:	4632      	mov	r2, r6
 800999c:	4649      	mov	r1, r9
 800999e:	4640      	mov	r0, r8
 80099a0:	47d0      	blx	sl
 80099a2:	3001      	adds	r0, #1
 80099a4:	d09b      	beq.n	80098de <_printf_i+0x166>
 80099a6:	3501      	adds	r5, #1
 80099a8:	68e3      	ldr	r3, [r4, #12]
 80099aa:	9903      	ldr	r1, [sp, #12]
 80099ac:	1a5b      	subs	r3, r3, r1
 80099ae:	42ab      	cmp	r3, r5
 80099b0:	dcf2      	bgt.n	8009998 <_printf_i+0x220>
 80099b2:	e7eb      	b.n	800998c <_printf_i+0x214>
 80099b4:	2500      	movs	r5, #0
 80099b6:	f104 0619 	add.w	r6, r4, #25
 80099ba:	e7f5      	b.n	80099a8 <_printf_i+0x230>
 80099bc:	0800df8a 	.word	0x0800df8a
 80099c0:	0800df9b 	.word	0x0800df9b

080099c4 <_scanf_float>:
 80099c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	b087      	sub	sp, #28
 80099ca:	9303      	str	r3, [sp, #12]
 80099cc:	688b      	ldr	r3, [r1, #8]
 80099ce:	4617      	mov	r7, r2
 80099d0:	1e5a      	subs	r2, r3, #1
 80099d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80099d6:	bf85      	ittet	hi
 80099d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80099dc:	195b      	addhi	r3, r3, r5
 80099de:	2300      	movls	r3, #0
 80099e0:	9302      	strhi	r3, [sp, #8]
 80099e2:	bf88      	it	hi
 80099e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80099e8:	468b      	mov	fp, r1
 80099ea:	f04f 0500 	mov.w	r5, #0
 80099ee:	bf8c      	ite	hi
 80099f0:	608b      	strhi	r3, [r1, #8]
 80099f2:	9302      	strls	r3, [sp, #8]
 80099f4:	680b      	ldr	r3, [r1, #0]
 80099f6:	4680      	mov	r8, r0
 80099f8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80099fc:	f84b 3b1c 	str.w	r3, [fp], #28
 8009a00:	460c      	mov	r4, r1
 8009a02:	465e      	mov	r6, fp
 8009a04:	46aa      	mov	sl, r5
 8009a06:	46a9      	mov	r9, r5
 8009a08:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009a0c:	9501      	str	r5, [sp, #4]
 8009a0e:	68a2      	ldr	r2, [r4, #8]
 8009a10:	b152      	cbz	r2, 8009a28 <_scanf_float+0x64>
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b4e      	cmp	r3, #78	; 0x4e
 8009a18:	d864      	bhi.n	8009ae4 <_scanf_float+0x120>
 8009a1a:	2b40      	cmp	r3, #64	; 0x40
 8009a1c:	d83c      	bhi.n	8009a98 <_scanf_float+0xd4>
 8009a1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009a22:	b2c8      	uxtb	r0, r1
 8009a24:	280e      	cmp	r0, #14
 8009a26:	d93a      	bls.n	8009a9e <_scanf_float+0xda>
 8009a28:	f1b9 0f00 	cmp.w	r9, #0
 8009a2c:	d003      	beq.n	8009a36 <_scanf_float+0x72>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a3a:	f1ba 0f01 	cmp.w	sl, #1
 8009a3e:	f200 8113 	bhi.w	8009c68 <_scanf_float+0x2a4>
 8009a42:	455e      	cmp	r6, fp
 8009a44:	f200 8105 	bhi.w	8009c52 <_scanf_float+0x28e>
 8009a48:	2501      	movs	r5, #1
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	b007      	add	sp, #28
 8009a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009a56:	2a0d      	cmp	r2, #13
 8009a58:	d8e6      	bhi.n	8009a28 <_scanf_float+0x64>
 8009a5a:	a101      	add	r1, pc, #4	; (adr r1, 8009a60 <_scanf_float+0x9c>)
 8009a5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a60:	08009b9f 	.word	0x08009b9f
 8009a64:	08009a29 	.word	0x08009a29
 8009a68:	08009a29 	.word	0x08009a29
 8009a6c:	08009a29 	.word	0x08009a29
 8009a70:	08009bff 	.word	0x08009bff
 8009a74:	08009bd7 	.word	0x08009bd7
 8009a78:	08009a29 	.word	0x08009a29
 8009a7c:	08009a29 	.word	0x08009a29
 8009a80:	08009bad 	.word	0x08009bad
 8009a84:	08009a29 	.word	0x08009a29
 8009a88:	08009a29 	.word	0x08009a29
 8009a8c:	08009a29 	.word	0x08009a29
 8009a90:	08009a29 	.word	0x08009a29
 8009a94:	08009b65 	.word	0x08009b65
 8009a98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009a9c:	e7db      	b.n	8009a56 <_scanf_float+0x92>
 8009a9e:	290e      	cmp	r1, #14
 8009aa0:	d8c2      	bhi.n	8009a28 <_scanf_float+0x64>
 8009aa2:	a001      	add	r0, pc, #4	; (adr r0, 8009aa8 <_scanf_float+0xe4>)
 8009aa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009aa8:	08009b57 	.word	0x08009b57
 8009aac:	08009a29 	.word	0x08009a29
 8009ab0:	08009b57 	.word	0x08009b57
 8009ab4:	08009beb 	.word	0x08009beb
 8009ab8:	08009a29 	.word	0x08009a29
 8009abc:	08009b05 	.word	0x08009b05
 8009ac0:	08009b41 	.word	0x08009b41
 8009ac4:	08009b41 	.word	0x08009b41
 8009ac8:	08009b41 	.word	0x08009b41
 8009acc:	08009b41 	.word	0x08009b41
 8009ad0:	08009b41 	.word	0x08009b41
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009b41 	.word	0x08009b41
 8009adc:	08009b41 	.word	0x08009b41
 8009ae0:	08009b41 	.word	0x08009b41
 8009ae4:	2b6e      	cmp	r3, #110	; 0x6e
 8009ae6:	d809      	bhi.n	8009afc <_scanf_float+0x138>
 8009ae8:	2b60      	cmp	r3, #96	; 0x60
 8009aea:	d8b2      	bhi.n	8009a52 <_scanf_float+0x8e>
 8009aec:	2b54      	cmp	r3, #84	; 0x54
 8009aee:	d077      	beq.n	8009be0 <_scanf_float+0x21c>
 8009af0:	2b59      	cmp	r3, #89	; 0x59
 8009af2:	d199      	bne.n	8009a28 <_scanf_float+0x64>
 8009af4:	2d07      	cmp	r5, #7
 8009af6:	d197      	bne.n	8009a28 <_scanf_float+0x64>
 8009af8:	2508      	movs	r5, #8
 8009afa:	e029      	b.n	8009b50 <_scanf_float+0x18c>
 8009afc:	2b74      	cmp	r3, #116	; 0x74
 8009afe:	d06f      	beq.n	8009be0 <_scanf_float+0x21c>
 8009b00:	2b79      	cmp	r3, #121	; 0x79
 8009b02:	e7f6      	b.n	8009af2 <_scanf_float+0x12e>
 8009b04:	6821      	ldr	r1, [r4, #0]
 8009b06:	05c8      	lsls	r0, r1, #23
 8009b08:	d51a      	bpl.n	8009b40 <_scanf_float+0x17c>
 8009b0a:	9b02      	ldr	r3, [sp, #8]
 8009b0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009b10:	6021      	str	r1, [r4, #0]
 8009b12:	f109 0901 	add.w	r9, r9, #1
 8009b16:	b11b      	cbz	r3, 8009b20 <_scanf_float+0x15c>
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	3201      	adds	r2, #1
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	60a2      	str	r2, [r4, #8]
 8009b20:	68a3      	ldr	r3, [r4, #8]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	60a3      	str	r3, [r4, #8]
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	607b      	str	r3, [r7, #4]
 8009b34:	f340 8084 	ble.w	8009c40 <_scanf_float+0x27c>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	e766      	b.n	8009a0e <_scanf_float+0x4a>
 8009b40:	eb1a 0f05 	cmn.w	sl, r5
 8009b44:	f47f af70 	bne.w	8009a28 <_scanf_float+0x64>
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009b4e:	6022      	str	r2, [r4, #0]
 8009b50:	f806 3b01 	strb.w	r3, [r6], #1
 8009b54:	e7e4      	b.n	8009b20 <_scanf_float+0x15c>
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	0610      	lsls	r0, r2, #24
 8009b5a:	f57f af65 	bpl.w	8009a28 <_scanf_float+0x64>
 8009b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b62:	e7f4      	b.n	8009b4e <_scanf_float+0x18a>
 8009b64:	f1ba 0f00 	cmp.w	sl, #0
 8009b68:	d10e      	bne.n	8009b88 <_scanf_float+0x1c4>
 8009b6a:	f1b9 0f00 	cmp.w	r9, #0
 8009b6e:	d10e      	bne.n	8009b8e <_scanf_float+0x1ca>
 8009b70:	6822      	ldr	r2, [r4, #0]
 8009b72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009b76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009b7a:	d108      	bne.n	8009b8e <_scanf_float+0x1ca>
 8009b7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b80:	f04f 0a01 	mov.w	sl, #1
 8009b84:	6022      	str	r2, [r4, #0]
 8009b86:	e7e3      	b.n	8009b50 <_scanf_float+0x18c>
 8009b88:	f1ba 0f02 	cmp.w	sl, #2
 8009b8c:	d055      	beq.n	8009c3a <_scanf_float+0x276>
 8009b8e:	2d01      	cmp	r5, #1
 8009b90:	d002      	beq.n	8009b98 <_scanf_float+0x1d4>
 8009b92:	2d04      	cmp	r5, #4
 8009b94:	f47f af48 	bne.w	8009a28 <_scanf_float+0x64>
 8009b98:	3501      	adds	r5, #1
 8009b9a:	b2ed      	uxtb	r5, r5
 8009b9c:	e7d8      	b.n	8009b50 <_scanf_float+0x18c>
 8009b9e:	f1ba 0f01 	cmp.w	sl, #1
 8009ba2:	f47f af41 	bne.w	8009a28 <_scanf_float+0x64>
 8009ba6:	f04f 0a02 	mov.w	sl, #2
 8009baa:	e7d1      	b.n	8009b50 <_scanf_float+0x18c>
 8009bac:	b97d      	cbnz	r5, 8009bce <_scanf_float+0x20a>
 8009bae:	f1b9 0f00 	cmp.w	r9, #0
 8009bb2:	f47f af3c 	bne.w	8009a2e <_scanf_float+0x6a>
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009bbc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009bc0:	f47f af39 	bne.w	8009a36 <_scanf_float+0x72>
 8009bc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009bc8:	2501      	movs	r5, #1
 8009bca:	6022      	str	r2, [r4, #0]
 8009bcc:	e7c0      	b.n	8009b50 <_scanf_float+0x18c>
 8009bce:	2d03      	cmp	r5, #3
 8009bd0:	d0e2      	beq.n	8009b98 <_scanf_float+0x1d4>
 8009bd2:	2d05      	cmp	r5, #5
 8009bd4:	e7de      	b.n	8009b94 <_scanf_float+0x1d0>
 8009bd6:	2d02      	cmp	r5, #2
 8009bd8:	f47f af26 	bne.w	8009a28 <_scanf_float+0x64>
 8009bdc:	2503      	movs	r5, #3
 8009bde:	e7b7      	b.n	8009b50 <_scanf_float+0x18c>
 8009be0:	2d06      	cmp	r5, #6
 8009be2:	f47f af21 	bne.w	8009a28 <_scanf_float+0x64>
 8009be6:	2507      	movs	r5, #7
 8009be8:	e7b2      	b.n	8009b50 <_scanf_float+0x18c>
 8009bea:	6822      	ldr	r2, [r4, #0]
 8009bec:	0591      	lsls	r1, r2, #22
 8009bee:	f57f af1b 	bpl.w	8009a28 <_scanf_float+0x64>
 8009bf2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009bf6:	6022      	str	r2, [r4, #0]
 8009bf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bfc:	e7a8      	b.n	8009b50 <_scanf_float+0x18c>
 8009bfe:	6822      	ldr	r2, [r4, #0]
 8009c00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009c04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009c08:	d006      	beq.n	8009c18 <_scanf_float+0x254>
 8009c0a:	0550      	lsls	r0, r2, #21
 8009c0c:	f57f af0c 	bpl.w	8009a28 <_scanf_float+0x64>
 8009c10:	f1b9 0f00 	cmp.w	r9, #0
 8009c14:	f43f af0f 	beq.w	8009a36 <_scanf_float+0x72>
 8009c18:	0591      	lsls	r1, r2, #22
 8009c1a:	bf58      	it	pl
 8009c1c:	9901      	ldrpl	r1, [sp, #4]
 8009c1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c22:	bf58      	it	pl
 8009c24:	eba9 0101 	subpl.w	r1, r9, r1
 8009c28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009c2c:	f04f 0900 	mov.w	r9, #0
 8009c30:	bf58      	it	pl
 8009c32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009c36:	6022      	str	r2, [r4, #0]
 8009c38:	e78a      	b.n	8009b50 <_scanf_float+0x18c>
 8009c3a:	f04f 0a03 	mov.w	sl, #3
 8009c3e:	e787      	b.n	8009b50 <_scanf_float+0x18c>
 8009c40:	4639      	mov	r1, r7
 8009c42:	4640      	mov	r0, r8
 8009c44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c48:	4798      	blx	r3
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f43f aedf 	beq.w	8009a0e <_scanf_float+0x4a>
 8009c50:	e6ea      	b.n	8009a28 <_scanf_float+0x64>
 8009c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c56:	463a      	mov	r2, r7
 8009c58:	4640      	mov	r0, r8
 8009c5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c5e:	4798      	blx	r3
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	e6ec      	b.n	8009a42 <_scanf_float+0x7e>
 8009c68:	1e6b      	subs	r3, r5, #1
 8009c6a:	2b06      	cmp	r3, #6
 8009c6c:	d825      	bhi.n	8009cba <_scanf_float+0x2f6>
 8009c6e:	2d02      	cmp	r5, #2
 8009c70:	d836      	bhi.n	8009ce0 <_scanf_float+0x31c>
 8009c72:	455e      	cmp	r6, fp
 8009c74:	f67f aee8 	bls.w	8009a48 <_scanf_float+0x84>
 8009c78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c7c:	463a      	mov	r2, r7
 8009c7e:	4640      	mov	r0, r8
 8009c80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c84:	4798      	blx	r3
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	6123      	str	r3, [r4, #16]
 8009c8c:	e7f1      	b.n	8009c72 <_scanf_float+0x2ae>
 8009c8e:	9802      	ldr	r0, [sp, #8]
 8009c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009c98:	463a      	mov	r2, r7
 8009c9a:	9002      	str	r0, [sp, #8]
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	4798      	blx	r3
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009caa:	fa5f fa8a 	uxtb.w	sl, sl
 8009cae:	f1ba 0f02 	cmp.w	sl, #2
 8009cb2:	d1ec      	bne.n	8009c8e <_scanf_float+0x2ca>
 8009cb4:	3d03      	subs	r5, #3
 8009cb6:	b2ed      	uxtb	r5, r5
 8009cb8:	1b76      	subs	r6, r6, r5
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	05da      	lsls	r2, r3, #23
 8009cbe:	d52f      	bpl.n	8009d20 <_scanf_float+0x35c>
 8009cc0:	055b      	lsls	r3, r3, #21
 8009cc2:	d510      	bpl.n	8009ce6 <_scanf_float+0x322>
 8009cc4:	455e      	cmp	r6, fp
 8009cc6:	f67f aebf 	bls.w	8009a48 <_scanf_float+0x84>
 8009cca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cce:	463a      	mov	r2, r7
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009cd6:	4798      	blx	r3
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	6123      	str	r3, [r4, #16]
 8009cde:	e7f1      	b.n	8009cc4 <_scanf_float+0x300>
 8009ce0:	46aa      	mov	sl, r5
 8009ce2:	9602      	str	r6, [sp, #8]
 8009ce4:	e7df      	b.n	8009ca6 <_scanf_float+0x2e2>
 8009ce6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	2965      	cmp	r1, #101	; 0x65
 8009cee:	f103 33ff 	add.w	r3, r3, #4294967295
 8009cf2:	f106 35ff 	add.w	r5, r6, #4294967295
 8009cf6:	6123      	str	r3, [r4, #16]
 8009cf8:	d00c      	beq.n	8009d14 <_scanf_float+0x350>
 8009cfa:	2945      	cmp	r1, #69	; 0x45
 8009cfc:	d00a      	beq.n	8009d14 <_scanf_float+0x350>
 8009cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d02:	463a      	mov	r2, r7
 8009d04:	4640      	mov	r0, r8
 8009d06:	4798      	blx	r3
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	1eb5      	subs	r5, r6, #2
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	463a      	mov	r2, r7
 8009d16:	4640      	mov	r0, r8
 8009d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d1c:	4798      	blx	r3
 8009d1e:	462e      	mov	r6, r5
 8009d20:	6825      	ldr	r5, [r4, #0]
 8009d22:	f015 0510 	ands.w	r5, r5, #16
 8009d26:	d155      	bne.n	8009dd4 <_scanf_float+0x410>
 8009d28:	7035      	strb	r5, [r6, #0]
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d34:	d11b      	bne.n	8009d6e <_scanf_float+0x3aa>
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	454b      	cmp	r3, r9
 8009d3a:	eba3 0209 	sub.w	r2, r3, r9
 8009d3e:	d123      	bne.n	8009d88 <_scanf_float+0x3c4>
 8009d40:	2200      	movs	r2, #0
 8009d42:	4659      	mov	r1, fp
 8009d44:	4640      	mov	r0, r8
 8009d46:	f000 fec3 	bl	800aad0 <_strtod_r>
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	f012 0f02 	tst.w	r2, #2
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	d021      	beq.n	8009d9e <_scanf_float+0x3da>
 8009d5a:	1d1a      	adds	r2, r3, #4
 8009d5c:	9903      	ldr	r1, [sp, #12]
 8009d5e:	600a      	str	r2, [r1, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	e9c3 6700 	strd	r6, r7, [r3]
 8009d66:	68e3      	ldr	r3, [r4, #12]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	60e3      	str	r3, [r4, #12]
 8009d6c:	e66d      	b.n	8009a4a <_scanf_float+0x86>
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0e5      	beq.n	8009d40 <_scanf_float+0x37c>
 8009d74:	9905      	ldr	r1, [sp, #20]
 8009d76:	230a      	movs	r3, #10
 8009d78:	462a      	mov	r2, r5
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	3101      	adds	r1, #1
 8009d7e:	f000 ff29 	bl	800abd4 <_strtol_r>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	9e05      	ldr	r6, [sp, #20]
 8009d86:	1ac2      	subs	r2, r0, r3
 8009d88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009d8c:	429e      	cmp	r6, r3
 8009d8e:	bf28      	it	cs
 8009d90:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009d94:	4630      	mov	r0, r6
 8009d96:	4910      	ldr	r1, [pc, #64]	; (8009dd8 <_scanf_float+0x414>)
 8009d98:	f000 f85a 	bl	8009e50 <siprintf>
 8009d9c:	e7d0      	b.n	8009d40 <_scanf_float+0x37c>
 8009d9e:	f012 0f04 	tst.w	r2, #4
 8009da2:	f103 0204 	add.w	r2, r3, #4
 8009da6:	d1d9      	bne.n	8009d5c <_scanf_float+0x398>
 8009da8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009dac:	f8cc 2000 	str.w	r2, [ip]
 8009db0:	f8d3 8000 	ldr.w	r8, [r3]
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	f7f6 fe28 	bl	8000a0c <__aeabi_dcmpun>
 8009dbc:	b128      	cbz	r0, 8009dca <_scanf_float+0x406>
 8009dbe:	4807      	ldr	r0, [pc, #28]	; (8009ddc <_scanf_float+0x418>)
 8009dc0:	f000 f80e 	bl	8009de0 <nanf>
 8009dc4:	f8c8 0000 	str.w	r0, [r8]
 8009dc8:	e7cd      	b.n	8009d66 <_scanf_float+0x3a2>
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fe7b 	bl	8000ac8 <__aeabi_d2f>
 8009dd2:	e7f7      	b.n	8009dc4 <_scanf_float+0x400>
 8009dd4:	2500      	movs	r5, #0
 8009dd6:	e638      	b.n	8009a4a <_scanf_float+0x86>
 8009dd8:	0800dfac 	.word	0x0800dfac
 8009ddc:	0800e3b8 	.word	0x0800e3b8

08009de0 <nanf>:
 8009de0:	4800      	ldr	r0, [pc, #0]	; (8009de4 <nanf+0x4>)
 8009de2:	4770      	bx	lr
 8009de4:	7fc00000 	.word	0x7fc00000

08009de8 <sniprintf>:
 8009de8:	b40c      	push	{r2, r3}
 8009dea:	b530      	push	{r4, r5, lr}
 8009dec:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <sniprintf+0x64>)
 8009dee:	1e0c      	subs	r4, r1, #0
 8009df0:	681d      	ldr	r5, [r3, #0]
 8009df2:	b09d      	sub	sp, #116	; 0x74
 8009df4:	da08      	bge.n	8009e08 <sniprintf+0x20>
 8009df6:	238b      	movs	r3, #139	; 0x8b
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	b01d      	add	sp, #116	; 0x74
 8009e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e04:	b002      	add	sp, #8
 8009e06:	4770      	bx	lr
 8009e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e10:	bf0c      	ite	eq
 8009e12:	4623      	moveq	r3, r4
 8009e14:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	9307      	str	r3, [sp, #28]
 8009e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e20:	9002      	str	r0, [sp, #8]
 8009e22:	9006      	str	r0, [sp, #24]
 8009e24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e28:	4628      	mov	r0, r5
 8009e2a:	ab21      	add	r3, sp, #132	; 0x84
 8009e2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e2e:	a902      	add	r1, sp, #8
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	f002 fee1 	bl	800cbf8 <_svfiprintf_r>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	bfbc      	itt	lt
 8009e3a:	238b      	movlt	r3, #139	; 0x8b
 8009e3c:	602b      	strlt	r3, [r5, #0]
 8009e3e:	2c00      	cmp	r4, #0
 8009e40:	d0dd      	beq.n	8009dfe <sniprintf+0x16>
 8009e42:	2200      	movs	r2, #0
 8009e44:	9b02      	ldr	r3, [sp, #8]
 8009e46:	701a      	strb	r2, [r3, #0]
 8009e48:	e7d9      	b.n	8009dfe <sniprintf+0x16>
 8009e4a:	bf00      	nop
 8009e4c:	200000d0 	.word	0x200000d0

08009e50 <siprintf>:
 8009e50:	b40e      	push	{r1, r2, r3}
 8009e52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e56:	b500      	push	{lr}
 8009e58:	b09c      	sub	sp, #112	; 0x70
 8009e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8009e5c:	9002      	str	r0, [sp, #8]
 8009e5e:	9006      	str	r0, [sp, #24]
 8009e60:	9107      	str	r1, [sp, #28]
 8009e62:	9104      	str	r1, [sp, #16]
 8009e64:	4808      	ldr	r0, [pc, #32]	; (8009e88 <siprintf+0x38>)
 8009e66:	4909      	ldr	r1, [pc, #36]	; (8009e8c <siprintf+0x3c>)
 8009e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e6c:	9105      	str	r1, [sp, #20]
 8009e6e:	6800      	ldr	r0, [r0, #0]
 8009e70:	a902      	add	r1, sp, #8
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	f002 fec0 	bl	800cbf8 <_svfiprintf_r>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	701a      	strb	r2, [r3, #0]
 8009e7e:	b01c      	add	sp, #112	; 0x70
 8009e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e84:	b003      	add	sp, #12
 8009e86:	4770      	bx	lr
 8009e88:	200000d0 	.word	0x200000d0
 8009e8c:	ffff0208 	.word	0xffff0208

08009e90 <strstr>:
 8009e90:	780a      	ldrb	r2, [r1, #0]
 8009e92:	b570      	push	{r4, r5, r6, lr}
 8009e94:	b96a      	cbnz	r2, 8009eb2 <strstr+0x22>
 8009e96:	bd70      	pop	{r4, r5, r6, pc}
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d109      	bne.n	8009eb0 <strstr+0x20>
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0f6      	beq.n	8009e96 <strstr+0x6>
 8009ea8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009eac:	429e      	cmp	r6, r3
 8009eae:	d0f7      	beq.n	8009ea0 <strstr+0x10>
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	7803      	ldrb	r3, [r0, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1ef      	bne.n	8009e98 <strstr+0x8>
 8009eb8:	4618      	mov	r0, r3
 8009eba:	e7ec      	b.n	8009e96 <strstr+0x6>

08009ebc <sulp>:
 8009ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec0:	460f      	mov	r7, r1
 8009ec2:	4690      	mov	r8, r2
 8009ec4:	f002 fc04 	bl	800c6d0 <__ulp>
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	d011      	beq.n	8009ef6 <sulp+0x3a>
 8009ed2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009ed6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	dd0b      	ble.n	8009ef6 <sulp+0x3a>
 8009ede:	2400      	movs	r4, #0
 8009ee0:	051b      	lsls	r3, r3, #20
 8009ee2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009ee6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009eea:	4622      	mov	r2, r4
 8009eec:	462b      	mov	r3, r5
 8009eee:	f7f6 faf3 	bl	80004d8 <__aeabi_dmul>
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009f00 <_strtod_l>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	469b      	mov	fp, r3
 8009f06:	2300      	movs	r3, #0
 8009f08:	b09f      	sub	sp, #124	; 0x7c
 8009f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f0c:	4b9e      	ldr	r3, [pc, #632]	; (800a188 <_strtod_l+0x288>)
 8009f0e:	4682      	mov	sl, r0
 8009f10:	681f      	ldr	r7, [r3, #0]
 8009f12:	460e      	mov	r6, r1
 8009f14:	4638      	mov	r0, r7
 8009f16:	9215      	str	r2, [sp, #84]	; 0x54
 8009f18:	f7f6 f91a 	bl	8000150 <strlen>
 8009f1c:	f04f 0800 	mov.w	r8, #0
 8009f20:	4604      	mov	r4, r0
 8009f22:	f04f 0900 	mov.w	r9, #0
 8009f26:	9619      	str	r6, [sp, #100]	; 0x64
 8009f28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	2a2b      	cmp	r2, #43	; 0x2b
 8009f2e:	d04c      	beq.n	8009fca <_strtod_l+0xca>
 8009f30:	d83a      	bhi.n	8009fa8 <_strtod_l+0xa8>
 8009f32:	2a0d      	cmp	r2, #13
 8009f34:	d833      	bhi.n	8009f9e <_strtod_l+0x9e>
 8009f36:	2a08      	cmp	r2, #8
 8009f38:	d833      	bhi.n	8009fa2 <_strtod_l+0xa2>
 8009f3a:	2a00      	cmp	r2, #0
 8009f3c:	d03d      	beq.n	8009fba <_strtod_l+0xba>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	930a      	str	r3, [sp, #40]	; 0x28
 8009f42:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009f44:	782b      	ldrb	r3, [r5, #0]
 8009f46:	2b30      	cmp	r3, #48	; 0x30
 8009f48:	f040 80aa 	bne.w	800a0a0 <_strtod_l+0x1a0>
 8009f4c:	786b      	ldrb	r3, [r5, #1]
 8009f4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f52:	2b58      	cmp	r3, #88	; 0x58
 8009f54:	d166      	bne.n	800a024 <_strtod_l+0x124>
 8009f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f58:	4650      	mov	r0, sl
 8009f5a:	9301      	str	r3, [sp, #4]
 8009f5c:	ab1a      	add	r3, sp, #104	; 0x68
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	4a8a      	ldr	r2, [pc, #552]	; (800a18c <_strtod_l+0x28c>)
 8009f62:	f8cd b008 	str.w	fp, [sp, #8]
 8009f66:	ab1b      	add	r3, sp, #108	; 0x6c
 8009f68:	a919      	add	r1, sp, #100	; 0x64
 8009f6a:	f001 fd17 	bl	800b99c <__gethex>
 8009f6e:	f010 0607 	ands.w	r6, r0, #7
 8009f72:	4604      	mov	r4, r0
 8009f74:	d005      	beq.n	8009f82 <_strtod_l+0x82>
 8009f76:	2e06      	cmp	r6, #6
 8009f78:	d129      	bne.n	8009fce <_strtod_l+0xce>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	3501      	adds	r5, #1
 8009f7e:	9519      	str	r5, [sp, #100]	; 0x64
 8009f80:	930a      	str	r3, [sp, #40]	; 0x28
 8009f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f040 858a 	bne.w	800aa9e <_strtod_l+0xb9e>
 8009f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8c:	b1d3      	cbz	r3, 8009fc4 <_strtod_l+0xc4>
 8009f8e:	4642      	mov	r2, r8
 8009f90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f94:	4610      	mov	r0, r2
 8009f96:	4619      	mov	r1, r3
 8009f98:	b01f      	add	sp, #124	; 0x7c
 8009f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9e:	2a20      	cmp	r2, #32
 8009fa0:	d1cd      	bne.n	8009f3e <_strtod_l+0x3e>
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	9319      	str	r3, [sp, #100]	; 0x64
 8009fa6:	e7bf      	b.n	8009f28 <_strtod_l+0x28>
 8009fa8:	2a2d      	cmp	r2, #45	; 0x2d
 8009faa:	d1c8      	bne.n	8009f3e <_strtod_l+0x3e>
 8009fac:	2201      	movs	r2, #1
 8009fae:	920a      	str	r2, [sp, #40]	; 0x28
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	9219      	str	r2, [sp, #100]	; 0x64
 8009fb4:	785b      	ldrb	r3, [r3, #1]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1c3      	bne.n	8009f42 <_strtod_l+0x42>
 8009fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fbc:	9619      	str	r6, [sp, #100]	; 0x64
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f040 856b 	bne.w	800aa9a <_strtod_l+0xb9a>
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	e7e4      	b.n	8009f94 <_strtod_l+0x94>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	e7ef      	b.n	8009fae <_strtod_l+0xae>
 8009fce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009fd0:	b13a      	cbz	r2, 8009fe2 <_strtod_l+0xe2>
 8009fd2:	2135      	movs	r1, #53	; 0x35
 8009fd4:	a81c      	add	r0, sp, #112	; 0x70
 8009fd6:	f002 fc7f 	bl	800c8d8 <__copybits>
 8009fda:	4650      	mov	r0, sl
 8009fdc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fde:	f002 f847 	bl	800c070 <_Bfree>
 8009fe2:	3e01      	subs	r6, #1
 8009fe4:	2e04      	cmp	r6, #4
 8009fe6:	d806      	bhi.n	8009ff6 <_strtod_l+0xf6>
 8009fe8:	e8df f006 	tbb	[pc, r6]
 8009fec:	1714030a 	.word	0x1714030a
 8009ff0:	0a          	.byte	0x0a
 8009ff1:	00          	.byte	0x00
 8009ff2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009ff6:	0721      	lsls	r1, r4, #28
 8009ff8:	d5c3      	bpl.n	8009f82 <_strtod_l+0x82>
 8009ffa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009ffe:	e7c0      	b.n	8009f82 <_strtod_l+0x82>
 800a000:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a002:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a00a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a00e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a012:	e7f0      	b.n	8009ff6 <_strtod_l+0xf6>
 800a014:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a190 <_strtod_l+0x290>
 800a018:	e7ed      	b.n	8009ff6 <_strtod_l+0xf6>
 800a01a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a01e:	f04f 38ff 	mov.w	r8, #4294967295
 800a022:	e7e8      	b.n	8009ff6 <_strtod_l+0xf6>
 800a024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	9219      	str	r2, [sp, #100]	; 0x64
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	2b30      	cmp	r3, #48	; 0x30
 800a02e:	d0f9      	beq.n	800a024 <_strtod_l+0x124>
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0a6      	beq.n	8009f82 <_strtod_l+0x82>
 800a034:	2301      	movs	r3, #1
 800a036:	9307      	str	r3, [sp, #28]
 800a038:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a03a:	220a      	movs	r2, #10
 800a03c:	9308      	str	r3, [sp, #32]
 800a03e:	2300      	movs	r3, #0
 800a040:	469b      	mov	fp, r3
 800a042:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a046:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a048:	7805      	ldrb	r5, [r0, #0]
 800a04a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a04e:	b2d9      	uxtb	r1, r3
 800a050:	2909      	cmp	r1, #9
 800a052:	d927      	bls.n	800a0a4 <_strtod_l+0x1a4>
 800a054:	4622      	mov	r2, r4
 800a056:	4639      	mov	r1, r7
 800a058:	f002 fede 	bl	800ce18 <strncmp>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d033      	beq.n	800a0c8 <_strtod_l+0x1c8>
 800a060:	2000      	movs	r0, #0
 800a062:	462a      	mov	r2, r5
 800a064:	465c      	mov	r4, fp
 800a066:	4603      	mov	r3, r0
 800a068:	9004      	str	r0, [sp, #16]
 800a06a:	2a65      	cmp	r2, #101	; 0x65
 800a06c:	d001      	beq.n	800a072 <_strtod_l+0x172>
 800a06e:	2a45      	cmp	r2, #69	; 0x45
 800a070:	d114      	bne.n	800a09c <_strtod_l+0x19c>
 800a072:	b91c      	cbnz	r4, 800a07c <_strtod_l+0x17c>
 800a074:	9a07      	ldr	r2, [sp, #28]
 800a076:	4302      	orrs	r2, r0
 800a078:	d09f      	beq.n	8009fba <_strtod_l+0xba>
 800a07a:	2400      	movs	r4, #0
 800a07c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a07e:	1c72      	adds	r2, r6, #1
 800a080:	9219      	str	r2, [sp, #100]	; 0x64
 800a082:	7872      	ldrb	r2, [r6, #1]
 800a084:	2a2b      	cmp	r2, #43	; 0x2b
 800a086:	d079      	beq.n	800a17c <_strtod_l+0x27c>
 800a088:	2a2d      	cmp	r2, #45	; 0x2d
 800a08a:	f000 8083 	beq.w	800a194 <_strtod_l+0x294>
 800a08e:	2700      	movs	r7, #0
 800a090:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a094:	2909      	cmp	r1, #9
 800a096:	f240 8083 	bls.w	800a1a0 <_strtod_l+0x2a0>
 800a09a:	9619      	str	r6, [sp, #100]	; 0x64
 800a09c:	2500      	movs	r5, #0
 800a09e:	e09f      	b.n	800a1e0 <_strtod_l+0x2e0>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e7c8      	b.n	800a036 <_strtod_l+0x136>
 800a0a4:	f1bb 0f08 	cmp.w	fp, #8
 800a0a8:	bfd5      	itete	le
 800a0aa:	9906      	ldrle	r1, [sp, #24]
 800a0ac:	9905      	ldrgt	r1, [sp, #20]
 800a0ae:	fb02 3301 	mlale	r3, r2, r1, r3
 800a0b2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a0b6:	f100 0001 	add.w	r0, r0, #1
 800a0ba:	bfd4      	ite	le
 800a0bc:	9306      	strle	r3, [sp, #24]
 800a0be:	9305      	strgt	r3, [sp, #20]
 800a0c0:	f10b 0b01 	add.w	fp, fp, #1
 800a0c4:	9019      	str	r0, [sp, #100]	; 0x64
 800a0c6:	e7be      	b.n	800a046 <_strtod_l+0x146>
 800a0c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0ca:	191a      	adds	r2, r3, r4
 800a0cc:	9219      	str	r2, [sp, #100]	; 0x64
 800a0ce:	5d1a      	ldrb	r2, [r3, r4]
 800a0d0:	f1bb 0f00 	cmp.w	fp, #0
 800a0d4:	d036      	beq.n	800a144 <_strtod_l+0x244>
 800a0d6:	465c      	mov	r4, fp
 800a0d8:	9004      	str	r0, [sp, #16]
 800a0da:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a0de:	2b09      	cmp	r3, #9
 800a0e0:	d912      	bls.n	800a108 <_strtod_l+0x208>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e7c1      	b.n	800a06a <_strtod_l+0x16a>
 800a0e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	9219      	str	r2, [sp, #100]	; 0x64
 800a0ee:	785a      	ldrb	r2, [r3, #1]
 800a0f0:	2a30      	cmp	r2, #48	; 0x30
 800a0f2:	d0f8      	beq.n	800a0e6 <_strtod_l+0x1e6>
 800a0f4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	f200 84d5 	bhi.w	800aaa8 <_strtod_l+0xba8>
 800a0fe:	9004      	str	r0, [sp, #16]
 800a100:	2000      	movs	r0, #0
 800a102:	4604      	mov	r4, r0
 800a104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a106:	9308      	str	r3, [sp, #32]
 800a108:	3a30      	subs	r2, #48	; 0x30
 800a10a:	f100 0301 	add.w	r3, r0, #1
 800a10e:	d013      	beq.n	800a138 <_strtod_l+0x238>
 800a110:	9904      	ldr	r1, [sp, #16]
 800a112:	1905      	adds	r5, r0, r4
 800a114:	4419      	add	r1, r3
 800a116:	9104      	str	r1, [sp, #16]
 800a118:	4623      	mov	r3, r4
 800a11a:	210a      	movs	r1, #10
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	d113      	bne.n	800a148 <_strtod_l+0x248>
 800a120:	1823      	adds	r3, r4, r0
 800a122:	2b08      	cmp	r3, #8
 800a124:	f104 0401 	add.w	r4, r4, #1
 800a128:	4404      	add	r4, r0
 800a12a:	dc1b      	bgt.n	800a164 <_strtod_l+0x264>
 800a12c:	230a      	movs	r3, #10
 800a12e:	9906      	ldr	r1, [sp, #24]
 800a130:	fb03 2301 	mla	r3, r3, r1, r2
 800a134:	9306      	str	r3, [sp, #24]
 800a136:	2300      	movs	r3, #0
 800a138:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a13a:	4618      	mov	r0, r3
 800a13c:	1c51      	adds	r1, r2, #1
 800a13e:	9119      	str	r1, [sp, #100]	; 0x64
 800a140:	7852      	ldrb	r2, [r2, #1]
 800a142:	e7ca      	b.n	800a0da <_strtod_l+0x1da>
 800a144:	4658      	mov	r0, fp
 800a146:	e7d3      	b.n	800a0f0 <_strtod_l+0x1f0>
 800a148:	2b08      	cmp	r3, #8
 800a14a:	dc04      	bgt.n	800a156 <_strtod_l+0x256>
 800a14c:	9f06      	ldr	r7, [sp, #24]
 800a14e:	434f      	muls	r7, r1
 800a150:	9706      	str	r7, [sp, #24]
 800a152:	3301      	adds	r3, #1
 800a154:	e7e2      	b.n	800a11c <_strtod_l+0x21c>
 800a156:	1c5f      	adds	r7, r3, #1
 800a158:	2f10      	cmp	r7, #16
 800a15a:	bfde      	ittt	le
 800a15c:	9f05      	ldrle	r7, [sp, #20]
 800a15e:	434f      	mulle	r7, r1
 800a160:	9705      	strle	r7, [sp, #20]
 800a162:	e7f6      	b.n	800a152 <_strtod_l+0x252>
 800a164:	2c10      	cmp	r4, #16
 800a166:	bfdf      	itttt	le
 800a168:	230a      	movle	r3, #10
 800a16a:	9905      	ldrle	r1, [sp, #20]
 800a16c:	fb03 2301 	mlale	r3, r3, r1, r2
 800a170:	9305      	strle	r3, [sp, #20]
 800a172:	e7e0      	b.n	800a136 <_strtod_l+0x236>
 800a174:	2300      	movs	r3, #0
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	2301      	movs	r3, #1
 800a17a:	e77b      	b.n	800a074 <_strtod_l+0x174>
 800a17c:	2700      	movs	r7, #0
 800a17e:	1cb2      	adds	r2, r6, #2
 800a180:	9219      	str	r2, [sp, #100]	; 0x64
 800a182:	78b2      	ldrb	r2, [r6, #2]
 800a184:	e784      	b.n	800a090 <_strtod_l+0x190>
 800a186:	bf00      	nop
 800a188:	0800e200 	.word	0x0800e200
 800a18c:	0800dfb4 	.word	0x0800dfb4
 800a190:	7ff00000 	.word	0x7ff00000
 800a194:	2701      	movs	r7, #1
 800a196:	e7f2      	b.n	800a17e <_strtod_l+0x27e>
 800a198:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a19a:	1c51      	adds	r1, r2, #1
 800a19c:	9119      	str	r1, [sp, #100]	; 0x64
 800a19e:	7852      	ldrb	r2, [r2, #1]
 800a1a0:	2a30      	cmp	r2, #48	; 0x30
 800a1a2:	d0f9      	beq.n	800a198 <_strtod_l+0x298>
 800a1a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a1a8:	2908      	cmp	r1, #8
 800a1aa:	f63f af77 	bhi.w	800a09c <_strtod_l+0x19c>
 800a1ae:	f04f 0e0a 	mov.w	lr, #10
 800a1b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a1b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a1b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a1bc:	1c51      	adds	r1, r2, #1
 800a1be:	9119      	str	r1, [sp, #100]	; 0x64
 800a1c0:	7852      	ldrb	r2, [r2, #1]
 800a1c2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a1c6:	2d09      	cmp	r5, #9
 800a1c8:	d935      	bls.n	800a236 <_strtod_l+0x336>
 800a1ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a1cc:	1b49      	subs	r1, r1, r5
 800a1ce:	2908      	cmp	r1, #8
 800a1d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a1d4:	dc02      	bgt.n	800a1dc <_strtod_l+0x2dc>
 800a1d6:	4565      	cmp	r5, ip
 800a1d8:	bfa8      	it	ge
 800a1da:	4665      	movge	r5, ip
 800a1dc:	b107      	cbz	r7, 800a1e0 <_strtod_l+0x2e0>
 800a1de:	426d      	negs	r5, r5
 800a1e0:	2c00      	cmp	r4, #0
 800a1e2:	d14c      	bne.n	800a27e <_strtod_l+0x37e>
 800a1e4:	9907      	ldr	r1, [sp, #28]
 800a1e6:	4301      	orrs	r1, r0
 800a1e8:	f47f aecb 	bne.w	8009f82 <_strtod_l+0x82>
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f47f aee4 	bne.w	8009fba <_strtod_l+0xba>
 800a1f2:	2a69      	cmp	r2, #105	; 0x69
 800a1f4:	d026      	beq.n	800a244 <_strtod_l+0x344>
 800a1f6:	dc23      	bgt.n	800a240 <_strtod_l+0x340>
 800a1f8:	2a49      	cmp	r2, #73	; 0x49
 800a1fa:	d023      	beq.n	800a244 <_strtod_l+0x344>
 800a1fc:	2a4e      	cmp	r2, #78	; 0x4e
 800a1fe:	f47f aedc 	bne.w	8009fba <_strtod_l+0xba>
 800a202:	499d      	ldr	r1, [pc, #628]	; (800a478 <_strtod_l+0x578>)
 800a204:	a819      	add	r0, sp, #100	; 0x64
 800a206:	f001 fe17 	bl	800be38 <__match>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f43f aed5 	beq.w	8009fba <_strtod_l+0xba>
 800a210:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b28      	cmp	r3, #40	; 0x28
 800a216:	d12c      	bne.n	800a272 <_strtod_l+0x372>
 800a218:	4998      	ldr	r1, [pc, #608]	; (800a47c <_strtod_l+0x57c>)
 800a21a:	aa1c      	add	r2, sp, #112	; 0x70
 800a21c:	a819      	add	r0, sp, #100	; 0x64
 800a21e:	f001 fe1f 	bl	800be60 <__hexnan>
 800a222:	2805      	cmp	r0, #5
 800a224:	d125      	bne.n	800a272 <_strtod_l+0x372>
 800a226:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a228:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a22c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a230:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a234:	e6a5      	b.n	8009f82 <_strtod_l+0x82>
 800a236:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a23a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a23e:	e7bc      	b.n	800a1ba <_strtod_l+0x2ba>
 800a240:	2a6e      	cmp	r2, #110	; 0x6e
 800a242:	e7dc      	b.n	800a1fe <_strtod_l+0x2fe>
 800a244:	498e      	ldr	r1, [pc, #568]	; (800a480 <_strtod_l+0x580>)
 800a246:	a819      	add	r0, sp, #100	; 0x64
 800a248:	f001 fdf6 	bl	800be38 <__match>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f43f aeb4 	beq.w	8009fba <_strtod_l+0xba>
 800a252:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a254:	498b      	ldr	r1, [pc, #556]	; (800a484 <_strtod_l+0x584>)
 800a256:	3b01      	subs	r3, #1
 800a258:	a819      	add	r0, sp, #100	; 0x64
 800a25a:	9319      	str	r3, [sp, #100]	; 0x64
 800a25c:	f001 fdec 	bl	800be38 <__match>
 800a260:	b910      	cbnz	r0, 800a268 <_strtod_l+0x368>
 800a262:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a264:	3301      	adds	r3, #1
 800a266:	9319      	str	r3, [sp, #100]	; 0x64
 800a268:	f04f 0800 	mov.w	r8, #0
 800a26c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a488 <_strtod_l+0x588>
 800a270:	e687      	b.n	8009f82 <_strtod_l+0x82>
 800a272:	4886      	ldr	r0, [pc, #536]	; (800a48c <_strtod_l+0x58c>)
 800a274:	f7fe fea8 	bl	8008fc8 <nan>
 800a278:	4680      	mov	r8, r0
 800a27a:	4689      	mov	r9, r1
 800a27c:	e681      	b.n	8009f82 <_strtod_l+0x82>
 800a27e:	9b04      	ldr	r3, [sp, #16]
 800a280:	f1bb 0f00 	cmp.w	fp, #0
 800a284:	bf08      	it	eq
 800a286:	46a3      	moveq	fp, r4
 800a288:	1aeb      	subs	r3, r5, r3
 800a28a:	2c10      	cmp	r4, #16
 800a28c:	9806      	ldr	r0, [sp, #24]
 800a28e:	4626      	mov	r6, r4
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	bfa8      	it	ge
 800a294:	2610      	movge	r6, #16
 800a296:	f7f6 f8a5 	bl	80003e4 <__aeabi_ui2d>
 800a29a:	2c09      	cmp	r4, #9
 800a29c:	4680      	mov	r8, r0
 800a29e:	4689      	mov	r9, r1
 800a2a0:	dd13      	ble.n	800a2ca <_strtod_l+0x3ca>
 800a2a2:	4b7b      	ldr	r3, [pc, #492]	; (800a490 <_strtod_l+0x590>)
 800a2a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a2ac:	f7f6 f914 	bl	80004d8 <__aeabi_dmul>
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	9805      	ldr	r0, [sp, #20]
 800a2b4:	4689      	mov	r9, r1
 800a2b6:	f7f6 f895 	bl	80003e4 <__aeabi_ui2d>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	f7f5 ff53 	bl	800016c <__adddf3>
 800a2c6:	4680      	mov	r8, r0
 800a2c8:	4689      	mov	r9, r1
 800a2ca:	2c0f      	cmp	r4, #15
 800a2cc:	dc36      	bgt.n	800a33c <_strtod_l+0x43c>
 800a2ce:	9b07      	ldr	r3, [sp, #28]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f43f ae56 	beq.w	8009f82 <_strtod_l+0x82>
 800a2d6:	dd22      	ble.n	800a31e <_strtod_l+0x41e>
 800a2d8:	2b16      	cmp	r3, #22
 800a2da:	dc09      	bgt.n	800a2f0 <_strtod_l+0x3f0>
 800a2dc:	496c      	ldr	r1, [pc, #432]	; (800a490 <_strtod_l+0x590>)
 800a2de:	4642      	mov	r2, r8
 800a2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2e4:	464b      	mov	r3, r9
 800a2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ea:	f7f6 f8f5 	bl	80004d8 <__aeabi_dmul>
 800a2ee:	e7c3      	b.n	800a278 <_strtod_l+0x378>
 800a2f0:	9a07      	ldr	r2, [sp, #28]
 800a2f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	db20      	blt.n	800a33c <_strtod_l+0x43c>
 800a2fa:	4d65      	ldr	r5, [pc, #404]	; (800a490 <_strtod_l+0x590>)
 800a2fc:	f1c4 040f 	rsb	r4, r4, #15
 800a300:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a304:	4642      	mov	r2, r8
 800a306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a30a:	464b      	mov	r3, r9
 800a30c:	f7f6 f8e4 	bl	80004d8 <__aeabi_dmul>
 800a310:	9b07      	ldr	r3, [sp, #28]
 800a312:	1b1c      	subs	r4, r3, r4
 800a314:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a31c:	e7e5      	b.n	800a2ea <_strtod_l+0x3ea>
 800a31e:	9b07      	ldr	r3, [sp, #28]
 800a320:	3316      	adds	r3, #22
 800a322:	db0b      	blt.n	800a33c <_strtod_l+0x43c>
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	4640      	mov	r0, r8
 800a328:	1b5d      	subs	r5, r3, r5
 800a32a:	4b59      	ldr	r3, [pc, #356]	; (800a490 <_strtod_l+0x590>)
 800a32c:	4649      	mov	r1, r9
 800a32e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a332:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a336:	f7f6 f9f9 	bl	800072c <__aeabi_ddiv>
 800a33a:	e79d      	b.n	800a278 <_strtod_l+0x378>
 800a33c:	9b07      	ldr	r3, [sp, #28]
 800a33e:	1ba6      	subs	r6, r4, r6
 800a340:	441e      	add	r6, r3
 800a342:	2e00      	cmp	r6, #0
 800a344:	dd74      	ble.n	800a430 <_strtod_l+0x530>
 800a346:	f016 030f 	ands.w	r3, r6, #15
 800a34a:	d00a      	beq.n	800a362 <_strtod_l+0x462>
 800a34c:	4950      	ldr	r1, [pc, #320]	; (800a490 <_strtod_l+0x590>)
 800a34e:	4642      	mov	r2, r8
 800a350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a358:	464b      	mov	r3, r9
 800a35a:	f7f6 f8bd 	bl	80004d8 <__aeabi_dmul>
 800a35e:	4680      	mov	r8, r0
 800a360:	4689      	mov	r9, r1
 800a362:	f036 060f 	bics.w	r6, r6, #15
 800a366:	d052      	beq.n	800a40e <_strtod_l+0x50e>
 800a368:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a36c:	dd27      	ble.n	800a3be <_strtod_l+0x4be>
 800a36e:	f04f 0b00 	mov.w	fp, #0
 800a372:	f8cd b010 	str.w	fp, [sp, #16]
 800a376:	f8cd b020 	str.w	fp, [sp, #32]
 800a37a:	f8cd b018 	str.w	fp, [sp, #24]
 800a37e:	2322      	movs	r3, #34	; 0x22
 800a380:	f04f 0800 	mov.w	r8, #0
 800a384:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a488 <_strtod_l+0x588>
 800a388:	f8ca 3000 	str.w	r3, [sl]
 800a38c:	9b08      	ldr	r3, [sp, #32]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f43f adf7 	beq.w	8009f82 <_strtod_l+0x82>
 800a394:	4650      	mov	r0, sl
 800a396:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a398:	f001 fe6a 	bl	800c070 <_Bfree>
 800a39c:	4650      	mov	r0, sl
 800a39e:	9906      	ldr	r1, [sp, #24]
 800a3a0:	f001 fe66 	bl	800c070 <_Bfree>
 800a3a4:	4650      	mov	r0, sl
 800a3a6:	9904      	ldr	r1, [sp, #16]
 800a3a8:	f001 fe62 	bl	800c070 <_Bfree>
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	9908      	ldr	r1, [sp, #32]
 800a3b0:	f001 fe5e 	bl	800c070 <_Bfree>
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	f001 fe5a 	bl	800c070 <_Bfree>
 800a3bc:	e5e1      	b.n	8009f82 <_strtod_l+0x82>
 800a3be:	4b35      	ldr	r3, [pc, #212]	; (800a494 <_strtod_l+0x594>)
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	461f      	mov	r7, r3
 800a3ca:	1136      	asrs	r6, r6, #4
 800a3cc:	2e01      	cmp	r6, #1
 800a3ce:	dc21      	bgt.n	800a414 <_strtod_l+0x514>
 800a3d0:	b10b      	cbz	r3, 800a3d6 <_strtod_l+0x4d6>
 800a3d2:	4680      	mov	r8, r0
 800a3d4:	4689      	mov	r9, r1
 800a3d6:	4b2f      	ldr	r3, [pc, #188]	; (800a494 <_strtod_l+0x594>)
 800a3d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a3dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	f7f6 f876 	bl	80004d8 <__aeabi_dmul>
 800a3ec:	4b26      	ldr	r3, [pc, #152]	; (800a488 <_strtod_l+0x588>)
 800a3ee:	460a      	mov	r2, r1
 800a3f0:	400b      	ands	r3, r1
 800a3f2:	4929      	ldr	r1, [pc, #164]	; (800a498 <_strtod_l+0x598>)
 800a3f4:	4680      	mov	r8, r0
 800a3f6:	428b      	cmp	r3, r1
 800a3f8:	d8b9      	bhi.n	800a36e <_strtod_l+0x46e>
 800a3fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a3fe:	428b      	cmp	r3, r1
 800a400:	bf86      	itte	hi
 800a402:	f04f 38ff 	movhi.w	r8, #4294967295
 800a406:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a49c <_strtod_l+0x59c>
 800a40a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a40e:	2300      	movs	r3, #0
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	e07f      	b.n	800a514 <_strtod_l+0x614>
 800a414:	07f2      	lsls	r2, r6, #31
 800a416:	d505      	bpl.n	800a424 <_strtod_l+0x524>
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f6 f85b 	bl	80004d8 <__aeabi_dmul>
 800a422:	2301      	movs	r3, #1
 800a424:	9a05      	ldr	r2, [sp, #20]
 800a426:	3701      	adds	r7, #1
 800a428:	3208      	adds	r2, #8
 800a42a:	1076      	asrs	r6, r6, #1
 800a42c:	9205      	str	r2, [sp, #20]
 800a42e:	e7cd      	b.n	800a3cc <_strtod_l+0x4cc>
 800a430:	d0ed      	beq.n	800a40e <_strtod_l+0x50e>
 800a432:	4276      	negs	r6, r6
 800a434:	f016 020f 	ands.w	r2, r6, #15
 800a438:	d00a      	beq.n	800a450 <_strtod_l+0x550>
 800a43a:	4b15      	ldr	r3, [pc, #84]	; (800a490 <_strtod_l+0x590>)
 800a43c:	4640      	mov	r0, r8
 800a43e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a442:	4649      	mov	r1, r9
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f7f6 f970 	bl	800072c <__aeabi_ddiv>
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	1136      	asrs	r6, r6, #4
 800a452:	d0dc      	beq.n	800a40e <_strtod_l+0x50e>
 800a454:	2e1f      	cmp	r6, #31
 800a456:	dd23      	ble.n	800a4a0 <_strtod_l+0x5a0>
 800a458:	f04f 0b00 	mov.w	fp, #0
 800a45c:	f8cd b010 	str.w	fp, [sp, #16]
 800a460:	f8cd b020 	str.w	fp, [sp, #32]
 800a464:	f8cd b018 	str.w	fp, [sp, #24]
 800a468:	2322      	movs	r3, #34	; 0x22
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	f04f 0900 	mov.w	r9, #0
 800a472:	f8ca 3000 	str.w	r3, [sl]
 800a476:	e789      	b.n	800a38c <_strtod_l+0x48c>
 800a478:	0800df85 	.word	0x0800df85
 800a47c:	0800dfc8 	.word	0x0800dfc8
 800a480:	0800df7d 	.word	0x0800df7d
 800a484:	0800e10c 	.word	0x0800e10c
 800a488:	7ff00000 	.word	0x7ff00000
 800a48c:	0800e3b8 	.word	0x0800e3b8
 800a490:	0800e298 	.word	0x0800e298
 800a494:	0800e270 	.word	0x0800e270
 800a498:	7ca00000 	.word	0x7ca00000
 800a49c:	7fefffff 	.word	0x7fefffff
 800a4a0:	f016 0310 	ands.w	r3, r6, #16
 800a4a4:	bf18      	it	ne
 800a4a6:	236a      	movne	r3, #106	; 0x6a
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4fb0      	ldr	r7, [pc, #704]	; (800a774 <_strtod_l+0x874>)
 800a4b2:	07f2      	lsls	r2, r6, #31
 800a4b4:	d504      	bpl.n	800a4c0 <_strtod_l+0x5c0>
 800a4b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ba:	f7f6 f80d 	bl	80004d8 <__aeabi_dmul>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	1076      	asrs	r6, r6, #1
 800a4c2:	f107 0708 	add.w	r7, r7, #8
 800a4c6:	d1f4      	bne.n	800a4b2 <_strtod_l+0x5b2>
 800a4c8:	b10b      	cbz	r3, 800a4ce <_strtod_l+0x5ce>
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	4689      	mov	r9, r1
 800a4ce:	9b05      	ldr	r3, [sp, #20]
 800a4d0:	b1c3      	cbz	r3, 800a504 <_strtod_l+0x604>
 800a4d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a4d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	4649      	mov	r1, r9
 800a4de:	dd11      	ble.n	800a504 <_strtod_l+0x604>
 800a4e0:	2b1f      	cmp	r3, #31
 800a4e2:	f340 8127 	ble.w	800a734 <_strtod_l+0x834>
 800a4e6:	2b34      	cmp	r3, #52	; 0x34
 800a4e8:	bfd8      	it	le
 800a4ea:	f04f 33ff 	movle.w	r3, #4294967295
 800a4ee:	f04f 0800 	mov.w	r8, #0
 800a4f2:	bfcf      	iteee	gt
 800a4f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a4f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a4fc:	fa03 f202 	lslle.w	r2, r3, r2
 800a500:	ea02 0901 	andle.w	r9, r2, r1
 800a504:	2200      	movs	r2, #0
 800a506:	2300      	movs	r3, #0
 800a508:	4640      	mov	r0, r8
 800a50a:	4649      	mov	r1, r9
 800a50c:	f7f6 fa4c 	bl	80009a8 <__aeabi_dcmpeq>
 800a510:	2800      	cmp	r0, #0
 800a512:	d1a1      	bne.n	800a458 <_strtod_l+0x558>
 800a514:	9b06      	ldr	r3, [sp, #24]
 800a516:	465a      	mov	r2, fp
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	4650      	mov	r0, sl
 800a51c:	4623      	mov	r3, r4
 800a51e:	9908      	ldr	r1, [sp, #32]
 800a520:	f001 fe0e 	bl	800c140 <__s2b>
 800a524:	9008      	str	r0, [sp, #32]
 800a526:	2800      	cmp	r0, #0
 800a528:	f43f af21 	beq.w	800a36e <_strtod_l+0x46e>
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	f04f 0b00 	mov.w	fp, #0
 800a532:	1b5d      	subs	r5, r3, r5
 800a534:	9b07      	ldr	r3, [sp, #28]
 800a536:	f8cd b010 	str.w	fp, [sp, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	bfb4      	ite	lt
 800a53e:	462b      	movlt	r3, r5
 800a540:	2300      	movge	r3, #0
 800a542:	930e      	str	r3, [sp, #56]	; 0x38
 800a544:	9b07      	ldr	r3, [sp, #28]
 800a546:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a54a:	9314      	str	r3, [sp, #80]	; 0x50
 800a54c:	9b08      	ldr	r3, [sp, #32]
 800a54e:	4650      	mov	r0, sl
 800a550:	6859      	ldr	r1, [r3, #4]
 800a552:	f001 fd4d 	bl	800bff0 <_Balloc>
 800a556:	9006      	str	r0, [sp, #24]
 800a558:	2800      	cmp	r0, #0
 800a55a:	f43f af10 	beq.w	800a37e <_strtod_l+0x47e>
 800a55e:	9b08      	ldr	r3, [sp, #32]
 800a560:	300c      	adds	r0, #12
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	f103 010c 	add.w	r1, r3, #12
 800a568:	3202      	adds	r2, #2
 800a56a:	0092      	lsls	r2, r2, #2
 800a56c:	f7fe fdb4 	bl	80090d8 <memcpy>
 800a570:	ab1c      	add	r3, sp, #112	; 0x70
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	ab1b      	add	r3, sp, #108	; 0x6c
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	4650      	mov	r0, sl
 800a57e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a582:	f002 f91f 	bl	800c7c4 <__d2b>
 800a586:	901a      	str	r0, [sp, #104]	; 0x68
 800a588:	2800      	cmp	r0, #0
 800a58a:	f43f aef8 	beq.w	800a37e <_strtod_l+0x47e>
 800a58e:	2101      	movs	r1, #1
 800a590:	4650      	mov	r0, sl
 800a592:	f001 fe6d 	bl	800c270 <__i2b>
 800a596:	4603      	mov	r3, r0
 800a598:	9004      	str	r0, [sp, #16]
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f43f aeef 	beq.w	800a37e <_strtod_l+0x47e>
 800a5a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a5a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	bfab      	itete	ge
 800a5a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a5aa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a5ac:	18ee      	addge	r6, r5, r3
 800a5ae:	1b5c      	sublt	r4, r3, r5
 800a5b0:	9b05      	ldr	r3, [sp, #20]
 800a5b2:	bfa8      	it	ge
 800a5b4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a5b6:	eba5 0503 	sub.w	r5, r5, r3
 800a5ba:	4415      	add	r5, r2
 800a5bc:	4b6e      	ldr	r3, [pc, #440]	; (800a778 <_strtod_l+0x878>)
 800a5be:	f105 35ff 	add.w	r5, r5, #4294967295
 800a5c2:	bfb8      	it	lt
 800a5c4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a5c6:	429d      	cmp	r5, r3
 800a5c8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a5cc:	f280 80c4 	bge.w	800a758 <_strtod_l+0x858>
 800a5d0:	1b5b      	subs	r3, r3, r5
 800a5d2:	2b1f      	cmp	r3, #31
 800a5d4:	f04f 0701 	mov.w	r7, #1
 800a5d8:	eba2 0203 	sub.w	r2, r2, r3
 800a5dc:	f300 80b1 	bgt.w	800a742 <_strtod_l+0x842>
 800a5e0:	2500      	movs	r5, #0
 800a5e2:	fa07 f303 	lsl.w	r3, r7, r3
 800a5e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e8:	18b7      	adds	r7, r6, r2
 800a5ea:	9b05      	ldr	r3, [sp, #20]
 800a5ec:	42be      	cmp	r6, r7
 800a5ee:	4414      	add	r4, r2
 800a5f0:	441c      	add	r4, r3
 800a5f2:	4633      	mov	r3, r6
 800a5f4:	bfa8      	it	ge
 800a5f6:	463b      	movge	r3, r7
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	bfa8      	it	ge
 800a5fc:	4623      	movge	r3, r4
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bfc2      	ittt	gt
 800a602:	1aff      	subgt	r7, r7, r3
 800a604:	1ae4      	subgt	r4, r4, r3
 800a606:	1af6      	subgt	r6, r6, r3
 800a608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dd17      	ble.n	800a63e <_strtod_l+0x73e>
 800a60e:	461a      	mov	r2, r3
 800a610:	4650      	mov	r0, sl
 800a612:	9904      	ldr	r1, [sp, #16]
 800a614:	f001 feea 	bl	800c3ec <__pow5mult>
 800a618:	9004      	str	r0, [sp, #16]
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f43f aeaf 	beq.w	800a37e <_strtod_l+0x47e>
 800a620:	4601      	mov	r1, r0
 800a622:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a624:	4650      	mov	r0, sl
 800a626:	f001 fe39 	bl	800c29c <__multiply>
 800a62a:	9009      	str	r0, [sp, #36]	; 0x24
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f43f aea6 	beq.w	800a37e <_strtod_l+0x47e>
 800a632:	4650      	mov	r0, sl
 800a634:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a636:	f001 fd1b 	bl	800c070 <_Bfree>
 800a63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63c:	931a      	str	r3, [sp, #104]	; 0x68
 800a63e:	2f00      	cmp	r7, #0
 800a640:	f300 808e 	bgt.w	800a760 <_strtod_l+0x860>
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	dd08      	ble.n	800a65c <_strtod_l+0x75c>
 800a64a:	4650      	mov	r0, sl
 800a64c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a64e:	9906      	ldr	r1, [sp, #24]
 800a650:	f001 fecc 	bl	800c3ec <__pow5mult>
 800a654:	9006      	str	r0, [sp, #24]
 800a656:	2800      	cmp	r0, #0
 800a658:	f43f ae91 	beq.w	800a37e <_strtod_l+0x47e>
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	dd08      	ble.n	800a672 <_strtod_l+0x772>
 800a660:	4622      	mov	r2, r4
 800a662:	4650      	mov	r0, sl
 800a664:	9906      	ldr	r1, [sp, #24]
 800a666:	f001 ff1b 	bl	800c4a0 <__lshift>
 800a66a:	9006      	str	r0, [sp, #24]
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f43f ae86 	beq.w	800a37e <_strtod_l+0x47e>
 800a672:	2e00      	cmp	r6, #0
 800a674:	dd08      	ble.n	800a688 <_strtod_l+0x788>
 800a676:	4632      	mov	r2, r6
 800a678:	4650      	mov	r0, sl
 800a67a:	9904      	ldr	r1, [sp, #16]
 800a67c:	f001 ff10 	bl	800c4a0 <__lshift>
 800a680:	9004      	str	r0, [sp, #16]
 800a682:	2800      	cmp	r0, #0
 800a684:	f43f ae7b 	beq.w	800a37e <_strtod_l+0x47e>
 800a688:	4650      	mov	r0, sl
 800a68a:	9a06      	ldr	r2, [sp, #24]
 800a68c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a68e:	f001 ff93 	bl	800c5b8 <__mdiff>
 800a692:	4683      	mov	fp, r0
 800a694:	2800      	cmp	r0, #0
 800a696:	f43f ae72 	beq.w	800a37e <_strtod_l+0x47e>
 800a69a:	2400      	movs	r4, #0
 800a69c:	68c3      	ldr	r3, [r0, #12]
 800a69e:	9904      	ldr	r1, [sp, #16]
 800a6a0:	60c4      	str	r4, [r0, #12]
 800a6a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6a4:	f001 ff6c 	bl	800c580 <__mcmp>
 800a6a8:	42a0      	cmp	r0, r4
 800a6aa:	da6b      	bge.n	800a784 <_strtod_l+0x884>
 800a6ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ae:	ea53 0308 	orrs.w	r3, r3, r8
 800a6b2:	f040 8091 	bne.w	800a7d8 <_strtod_l+0x8d8>
 800a6b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 808c 	bne.w	800a7d8 <_strtod_l+0x8d8>
 800a6c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6c4:	0d1b      	lsrs	r3, r3, #20
 800a6c6:	051b      	lsls	r3, r3, #20
 800a6c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a6cc:	f240 8084 	bls.w	800a7d8 <_strtod_l+0x8d8>
 800a6d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a6d4:	b91b      	cbnz	r3, 800a6de <_strtod_l+0x7de>
 800a6d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	dd7c      	ble.n	800a7d8 <_strtod_l+0x8d8>
 800a6de:	4659      	mov	r1, fp
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	f001 fedc 	bl	800c4a0 <__lshift>
 800a6e8:	9904      	ldr	r1, [sp, #16]
 800a6ea:	4683      	mov	fp, r0
 800a6ec:	f001 ff48 	bl	800c580 <__mcmp>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	dd71      	ble.n	800a7d8 <_strtod_l+0x8d8>
 800a6f4:	9905      	ldr	r1, [sp, #20]
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	4a20      	ldr	r2, [pc, #128]	; (800a77c <_strtod_l+0x87c>)
 800a6fa:	2900      	cmp	r1, #0
 800a6fc:	f000 808c 	beq.w	800a818 <_strtod_l+0x918>
 800a700:	ea02 0109 	and.w	r1, r2, r9
 800a704:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a708:	f300 8086 	bgt.w	800a818 <_strtod_l+0x918>
 800a70c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a710:	f77f aeaa 	ble.w	800a468 <_strtod_l+0x568>
 800a714:	4640      	mov	r0, r8
 800a716:	4649      	mov	r1, r9
 800a718:	4b19      	ldr	r3, [pc, #100]	; (800a780 <_strtod_l+0x880>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	f7f5 fedc 	bl	80004d8 <__aeabi_dmul>
 800a720:	460b      	mov	r3, r1
 800a722:	4303      	orrs	r3, r0
 800a724:	bf08      	it	eq
 800a726:	2322      	moveq	r3, #34	; 0x22
 800a728:	4680      	mov	r8, r0
 800a72a:	4689      	mov	r9, r1
 800a72c:	bf08      	it	eq
 800a72e:	f8ca 3000 	streq.w	r3, [sl]
 800a732:	e62f      	b.n	800a394 <_strtod_l+0x494>
 800a734:	f04f 32ff 	mov.w	r2, #4294967295
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	ea03 0808 	and.w	r8, r3, r8
 800a740:	e6e0      	b.n	800a504 <_strtod_l+0x604>
 800a742:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a746:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a74a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a74e:	35e2      	adds	r5, #226	; 0xe2
 800a750:	fa07 f505 	lsl.w	r5, r7, r5
 800a754:	970f      	str	r7, [sp, #60]	; 0x3c
 800a756:	e747      	b.n	800a5e8 <_strtod_l+0x6e8>
 800a758:	2301      	movs	r3, #1
 800a75a:	2500      	movs	r5, #0
 800a75c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a75e:	e743      	b.n	800a5e8 <_strtod_l+0x6e8>
 800a760:	463a      	mov	r2, r7
 800a762:	4650      	mov	r0, sl
 800a764:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a766:	f001 fe9b 	bl	800c4a0 <__lshift>
 800a76a:	901a      	str	r0, [sp, #104]	; 0x68
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f47f af69 	bne.w	800a644 <_strtod_l+0x744>
 800a772:	e604      	b.n	800a37e <_strtod_l+0x47e>
 800a774:	0800dfe0 	.word	0x0800dfe0
 800a778:	fffffc02 	.word	0xfffffc02
 800a77c:	7ff00000 	.word	0x7ff00000
 800a780:	39500000 	.word	0x39500000
 800a784:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a788:	d165      	bne.n	800a856 <_strtod_l+0x956>
 800a78a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a78c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a790:	b35a      	cbz	r2, 800a7ea <_strtod_l+0x8ea>
 800a792:	4a99      	ldr	r2, [pc, #612]	; (800a9f8 <_strtod_l+0xaf8>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d12b      	bne.n	800a7f0 <_strtod_l+0x8f0>
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	4641      	mov	r1, r8
 800a79c:	b303      	cbz	r3, 800a7e0 <_strtod_l+0x8e0>
 800a79e:	464a      	mov	r2, r9
 800a7a0:	4b96      	ldr	r3, [pc, #600]	; (800a9fc <_strtod_l+0xafc>)
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ac:	d81b      	bhi.n	800a7e6 <_strtod_l+0x8e6>
 800a7ae:	0d1b      	lsrs	r3, r3, #20
 800a7b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b8:	4299      	cmp	r1, r3
 800a7ba:	d119      	bne.n	800a7f0 <_strtod_l+0x8f0>
 800a7bc:	4b90      	ldr	r3, [pc, #576]	; (800aa00 <_strtod_l+0xb00>)
 800a7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d102      	bne.n	800a7ca <_strtod_l+0x8ca>
 800a7c4:	3101      	adds	r1, #1
 800a7c6:	f43f adda 	beq.w	800a37e <_strtod_l+0x47e>
 800a7ca:	f04f 0800 	mov.w	r8, #0
 800a7ce:	4b8b      	ldr	r3, [pc, #556]	; (800a9fc <_strtod_l+0xafc>)
 800a7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d2:	401a      	ands	r2, r3
 800a7d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a7d8:	9b05      	ldr	r3, [sp, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d19a      	bne.n	800a714 <_strtod_l+0x814>
 800a7de:	e5d9      	b.n	800a394 <_strtod_l+0x494>
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	e7e8      	b.n	800a7b8 <_strtod_l+0x8b8>
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	e7e6      	b.n	800a7b8 <_strtod_l+0x8b8>
 800a7ea:	ea53 0308 	orrs.w	r3, r3, r8
 800a7ee:	d081      	beq.n	800a6f4 <_strtod_l+0x7f4>
 800a7f0:	b1e5      	cbz	r5, 800a82c <_strtod_l+0x92c>
 800a7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f4:	421d      	tst	r5, r3
 800a7f6:	d0ef      	beq.n	800a7d8 <_strtod_l+0x8d8>
 800a7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	4649      	mov	r1, r9
 800a7fe:	9a05      	ldr	r2, [sp, #20]
 800a800:	b1c3      	cbz	r3, 800a834 <_strtod_l+0x934>
 800a802:	f7ff fb5b 	bl	8009ebc <sulp>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a80e:	f7f5 fcad 	bl	800016c <__adddf3>
 800a812:	4680      	mov	r8, r0
 800a814:	4689      	mov	r9, r1
 800a816:	e7df      	b.n	800a7d8 <_strtod_l+0x8d8>
 800a818:	4013      	ands	r3, r2
 800a81a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a81e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a822:	f04f 38ff 	mov.w	r8, #4294967295
 800a826:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a82a:	e7d5      	b.n	800a7d8 <_strtod_l+0x8d8>
 800a82c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a82e:	ea13 0f08 	tst.w	r3, r8
 800a832:	e7e0      	b.n	800a7f6 <_strtod_l+0x8f6>
 800a834:	f7ff fb42 	bl	8009ebc <sulp>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a840:	f7f5 fc92 	bl	8000168 <__aeabi_dsub>
 800a844:	2200      	movs	r2, #0
 800a846:	2300      	movs	r3, #0
 800a848:	4680      	mov	r8, r0
 800a84a:	4689      	mov	r9, r1
 800a84c:	f7f6 f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 800a850:	2800      	cmp	r0, #0
 800a852:	d0c1      	beq.n	800a7d8 <_strtod_l+0x8d8>
 800a854:	e608      	b.n	800a468 <_strtod_l+0x568>
 800a856:	4658      	mov	r0, fp
 800a858:	9904      	ldr	r1, [sp, #16]
 800a85a:	f002 f80f 	bl	800c87c <__ratio>
 800a85e:	2200      	movs	r2, #0
 800a860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	f7f6 f8b2 	bl	80009d0 <__aeabi_dcmple>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d070      	beq.n	800a952 <_strtod_l+0xa52>
 800a870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d042      	beq.n	800a8fc <_strtod_l+0x9fc>
 800a876:	2600      	movs	r6, #0
 800a878:	4f62      	ldr	r7, [pc, #392]	; (800aa04 <_strtod_l+0xb04>)
 800a87a:	4d62      	ldr	r5, [pc, #392]	; (800aa04 <_strtod_l+0xb04>)
 800a87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a882:	0d1b      	lsrs	r3, r3, #20
 800a884:	051b      	lsls	r3, r3, #20
 800a886:	930f      	str	r3, [sp, #60]	; 0x3c
 800a888:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a88a:	4b5f      	ldr	r3, [pc, #380]	; (800aa08 <_strtod_l+0xb08>)
 800a88c:	429a      	cmp	r2, r3
 800a88e:	f040 80c3 	bne.w	800aa18 <_strtod_l+0xb18>
 800a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a894:	4640      	mov	r0, r8
 800a896:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a89a:	4649      	mov	r1, r9
 800a89c:	f001 ff18 	bl	800c6d0 <__ulp>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7f5 fe16 	bl	80004d8 <__aeabi_dmul>
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	f7f5 fc5c 	bl	800016c <__adddf3>
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4951      	ldr	r1, [pc, #324]	; (800a9fc <_strtod_l+0xafc>)
 800a8b8:	4a54      	ldr	r2, [pc, #336]	; (800aa0c <_strtod_l+0xb0c>)
 800a8ba:	4019      	ands	r1, r3
 800a8bc:	4291      	cmp	r1, r2
 800a8be:	4680      	mov	r8, r0
 800a8c0:	d95d      	bls.n	800a97e <_strtod_l+0xa7e>
 800a8c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8c4:	4b4e      	ldr	r3, [pc, #312]	; (800aa00 <_strtod_l+0xb00>)
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d103      	bne.n	800a8d2 <_strtod_l+0x9d2>
 800a8ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	f43f ad56 	beq.w	800a37e <_strtod_l+0x47e>
 800a8d2:	f04f 38ff 	mov.w	r8, #4294967295
 800a8d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800aa00 <_strtod_l+0xb00>
 800a8da:	4650      	mov	r0, sl
 800a8dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a8de:	f001 fbc7 	bl	800c070 <_Bfree>
 800a8e2:	4650      	mov	r0, sl
 800a8e4:	9906      	ldr	r1, [sp, #24]
 800a8e6:	f001 fbc3 	bl	800c070 <_Bfree>
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	9904      	ldr	r1, [sp, #16]
 800a8ee:	f001 fbbf 	bl	800c070 <_Bfree>
 800a8f2:	4659      	mov	r1, fp
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	f001 fbbb 	bl	800c070 <_Bfree>
 800a8fa:	e627      	b.n	800a54c <_strtod_l+0x64c>
 800a8fc:	f1b8 0f00 	cmp.w	r8, #0
 800a900:	d119      	bne.n	800a936 <_strtod_l+0xa36>
 800a902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a908:	b9e3      	cbnz	r3, 800a944 <_strtod_l+0xa44>
 800a90a:	2200      	movs	r2, #0
 800a90c:	4630      	mov	r0, r6
 800a90e:	4639      	mov	r1, r7
 800a910:	4b3c      	ldr	r3, [pc, #240]	; (800aa04 <_strtod_l+0xb04>)
 800a912:	f7f6 f853 	bl	80009bc <__aeabi_dcmplt>
 800a916:	b9c8      	cbnz	r0, 800a94c <_strtod_l+0xa4c>
 800a918:	2200      	movs	r2, #0
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	4b3c      	ldr	r3, [pc, #240]	; (800aa10 <_strtod_l+0xb10>)
 800a920:	f7f5 fdda 	bl	80004d8 <__aeabi_dmul>
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a92c:	9416      	str	r4, [sp, #88]	; 0x58
 800a92e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a930:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a934:	e7a2      	b.n	800a87c <_strtod_l+0x97c>
 800a936:	f1b8 0f01 	cmp.w	r8, #1
 800a93a:	d103      	bne.n	800a944 <_strtod_l+0xa44>
 800a93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f43f ad92 	beq.w	800a468 <_strtod_l+0x568>
 800a944:	2600      	movs	r6, #0
 800a946:	2400      	movs	r4, #0
 800a948:	4f32      	ldr	r7, [pc, #200]	; (800aa14 <_strtod_l+0xb14>)
 800a94a:	e796      	b.n	800a87a <_strtod_l+0x97a>
 800a94c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a94e:	4d30      	ldr	r5, [pc, #192]	; (800aa10 <_strtod_l+0xb10>)
 800a950:	e7ea      	b.n	800a928 <_strtod_l+0xa28>
 800a952:	4b2f      	ldr	r3, [pc, #188]	; (800aa10 <_strtod_l+0xb10>)
 800a954:	2200      	movs	r2, #0
 800a956:	4630      	mov	r0, r6
 800a958:	4639      	mov	r1, r7
 800a95a:	f7f5 fdbd 	bl	80004d8 <__aeabi_dmul>
 800a95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a960:	4604      	mov	r4, r0
 800a962:	460d      	mov	r5, r1
 800a964:	b933      	cbnz	r3, 800a974 <_strtod_l+0xa74>
 800a966:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a96a:	9010      	str	r0, [sp, #64]	; 0x40
 800a96c:	9311      	str	r3, [sp, #68]	; 0x44
 800a96e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a972:	e783      	b.n	800a87c <_strtod_l+0x97c>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a97c:	e7f7      	b.n	800a96e <_strtod_l+0xa6e>
 800a97e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a982:	9b05      	ldr	r3, [sp, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1a8      	bne.n	800a8da <_strtod_l+0x9da>
 800a988:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a98c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a98e:	0d1b      	lsrs	r3, r3, #20
 800a990:	051b      	lsls	r3, r3, #20
 800a992:	429a      	cmp	r2, r3
 800a994:	d1a1      	bne.n	800a8da <_strtod_l+0x9da>
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f6 fbf5 	bl	8001188 <__aeabi_d2lz>
 800a99e:	f7f5 fd6d 	bl	800047c <__aeabi_l2d>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	f7f5 fbdd 	bl	8000168 <__aeabi_dsub>
 800a9ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9b4:	ea43 0308 	orr.w	r3, r3, r8
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	460d      	mov	r5, r1
 800a9be:	d066      	beq.n	800aa8e <_strtod_l+0xb8e>
 800a9c0:	a309      	add	r3, pc, #36	; (adr r3, 800a9e8 <_strtod_l+0xae8>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f7f5 fff9 	bl	80009bc <__aeabi_dcmplt>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	f47f ace2 	bne.w	800a394 <_strtod_l+0x494>
 800a9d0:	a307      	add	r3, pc, #28	; (adr r3, 800a9f0 <_strtod_l+0xaf0>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f6 f80d 	bl	80009f8 <__aeabi_dcmpgt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f43f af7b 	beq.w	800a8da <_strtod_l+0x9da>
 800a9e4:	e4d6      	b.n	800a394 <_strtod_l+0x494>
 800a9e6:	bf00      	nop
 800a9e8:	94a03595 	.word	0x94a03595
 800a9ec:	3fdfffff 	.word	0x3fdfffff
 800a9f0:	35afe535 	.word	0x35afe535
 800a9f4:	3fe00000 	.word	0x3fe00000
 800a9f8:	000fffff 	.word	0x000fffff
 800a9fc:	7ff00000 	.word	0x7ff00000
 800aa00:	7fefffff 	.word	0x7fefffff
 800aa04:	3ff00000 	.word	0x3ff00000
 800aa08:	7fe00000 	.word	0x7fe00000
 800aa0c:	7c9fffff 	.word	0x7c9fffff
 800aa10:	3fe00000 	.word	0x3fe00000
 800aa14:	bff00000 	.word	0xbff00000
 800aa18:	9b05      	ldr	r3, [sp, #20]
 800aa1a:	b313      	cbz	r3, 800aa62 <_strtod_l+0xb62>
 800aa1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa22:	d81e      	bhi.n	800aa62 <_strtod_l+0xb62>
 800aa24:	a326      	add	r3, pc, #152	; (adr r3, 800aac0 <_strtod_l+0xbc0>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f7f5 ffcf 	bl	80009d0 <__aeabi_dcmple>
 800aa32:	b190      	cbz	r0, 800aa5a <_strtod_l+0xb5a>
 800aa34:	4629      	mov	r1, r5
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7f6 f826 	bl	8000a88 <__aeabi_d2uiz>
 800aa3c:	2801      	cmp	r0, #1
 800aa3e:	bf38      	it	cc
 800aa40:	2001      	movcc	r0, #1
 800aa42:	f7f5 fccf 	bl	80003e4 <__aeabi_ui2d>
 800aa46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa48:	4604      	mov	r4, r0
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	b9d3      	cbnz	r3, 800aa84 <_strtod_l+0xb84>
 800aa4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa52:	9012      	str	r0, [sp, #72]	; 0x48
 800aa54:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa56:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800aa5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa5c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800aa60:	1a9f      	subs	r7, r3, r2
 800aa62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa66:	f001 fe33 	bl	800c6d0 <__ulp>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	f7f5 fd31 	bl	80004d8 <__aeabi_dmul>
 800aa76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa7a:	f7f5 fb77 	bl	800016c <__adddf3>
 800aa7e:	4680      	mov	r8, r0
 800aa80:	4689      	mov	r9, r1
 800aa82:	e77e      	b.n	800a982 <_strtod_l+0xa82>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800aa8c:	e7e3      	b.n	800aa56 <_strtod_l+0xb56>
 800aa8e:	a30e      	add	r3, pc, #56	; (adr r3, 800aac8 <_strtod_l+0xbc8>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 ff92 	bl	80009bc <__aeabi_dcmplt>
 800aa98:	e7a1      	b.n	800a9de <_strtod_l+0xade>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	930a      	str	r3, [sp, #40]	; 0x28
 800aa9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aaa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	f7ff ba71 	b.w	8009f8a <_strtod_l+0x8a>
 800aaa8:	2a65      	cmp	r2, #101	; 0x65
 800aaaa:	f43f ab63 	beq.w	800a174 <_strtod_l+0x274>
 800aaae:	2a45      	cmp	r2, #69	; 0x45
 800aab0:	f43f ab60 	beq.w	800a174 <_strtod_l+0x274>
 800aab4:	2301      	movs	r3, #1
 800aab6:	f7ff bb95 	b.w	800a1e4 <_strtod_l+0x2e4>
 800aaba:	bf00      	nop
 800aabc:	f3af 8000 	nop.w
 800aac0:	ffc00000 	.word	0xffc00000
 800aac4:	41dfffff 	.word	0x41dfffff
 800aac8:	94a03595 	.word	0x94a03595
 800aacc:	3fcfffff 	.word	0x3fcfffff

0800aad0 <_strtod_r>:
 800aad0:	4b01      	ldr	r3, [pc, #4]	; (800aad8 <_strtod_r+0x8>)
 800aad2:	f7ff ba15 	b.w	8009f00 <_strtod_l>
 800aad6:	bf00      	nop
 800aad8:	20000138 	.word	0x20000138

0800aadc <_strtol_l.constprop.0>:
 800aadc:	2b01      	cmp	r3, #1
 800aade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae2:	4680      	mov	r8, r0
 800aae4:	d001      	beq.n	800aaea <_strtol_l.constprop.0+0xe>
 800aae6:	2b24      	cmp	r3, #36	; 0x24
 800aae8:	d906      	bls.n	800aaf8 <_strtol_l.constprop.0+0x1c>
 800aaea:	f7fe facb 	bl	8009084 <__errno>
 800aaee:	2316      	movs	r3, #22
 800aaf0:	6003      	str	r3, [r0, #0]
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf8:	460d      	mov	r5, r1
 800aafa:	4f35      	ldr	r7, [pc, #212]	; (800abd0 <_strtol_l.constprop.0+0xf4>)
 800aafc:	4628      	mov	r0, r5
 800aafe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab02:	5de6      	ldrb	r6, [r4, r7]
 800ab04:	f016 0608 	ands.w	r6, r6, #8
 800ab08:	d1f8      	bne.n	800aafc <_strtol_l.constprop.0+0x20>
 800ab0a:	2c2d      	cmp	r4, #45	; 0x2d
 800ab0c:	d12f      	bne.n	800ab6e <_strtol_l.constprop.0+0x92>
 800ab0e:	2601      	movs	r6, #1
 800ab10:	782c      	ldrb	r4, [r5, #0]
 800ab12:	1c85      	adds	r5, r0, #2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d057      	beq.n	800abc8 <_strtol_l.constprop.0+0xec>
 800ab18:	2b10      	cmp	r3, #16
 800ab1a:	d109      	bne.n	800ab30 <_strtol_l.constprop.0+0x54>
 800ab1c:	2c30      	cmp	r4, #48	; 0x30
 800ab1e:	d107      	bne.n	800ab30 <_strtol_l.constprop.0+0x54>
 800ab20:	7828      	ldrb	r0, [r5, #0]
 800ab22:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ab26:	2858      	cmp	r0, #88	; 0x58
 800ab28:	d149      	bne.n	800abbe <_strtol_l.constprop.0+0xe2>
 800ab2a:	2310      	movs	r3, #16
 800ab2c:	786c      	ldrb	r4, [r5, #1]
 800ab2e:	3502      	adds	r5, #2
 800ab30:	2700      	movs	r7, #0
 800ab32:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ab36:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ab3a:	fbbe f9f3 	udiv	r9, lr, r3
 800ab3e:	4638      	mov	r0, r7
 800ab40:	fb03 ea19 	mls	sl, r3, r9, lr
 800ab44:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ab48:	f1bc 0f09 	cmp.w	ip, #9
 800ab4c:	d814      	bhi.n	800ab78 <_strtol_l.constprop.0+0x9c>
 800ab4e:	4664      	mov	r4, ip
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	dd22      	ble.n	800ab9a <_strtol_l.constprop.0+0xbe>
 800ab54:	2f00      	cmp	r7, #0
 800ab56:	db1d      	blt.n	800ab94 <_strtol_l.constprop.0+0xb8>
 800ab58:	4581      	cmp	r9, r0
 800ab5a:	d31b      	bcc.n	800ab94 <_strtol_l.constprop.0+0xb8>
 800ab5c:	d101      	bne.n	800ab62 <_strtol_l.constprop.0+0x86>
 800ab5e:	45a2      	cmp	sl, r4
 800ab60:	db18      	blt.n	800ab94 <_strtol_l.constprop.0+0xb8>
 800ab62:	2701      	movs	r7, #1
 800ab64:	fb00 4003 	mla	r0, r0, r3, r4
 800ab68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab6c:	e7ea      	b.n	800ab44 <_strtol_l.constprop.0+0x68>
 800ab6e:	2c2b      	cmp	r4, #43	; 0x2b
 800ab70:	bf04      	itt	eq
 800ab72:	782c      	ldrbeq	r4, [r5, #0]
 800ab74:	1c85      	addeq	r5, r0, #2
 800ab76:	e7cd      	b.n	800ab14 <_strtol_l.constprop.0+0x38>
 800ab78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ab7c:	f1bc 0f19 	cmp.w	ip, #25
 800ab80:	d801      	bhi.n	800ab86 <_strtol_l.constprop.0+0xaa>
 800ab82:	3c37      	subs	r4, #55	; 0x37
 800ab84:	e7e4      	b.n	800ab50 <_strtol_l.constprop.0+0x74>
 800ab86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ab8a:	f1bc 0f19 	cmp.w	ip, #25
 800ab8e:	d804      	bhi.n	800ab9a <_strtol_l.constprop.0+0xbe>
 800ab90:	3c57      	subs	r4, #87	; 0x57
 800ab92:	e7dd      	b.n	800ab50 <_strtol_l.constprop.0+0x74>
 800ab94:	f04f 37ff 	mov.w	r7, #4294967295
 800ab98:	e7e6      	b.n	800ab68 <_strtol_l.constprop.0+0x8c>
 800ab9a:	2f00      	cmp	r7, #0
 800ab9c:	da07      	bge.n	800abae <_strtol_l.constprop.0+0xd2>
 800ab9e:	2322      	movs	r3, #34	; 0x22
 800aba0:	4670      	mov	r0, lr
 800aba2:	f8c8 3000 	str.w	r3, [r8]
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	d0a4      	beq.n	800aaf4 <_strtol_l.constprop.0+0x18>
 800abaa:	1e69      	subs	r1, r5, #1
 800abac:	e005      	b.n	800abba <_strtol_l.constprop.0+0xde>
 800abae:	b106      	cbz	r6, 800abb2 <_strtol_l.constprop.0+0xd6>
 800abb0:	4240      	negs	r0, r0
 800abb2:	2a00      	cmp	r2, #0
 800abb4:	d09e      	beq.n	800aaf4 <_strtol_l.constprop.0+0x18>
 800abb6:	2f00      	cmp	r7, #0
 800abb8:	d1f7      	bne.n	800abaa <_strtol_l.constprop.0+0xce>
 800abba:	6011      	str	r1, [r2, #0]
 800abbc:	e79a      	b.n	800aaf4 <_strtol_l.constprop.0+0x18>
 800abbe:	2430      	movs	r4, #48	; 0x30
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1b5      	bne.n	800ab30 <_strtol_l.constprop.0+0x54>
 800abc4:	2308      	movs	r3, #8
 800abc6:	e7b3      	b.n	800ab30 <_strtol_l.constprop.0+0x54>
 800abc8:	2c30      	cmp	r4, #48	; 0x30
 800abca:	d0a9      	beq.n	800ab20 <_strtol_l.constprop.0+0x44>
 800abcc:	230a      	movs	r3, #10
 800abce:	e7af      	b.n	800ab30 <_strtol_l.constprop.0+0x54>
 800abd0:	0800e009 	.word	0x0800e009

0800abd4 <_strtol_r>:
 800abd4:	f7ff bf82 	b.w	800aadc <_strtol_l.constprop.0>

0800abd8 <quorem>:
 800abd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	6903      	ldr	r3, [r0, #16]
 800abde:	690c      	ldr	r4, [r1, #16]
 800abe0:	4607      	mov	r7, r0
 800abe2:	42a3      	cmp	r3, r4
 800abe4:	f2c0 8082 	blt.w	800acec <quorem+0x114>
 800abe8:	3c01      	subs	r4, #1
 800abea:	f100 0514 	add.w	r5, r0, #20
 800abee:	f101 0814 	add.w	r8, r1, #20
 800abf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac00:	3301      	adds	r3, #1
 800ac02:	429a      	cmp	r2, r3
 800ac04:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac10:	d331      	bcc.n	800ac76 <quorem+0x9e>
 800ac12:	f04f 0e00 	mov.w	lr, #0
 800ac16:	4640      	mov	r0, r8
 800ac18:	46ac      	mov	ip, r5
 800ac1a:	46f2      	mov	sl, lr
 800ac1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac20:	b293      	uxth	r3, r2
 800ac22:	fb06 e303 	mla	r3, r6, r3, lr
 800ac26:	0c12      	lsrs	r2, r2, #16
 800ac28:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	fb06 e202 	mla	r2, r6, r2, lr
 800ac32:	ebaa 0303 	sub.w	r3, sl, r3
 800ac36:	f8dc a000 	ldr.w	sl, [ip]
 800ac3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac3e:	fa1f fa8a 	uxth.w	sl, sl
 800ac42:	4453      	add	r3, sl
 800ac44:	f8dc a000 	ldr.w	sl, [ip]
 800ac48:	b292      	uxth	r2, r2
 800ac4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac58:	4581      	cmp	r9, r0
 800ac5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac5e:	f84c 3b04 	str.w	r3, [ip], #4
 800ac62:	d2db      	bcs.n	800ac1c <quorem+0x44>
 800ac64:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac68:	b92b      	cbnz	r3, 800ac76 <quorem+0x9e>
 800ac6a:	9b01      	ldr	r3, [sp, #4]
 800ac6c:	3b04      	subs	r3, #4
 800ac6e:	429d      	cmp	r5, r3
 800ac70:	461a      	mov	r2, r3
 800ac72:	d32f      	bcc.n	800acd4 <quorem+0xfc>
 800ac74:	613c      	str	r4, [r7, #16]
 800ac76:	4638      	mov	r0, r7
 800ac78:	f001 fc82 	bl	800c580 <__mcmp>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	db25      	blt.n	800accc <quorem+0xf4>
 800ac80:	4628      	mov	r0, r5
 800ac82:	f04f 0c00 	mov.w	ip, #0
 800ac86:	3601      	adds	r6, #1
 800ac88:	f858 1b04 	ldr.w	r1, [r8], #4
 800ac8c:	f8d0 e000 	ldr.w	lr, [r0]
 800ac90:	b28b      	uxth	r3, r1
 800ac92:	ebac 0303 	sub.w	r3, ip, r3
 800ac96:	fa1f f28e 	uxth.w	r2, lr
 800ac9a:	4413      	add	r3, r2
 800ac9c:	0c0a      	lsrs	r2, r1, #16
 800ac9e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acac:	45c1      	cmp	r9, r8
 800acae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800acb2:	f840 3b04 	str.w	r3, [r0], #4
 800acb6:	d2e7      	bcs.n	800ac88 <quorem+0xb0>
 800acb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acc0:	b922      	cbnz	r2, 800accc <quorem+0xf4>
 800acc2:	3b04      	subs	r3, #4
 800acc4:	429d      	cmp	r5, r3
 800acc6:	461a      	mov	r2, r3
 800acc8:	d30a      	bcc.n	800ace0 <quorem+0x108>
 800acca:	613c      	str	r4, [r7, #16]
 800accc:	4630      	mov	r0, r6
 800acce:	b003      	add	sp, #12
 800acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	6812      	ldr	r2, [r2, #0]
 800acd6:	3b04      	subs	r3, #4
 800acd8:	2a00      	cmp	r2, #0
 800acda:	d1cb      	bne.n	800ac74 <quorem+0x9c>
 800acdc:	3c01      	subs	r4, #1
 800acde:	e7c6      	b.n	800ac6e <quorem+0x96>
 800ace0:	6812      	ldr	r2, [r2, #0]
 800ace2:	3b04      	subs	r3, #4
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	d1f0      	bne.n	800acca <quorem+0xf2>
 800ace8:	3c01      	subs	r4, #1
 800acea:	e7eb      	b.n	800acc4 <quorem+0xec>
 800acec:	2000      	movs	r0, #0
 800acee:	e7ee      	b.n	800acce <quorem+0xf6>

0800acf0 <_dtoa_r>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	4616      	mov	r6, r2
 800acf6:	461f      	mov	r7, r3
 800acf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800acfa:	b099      	sub	sp, #100	; 0x64
 800acfc:	4605      	mov	r5, r0
 800acfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ad02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ad06:	b974      	cbnz	r4, 800ad26 <_dtoa_r+0x36>
 800ad08:	2010      	movs	r0, #16
 800ad0a:	f001 f949 	bl	800bfa0 <malloc>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	6268      	str	r0, [r5, #36]	; 0x24
 800ad12:	b920      	cbnz	r0, 800ad1e <_dtoa_r+0x2e>
 800ad14:	21ea      	movs	r1, #234	; 0xea
 800ad16:	4ba8      	ldr	r3, [pc, #672]	; (800afb8 <_dtoa_r+0x2c8>)
 800ad18:	48a8      	ldr	r0, [pc, #672]	; (800afbc <_dtoa_r+0x2cc>)
 800ad1a:	f002 f89f 	bl	800ce5c <__assert_func>
 800ad1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad22:	6004      	str	r4, [r0, #0]
 800ad24:	60c4      	str	r4, [r0, #12]
 800ad26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad28:	6819      	ldr	r1, [r3, #0]
 800ad2a:	b151      	cbz	r1, 800ad42 <_dtoa_r+0x52>
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4093      	lsls	r3, r2
 800ad32:	604a      	str	r2, [r1, #4]
 800ad34:	608b      	str	r3, [r1, #8]
 800ad36:	4628      	mov	r0, r5
 800ad38:	f001 f99a 	bl	800c070 <_Bfree>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	1e3b      	subs	r3, r7, #0
 800ad44:	bfaf      	iteee	ge
 800ad46:	2300      	movge	r3, #0
 800ad48:	2201      	movlt	r2, #1
 800ad4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad4e:	9305      	strlt	r3, [sp, #20]
 800ad50:	bfa8      	it	ge
 800ad52:	f8c8 3000 	strge.w	r3, [r8]
 800ad56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ad5a:	4b99      	ldr	r3, [pc, #612]	; (800afc0 <_dtoa_r+0x2d0>)
 800ad5c:	bfb8      	it	lt
 800ad5e:	f8c8 2000 	strlt.w	r2, [r8]
 800ad62:	ea33 0309 	bics.w	r3, r3, r9
 800ad66:	d119      	bne.n	800ad9c <_dtoa_r+0xac>
 800ad68:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad6e:	6013      	str	r3, [r2, #0]
 800ad70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad74:	4333      	orrs	r3, r6
 800ad76:	f000 857f 	beq.w	800b878 <_dtoa_r+0xb88>
 800ad7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad7c:	b953      	cbnz	r3, 800ad94 <_dtoa_r+0xa4>
 800ad7e:	4b91      	ldr	r3, [pc, #580]	; (800afc4 <_dtoa_r+0x2d4>)
 800ad80:	e022      	b.n	800adc8 <_dtoa_r+0xd8>
 800ad82:	4b91      	ldr	r3, [pc, #580]	; (800afc8 <_dtoa_r+0x2d8>)
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	3308      	adds	r3, #8
 800ad88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	9803      	ldr	r0, [sp, #12]
 800ad8e:	b019      	add	sp, #100	; 0x64
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	4b8b      	ldr	r3, [pc, #556]	; (800afc4 <_dtoa_r+0x2d4>)
 800ad96:	9303      	str	r3, [sp, #12]
 800ad98:	3303      	adds	r3, #3
 800ad9a:	e7f5      	b.n	800ad88 <_dtoa_r+0x98>
 800ad9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ada0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ada4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ada8:	2200      	movs	r2, #0
 800adaa:	2300      	movs	r3, #0
 800adac:	f7f5 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 800adb0:	4680      	mov	r8, r0
 800adb2:	b158      	cbz	r0, 800adcc <_dtoa_r+0xdc>
 800adb4:	2301      	movs	r3, #1
 800adb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8558 	beq.w	800b872 <_dtoa_r+0xb82>
 800adc2:	4882      	ldr	r0, [pc, #520]	; (800afcc <_dtoa_r+0x2dc>)
 800adc4:	6018      	str	r0, [r3, #0]
 800adc6:	1e43      	subs	r3, r0, #1
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	e7df      	b.n	800ad8c <_dtoa_r+0x9c>
 800adcc:	ab16      	add	r3, sp, #88	; 0x58
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	ab17      	add	r3, sp, #92	; 0x5c
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	4628      	mov	r0, r5
 800add6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800adda:	f001 fcf3 	bl	800c7c4 <__d2b>
 800adde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ade2:	4683      	mov	fp, r0
 800ade4:	2c00      	cmp	r4, #0
 800ade6:	d07f      	beq.n	800aee8 <_dtoa_r+0x1f8>
 800ade8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800adf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adf6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800adfa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800adfe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ae02:	2200      	movs	r2, #0
 800ae04:	4b72      	ldr	r3, [pc, #456]	; (800afd0 <_dtoa_r+0x2e0>)
 800ae06:	f7f5 f9af 	bl	8000168 <__aeabi_dsub>
 800ae0a:	a365      	add	r3, pc, #404	; (adr r3, 800afa0 <_dtoa_r+0x2b0>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f7f5 fb62 	bl	80004d8 <__aeabi_dmul>
 800ae14:	a364      	add	r3, pc, #400	; (adr r3, 800afa8 <_dtoa_r+0x2b8>)
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	f7f5 f9a7 	bl	800016c <__adddf3>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	4620      	mov	r0, r4
 800ae22:	460f      	mov	r7, r1
 800ae24:	f7f5 faee 	bl	8000404 <__aeabi_i2d>
 800ae28:	a361      	add	r3, pc, #388	; (adr r3, 800afb0 <_dtoa_r+0x2c0>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f7f5 fb53 	bl	80004d8 <__aeabi_dmul>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	4630      	mov	r0, r6
 800ae38:	4639      	mov	r1, r7
 800ae3a:	f7f5 f997 	bl	800016c <__adddf3>
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	f7f5 fdf9 	bl	8000a38 <__aeabi_d2iz>
 800ae46:	2200      	movs	r2, #0
 800ae48:	4682      	mov	sl, r0
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	4639      	mov	r1, r7
 800ae50:	f7f5 fdb4 	bl	80009bc <__aeabi_dcmplt>
 800ae54:	b148      	cbz	r0, 800ae6a <_dtoa_r+0x17a>
 800ae56:	4650      	mov	r0, sl
 800ae58:	f7f5 fad4 	bl	8000404 <__aeabi_i2d>
 800ae5c:	4632      	mov	r2, r6
 800ae5e:	463b      	mov	r3, r7
 800ae60:	f7f5 fda2 	bl	80009a8 <__aeabi_dcmpeq>
 800ae64:	b908      	cbnz	r0, 800ae6a <_dtoa_r+0x17a>
 800ae66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae6a:	f1ba 0f16 	cmp.w	sl, #22
 800ae6e:	d858      	bhi.n	800af22 <_dtoa_r+0x232>
 800ae70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae74:	4b57      	ldr	r3, [pc, #348]	; (800afd4 <_dtoa_r+0x2e4>)
 800ae76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f7f5 fd9d 	bl	80009bc <__aeabi_dcmplt>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d04f      	beq.n	800af26 <_dtoa_r+0x236>
 800ae86:	2300      	movs	r3, #0
 800ae88:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae90:	1b1c      	subs	r4, r3, r4
 800ae92:	1e63      	subs	r3, r4, #1
 800ae94:	9309      	str	r3, [sp, #36]	; 0x24
 800ae96:	bf49      	itett	mi
 800ae98:	f1c4 0301 	rsbmi	r3, r4, #1
 800ae9c:	2300      	movpl	r3, #0
 800ae9e:	9306      	strmi	r3, [sp, #24]
 800aea0:	2300      	movmi	r3, #0
 800aea2:	bf54      	ite	pl
 800aea4:	9306      	strpl	r3, [sp, #24]
 800aea6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aea8:	f1ba 0f00 	cmp.w	sl, #0
 800aeac:	db3d      	blt.n	800af2a <_dtoa_r+0x23a>
 800aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aeb4:	4453      	add	r3, sl
 800aeb6:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb8:	2300      	movs	r3, #0
 800aeba:	930a      	str	r3, [sp, #40]	; 0x28
 800aebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aebe:	2b09      	cmp	r3, #9
 800aec0:	f200 808c 	bhi.w	800afdc <_dtoa_r+0x2ec>
 800aec4:	2b05      	cmp	r3, #5
 800aec6:	bfc4      	itt	gt
 800aec8:	3b04      	subgt	r3, #4
 800aeca:	9322      	strgt	r3, [sp, #136]	; 0x88
 800aecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aece:	bfc8      	it	gt
 800aed0:	2400      	movgt	r4, #0
 800aed2:	f1a3 0302 	sub.w	r3, r3, #2
 800aed6:	bfd8      	it	le
 800aed8:	2401      	movle	r4, #1
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	f200 808a 	bhi.w	800aff4 <_dtoa_r+0x304>
 800aee0:	e8df f003 	tbb	[pc, r3]
 800aee4:	5b4d4f2d 	.word	0x5b4d4f2d
 800aee8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800aeec:	441c      	add	r4, r3
 800aeee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800aef2:	2b20      	cmp	r3, #32
 800aef4:	bfc3      	ittte	gt
 800aef6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aefa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800aefe:	fa09 f303 	lslgt.w	r3, r9, r3
 800af02:	f1c3 0320 	rsble	r3, r3, #32
 800af06:	bfc6      	itte	gt
 800af08:	fa26 f000 	lsrgt.w	r0, r6, r0
 800af0c:	4318      	orrgt	r0, r3
 800af0e:	fa06 f003 	lslle.w	r0, r6, r3
 800af12:	f7f5 fa67 	bl	80003e4 <__aeabi_ui2d>
 800af16:	2301      	movs	r3, #1
 800af18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800af1c:	3c01      	subs	r4, #1
 800af1e:	9313      	str	r3, [sp, #76]	; 0x4c
 800af20:	e76f      	b.n	800ae02 <_dtoa_r+0x112>
 800af22:	2301      	movs	r3, #1
 800af24:	e7b2      	b.n	800ae8c <_dtoa_r+0x19c>
 800af26:	900f      	str	r0, [sp, #60]	; 0x3c
 800af28:	e7b1      	b.n	800ae8e <_dtoa_r+0x19e>
 800af2a:	9b06      	ldr	r3, [sp, #24]
 800af2c:	eba3 030a 	sub.w	r3, r3, sl
 800af30:	9306      	str	r3, [sp, #24]
 800af32:	f1ca 0300 	rsb	r3, sl, #0
 800af36:	930a      	str	r3, [sp, #40]	; 0x28
 800af38:	2300      	movs	r3, #0
 800af3a:	930e      	str	r3, [sp, #56]	; 0x38
 800af3c:	e7be      	b.n	800aebc <_dtoa_r+0x1cc>
 800af3e:	2300      	movs	r3, #0
 800af40:	930b      	str	r3, [sp, #44]	; 0x2c
 800af42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af44:	2b00      	cmp	r3, #0
 800af46:	dc58      	bgt.n	800affa <_dtoa_r+0x30a>
 800af48:	f04f 0901 	mov.w	r9, #1
 800af4c:	464b      	mov	r3, r9
 800af4e:	f8cd 9020 	str.w	r9, [sp, #32]
 800af52:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800af56:	2200      	movs	r2, #0
 800af58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800af5a:	6042      	str	r2, [r0, #4]
 800af5c:	2204      	movs	r2, #4
 800af5e:	f102 0614 	add.w	r6, r2, #20
 800af62:	429e      	cmp	r6, r3
 800af64:	6841      	ldr	r1, [r0, #4]
 800af66:	d94e      	bls.n	800b006 <_dtoa_r+0x316>
 800af68:	4628      	mov	r0, r5
 800af6a:	f001 f841 	bl	800bff0 <_Balloc>
 800af6e:	9003      	str	r0, [sp, #12]
 800af70:	2800      	cmp	r0, #0
 800af72:	d14c      	bne.n	800b00e <_dtoa_r+0x31e>
 800af74:	4602      	mov	r2, r0
 800af76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af7a:	4b17      	ldr	r3, [pc, #92]	; (800afd8 <_dtoa_r+0x2e8>)
 800af7c:	e6cc      	b.n	800ad18 <_dtoa_r+0x28>
 800af7e:	2301      	movs	r3, #1
 800af80:	e7de      	b.n	800af40 <_dtoa_r+0x250>
 800af82:	2300      	movs	r3, #0
 800af84:	930b      	str	r3, [sp, #44]	; 0x2c
 800af86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af88:	eb0a 0903 	add.w	r9, sl, r3
 800af8c:	f109 0301 	add.w	r3, r9, #1
 800af90:	2b01      	cmp	r3, #1
 800af92:	9308      	str	r3, [sp, #32]
 800af94:	bfb8      	it	lt
 800af96:	2301      	movlt	r3, #1
 800af98:	e7dd      	b.n	800af56 <_dtoa_r+0x266>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e7f2      	b.n	800af84 <_dtoa_r+0x294>
 800af9e:	bf00      	nop
 800afa0:	636f4361 	.word	0x636f4361
 800afa4:	3fd287a7 	.word	0x3fd287a7
 800afa8:	8b60c8b3 	.word	0x8b60c8b3
 800afac:	3fc68a28 	.word	0x3fc68a28
 800afb0:	509f79fb 	.word	0x509f79fb
 800afb4:	3fd34413 	.word	0x3fd34413
 800afb8:	0800e116 	.word	0x0800e116
 800afbc:	0800e12d 	.word	0x0800e12d
 800afc0:	7ff00000 	.word	0x7ff00000
 800afc4:	0800e112 	.word	0x0800e112
 800afc8:	0800e109 	.word	0x0800e109
 800afcc:	0800df89 	.word	0x0800df89
 800afd0:	3ff80000 	.word	0x3ff80000
 800afd4:	0800e298 	.word	0x0800e298
 800afd8:	0800e188 	.word	0x0800e188
 800afdc:	2401      	movs	r4, #1
 800afde:	2300      	movs	r3, #0
 800afe0:	940b      	str	r4, [sp, #44]	; 0x2c
 800afe2:	9322      	str	r3, [sp, #136]	; 0x88
 800afe4:	f04f 39ff 	mov.w	r9, #4294967295
 800afe8:	2200      	movs	r2, #0
 800afea:	2312      	movs	r3, #18
 800afec:	f8cd 9020 	str.w	r9, [sp, #32]
 800aff0:	9223      	str	r2, [sp, #140]	; 0x8c
 800aff2:	e7b0      	b.n	800af56 <_dtoa_r+0x266>
 800aff4:	2301      	movs	r3, #1
 800aff6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aff8:	e7f4      	b.n	800afe4 <_dtoa_r+0x2f4>
 800affa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800affe:	464b      	mov	r3, r9
 800b000:	f8cd 9020 	str.w	r9, [sp, #32]
 800b004:	e7a7      	b.n	800af56 <_dtoa_r+0x266>
 800b006:	3101      	adds	r1, #1
 800b008:	6041      	str	r1, [r0, #4]
 800b00a:	0052      	lsls	r2, r2, #1
 800b00c:	e7a7      	b.n	800af5e <_dtoa_r+0x26e>
 800b00e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b010:	9a03      	ldr	r2, [sp, #12]
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	9b08      	ldr	r3, [sp, #32]
 800b016:	2b0e      	cmp	r3, #14
 800b018:	f200 80a8 	bhi.w	800b16c <_dtoa_r+0x47c>
 800b01c:	2c00      	cmp	r4, #0
 800b01e:	f000 80a5 	beq.w	800b16c <_dtoa_r+0x47c>
 800b022:	f1ba 0f00 	cmp.w	sl, #0
 800b026:	dd34      	ble.n	800b092 <_dtoa_r+0x3a2>
 800b028:	4a9a      	ldr	r2, [pc, #616]	; (800b294 <_dtoa_r+0x5a4>)
 800b02a:	f00a 030f 	and.w	r3, sl, #15
 800b02e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b032:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b036:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b03a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b03e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b042:	d016      	beq.n	800b072 <_dtoa_r+0x382>
 800b044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b048:	4b93      	ldr	r3, [pc, #588]	; (800b298 <_dtoa_r+0x5a8>)
 800b04a:	2703      	movs	r7, #3
 800b04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b050:	f7f5 fb6c 	bl	800072c <__aeabi_ddiv>
 800b054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b058:	f004 040f 	and.w	r4, r4, #15
 800b05c:	4e8e      	ldr	r6, [pc, #568]	; (800b298 <_dtoa_r+0x5a8>)
 800b05e:	b954      	cbnz	r4, 800b076 <_dtoa_r+0x386>
 800b060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b068:	f7f5 fb60 	bl	800072c <__aeabi_ddiv>
 800b06c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b070:	e029      	b.n	800b0c6 <_dtoa_r+0x3d6>
 800b072:	2702      	movs	r7, #2
 800b074:	e7f2      	b.n	800b05c <_dtoa_r+0x36c>
 800b076:	07e1      	lsls	r1, r4, #31
 800b078:	d508      	bpl.n	800b08c <_dtoa_r+0x39c>
 800b07a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b07e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b082:	f7f5 fa29 	bl	80004d8 <__aeabi_dmul>
 800b086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b08a:	3701      	adds	r7, #1
 800b08c:	1064      	asrs	r4, r4, #1
 800b08e:	3608      	adds	r6, #8
 800b090:	e7e5      	b.n	800b05e <_dtoa_r+0x36e>
 800b092:	f000 80a5 	beq.w	800b1e0 <_dtoa_r+0x4f0>
 800b096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b09a:	f1ca 0400 	rsb	r4, sl, #0
 800b09e:	4b7d      	ldr	r3, [pc, #500]	; (800b294 <_dtoa_r+0x5a4>)
 800b0a0:	f004 020f 	and.w	r2, r4, #15
 800b0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	f7f5 fa14 	bl	80004d8 <__aeabi_dmul>
 800b0b0:	2702      	movs	r7, #2
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b8:	4e77      	ldr	r6, [pc, #476]	; (800b298 <_dtoa_r+0x5a8>)
 800b0ba:	1124      	asrs	r4, r4, #4
 800b0bc:	2c00      	cmp	r4, #0
 800b0be:	f040 8084 	bne.w	800b1ca <_dtoa_r+0x4da>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1d2      	bne.n	800b06c <_dtoa_r+0x37c>
 800b0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 808b 	beq.w	800b1e4 <_dtoa_r+0x4f4>
 800b0ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b0d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b0d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0da:	2200      	movs	r2, #0
 800b0dc:	4b6f      	ldr	r3, [pc, #444]	; (800b29c <_dtoa_r+0x5ac>)
 800b0de:	f7f5 fc6d 	bl	80009bc <__aeabi_dcmplt>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d07e      	beq.n	800b1e4 <_dtoa_r+0x4f4>
 800b0e6:	9b08      	ldr	r3, [sp, #32]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d07b      	beq.n	800b1e4 <_dtoa_r+0x4f4>
 800b0ec:	f1b9 0f00 	cmp.w	r9, #0
 800b0f0:	dd38      	ble.n	800b164 <_dtoa_r+0x474>
 800b0f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	4b69      	ldr	r3, [pc, #420]	; (800b2a0 <_dtoa_r+0x5b0>)
 800b0fa:	f7f5 f9ed 	bl	80004d8 <__aeabi_dmul>
 800b0fe:	464c      	mov	r4, r9
 800b100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b104:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b108:	3701      	adds	r7, #1
 800b10a:	4638      	mov	r0, r7
 800b10c:	f7f5 f97a 	bl	8000404 <__aeabi_i2d>
 800b110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b114:	f7f5 f9e0 	bl	80004d8 <__aeabi_dmul>
 800b118:	2200      	movs	r2, #0
 800b11a:	4b62      	ldr	r3, [pc, #392]	; (800b2a4 <_dtoa_r+0x5b4>)
 800b11c:	f7f5 f826 	bl	800016c <__adddf3>
 800b120:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b124:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b128:	9611      	str	r6, [sp, #68]	; 0x44
 800b12a:	2c00      	cmp	r4, #0
 800b12c:	d15d      	bne.n	800b1ea <_dtoa_r+0x4fa>
 800b12e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b132:	2200      	movs	r2, #0
 800b134:	4b5c      	ldr	r3, [pc, #368]	; (800b2a8 <_dtoa_r+0x5b8>)
 800b136:	f7f5 f817 	bl	8000168 <__aeabi_dsub>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b142:	4633      	mov	r3, r6
 800b144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b146:	f7f5 fc57 	bl	80009f8 <__aeabi_dcmpgt>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f040 829c 	bne.w	800b688 <_dtoa_r+0x998>
 800b150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b156:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b15a:	f7f5 fc2f 	bl	80009bc <__aeabi_dcmplt>
 800b15e:	2800      	cmp	r0, #0
 800b160:	f040 8290 	bne.w	800b684 <_dtoa_r+0x994>
 800b164:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b168:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f2c0 8152 	blt.w	800b418 <_dtoa_r+0x728>
 800b174:	f1ba 0f0e 	cmp.w	sl, #14
 800b178:	f300 814e 	bgt.w	800b418 <_dtoa_r+0x728>
 800b17c:	4b45      	ldr	r3, [pc, #276]	; (800b294 <_dtoa_r+0x5a4>)
 800b17e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b182:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b186:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b18a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f280 80db 	bge.w	800b348 <_dtoa_r+0x658>
 800b192:	9b08      	ldr	r3, [sp, #32]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f300 80d7 	bgt.w	800b348 <_dtoa_r+0x658>
 800b19a:	f040 8272 	bne.w	800b682 <_dtoa_r+0x992>
 800b19e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4b40      	ldr	r3, [pc, #256]	; (800b2a8 <_dtoa_r+0x5b8>)
 800b1a6:	f7f5 f997 	bl	80004d8 <__aeabi_dmul>
 800b1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ae:	f7f5 fc19 	bl	80009e4 <__aeabi_dcmpge>
 800b1b2:	9c08      	ldr	r4, [sp, #32]
 800b1b4:	4626      	mov	r6, r4
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f040 8248 	bne.w	800b64c <_dtoa_r+0x95c>
 800b1bc:	2331      	movs	r3, #49	; 0x31
 800b1be:	9f03      	ldr	r7, [sp, #12]
 800b1c0:	f10a 0a01 	add.w	sl, sl, #1
 800b1c4:	f807 3b01 	strb.w	r3, [r7], #1
 800b1c8:	e244      	b.n	800b654 <_dtoa_r+0x964>
 800b1ca:	07e2      	lsls	r2, r4, #31
 800b1cc:	d505      	bpl.n	800b1da <_dtoa_r+0x4ea>
 800b1ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1d2:	f7f5 f981 	bl	80004d8 <__aeabi_dmul>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	3701      	adds	r7, #1
 800b1da:	1064      	asrs	r4, r4, #1
 800b1dc:	3608      	adds	r6, #8
 800b1de:	e76d      	b.n	800b0bc <_dtoa_r+0x3cc>
 800b1e0:	2702      	movs	r7, #2
 800b1e2:	e770      	b.n	800b0c6 <_dtoa_r+0x3d6>
 800b1e4:	46d0      	mov	r8, sl
 800b1e6:	9c08      	ldr	r4, [sp, #32]
 800b1e8:	e78f      	b.n	800b10a <_dtoa_r+0x41a>
 800b1ea:	9903      	ldr	r1, [sp, #12]
 800b1ec:	4b29      	ldr	r3, [pc, #164]	; (800b294 <_dtoa_r+0x5a4>)
 800b1ee:	4421      	add	r1, r4
 800b1f0:	9112      	str	r1, [sp, #72]	; 0x48
 800b1f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b1fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b200:	2900      	cmp	r1, #0
 800b202:	d055      	beq.n	800b2b0 <_dtoa_r+0x5c0>
 800b204:	2000      	movs	r0, #0
 800b206:	4929      	ldr	r1, [pc, #164]	; (800b2ac <_dtoa_r+0x5bc>)
 800b208:	f7f5 fa90 	bl	800072c <__aeabi_ddiv>
 800b20c:	463b      	mov	r3, r7
 800b20e:	4632      	mov	r2, r6
 800b210:	f7f4 ffaa 	bl	8000168 <__aeabi_dsub>
 800b214:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b218:	9f03      	ldr	r7, [sp, #12]
 800b21a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b21e:	f7f5 fc0b 	bl	8000a38 <__aeabi_d2iz>
 800b222:	4604      	mov	r4, r0
 800b224:	f7f5 f8ee 	bl	8000404 <__aeabi_i2d>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b230:	f7f4 ff9a 	bl	8000168 <__aeabi_dsub>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	3430      	adds	r4, #48	; 0x30
 800b23a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b23e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b242:	f807 4b01 	strb.w	r4, [r7], #1
 800b246:	f7f5 fbb9 	bl	80009bc <__aeabi_dcmplt>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d174      	bne.n	800b338 <_dtoa_r+0x648>
 800b24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b252:	2000      	movs	r0, #0
 800b254:	4911      	ldr	r1, [pc, #68]	; (800b29c <_dtoa_r+0x5ac>)
 800b256:	f7f4 ff87 	bl	8000168 <__aeabi_dsub>
 800b25a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b25e:	f7f5 fbad 	bl	80009bc <__aeabi_dcmplt>
 800b262:	2800      	cmp	r0, #0
 800b264:	f040 80b7 	bne.w	800b3d6 <_dtoa_r+0x6e6>
 800b268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b26a:	429f      	cmp	r7, r3
 800b26c:	f43f af7a 	beq.w	800b164 <_dtoa_r+0x474>
 800b270:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b274:	2200      	movs	r2, #0
 800b276:	4b0a      	ldr	r3, [pc, #40]	; (800b2a0 <_dtoa_r+0x5b0>)
 800b278:	f7f5 f92e 	bl	80004d8 <__aeabi_dmul>
 800b27c:	2200      	movs	r2, #0
 800b27e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b286:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <_dtoa_r+0x5b0>)
 800b288:	f7f5 f926 	bl	80004d8 <__aeabi_dmul>
 800b28c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b290:	e7c3      	b.n	800b21a <_dtoa_r+0x52a>
 800b292:	bf00      	nop
 800b294:	0800e298 	.word	0x0800e298
 800b298:	0800e270 	.word	0x0800e270
 800b29c:	3ff00000 	.word	0x3ff00000
 800b2a0:	40240000 	.word	0x40240000
 800b2a4:	401c0000 	.word	0x401c0000
 800b2a8:	40140000 	.word	0x40140000
 800b2ac:	3fe00000 	.word	0x3fe00000
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	f7f5 f910 	bl	80004d8 <__aeabi_dmul>
 800b2b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2be:	9c03      	ldr	r4, [sp, #12]
 800b2c0:	9314      	str	r3, [sp, #80]	; 0x50
 800b2c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2c6:	f7f5 fbb7 	bl	8000a38 <__aeabi_d2iz>
 800b2ca:	9015      	str	r0, [sp, #84]	; 0x54
 800b2cc:	f7f5 f89a 	bl	8000404 <__aeabi_i2d>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2d8:	f7f4 ff46 	bl	8000168 <__aeabi_dsub>
 800b2dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2de:	4606      	mov	r6, r0
 800b2e0:	3330      	adds	r3, #48	; 0x30
 800b2e2:	f804 3b01 	strb.w	r3, [r4], #1
 800b2e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2e8:	460f      	mov	r7, r1
 800b2ea:	429c      	cmp	r4, r3
 800b2ec:	f04f 0200 	mov.w	r2, #0
 800b2f0:	d124      	bne.n	800b33c <_dtoa_r+0x64c>
 800b2f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2f6:	4bb0      	ldr	r3, [pc, #704]	; (800b5b8 <_dtoa_r+0x8c8>)
 800b2f8:	f7f4 ff38 	bl	800016c <__adddf3>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4630      	mov	r0, r6
 800b302:	4639      	mov	r1, r7
 800b304:	f7f5 fb78 	bl	80009f8 <__aeabi_dcmpgt>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d163      	bne.n	800b3d4 <_dtoa_r+0x6e4>
 800b30c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b310:	2000      	movs	r0, #0
 800b312:	49a9      	ldr	r1, [pc, #676]	; (800b5b8 <_dtoa_r+0x8c8>)
 800b314:	f7f4 ff28 	bl	8000168 <__aeabi_dsub>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	4630      	mov	r0, r6
 800b31e:	4639      	mov	r1, r7
 800b320:	f7f5 fb4c 	bl	80009bc <__aeabi_dcmplt>
 800b324:	2800      	cmp	r0, #0
 800b326:	f43f af1d 	beq.w	800b164 <_dtoa_r+0x474>
 800b32a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b32c:	1e7b      	subs	r3, r7, #1
 800b32e:	9314      	str	r3, [sp, #80]	; 0x50
 800b330:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b334:	2b30      	cmp	r3, #48	; 0x30
 800b336:	d0f8      	beq.n	800b32a <_dtoa_r+0x63a>
 800b338:	46c2      	mov	sl, r8
 800b33a:	e03b      	b.n	800b3b4 <_dtoa_r+0x6c4>
 800b33c:	4b9f      	ldr	r3, [pc, #636]	; (800b5bc <_dtoa_r+0x8cc>)
 800b33e:	f7f5 f8cb 	bl	80004d8 <__aeabi_dmul>
 800b342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b346:	e7bc      	b.n	800b2c2 <_dtoa_r+0x5d2>
 800b348:	9f03      	ldr	r7, [sp, #12]
 800b34a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b34e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	f7f5 f9e9 	bl	800072c <__aeabi_ddiv>
 800b35a:	f7f5 fb6d 	bl	8000a38 <__aeabi_d2iz>
 800b35e:	4604      	mov	r4, r0
 800b360:	f7f5 f850 	bl	8000404 <__aeabi_i2d>
 800b364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b368:	f7f5 f8b6 	bl	80004d8 <__aeabi_dmul>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4640      	mov	r0, r8
 800b372:	4649      	mov	r1, r9
 800b374:	f7f4 fef8 	bl	8000168 <__aeabi_dsub>
 800b378:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b37c:	f807 6b01 	strb.w	r6, [r7], #1
 800b380:	9e03      	ldr	r6, [sp, #12]
 800b382:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b386:	1bbe      	subs	r6, r7, r6
 800b388:	45b4      	cmp	ip, r6
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	d136      	bne.n	800b3fe <_dtoa_r+0x70e>
 800b390:	f7f4 feec 	bl	800016c <__adddf3>
 800b394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b398:	4680      	mov	r8, r0
 800b39a:	4689      	mov	r9, r1
 800b39c:	f7f5 fb2c 	bl	80009f8 <__aeabi_dcmpgt>
 800b3a0:	bb58      	cbnz	r0, 800b3fa <_dtoa_r+0x70a>
 800b3a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	f7f5 fafd 	bl	80009a8 <__aeabi_dcmpeq>
 800b3ae:	b108      	cbz	r0, 800b3b4 <_dtoa_r+0x6c4>
 800b3b0:	07e1      	lsls	r1, r4, #31
 800b3b2:	d422      	bmi.n	800b3fa <_dtoa_r+0x70a>
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	4659      	mov	r1, fp
 800b3b8:	f000 fe5a 	bl	800c070 <_Bfree>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	703b      	strb	r3, [r7, #0]
 800b3c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b3c2:	f10a 0001 	add.w	r0, sl, #1
 800b3c6:	6018      	str	r0, [r3, #0]
 800b3c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f43f acde 	beq.w	800ad8c <_dtoa_r+0x9c>
 800b3d0:	601f      	str	r7, [r3, #0]
 800b3d2:	e4db      	b.n	800ad8c <_dtoa_r+0x9c>
 800b3d4:	4627      	mov	r7, r4
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	461f      	mov	r7, r3
 800b3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3de:	2a39      	cmp	r2, #57	; 0x39
 800b3e0:	d107      	bne.n	800b3f2 <_dtoa_r+0x702>
 800b3e2:	9a03      	ldr	r2, [sp, #12]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d1f7      	bne.n	800b3d8 <_dtoa_r+0x6e8>
 800b3e8:	2230      	movs	r2, #48	; 0x30
 800b3ea:	9903      	ldr	r1, [sp, #12]
 800b3ec:	f108 0801 	add.w	r8, r8, #1
 800b3f0:	700a      	strb	r2, [r1, #0]
 800b3f2:	781a      	ldrb	r2, [r3, #0]
 800b3f4:	3201      	adds	r2, #1
 800b3f6:	701a      	strb	r2, [r3, #0]
 800b3f8:	e79e      	b.n	800b338 <_dtoa_r+0x648>
 800b3fa:	46d0      	mov	r8, sl
 800b3fc:	e7eb      	b.n	800b3d6 <_dtoa_r+0x6e6>
 800b3fe:	2200      	movs	r2, #0
 800b400:	4b6e      	ldr	r3, [pc, #440]	; (800b5bc <_dtoa_r+0x8cc>)
 800b402:	f7f5 f869 	bl	80004d8 <__aeabi_dmul>
 800b406:	2200      	movs	r2, #0
 800b408:	2300      	movs	r3, #0
 800b40a:	4680      	mov	r8, r0
 800b40c:	4689      	mov	r9, r1
 800b40e:	f7f5 facb 	bl	80009a8 <__aeabi_dcmpeq>
 800b412:	2800      	cmp	r0, #0
 800b414:	d09b      	beq.n	800b34e <_dtoa_r+0x65e>
 800b416:	e7cd      	b.n	800b3b4 <_dtoa_r+0x6c4>
 800b418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	f000 80d0 	beq.w	800b5c0 <_dtoa_r+0x8d0>
 800b420:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b422:	2a01      	cmp	r2, #1
 800b424:	f300 80ae 	bgt.w	800b584 <_dtoa_r+0x894>
 800b428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b42a:	2a00      	cmp	r2, #0
 800b42c:	f000 80a6 	beq.w	800b57c <_dtoa_r+0x88c>
 800b430:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b434:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b436:	9f06      	ldr	r7, [sp, #24]
 800b438:	9a06      	ldr	r2, [sp, #24]
 800b43a:	2101      	movs	r1, #1
 800b43c:	441a      	add	r2, r3
 800b43e:	9206      	str	r2, [sp, #24]
 800b440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b442:	4628      	mov	r0, r5
 800b444:	441a      	add	r2, r3
 800b446:	9209      	str	r2, [sp, #36]	; 0x24
 800b448:	f000 ff12 	bl	800c270 <__i2b>
 800b44c:	4606      	mov	r6, r0
 800b44e:	2f00      	cmp	r7, #0
 800b450:	dd0c      	ble.n	800b46c <_dtoa_r+0x77c>
 800b452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	dd09      	ble.n	800b46c <_dtoa_r+0x77c>
 800b458:	42bb      	cmp	r3, r7
 800b45a:	bfa8      	it	ge
 800b45c:	463b      	movge	r3, r7
 800b45e:	9a06      	ldr	r2, [sp, #24]
 800b460:	1aff      	subs	r7, r7, r3
 800b462:	1ad2      	subs	r2, r2, r3
 800b464:	9206      	str	r2, [sp, #24]
 800b466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	9309      	str	r3, [sp, #36]	; 0x24
 800b46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b46e:	b1f3      	cbz	r3, 800b4ae <_dtoa_r+0x7be>
 800b470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 80a8 	beq.w	800b5c8 <_dtoa_r+0x8d8>
 800b478:	2c00      	cmp	r4, #0
 800b47a:	dd10      	ble.n	800b49e <_dtoa_r+0x7ae>
 800b47c:	4631      	mov	r1, r6
 800b47e:	4622      	mov	r2, r4
 800b480:	4628      	mov	r0, r5
 800b482:	f000 ffb3 	bl	800c3ec <__pow5mult>
 800b486:	465a      	mov	r2, fp
 800b488:	4601      	mov	r1, r0
 800b48a:	4606      	mov	r6, r0
 800b48c:	4628      	mov	r0, r5
 800b48e:	f000 ff05 	bl	800c29c <__multiply>
 800b492:	4680      	mov	r8, r0
 800b494:	4659      	mov	r1, fp
 800b496:	4628      	mov	r0, r5
 800b498:	f000 fdea 	bl	800c070 <_Bfree>
 800b49c:	46c3      	mov	fp, r8
 800b49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4a0:	1b1a      	subs	r2, r3, r4
 800b4a2:	d004      	beq.n	800b4ae <_dtoa_r+0x7be>
 800b4a4:	4659      	mov	r1, fp
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 ffa0 	bl	800c3ec <__pow5mult>
 800b4ac:	4683      	mov	fp, r0
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	f000 fedd 	bl	800c270 <__i2b>
 800b4b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f340 8086 	ble.w	800b5cc <_dtoa_r+0x8dc>
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f000 ff91 	bl	800c3ec <__pow5mult>
 800b4ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	dd7f      	ble.n	800b5d2 <_dtoa_r+0x8e2>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4dc:	6918      	ldr	r0, [r3, #16]
 800b4de:	f000 fe79 	bl	800c1d4 <__hi0bits>
 800b4e2:	f1c0 0020 	rsb	r0, r0, #32
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	4418      	add	r0, r3
 800b4ea:	f010 001f 	ands.w	r0, r0, #31
 800b4ee:	f000 8092 	beq.w	800b616 <_dtoa_r+0x926>
 800b4f2:	f1c0 0320 	rsb	r3, r0, #32
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	f340 808a 	ble.w	800b610 <_dtoa_r+0x920>
 800b4fc:	f1c0 001c 	rsb	r0, r0, #28
 800b500:	9b06      	ldr	r3, [sp, #24]
 800b502:	4407      	add	r7, r0
 800b504:	4403      	add	r3, r0
 800b506:	9306      	str	r3, [sp, #24]
 800b508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50a:	4403      	add	r3, r0
 800b50c:	9309      	str	r3, [sp, #36]	; 0x24
 800b50e:	9b06      	ldr	r3, [sp, #24]
 800b510:	2b00      	cmp	r3, #0
 800b512:	dd05      	ble.n	800b520 <_dtoa_r+0x830>
 800b514:	4659      	mov	r1, fp
 800b516:	461a      	mov	r2, r3
 800b518:	4628      	mov	r0, r5
 800b51a:	f000 ffc1 	bl	800c4a0 <__lshift>
 800b51e:	4683      	mov	fp, r0
 800b520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b522:	2b00      	cmp	r3, #0
 800b524:	dd05      	ble.n	800b532 <_dtoa_r+0x842>
 800b526:	4621      	mov	r1, r4
 800b528:	461a      	mov	r2, r3
 800b52a:	4628      	mov	r0, r5
 800b52c:	f000 ffb8 	bl	800c4a0 <__lshift>
 800b530:	4604      	mov	r4, r0
 800b532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d070      	beq.n	800b61a <_dtoa_r+0x92a>
 800b538:	4621      	mov	r1, r4
 800b53a:	4658      	mov	r0, fp
 800b53c:	f001 f820 	bl	800c580 <__mcmp>
 800b540:	2800      	cmp	r0, #0
 800b542:	da6a      	bge.n	800b61a <_dtoa_r+0x92a>
 800b544:	2300      	movs	r3, #0
 800b546:	4659      	mov	r1, fp
 800b548:	220a      	movs	r2, #10
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 fdb2 	bl	800c0b4 <__multadd>
 800b550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b552:	4683      	mov	fp, r0
 800b554:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 8194 	beq.w	800b886 <_dtoa_r+0xb96>
 800b55e:	4631      	mov	r1, r6
 800b560:	2300      	movs	r3, #0
 800b562:	220a      	movs	r2, #10
 800b564:	4628      	mov	r0, r5
 800b566:	f000 fda5 	bl	800c0b4 <__multadd>
 800b56a:	f1b9 0f00 	cmp.w	r9, #0
 800b56e:	4606      	mov	r6, r0
 800b570:	f300 8093 	bgt.w	800b69a <_dtoa_r+0x9aa>
 800b574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b576:	2b02      	cmp	r3, #2
 800b578:	dc57      	bgt.n	800b62a <_dtoa_r+0x93a>
 800b57a:	e08e      	b.n	800b69a <_dtoa_r+0x9aa>
 800b57c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b57e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b582:	e757      	b.n	800b434 <_dtoa_r+0x744>
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	1e5c      	subs	r4, r3, #1
 800b588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	bfb7      	itett	lt
 800b58e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b590:	1b1c      	subge	r4, r3, r4
 800b592:	1ae2      	sublt	r2, r4, r3
 800b594:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b596:	bfbe      	ittt	lt
 800b598:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b59a:	189b      	addlt	r3, r3, r2
 800b59c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b59e:	9b08      	ldr	r3, [sp, #32]
 800b5a0:	bfb8      	it	lt
 800b5a2:	2400      	movlt	r4, #0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	bfbb      	ittet	lt
 800b5a8:	9b06      	ldrlt	r3, [sp, #24]
 800b5aa:	9a08      	ldrlt	r2, [sp, #32]
 800b5ac:	9f06      	ldrge	r7, [sp, #24]
 800b5ae:	1a9f      	sublt	r7, r3, r2
 800b5b0:	bfac      	ite	ge
 800b5b2:	9b08      	ldrge	r3, [sp, #32]
 800b5b4:	2300      	movlt	r3, #0
 800b5b6:	e73f      	b.n	800b438 <_dtoa_r+0x748>
 800b5b8:	3fe00000 	.word	0x3fe00000
 800b5bc:	40240000 	.word	0x40240000
 800b5c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5c2:	9f06      	ldr	r7, [sp, #24]
 800b5c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b5c6:	e742      	b.n	800b44e <_dtoa_r+0x75e>
 800b5c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5ca:	e76b      	b.n	800b4a4 <_dtoa_r+0x7b4>
 800b5cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	dc19      	bgt.n	800b606 <_dtoa_r+0x916>
 800b5d2:	9b04      	ldr	r3, [sp, #16]
 800b5d4:	b9bb      	cbnz	r3, 800b606 <_dtoa_r+0x916>
 800b5d6:	9b05      	ldr	r3, [sp, #20]
 800b5d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5dc:	b99b      	cbnz	r3, 800b606 <_dtoa_r+0x916>
 800b5de:	9b05      	ldr	r3, [sp, #20]
 800b5e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5e4:	0d1b      	lsrs	r3, r3, #20
 800b5e6:	051b      	lsls	r3, r3, #20
 800b5e8:	b183      	cbz	r3, 800b60c <_dtoa_r+0x91c>
 800b5ea:	f04f 0801 	mov.w	r8, #1
 800b5ee:	9b06      	ldr	r3, [sp, #24]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	9306      	str	r3, [sp, #24]
 800b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f47f af6a 	bne.w	800b4d6 <_dtoa_r+0x7e6>
 800b602:	2001      	movs	r0, #1
 800b604:	e76f      	b.n	800b4e6 <_dtoa_r+0x7f6>
 800b606:	f04f 0800 	mov.w	r8, #0
 800b60a:	e7f6      	b.n	800b5fa <_dtoa_r+0x90a>
 800b60c:	4698      	mov	r8, r3
 800b60e:	e7f4      	b.n	800b5fa <_dtoa_r+0x90a>
 800b610:	f43f af7d 	beq.w	800b50e <_dtoa_r+0x81e>
 800b614:	4618      	mov	r0, r3
 800b616:	301c      	adds	r0, #28
 800b618:	e772      	b.n	800b500 <_dtoa_r+0x810>
 800b61a:	9b08      	ldr	r3, [sp, #32]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	dc36      	bgt.n	800b68e <_dtoa_r+0x99e>
 800b620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b622:	2b02      	cmp	r3, #2
 800b624:	dd33      	ble.n	800b68e <_dtoa_r+0x99e>
 800b626:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b62a:	f1b9 0f00 	cmp.w	r9, #0
 800b62e:	d10d      	bne.n	800b64c <_dtoa_r+0x95c>
 800b630:	4621      	mov	r1, r4
 800b632:	464b      	mov	r3, r9
 800b634:	2205      	movs	r2, #5
 800b636:	4628      	mov	r0, r5
 800b638:	f000 fd3c 	bl	800c0b4 <__multadd>
 800b63c:	4601      	mov	r1, r0
 800b63e:	4604      	mov	r4, r0
 800b640:	4658      	mov	r0, fp
 800b642:	f000 ff9d 	bl	800c580 <__mcmp>
 800b646:	2800      	cmp	r0, #0
 800b648:	f73f adb8 	bgt.w	800b1bc <_dtoa_r+0x4cc>
 800b64c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b64e:	9f03      	ldr	r7, [sp, #12]
 800b650:	ea6f 0a03 	mvn.w	sl, r3
 800b654:	f04f 0800 	mov.w	r8, #0
 800b658:	4621      	mov	r1, r4
 800b65a:	4628      	mov	r0, r5
 800b65c:	f000 fd08 	bl	800c070 <_Bfree>
 800b660:	2e00      	cmp	r6, #0
 800b662:	f43f aea7 	beq.w	800b3b4 <_dtoa_r+0x6c4>
 800b666:	f1b8 0f00 	cmp.w	r8, #0
 800b66a:	d005      	beq.n	800b678 <_dtoa_r+0x988>
 800b66c:	45b0      	cmp	r8, r6
 800b66e:	d003      	beq.n	800b678 <_dtoa_r+0x988>
 800b670:	4641      	mov	r1, r8
 800b672:	4628      	mov	r0, r5
 800b674:	f000 fcfc 	bl	800c070 <_Bfree>
 800b678:	4631      	mov	r1, r6
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 fcf8 	bl	800c070 <_Bfree>
 800b680:	e698      	b.n	800b3b4 <_dtoa_r+0x6c4>
 800b682:	2400      	movs	r4, #0
 800b684:	4626      	mov	r6, r4
 800b686:	e7e1      	b.n	800b64c <_dtoa_r+0x95c>
 800b688:	46c2      	mov	sl, r8
 800b68a:	4626      	mov	r6, r4
 800b68c:	e596      	b.n	800b1bc <_dtoa_r+0x4cc>
 800b68e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80fd 	beq.w	800b894 <_dtoa_r+0xba4>
 800b69a:	2f00      	cmp	r7, #0
 800b69c:	dd05      	ble.n	800b6aa <_dtoa_r+0x9ba>
 800b69e:	4631      	mov	r1, r6
 800b6a0:	463a      	mov	r2, r7
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f000 fefc 	bl	800c4a0 <__lshift>
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	f1b8 0f00 	cmp.w	r8, #0
 800b6ae:	d05c      	beq.n	800b76a <_dtoa_r+0xa7a>
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	6871      	ldr	r1, [r6, #4]
 800b6b4:	f000 fc9c 	bl	800bff0 <_Balloc>
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	b928      	cbnz	r0, 800b6c8 <_dtoa_r+0x9d8>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b6c2:	4b7f      	ldr	r3, [pc, #508]	; (800b8c0 <_dtoa_r+0xbd0>)
 800b6c4:	f7ff bb28 	b.w	800ad18 <_dtoa_r+0x28>
 800b6c8:	6932      	ldr	r2, [r6, #16]
 800b6ca:	f106 010c 	add.w	r1, r6, #12
 800b6ce:	3202      	adds	r2, #2
 800b6d0:	0092      	lsls	r2, r2, #2
 800b6d2:	300c      	adds	r0, #12
 800b6d4:	f7fd fd00 	bl	80090d8 <memcpy>
 800b6d8:	2201      	movs	r2, #1
 800b6da:	4639      	mov	r1, r7
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f000 fedf 	bl	800c4a0 <__lshift>
 800b6e2:	46b0      	mov	r8, r6
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	9308      	str	r3, [sp, #32]
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	444b      	add	r3, r9
 800b6f0:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f2:	9b04      	ldr	r3, [sp, #16]
 800b6f4:	f003 0301 	and.w	r3, r3, #1
 800b6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	3b01      	subs	r3, #1
 800b700:	4658      	mov	r0, fp
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	f7ff fa68 	bl	800abd8 <quorem>
 800b708:	4603      	mov	r3, r0
 800b70a:	4641      	mov	r1, r8
 800b70c:	3330      	adds	r3, #48	; 0x30
 800b70e:	9006      	str	r0, [sp, #24]
 800b710:	4658      	mov	r0, fp
 800b712:	930b      	str	r3, [sp, #44]	; 0x2c
 800b714:	f000 ff34 	bl	800c580 <__mcmp>
 800b718:	4632      	mov	r2, r6
 800b71a:	4681      	mov	r9, r0
 800b71c:	4621      	mov	r1, r4
 800b71e:	4628      	mov	r0, r5
 800b720:	f000 ff4a 	bl	800c5b8 <__mdiff>
 800b724:	68c2      	ldr	r2, [r0, #12]
 800b726:	4607      	mov	r7, r0
 800b728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b72a:	bb02      	cbnz	r2, 800b76e <_dtoa_r+0xa7e>
 800b72c:	4601      	mov	r1, r0
 800b72e:	4658      	mov	r0, fp
 800b730:	f000 ff26 	bl	800c580 <__mcmp>
 800b734:	4602      	mov	r2, r0
 800b736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b738:	4639      	mov	r1, r7
 800b73a:	4628      	mov	r0, r5
 800b73c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b740:	f000 fc96 	bl	800c070 <_Bfree>
 800b744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b748:	9f08      	ldr	r7, [sp, #32]
 800b74a:	ea43 0102 	orr.w	r1, r3, r2
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	430b      	orrs	r3, r1
 800b752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b754:	d10d      	bne.n	800b772 <_dtoa_r+0xa82>
 800b756:	2b39      	cmp	r3, #57	; 0x39
 800b758:	d029      	beq.n	800b7ae <_dtoa_r+0xabe>
 800b75a:	f1b9 0f00 	cmp.w	r9, #0
 800b75e:	dd01      	ble.n	800b764 <_dtoa_r+0xa74>
 800b760:	9b06      	ldr	r3, [sp, #24]
 800b762:	3331      	adds	r3, #49	; 0x31
 800b764:	9a04      	ldr	r2, [sp, #16]
 800b766:	7013      	strb	r3, [r2, #0]
 800b768:	e776      	b.n	800b658 <_dtoa_r+0x968>
 800b76a:	4630      	mov	r0, r6
 800b76c:	e7b9      	b.n	800b6e2 <_dtoa_r+0x9f2>
 800b76e:	2201      	movs	r2, #1
 800b770:	e7e2      	b.n	800b738 <_dtoa_r+0xa48>
 800b772:	f1b9 0f00 	cmp.w	r9, #0
 800b776:	db06      	blt.n	800b786 <_dtoa_r+0xa96>
 800b778:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b77a:	ea41 0909 	orr.w	r9, r1, r9
 800b77e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b780:	ea59 0101 	orrs.w	r1, r9, r1
 800b784:	d120      	bne.n	800b7c8 <_dtoa_r+0xad8>
 800b786:	2a00      	cmp	r2, #0
 800b788:	ddec      	ble.n	800b764 <_dtoa_r+0xa74>
 800b78a:	4659      	mov	r1, fp
 800b78c:	2201      	movs	r2, #1
 800b78e:	4628      	mov	r0, r5
 800b790:	9308      	str	r3, [sp, #32]
 800b792:	f000 fe85 	bl	800c4a0 <__lshift>
 800b796:	4621      	mov	r1, r4
 800b798:	4683      	mov	fp, r0
 800b79a:	f000 fef1 	bl	800c580 <__mcmp>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	9b08      	ldr	r3, [sp, #32]
 800b7a2:	dc02      	bgt.n	800b7aa <_dtoa_r+0xaba>
 800b7a4:	d1de      	bne.n	800b764 <_dtoa_r+0xa74>
 800b7a6:	07da      	lsls	r2, r3, #31
 800b7a8:	d5dc      	bpl.n	800b764 <_dtoa_r+0xa74>
 800b7aa:	2b39      	cmp	r3, #57	; 0x39
 800b7ac:	d1d8      	bne.n	800b760 <_dtoa_r+0xa70>
 800b7ae:	2339      	movs	r3, #57	; 0x39
 800b7b0:	9a04      	ldr	r2, [sp, #16]
 800b7b2:	7013      	strb	r3, [r2, #0]
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	461f      	mov	r7, r3
 800b7b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	2a39      	cmp	r2, #57	; 0x39
 800b7c0:	d050      	beq.n	800b864 <_dtoa_r+0xb74>
 800b7c2:	3201      	adds	r2, #1
 800b7c4:	701a      	strb	r2, [r3, #0]
 800b7c6:	e747      	b.n	800b658 <_dtoa_r+0x968>
 800b7c8:	2a00      	cmp	r2, #0
 800b7ca:	dd03      	ble.n	800b7d4 <_dtoa_r+0xae4>
 800b7cc:	2b39      	cmp	r3, #57	; 0x39
 800b7ce:	d0ee      	beq.n	800b7ae <_dtoa_r+0xabe>
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	e7c7      	b.n	800b764 <_dtoa_r+0xa74>
 800b7d4:	9a08      	ldr	r2, [sp, #32]
 800b7d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b7d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b7dc:	428a      	cmp	r2, r1
 800b7de:	d02a      	beq.n	800b836 <_dtoa_r+0xb46>
 800b7e0:	4659      	mov	r1, fp
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	220a      	movs	r2, #10
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f000 fc64 	bl	800c0b4 <__multadd>
 800b7ec:	45b0      	cmp	r8, r6
 800b7ee:	4683      	mov	fp, r0
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	f04f 020a 	mov.w	r2, #10
 800b7f8:	4641      	mov	r1, r8
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	d107      	bne.n	800b80e <_dtoa_r+0xb1e>
 800b7fe:	f000 fc59 	bl	800c0b4 <__multadd>
 800b802:	4680      	mov	r8, r0
 800b804:	4606      	mov	r6, r0
 800b806:	9b08      	ldr	r3, [sp, #32]
 800b808:	3301      	adds	r3, #1
 800b80a:	9308      	str	r3, [sp, #32]
 800b80c:	e775      	b.n	800b6fa <_dtoa_r+0xa0a>
 800b80e:	f000 fc51 	bl	800c0b4 <__multadd>
 800b812:	4631      	mov	r1, r6
 800b814:	4680      	mov	r8, r0
 800b816:	2300      	movs	r3, #0
 800b818:	220a      	movs	r2, #10
 800b81a:	4628      	mov	r0, r5
 800b81c:	f000 fc4a 	bl	800c0b4 <__multadd>
 800b820:	4606      	mov	r6, r0
 800b822:	e7f0      	b.n	800b806 <_dtoa_r+0xb16>
 800b824:	f1b9 0f00 	cmp.w	r9, #0
 800b828:	bfcc      	ite	gt
 800b82a:	464f      	movgt	r7, r9
 800b82c:	2701      	movle	r7, #1
 800b82e:	f04f 0800 	mov.w	r8, #0
 800b832:	9a03      	ldr	r2, [sp, #12]
 800b834:	4417      	add	r7, r2
 800b836:	4659      	mov	r1, fp
 800b838:	2201      	movs	r2, #1
 800b83a:	4628      	mov	r0, r5
 800b83c:	9308      	str	r3, [sp, #32]
 800b83e:	f000 fe2f 	bl	800c4a0 <__lshift>
 800b842:	4621      	mov	r1, r4
 800b844:	4683      	mov	fp, r0
 800b846:	f000 fe9b 	bl	800c580 <__mcmp>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	dcb2      	bgt.n	800b7b4 <_dtoa_r+0xac4>
 800b84e:	d102      	bne.n	800b856 <_dtoa_r+0xb66>
 800b850:	9b08      	ldr	r3, [sp, #32]
 800b852:	07db      	lsls	r3, r3, #31
 800b854:	d4ae      	bmi.n	800b7b4 <_dtoa_r+0xac4>
 800b856:	463b      	mov	r3, r7
 800b858:	461f      	mov	r7, r3
 800b85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b85e:	2a30      	cmp	r2, #48	; 0x30
 800b860:	d0fa      	beq.n	800b858 <_dtoa_r+0xb68>
 800b862:	e6f9      	b.n	800b658 <_dtoa_r+0x968>
 800b864:	9a03      	ldr	r2, [sp, #12]
 800b866:	429a      	cmp	r2, r3
 800b868:	d1a5      	bne.n	800b7b6 <_dtoa_r+0xac6>
 800b86a:	2331      	movs	r3, #49	; 0x31
 800b86c:	f10a 0a01 	add.w	sl, sl, #1
 800b870:	e779      	b.n	800b766 <_dtoa_r+0xa76>
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <_dtoa_r+0xbd4>)
 800b874:	f7ff baa8 	b.w	800adc8 <_dtoa_r+0xd8>
 800b878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f47f aa81 	bne.w	800ad82 <_dtoa_r+0x92>
 800b880:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <_dtoa_r+0xbd8>)
 800b882:	f7ff baa1 	b.w	800adc8 <_dtoa_r+0xd8>
 800b886:	f1b9 0f00 	cmp.w	r9, #0
 800b88a:	dc03      	bgt.n	800b894 <_dtoa_r+0xba4>
 800b88c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b88e:	2b02      	cmp	r3, #2
 800b890:	f73f aecb 	bgt.w	800b62a <_dtoa_r+0x93a>
 800b894:	9f03      	ldr	r7, [sp, #12]
 800b896:	4621      	mov	r1, r4
 800b898:	4658      	mov	r0, fp
 800b89a:	f7ff f99d 	bl	800abd8 <quorem>
 800b89e:	9a03      	ldr	r2, [sp, #12]
 800b8a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b8a4:	f807 3b01 	strb.w	r3, [r7], #1
 800b8a8:	1aba      	subs	r2, r7, r2
 800b8aa:	4591      	cmp	r9, r2
 800b8ac:	ddba      	ble.n	800b824 <_dtoa_r+0xb34>
 800b8ae:	4659      	mov	r1, fp
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	220a      	movs	r2, #10
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f000 fbfd 	bl	800c0b4 <__multadd>
 800b8ba:	4683      	mov	fp, r0
 800b8bc:	e7eb      	b.n	800b896 <_dtoa_r+0xba6>
 800b8be:	bf00      	nop
 800b8c0:	0800e188 	.word	0x0800e188
 800b8c4:	0800df88 	.word	0x0800df88
 800b8c8:	0800e109 	.word	0x0800e109

0800b8cc <rshift>:
 800b8cc:	6903      	ldr	r3, [r0, #16]
 800b8ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b8d6:	f100 0414 	add.w	r4, r0, #20
 800b8da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8de:	dd46      	ble.n	800b96e <rshift+0xa2>
 800b8e0:	f011 011f 	ands.w	r1, r1, #31
 800b8e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8ec:	d10c      	bne.n	800b908 <rshift+0x3c>
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f100 0710 	add.w	r7, r0, #16
 800b8f4:	42b1      	cmp	r1, r6
 800b8f6:	d335      	bcc.n	800b964 <rshift+0x98>
 800b8f8:	1a9b      	subs	r3, r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	1eea      	subs	r2, r5, #3
 800b8fe:	4296      	cmp	r6, r2
 800b900:	bf38      	it	cc
 800b902:	2300      	movcc	r3, #0
 800b904:	4423      	add	r3, r4
 800b906:	e015      	b.n	800b934 <rshift+0x68>
 800b908:	46a1      	mov	r9, r4
 800b90a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b90e:	f1c1 0820 	rsb	r8, r1, #32
 800b912:	40cf      	lsrs	r7, r1
 800b914:	f105 0e04 	add.w	lr, r5, #4
 800b918:	4576      	cmp	r6, lr
 800b91a:	46f4      	mov	ip, lr
 800b91c:	d816      	bhi.n	800b94c <rshift+0x80>
 800b91e:	1a9a      	subs	r2, r3, r2
 800b920:	0092      	lsls	r2, r2, #2
 800b922:	3a04      	subs	r2, #4
 800b924:	3501      	adds	r5, #1
 800b926:	42ae      	cmp	r6, r5
 800b928:	bf38      	it	cc
 800b92a:	2200      	movcc	r2, #0
 800b92c:	18a3      	adds	r3, r4, r2
 800b92e:	50a7      	str	r7, [r4, r2]
 800b930:	b107      	cbz	r7, 800b934 <rshift+0x68>
 800b932:	3304      	adds	r3, #4
 800b934:	42a3      	cmp	r3, r4
 800b936:	eba3 0204 	sub.w	r2, r3, r4
 800b93a:	bf08      	it	eq
 800b93c:	2300      	moveq	r3, #0
 800b93e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b942:	6102      	str	r2, [r0, #16]
 800b944:	bf08      	it	eq
 800b946:	6143      	streq	r3, [r0, #20]
 800b948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b94c:	f8dc c000 	ldr.w	ip, [ip]
 800b950:	fa0c fc08 	lsl.w	ip, ip, r8
 800b954:	ea4c 0707 	orr.w	r7, ip, r7
 800b958:	f849 7b04 	str.w	r7, [r9], #4
 800b95c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b960:	40cf      	lsrs	r7, r1
 800b962:	e7d9      	b.n	800b918 <rshift+0x4c>
 800b964:	f851 cb04 	ldr.w	ip, [r1], #4
 800b968:	f847 cf04 	str.w	ip, [r7, #4]!
 800b96c:	e7c2      	b.n	800b8f4 <rshift+0x28>
 800b96e:	4623      	mov	r3, r4
 800b970:	e7e0      	b.n	800b934 <rshift+0x68>

0800b972 <__hexdig_fun>:
 800b972:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b976:	2b09      	cmp	r3, #9
 800b978:	d802      	bhi.n	800b980 <__hexdig_fun+0xe>
 800b97a:	3820      	subs	r0, #32
 800b97c:	b2c0      	uxtb	r0, r0
 800b97e:	4770      	bx	lr
 800b980:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b984:	2b05      	cmp	r3, #5
 800b986:	d801      	bhi.n	800b98c <__hexdig_fun+0x1a>
 800b988:	3847      	subs	r0, #71	; 0x47
 800b98a:	e7f7      	b.n	800b97c <__hexdig_fun+0xa>
 800b98c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b990:	2b05      	cmp	r3, #5
 800b992:	d801      	bhi.n	800b998 <__hexdig_fun+0x26>
 800b994:	3827      	subs	r0, #39	; 0x27
 800b996:	e7f1      	b.n	800b97c <__hexdig_fun+0xa>
 800b998:	2000      	movs	r0, #0
 800b99a:	4770      	bx	lr

0800b99c <__gethex>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	b08b      	sub	sp, #44	; 0x2c
 800b9a2:	9305      	str	r3, [sp, #20]
 800b9a4:	4bb2      	ldr	r3, [pc, #712]	; (800bc70 <__gethex+0x2d4>)
 800b9a6:	9002      	str	r0, [sp, #8]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	468b      	mov	fp, r1
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	4690      	mov	r8, r2
 800b9b0:	9303      	str	r3, [sp, #12]
 800b9b2:	f7f4 fbcd 	bl	8000150 <strlen>
 800b9b6:	4682      	mov	sl, r0
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	f8db 2000 	ldr.w	r2, [fp]
 800b9be:	4403      	add	r3, r0
 800b9c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b9c4:	9306      	str	r3, [sp, #24]
 800b9c6:	1c93      	adds	r3, r2, #2
 800b9c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b9cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b9d0:	32fe      	adds	r2, #254	; 0xfe
 800b9d2:	18d1      	adds	r1, r2, r3
 800b9d4:	461f      	mov	r7, r3
 800b9d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b9da:	9101      	str	r1, [sp, #4]
 800b9dc:	2830      	cmp	r0, #48	; 0x30
 800b9de:	d0f8      	beq.n	800b9d2 <__gethex+0x36>
 800b9e0:	f7ff ffc7 	bl	800b972 <__hexdig_fun>
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d13a      	bne.n	800ba60 <__gethex+0xc4>
 800b9ea:	4652      	mov	r2, sl
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	9903      	ldr	r1, [sp, #12]
 800b9f0:	f001 fa12 	bl	800ce18 <strncmp>
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d166      	bne.n	800bac8 <__gethex+0x12c>
 800b9fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b9fe:	eb07 060a 	add.w	r6, r7, sl
 800ba02:	f7ff ffb6 	bl	800b972 <__hexdig_fun>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d060      	beq.n	800bacc <__gethex+0x130>
 800ba0a:	4633      	mov	r3, r6
 800ba0c:	7818      	ldrb	r0, [r3, #0]
 800ba0e:	461f      	mov	r7, r3
 800ba10:	2830      	cmp	r0, #48	; 0x30
 800ba12:	f103 0301 	add.w	r3, r3, #1
 800ba16:	d0f9      	beq.n	800ba0c <__gethex+0x70>
 800ba18:	f7ff ffab 	bl	800b972 <__hexdig_fun>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	fab0 f480 	clz	r4, r0
 800ba22:	4635      	mov	r5, r6
 800ba24:	0964      	lsrs	r4, r4, #5
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	463a      	mov	r2, r7
 800ba2a:	4616      	mov	r6, r2
 800ba2c:	7830      	ldrb	r0, [r6, #0]
 800ba2e:	3201      	adds	r2, #1
 800ba30:	f7ff ff9f 	bl	800b972 <__hexdig_fun>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1f8      	bne.n	800ba2a <__gethex+0x8e>
 800ba38:	4652      	mov	r2, sl
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	9903      	ldr	r1, [sp, #12]
 800ba3e:	f001 f9eb 	bl	800ce18 <strncmp>
 800ba42:	b980      	cbnz	r0, 800ba66 <__gethex+0xca>
 800ba44:	b94d      	cbnz	r5, 800ba5a <__gethex+0xbe>
 800ba46:	eb06 050a 	add.w	r5, r6, sl
 800ba4a:	462a      	mov	r2, r5
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	7830      	ldrb	r0, [r6, #0]
 800ba50:	3201      	adds	r2, #1
 800ba52:	f7ff ff8e 	bl	800b972 <__hexdig_fun>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d1f8      	bne.n	800ba4c <__gethex+0xb0>
 800ba5a:	1bad      	subs	r5, r5, r6
 800ba5c:	00ad      	lsls	r5, r5, #2
 800ba5e:	e004      	b.n	800ba6a <__gethex+0xce>
 800ba60:	2400      	movs	r4, #0
 800ba62:	4625      	mov	r5, r4
 800ba64:	e7e0      	b.n	800ba28 <__gethex+0x8c>
 800ba66:	2d00      	cmp	r5, #0
 800ba68:	d1f7      	bne.n	800ba5a <__gethex+0xbe>
 800ba6a:	7833      	ldrb	r3, [r6, #0]
 800ba6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba70:	2b50      	cmp	r3, #80	; 0x50
 800ba72:	d139      	bne.n	800bae8 <__gethex+0x14c>
 800ba74:	7873      	ldrb	r3, [r6, #1]
 800ba76:	2b2b      	cmp	r3, #43	; 0x2b
 800ba78:	d02a      	beq.n	800bad0 <__gethex+0x134>
 800ba7a:	2b2d      	cmp	r3, #45	; 0x2d
 800ba7c:	d02c      	beq.n	800bad8 <__gethex+0x13c>
 800ba7e:	f04f 0900 	mov.w	r9, #0
 800ba82:	1c71      	adds	r1, r6, #1
 800ba84:	7808      	ldrb	r0, [r1, #0]
 800ba86:	f7ff ff74 	bl	800b972 <__hexdig_fun>
 800ba8a:	1e43      	subs	r3, r0, #1
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b18      	cmp	r3, #24
 800ba90:	d82a      	bhi.n	800bae8 <__gethex+0x14c>
 800ba92:	f1a0 0210 	sub.w	r2, r0, #16
 800ba96:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba9a:	f7ff ff6a 	bl	800b972 <__hexdig_fun>
 800ba9e:	1e43      	subs	r3, r0, #1
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b18      	cmp	r3, #24
 800baa4:	d91b      	bls.n	800bade <__gethex+0x142>
 800baa6:	f1b9 0f00 	cmp.w	r9, #0
 800baaa:	d000      	beq.n	800baae <__gethex+0x112>
 800baac:	4252      	negs	r2, r2
 800baae:	4415      	add	r5, r2
 800bab0:	f8cb 1000 	str.w	r1, [fp]
 800bab4:	b1d4      	cbz	r4, 800baec <__gethex+0x150>
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bf14      	ite	ne
 800babc:	2700      	movne	r7, #0
 800babe:	2706      	moveq	r7, #6
 800bac0:	4638      	mov	r0, r7
 800bac2:	b00b      	add	sp, #44	; 0x2c
 800bac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac8:	463e      	mov	r6, r7
 800baca:	4625      	mov	r5, r4
 800bacc:	2401      	movs	r4, #1
 800bace:	e7cc      	b.n	800ba6a <__gethex+0xce>
 800bad0:	f04f 0900 	mov.w	r9, #0
 800bad4:	1cb1      	adds	r1, r6, #2
 800bad6:	e7d5      	b.n	800ba84 <__gethex+0xe8>
 800bad8:	f04f 0901 	mov.w	r9, #1
 800badc:	e7fa      	b.n	800bad4 <__gethex+0x138>
 800bade:	230a      	movs	r3, #10
 800bae0:	fb03 0202 	mla	r2, r3, r2, r0
 800bae4:	3a10      	subs	r2, #16
 800bae6:	e7d6      	b.n	800ba96 <__gethex+0xfa>
 800bae8:	4631      	mov	r1, r6
 800baea:	e7e1      	b.n	800bab0 <__gethex+0x114>
 800baec:	4621      	mov	r1, r4
 800baee:	1bf3      	subs	r3, r6, r7
 800baf0:	3b01      	subs	r3, #1
 800baf2:	2b07      	cmp	r3, #7
 800baf4:	dc0a      	bgt.n	800bb0c <__gethex+0x170>
 800baf6:	9802      	ldr	r0, [sp, #8]
 800baf8:	f000 fa7a 	bl	800bff0 <_Balloc>
 800bafc:	4604      	mov	r4, r0
 800bafe:	b940      	cbnz	r0, 800bb12 <__gethex+0x176>
 800bb00:	4602      	mov	r2, r0
 800bb02:	21de      	movs	r1, #222	; 0xde
 800bb04:	4b5b      	ldr	r3, [pc, #364]	; (800bc74 <__gethex+0x2d8>)
 800bb06:	485c      	ldr	r0, [pc, #368]	; (800bc78 <__gethex+0x2dc>)
 800bb08:	f001 f9a8 	bl	800ce5c <__assert_func>
 800bb0c:	3101      	adds	r1, #1
 800bb0e:	105b      	asrs	r3, r3, #1
 800bb10:	e7ef      	b.n	800baf2 <__gethex+0x156>
 800bb12:	f04f 0b00 	mov.w	fp, #0
 800bb16:	f100 0914 	add.w	r9, r0, #20
 800bb1a:	f1ca 0301 	rsb	r3, sl, #1
 800bb1e:	f8cd 9010 	str.w	r9, [sp, #16]
 800bb22:	f8cd b004 	str.w	fp, [sp, #4]
 800bb26:	9308      	str	r3, [sp, #32]
 800bb28:	42b7      	cmp	r7, r6
 800bb2a:	d33f      	bcc.n	800bbac <__gethex+0x210>
 800bb2c:	9f04      	ldr	r7, [sp, #16]
 800bb2e:	9b01      	ldr	r3, [sp, #4]
 800bb30:	f847 3b04 	str.w	r3, [r7], #4
 800bb34:	eba7 0709 	sub.w	r7, r7, r9
 800bb38:	10bf      	asrs	r7, r7, #2
 800bb3a:	6127      	str	r7, [r4, #16]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 fb49 	bl	800c1d4 <__hi0bits>
 800bb42:	017f      	lsls	r7, r7, #5
 800bb44:	f8d8 6000 	ldr.w	r6, [r8]
 800bb48:	1a3f      	subs	r7, r7, r0
 800bb4a:	42b7      	cmp	r7, r6
 800bb4c:	dd62      	ble.n	800bc14 <__gethex+0x278>
 800bb4e:	1bbf      	subs	r7, r7, r6
 800bb50:	4639      	mov	r1, r7
 800bb52:	4620      	mov	r0, r4
 800bb54:	f000 fee3 	bl	800c91e <__any_on>
 800bb58:	4682      	mov	sl, r0
 800bb5a:	b1a8      	cbz	r0, 800bb88 <__gethex+0x1ec>
 800bb5c:	f04f 0a01 	mov.w	sl, #1
 800bb60:	1e7b      	subs	r3, r7, #1
 800bb62:	1159      	asrs	r1, r3, #5
 800bb64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bb68:	f003 021f 	and.w	r2, r3, #31
 800bb6c:	fa0a f202 	lsl.w	r2, sl, r2
 800bb70:	420a      	tst	r2, r1
 800bb72:	d009      	beq.n	800bb88 <__gethex+0x1ec>
 800bb74:	4553      	cmp	r3, sl
 800bb76:	dd05      	ble.n	800bb84 <__gethex+0x1e8>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	1eb9      	subs	r1, r7, #2
 800bb7c:	f000 fecf 	bl	800c91e <__any_on>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d144      	bne.n	800bc0e <__gethex+0x272>
 800bb84:	f04f 0a02 	mov.w	sl, #2
 800bb88:	4639      	mov	r1, r7
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7ff fe9e 	bl	800b8cc <rshift>
 800bb90:	443d      	add	r5, r7
 800bb92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb96:	42ab      	cmp	r3, r5
 800bb98:	da4a      	bge.n	800bc30 <__gethex+0x294>
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	9802      	ldr	r0, [sp, #8]
 800bb9e:	f000 fa67 	bl	800c070 <_Bfree>
 800bba2:	2300      	movs	r3, #0
 800bba4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bba6:	27a3      	movs	r7, #163	; 0xa3
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	e789      	b.n	800bac0 <__gethex+0x124>
 800bbac:	1e73      	subs	r3, r6, #1
 800bbae:	9a06      	ldr	r2, [sp, #24]
 800bbb0:	9307      	str	r3, [sp, #28]
 800bbb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d019      	beq.n	800bbee <__gethex+0x252>
 800bbba:	f1bb 0f20 	cmp.w	fp, #32
 800bbbe:	d107      	bne.n	800bbd0 <__gethex+0x234>
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	9a01      	ldr	r2, [sp, #4]
 800bbc4:	f843 2b04 	str.w	r2, [r3], #4
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	469b      	mov	fp, r3
 800bbce:	9301      	str	r3, [sp, #4]
 800bbd0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bbd4:	f7ff fecd 	bl	800b972 <__hexdig_fun>
 800bbd8:	9b01      	ldr	r3, [sp, #4]
 800bbda:	f000 000f 	and.w	r0, r0, #15
 800bbde:	fa00 f00b 	lsl.w	r0, r0, fp
 800bbe2:	4303      	orrs	r3, r0
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	f10b 0b04 	add.w	fp, fp, #4
 800bbea:	9b07      	ldr	r3, [sp, #28]
 800bbec:	e00d      	b.n	800bc0a <__gethex+0x26e>
 800bbee:	9a08      	ldr	r2, [sp, #32]
 800bbf0:	1e73      	subs	r3, r6, #1
 800bbf2:	4413      	add	r3, r2
 800bbf4:	42bb      	cmp	r3, r7
 800bbf6:	d3e0      	bcc.n	800bbba <__gethex+0x21e>
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	4652      	mov	r2, sl
 800bbfc:	9903      	ldr	r1, [sp, #12]
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	f001 f90a 	bl	800ce18 <strncmp>
 800bc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d1d7      	bne.n	800bbba <__gethex+0x21e>
 800bc0a:	461e      	mov	r6, r3
 800bc0c:	e78c      	b.n	800bb28 <__gethex+0x18c>
 800bc0e:	f04f 0a03 	mov.w	sl, #3
 800bc12:	e7b9      	b.n	800bb88 <__gethex+0x1ec>
 800bc14:	da09      	bge.n	800bc2a <__gethex+0x28e>
 800bc16:	1bf7      	subs	r7, r6, r7
 800bc18:	4621      	mov	r1, r4
 800bc1a:	463a      	mov	r2, r7
 800bc1c:	9802      	ldr	r0, [sp, #8]
 800bc1e:	f000 fc3f 	bl	800c4a0 <__lshift>
 800bc22:	4604      	mov	r4, r0
 800bc24:	1bed      	subs	r5, r5, r7
 800bc26:	f100 0914 	add.w	r9, r0, #20
 800bc2a:	f04f 0a00 	mov.w	sl, #0
 800bc2e:	e7b0      	b.n	800bb92 <__gethex+0x1f6>
 800bc30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc34:	42a8      	cmp	r0, r5
 800bc36:	dd72      	ble.n	800bd1e <__gethex+0x382>
 800bc38:	1b45      	subs	r5, r0, r5
 800bc3a:	42ae      	cmp	r6, r5
 800bc3c:	dc35      	bgt.n	800bcaa <__gethex+0x30e>
 800bc3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d029      	beq.n	800bc9a <__gethex+0x2fe>
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d02b      	beq.n	800bca2 <__gethex+0x306>
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d11c      	bne.n	800bc88 <__gethex+0x2ec>
 800bc4e:	42ae      	cmp	r6, r5
 800bc50:	d11a      	bne.n	800bc88 <__gethex+0x2ec>
 800bc52:	2e01      	cmp	r6, #1
 800bc54:	d112      	bne.n	800bc7c <__gethex+0x2e0>
 800bc56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc5a:	9a05      	ldr	r2, [sp, #20]
 800bc5c:	2762      	movs	r7, #98	; 0x62
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	2301      	movs	r3, #1
 800bc62:	6123      	str	r3, [r4, #16]
 800bc64:	f8c9 3000 	str.w	r3, [r9]
 800bc68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc6a:	601c      	str	r4, [r3, #0]
 800bc6c:	e728      	b.n	800bac0 <__gethex+0x124>
 800bc6e:	bf00      	nop
 800bc70:	0800e200 	.word	0x0800e200
 800bc74:	0800e188 	.word	0x0800e188
 800bc78:	0800e199 	.word	0x0800e199
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	1e71      	subs	r1, r6, #1
 800bc80:	f000 fe4d 	bl	800c91e <__any_on>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d1e6      	bne.n	800bc56 <__gethex+0x2ba>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	9802      	ldr	r0, [sp, #8]
 800bc8c:	f000 f9f0 	bl	800c070 <_Bfree>
 800bc90:	2300      	movs	r3, #0
 800bc92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc94:	2750      	movs	r7, #80	; 0x50
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	e712      	b.n	800bac0 <__gethex+0x124>
 800bc9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1f3      	bne.n	800bc88 <__gethex+0x2ec>
 800bca0:	e7d9      	b.n	800bc56 <__gethex+0x2ba>
 800bca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1d6      	bne.n	800bc56 <__gethex+0x2ba>
 800bca8:	e7ee      	b.n	800bc88 <__gethex+0x2ec>
 800bcaa:	1e6f      	subs	r7, r5, #1
 800bcac:	f1ba 0f00 	cmp.w	sl, #0
 800bcb0:	d132      	bne.n	800bd18 <__gethex+0x37c>
 800bcb2:	b127      	cbz	r7, 800bcbe <__gethex+0x322>
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f000 fe31 	bl	800c91e <__any_on>
 800bcbc:	4682      	mov	sl, r0
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	117b      	asrs	r3, r7, #5
 800bcc2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bcc6:	f007 071f 	and.w	r7, r7, #31
 800bcca:	fa01 f707 	lsl.w	r7, r1, r7
 800bcce:	421f      	tst	r7, r3
 800bcd0:	f04f 0702 	mov.w	r7, #2
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	bf18      	it	ne
 800bcda:	f04a 0a02 	orrne.w	sl, sl, #2
 800bcde:	1b76      	subs	r6, r6, r5
 800bce0:	f7ff fdf4 	bl	800b8cc <rshift>
 800bce4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bce8:	f1ba 0f00 	cmp.w	sl, #0
 800bcec:	d048      	beq.n	800bd80 <__gethex+0x3e4>
 800bcee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d015      	beq.n	800bd22 <__gethex+0x386>
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d017      	beq.n	800bd2a <__gethex+0x38e>
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d109      	bne.n	800bd12 <__gethex+0x376>
 800bcfe:	f01a 0f02 	tst.w	sl, #2
 800bd02:	d006      	beq.n	800bd12 <__gethex+0x376>
 800bd04:	f8d9 0000 	ldr.w	r0, [r9]
 800bd08:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd0c:	f01a 0f01 	tst.w	sl, #1
 800bd10:	d10e      	bne.n	800bd30 <__gethex+0x394>
 800bd12:	f047 0710 	orr.w	r7, r7, #16
 800bd16:	e033      	b.n	800bd80 <__gethex+0x3e4>
 800bd18:	f04f 0a01 	mov.w	sl, #1
 800bd1c:	e7cf      	b.n	800bcbe <__gethex+0x322>
 800bd1e:	2701      	movs	r7, #1
 800bd20:	e7e2      	b.n	800bce8 <__gethex+0x34c>
 800bd22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd24:	f1c3 0301 	rsb	r3, r3, #1
 800bd28:	9315      	str	r3, [sp, #84]	; 0x54
 800bd2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0f0      	beq.n	800bd12 <__gethex+0x376>
 800bd30:	f04f 0c00 	mov.w	ip, #0
 800bd34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd38:	f104 0314 	add.w	r3, r4, #20
 800bd3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bd4e:	d01c      	beq.n	800bd8a <__gethex+0x3ee>
 800bd50:	3201      	adds	r2, #1
 800bd52:	6002      	str	r2, [r0, #0]
 800bd54:	2f02      	cmp	r7, #2
 800bd56:	f104 0314 	add.w	r3, r4, #20
 800bd5a:	d13d      	bne.n	800bdd8 <__gethex+0x43c>
 800bd5c:	f8d8 2000 	ldr.w	r2, [r8]
 800bd60:	3a01      	subs	r2, #1
 800bd62:	42b2      	cmp	r2, r6
 800bd64:	d10a      	bne.n	800bd7c <__gethex+0x3e0>
 800bd66:	2201      	movs	r2, #1
 800bd68:	1171      	asrs	r1, r6, #5
 800bd6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd6e:	f006 061f 	and.w	r6, r6, #31
 800bd72:	fa02 f606 	lsl.w	r6, r2, r6
 800bd76:	421e      	tst	r6, r3
 800bd78:	bf18      	it	ne
 800bd7a:	4617      	movne	r7, r2
 800bd7c:	f047 0720 	orr.w	r7, r7, #32
 800bd80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd82:	601c      	str	r4, [r3, #0]
 800bd84:	9b05      	ldr	r3, [sp, #20]
 800bd86:	601d      	str	r5, [r3, #0]
 800bd88:	e69a      	b.n	800bac0 <__gethex+0x124>
 800bd8a:	4299      	cmp	r1, r3
 800bd8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bd90:	d8d8      	bhi.n	800bd44 <__gethex+0x3a8>
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	459b      	cmp	fp, r3
 800bd96:	db17      	blt.n	800bdc8 <__gethex+0x42c>
 800bd98:	6861      	ldr	r1, [r4, #4]
 800bd9a:	9802      	ldr	r0, [sp, #8]
 800bd9c:	3101      	adds	r1, #1
 800bd9e:	f000 f927 	bl	800bff0 <_Balloc>
 800bda2:	4681      	mov	r9, r0
 800bda4:	b918      	cbnz	r0, 800bdae <__gethex+0x412>
 800bda6:	4602      	mov	r2, r0
 800bda8:	2184      	movs	r1, #132	; 0x84
 800bdaa:	4b19      	ldr	r3, [pc, #100]	; (800be10 <__gethex+0x474>)
 800bdac:	e6ab      	b.n	800bb06 <__gethex+0x16a>
 800bdae:	6922      	ldr	r2, [r4, #16]
 800bdb0:	f104 010c 	add.w	r1, r4, #12
 800bdb4:	3202      	adds	r2, #2
 800bdb6:	0092      	lsls	r2, r2, #2
 800bdb8:	300c      	adds	r0, #12
 800bdba:	f7fd f98d 	bl	80090d8 <memcpy>
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	9802      	ldr	r0, [sp, #8]
 800bdc2:	f000 f955 	bl	800c070 <_Bfree>
 800bdc6:	464c      	mov	r4, r9
 800bdc8:	6923      	ldr	r3, [r4, #16]
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	6122      	str	r2, [r4, #16]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdd4:	615a      	str	r2, [r3, #20]
 800bdd6:	e7bd      	b.n	800bd54 <__gethex+0x3b8>
 800bdd8:	6922      	ldr	r2, [r4, #16]
 800bdda:	455a      	cmp	r2, fp
 800bddc:	dd0b      	ble.n	800bdf6 <__gethex+0x45a>
 800bdde:	2101      	movs	r1, #1
 800bde0:	4620      	mov	r0, r4
 800bde2:	f7ff fd73 	bl	800b8cc <rshift>
 800bde6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdea:	3501      	adds	r5, #1
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	f6ff aed4 	blt.w	800bb9a <__gethex+0x1fe>
 800bdf2:	2701      	movs	r7, #1
 800bdf4:	e7c2      	b.n	800bd7c <__gethex+0x3e0>
 800bdf6:	f016 061f 	ands.w	r6, r6, #31
 800bdfa:	d0fa      	beq.n	800bdf2 <__gethex+0x456>
 800bdfc:	4453      	add	r3, sl
 800bdfe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be02:	f000 f9e7 	bl	800c1d4 <__hi0bits>
 800be06:	f1c6 0620 	rsb	r6, r6, #32
 800be0a:	42b0      	cmp	r0, r6
 800be0c:	dbe7      	blt.n	800bdde <__gethex+0x442>
 800be0e:	e7f0      	b.n	800bdf2 <__gethex+0x456>
 800be10:	0800e188 	.word	0x0800e188

0800be14 <L_shift>:
 800be14:	f1c2 0208 	rsb	r2, r2, #8
 800be18:	0092      	lsls	r2, r2, #2
 800be1a:	b570      	push	{r4, r5, r6, lr}
 800be1c:	f1c2 0620 	rsb	r6, r2, #32
 800be20:	6843      	ldr	r3, [r0, #4]
 800be22:	6804      	ldr	r4, [r0, #0]
 800be24:	fa03 f506 	lsl.w	r5, r3, r6
 800be28:	432c      	orrs	r4, r5
 800be2a:	40d3      	lsrs	r3, r2
 800be2c:	6004      	str	r4, [r0, #0]
 800be2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800be32:	4288      	cmp	r0, r1
 800be34:	d3f4      	bcc.n	800be20 <L_shift+0xc>
 800be36:	bd70      	pop	{r4, r5, r6, pc}

0800be38 <__match>:
 800be38:	b530      	push	{r4, r5, lr}
 800be3a:	6803      	ldr	r3, [r0, #0]
 800be3c:	3301      	adds	r3, #1
 800be3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be42:	b914      	cbnz	r4, 800be4a <__match+0x12>
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	2001      	movs	r0, #1
 800be48:	bd30      	pop	{r4, r5, pc}
 800be4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be52:	2d19      	cmp	r5, #25
 800be54:	bf98      	it	ls
 800be56:	3220      	addls	r2, #32
 800be58:	42a2      	cmp	r2, r4
 800be5a:	d0f0      	beq.n	800be3e <__match+0x6>
 800be5c:	2000      	movs	r0, #0
 800be5e:	e7f3      	b.n	800be48 <__match+0x10>

0800be60 <__hexnan>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	2500      	movs	r5, #0
 800be66:	680b      	ldr	r3, [r1, #0]
 800be68:	4682      	mov	sl, r0
 800be6a:	115e      	asrs	r6, r3, #5
 800be6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be70:	f013 031f 	ands.w	r3, r3, #31
 800be74:	bf18      	it	ne
 800be76:	3604      	addne	r6, #4
 800be78:	1f37      	subs	r7, r6, #4
 800be7a:	46b9      	mov	r9, r7
 800be7c:	463c      	mov	r4, r7
 800be7e:	46ab      	mov	fp, r5
 800be80:	b087      	sub	sp, #28
 800be82:	4690      	mov	r8, r2
 800be84:	6802      	ldr	r2, [r0, #0]
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	f846 5c04 	str.w	r5, [r6, #-4]
 800be8c:	9502      	str	r5, [sp, #8]
 800be8e:	7851      	ldrb	r1, [r2, #1]
 800be90:	1c53      	adds	r3, r2, #1
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	b341      	cbz	r1, 800bee8 <__hexnan+0x88>
 800be96:	4608      	mov	r0, r1
 800be98:	9205      	str	r2, [sp, #20]
 800be9a:	9104      	str	r1, [sp, #16]
 800be9c:	f7ff fd69 	bl	800b972 <__hexdig_fun>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d14f      	bne.n	800bf44 <__hexnan+0xe4>
 800bea4:	9904      	ldr	r1, [sp, #16]
 800bea6:	9a05      	ldr	r2, [sp, #20]
 800bea8:	2920      	cmp	r1, #32
 800beaa:	d818      	bhi.n	800bede <__hexnan+0x7e>
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	459b      	cmp	fp, r3
 800beb0:	dd13      	ble.n	800beda <__hexnan+0x7a>
 800beb2:	454c      	cmp	r4, r9
 800beb4:	d206      	bcs.n	800bec4 <__hexnan+0x64>
 800beb6:	2d07      	cmp	r5, #7
 800beb8:	dc04      	bgt.n	800bec4 <__hexnan+0x64>
 800beba:	462a      	mov	r2, r5
 800bebc:	4649      	mov	r1, r9
 800bebe:	4620      	mov	r0, r4
 800bec0:	f7ff ffa8 	bl	800be14 <L_shift>
 800bec4:	4544      	cmp	r4, r8
 800bec6:	d950      	bls.n	800bf6a <__hexnan+0x10a>
 800bec8:	2300      	movs	r3, #0
 800beca:	f1a4 0904 	sub.w	r9, r4, #4
 800bece:	f844 3c04 	str.w	r3, [r4, #-4]
 800bed2:	461d      	mov	r5, r3
 800bed4:	464c      	mov	r4, r9
 800bed6:	f8cd b008 	str.w	fp, [sp, #8]
 800beda:	9a03      	ldr	r2, [sp, #12]
 800bedc:	e7d7      	b.n	800be8e <__hexnan+0x2e>
 800bede:	2929      	cmp	r1, #41	; 0x29
 800bee0:	d156      	bne.n	800bf90 <__hexnan+0x130>
 800bee2:	3202      	adds	r2, #2
 800bee4:	f8ca 2000 	str.w	r2, [sl]
 800bee8:	f1bb 0f00 	cmp.w	fp, #0
 800beec:	d050      	beq.n	800bf90 <__hexnan+0x130>
 800beee:	454c      	cmp	r4, r9
 800bef0:	d206      	bcs.n	800bf00 <__hexnan+0xa0>
 800bef2:	2d07      	cmp	r5, #7
 800bef4:	dc04      	bgt.n	800bf00 <__hexnan+0xa0>
 800bef6:	462a      	mov	r2, r5
 800bef8:	4649      	mov	r1, r9
 800befa:	4620      	mov	r0, r4
 800befc:	f7ff ff8a 	bl	800be14 <L_shift>
 800bf00:	4544      	cmp	r4, r8
 800bf02:	d934      	bls.n	800bf6e <__hexnan+0x10e>
 800bf04:	4623      	mov	r3, r4
 800bf06:	f1a8 0204 	sub.w	r2, r8, #4
 800bf0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf0e:	429f      	cmp	r7, r3
 800bf10:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf14:	d2f9      	bcs.n	800bf0a <__hexnan+0xaa>
 800bf16:	1b3b      	subs	r3, r7, r4
 800bf18:	f023 0303 	bic.w	r3, r3, #3
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	3401      	adds	r4, #1
 800bf20:	3e03      	subs	r6, #3
 800bf22:	42b4      	cmp	r4, r6
 800bf24:	bf88      	it	hi
 800bf26:	2304      	movhi	r3, #4
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4443      	add	r3, r8
 800bf2c:	f843 2b04 	str.w	r2, [r3], #4
 800bf30:	429f      	cmp	r7, r3
 800bf32:	d2fb      	bcs.n	800bf2c <__hexnan+0xcc>
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	b91b      	cbnz	r3, 800bf40 <__hexnan+0xe0>
 800bf38:	4547      	cmp	r7, r8
 800bf3a:	d127      	bne.n	800bf8c <__hexnan+0x12c>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	603b      	str	r3, [r7, #0]
 800bf40:	2005      	movs	r0, #5
 800bf42:	e026      	b.n	800bf92 <__hexnan+0x132>
 800bf44:	3501      	adds	r5, #1
 800bf46:	2d08      	cmp	r5, #8
 800bf48:	f10b 0b01 	add.w	fp, fp, #1
 800bf4c:	dd06      	ble.n	800bf5c <__hexnan+0xfc>
 800bf4e:	4544      	cmp	r4, r8
 800bf50:	d9c3      	bls.n	800beda <__hexnan+0x7a>
 800bf52:	2300      	movs	r3, #0
 800bf54:	2501      	movs	r5, #1
 800bf56:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf5a:	3c04      	subs	r4, #4
 800bf5c:	6822      	ldr	r2, [r4, #0]
 800bf5e:	f000 000f 	and.w	r0, r0, #15
 800bf62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bf66:	6022      	str	r2, [r4, #0]
 800bf68:	e7b7      	b.n	800beda <__hexnan+0x7a>
 800bf6a:	2508      	movs	r5, #8
 800bf6c:	e7b5      	b.n	800beda <__hexnan+0x7a>
 800bf6e:	9b01      	ldr	r3, [sp, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d0df      	beq.n	800bf34 <__hexnan+0xd4>
 800bf74:	f04f 32ff 	mov.w	r2, #4294967295
 800bf78:	f1c3 0320 	rsb	r3, r3, #32
 800bf7c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf84:	401a      	ands	r2, r3
 800bf86:	f846 2c04 	str.w	r2, [r6, #-4]
 800bf8a:	e7d3      	b.n	800bf34 <__hexnan+0xd4>
 800bf8c:	3f04      	subs	r7, #4
 800bf8e:	e7d1      	b.n	800bf34 <__hexnan+0xd4>
 800bf90:	2004      	movs	r0, #4
 800bf92:	b007      	add	sp, #28
 800bf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf98 <_localeconv_r>:
 800bf98:	4800      	ldr	r0, [pc, #0]	; (800bf9c <_localeconv_r+0x4>)
 800bf9a:	4770      	bx	lr
 800bf9c:	20000228 	.word	0x20000228

0800bfa0 <malloc>:
 800bfa0:	4b02      	ldr	r3, [pc, #8]	; (800bfac <malloc+0xc>)
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	6818      	ldr	r0, [r3, #0]
 800bfa6:	f000 bd57 	b.w	800ca58 <_malloc_r>
 800bfaa:	bf00      	nop
 800bfac:	200000d0 	.word	0x200000d0

0800bfb0 <__ascii_mbtowc>:
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	b901      	cbnz	r1, 800bfb6 <__ascii_mbtowc+0x6>
 800bfb4:	a901      	add	r1, sp, #4
 800bfb6:	b142      	cbz	r2, 800bfca <__ascii_mbtowc+0x1a>
 800bfb8:	b14b      	cbz	r3, 800bfce <__ascii_mbtowc+0x1e>
 800bfba:	7813      	ldrb	r3, [r2, #0]
 800bfbc:	600b      	str	r3, [r1, #0]
 800bfbe:	7812      	ldrb	r2, [r2, #0]
 800bfc0:	1e10      	subs	r0, r2, #0
 800bfc2:	bf18      	it	ne
 800bfc4:	2001      	movne	r0, #1
 800bfc6:	b002      	add	sp, #8
 800bfc8:	4770      	bx	lr
 800bfca:	4610      	mov	r0, r2
 800bfcc:	e7fb      	b.n	800bfc6 <__ascii_mbtowc+0x16>
 800bfce:	f06f 0001 	mvn.w	r0, #1
 800bfd2:	e7f8      	b.n	800bfc6 <__ascii_mbtowc+0x16>

0800bfd4 <memchr>:
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	b2c9      	uxtb	r1, r1
 800bfda:	4402      	add	r2, r0
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	d101      	bne.n	800bfe6 <memchr+0x12>
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	e003      	b.n	800bfee <memchr+0x1a>
 800bfe6:	7804      	ldrb	r4, [r0, #0]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	428c      	cmp	r4, r1
 800bfec:	d1f6      	bne.n	800bfdc <memchr+0x8>
 800bfee:	bd10      	pop	{r4, pc}

0800bff0 <_Balloc>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	b976      	cbnz	r6, 800c018 <_Balloc+0x28>
 800bffa:	2010      	movs	r0, #16
 800bffc:	f7ff ffd0 	bl	800bfa0 <malloc>
 800c000:	4602      	mov	r2, r0
 800c002:	6260      	str	r0, [r4, #36]	; 0x24
 800c004:	b920      	cbnz	r0, 800c010 <_Balloc+0x20>
 800c006:	2166      	movs	r1, #102	; 0x66
 800c008:	4b17      	ldr	r3, [pc, #92]	; (800c068 <_Balloc+0x78>)
 800c00a:	4818      	ldr	r0, [pc, #96]	; (800c06c <_Balloc+0x7c>)
 800c00c:	f000 ff26 	bl	800ce5c <__assert_func>
 800c010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c014:	6006      	str	r6, [r0, #0]
 800c016:	60c6      	str	r6, [r0, #12]
 800c018:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c01a:	68f3      	ldr	r3, [r6, #12]
 800c01c:	b183      	cbz	r3, 800c040 <_Balloc+0x50>
 800c01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c026:	b9b8      	cbnz	r0, 800c058 <_Balloc+0x68>
 800c028:	2101      	movs	r1, #1
 800c02a:	fa01 f605 	lsl.w	r6, r1, r5
 800c02e:	1d72      	adds	r2, r6, #5
 800c030:	4620      	mov	r0, r4
 800c032:	0092      	lsls	r2, r2, #2
 800c034:	f000 fc94 	bl	800c960 <_calloc_r>
 800c038:	b160      	cbz	r0, 800c054 <_Balloc+0x64>
 800c03a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c03e:	e00e      	b.n	800c05e <_Balloc+0x6e>
 800c040:	2221      	movs	r2, #33	; 0x21
 800c042:	2104      	movs	r1, #4
 800c044:	4620      	mov	r0, r4
 800c046:	f000 fc8b 	bl	800c960 <_calloc_r>
 800c04a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04c:	60f0      	str	r0, [r6, #12]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e4      	bne.n	800c01e <_Balloc+0x2e>
 800c054:	2000      	movs	r0, #0
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	6802      	ldr	r2, [r0, #0]
 800c05a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c05e:	2300      	movs	r3, #0
 800c060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c064:	e7f7      	b.n	800c056 <_Balloc+0x66>
 800c066:	bf00      	nop
 800c068:	0800e116 	.word	0x0800e116
 800c06c:	0800e214 	.word	0x0800e214

0800c070 <_Bfree>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c074:	4605      	mov	r5, r0
 800c076:	460c      	mov	r4, r1
 800c078:	b976      	cbnz	r6, 800c098 <_Bfree+0x28>
 800c07a:	2010      	movs	r0, #16
 800c07c:	f7ff ff90 	bl	800bfa0 <malloc>
 800c080:	4602      	mov	r2, r0
 800c082:	6268      	str	r0, [r5, #36]	; 0x24
 800c084:	b920      	cbnz	r0, 800c090 <_Bfree+0x20>
 800c086:	218a      	movs	r1, #138	; 0x8a
 800c088:	4b08      	ldr	r3, [pc, #32]	; (800c0ac <_Bfree+0x3c>)
 800c08a:	4809      	ldr	r0, [pc, #36]	; (800c0b0 <_Bfree+0x40>)
 800c08c:	f000 fee6 	bl	800ce5c <__assert_func>
 800c090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c094:	6006      	str	r6, [r0, #0]
 800c096:	60c6      	str	r6, [r0, #12]
 800c098:	b13c      	cbz	r4, 800c0aa <_Bfree+0x3a>
 800c09a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c09c:	6862      	ldr	r2, [r4, #4]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0a4:	6021      	str	r1, [r4, #0]
 800c0a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	0800e116 	.word	0x0800e116
 800c0b0:	0800e214 	.word	0x0800e214

0800c0b4 <__multadd>:
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	4607      	mov	r7, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	461e      	mov	r6, r3
 800c0be:	2000      	movs	r0, #0
 800c0c0:	690d      	ldr	r5, [r1, #16]
 800c0c2:	f101 0c14 	add.w	ip, r1, #20
 800c0c6:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	b299      	uxth	r1, r3
 800c0ce:	fb02 6101 	mla	r1, r2, r1, r6
 800c0d2:	0c1e      	lsrs	r6, r3, #16
 800c0d4:	0c0b      	lsrs	r3, r1, #16
 800c0d6:	fb02 3306 	mla	r3, r2, r6, r3
 800c0da:	b289      	uxth	r1, r1
 800c0dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0e0:	4285      	cmp	r5, r0
 800c0e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0e6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ea:	dcec      	bgt.n	800c0c6 <__multadd+0x12>
 800c0ec:	b30e      	cbz	r6, 800c132 <__multadd+0x7e>
 800c0ee:	68a3      	ldr	r3, [r4, #8]
 800c0f0:	42ab      	cmp	r3, r5
 800c0f2:	dc19      	bgt.n	800c128 <__multadd+0x74>
 800c0f4:	6861      	ldr	r1, [r4, #4]
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	3101      	adds	r1, #1
 800c0fa:	f7ff ff79 	bl	800bff0 <_Balloc>
 800c0fe:	4680      	mov	r8, r0
 800c100:	b928      	cbnz	r0, 800c10e <__multadd+0x5a>
 800c102:	4602      	mov	r2, r0
 800c104:	21b5      	movs	r1, #181	; 0xb5
 800c106:	4b0c      	ldr	r3, [pc, #48]	; (800c138 <__multadd+0x84>)
 800c108:	480c      	ldr	r0, [pc, #48]	; (800c13c <__multadd+0x88>)
 800c10a:	f000 fea7 	bl	800ce5c <__assert_func>
 800c10e:	6922      	ldr	r2, [r4, #16]
 800c110:	f104 010c 	add.w	r1, r4, #12
 800c114:	3202      	adds	r2, #2
 800c116:	0092      	lsls	r2, r2, #2
 800c118:	300c      	adds	r0, #12
 800c11a:	f7fc ffdd 	bl	80090d8 <memcpy>
 800c11e:	4621      	mov	r1, r4
 800c120:	4638      	mov	r0, r7
 800c122:	f7ff ffa5 	bl	800c070 <_Bfree>
 800c126:	4644      	mov	r4, r8
 800c128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c12c:	3501      	adds	r5, #1
 800c12e:	615e      	str	r6, [r3, #20]
 800c130:	6125      	str	r5, [r4, #16]
 800c132:	4620      	mov	r0, r4
 800c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c138:	0800e188 	.word	0x0800e188
 800c13c:	0800e214 	.word	0x0800e214

0800c140 <__s2b>:
 800c140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c144:	4615      	mov	r5, r2
 800c146:	2209      	movs	r2, #9
 800c148:	461f      	mov	r7, r3
 800c14a:	3308      	adds	r3, #8
 800c14c:	460c      	mov	r4, r1
 800c14e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c152:	4606      	mov	r6, r0
 800c154:	2201      	movs	r2, #1
 800c156:	2100      	movs	r1, #0
 800c158:	429a      	cmp	r2, r3
 800c15a:	db09      	blt.n	800c170 <__s2b+0x30>
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7ff ff47 	bl	800bff0 <_Balloc>
 800c162:	b940      	cbnz	r0, 800c176 <__s2b+0x36>
 800c164:	4602      	mov	r2, r0
 800c166:	21ce      	movs	r1, #206	; 0xce
 800c168:	4b18      	ldr	r3, [pc, #96]	; (800c1cc <__s2b+0x8c>)
 800c16a:	4819      	ldr	r0, [pc, #100]	; (800c1d0 <__s2b+0x90>)
 800c16c:	f000 fe76 	bl	800ce5c <__assert_func>
 800c170:	0052      	lsls	r2, r2, #1
 800c172:	3101      	adds	r1, #1
 800c174:	e7f0      	b.n	800c158 <__s2b+0x18>
 800c176:	9b08      	ldr	r3, [sp, #32]
 800c178:	2d09      	cmp	r5, #9
 800c17a:	6143      	str	r3, [r0, #20]
 800c17c:	f04f 0301 	mov.w	r3, #1
 800c180:	6103      	str	r3, [r0, #16]
 800c182:	dd16      	ble.n	800c1b2 <__s2b+0x72>
 800c184:	f104 0909 	add.w	r9, r4, #9
 800c188:	46c8      	mov	r8, r9
 800c18a:	442c      	add	r4, r5
 800c18c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c190:	4601      	mov	r1, r0
 800c192:	220a      	movs	r2, #10
 800c194:	4630      	mov	r0, r6
 800c196:	3b30      	subs	r3, #48	; 0x30
 800c198:	f7ff ff8c 	bl	800c0b4 <__multadd>
 800c19c:	45a0      	cmp	r8, r4
 800c19e:	d1f5      	bne.n	800c18c <__s2b+0x4c>
 800c1a0:	f1a5 0408 	sub.w	r4, r5, #8
 800c1a4:	444c      	add	r4, r9
 800c1a6:	1b2d      	subs	r5, r5, r4
 800c1a8:	1963      	adds	r3, r4, r5
 800c1aa:	42bb      	cmp	r3, r7
 800c1ac:	db04      	blt.n	800c1b8 <__s2b+0x78>
 800c1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1b2:	2509      	movs	r5, #9
 800c1b4:	340a      	adds	r4, #10
 800c1b6:	e7f6      	b.n	800c1a6 <__s2b+0x66>
 800c1b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1bc:	4601      	mov	r1, r0
 800c1be:	220a      	movs	r2, #10
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	3b30      	subs	r3, #48	; 0x30
 800c1c4:	f7ff ff76 	bl	800c0b4 <__multadd>
 800c1c8:	e7ee      	b.n	800c1a8 <__s2b+0x68>
 800c1ca:	bf00      	nop
 800c1cc:	0800e188 	.word	0x0800e188
 800c1d0:	0800e214 	.word	0x0800e214

0800c1d4 <__hi0bits>:
 800c1d4:	0c02      	lsrs	r2, r0, #16
 800c1d6:	0412      	lsls	r2, r2, #16
 800c1d8:	4603      	mov	r3, r0
 800c1da:	b9ca      	cbnz	r2, 800c210 <__hi0bits+0x3c>
 800c1dc:	0403      	lsls	r3, r0, #16
 800c1de:	2010      	movs	r0, #16
 800c1e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c1e4:	bf04      	itt	eq
 800c1e6:	021b      	lsleq	r3, r3, #8
 800c1e8:	3008      	addeq	r0, #8
 800c1ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c1ee:	bf04      	itt	eq
 800c1f0:	011b      	lsleq	r3, r3, #4
 800c1f2:	3004      	addeq	r0, #4
 800c1f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c1f8:	bf04      	itt	eq
 800c1fa:	009b      	lsleq	r3, r3, #2
 800c1fc:	3002      	addeq	r0, #2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	db05      	blt.n	800c20e <__hi0bits+0x3a>
 800c202:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c206:	f100 0001 	add.w	r0, r0, #1
 800c20a:	bf08      	it	eq
 800c20c:	2020      	moveq	r0, #32
 800c20e:	4770      	bx	lr
 800c210:	2000      	movs	r0, #0
 800c212:	e7e5      	b.n	800c1e0 <__hi0bits+0xc>

0800c214 <__lo0bits>:
 800c214:	6803      	ldr	r3, [r0, #0]
 800c216:	4602      	mov	r2, r0
 800c218:	f013 0007 	ands.w	r0, r3, #7
 800c21c:	d00b      	beq.n	800c236 <__lo0bits+0x22>
 800c21e:	07d9      	lsls	r1, r3, #31
 800c220:	d421      	bmi.n	800c266 <__lo0bits+0x52>
 800c222:	0798      	lsls	r0, r3, #30
 800c224:	bf49      	itett	mi
 800c226:	085b      	lsrmi	r3, r3, #1
 800c228:	089b      	lsrpl	r3, r3, #2
 800c22a:	2001      	movmi	r0, #1
 800c22c:	6013      	strmi	r3, [r2, #0]
 800c22e:	bf5c      	itt	pl
 800c230:	2002      	movpl	r0, #2
 800c232:	6013      	strpl	r3, [r2, #0]
 800c234:	4770      	bx	lr
 800c236:	b299      	uxth	r1, r3
 800c238:	b909      	cbnz	r1, 800c23e <__lo0bits+0x2a>
 800c23a:	2010      	movs	r0, #16
 800c23c:	0c1b      	lsrs	r3, r3, #16
 800c23e:	b2d9      	uxtb	r1, r3
 800c240:	b909      	cbnz	r1, 800c246 <__lo0bits+0x32>
 800c242:	3008      	adds	r0, #8
 800c244:	0a1b      	lsrs	r3, r3, #8
 800c246:	0719      	lsls	r1, r3, #28
 800c248:	bf04      	itt	eq
 800c24a:	091b      	lsreq	r3, r3, #4
 800c24c:	3004      	addeq	r0, #4
 800c24e:	0799      	lsls	r1, r3, #30
 800c250:	bf04      	itt	eq
 800c252:	089b      	lsreq	r3, r3, #2
 800c254:	3002      	addeq	r0, #2
 800c256:	07d9      	lsls	r1, r3, #31
 800c258:	d403      	bmi.n	800c262 <__lo0bits+0x4e>
 800c25a:	085b      	lsrs	r3, r3, #1
 800c25c:	f100 0001 	add.w	r0, r0, #1
 800c260:	d003      	beq.n	800c26a <__lo0bits+0x56>
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	4770      	bx	lr
 800c266:	2000      	movs	r0, #0
 800c268:	4770      	bx	lr
 800c26a:	2020      	movs	r0, #32
 800c26c:	4770      	bx	lr
	...

0800c270 <__i2b>:
 800c270:	b510      	push	{r4, lr}
 800c272:	460c      	mov	r4, r1
 800c274:	2101      	movs	r1, #1
 800c276:	f7ff febb 	bl	800bff0 <_Balloc>
 800c27a:	4602      	mov	r2, r0
 800c27c:	b928      	cbnz	r0, 800c28a <__i2b+0x1a>
 800c27e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c282:	4b04      	ldr	r3, [pc, #16]	; (800c294 <__i2b+0x24>)
 800c284:	4804      	ldr	r0, [pc, #16]	; (800c298 <__i2b+0x28>)
 800c286:	f000 fde9 	bl	800ce5c <__assert_func>
 800c28a:	2301      	movs	r3, #1
 800c28c:	6144      	str	r4, [r0, #20]
 800c28e:	6103      	str	r3, [r0, #16]
 800c290:	bd10      	pop	{r4, pc}
 800c292:	bf00      	nop
 800c294:	0800e188 	.word	0x0800e188
 800c298:	0800e214 	.word	0x0800e214

0800c29c <__multiply>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	4691      	mov	r9, r2
 800c2a2:	690a      	ldr	r2, [r1, #16]
 800c2a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	bfbe      	ittt	lt
 800c2ae:	460b      	movlt	r3, r1
 800c2b0:	464c      	movlt	r4, r9
 800c2b2:	4699      	movlt	r9, r3
 800c2b4:	6927      	ldr	r7, [r4, #16]
 800c2b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c2ba:	68a3      	ldr	r3, [r4, #8]
 800c2bc:	6861      	ldr	r1, [r4, #4]
 800c2be:	eb07 060a 	add.w	r6, r7, sl
 800c2c2:	42b3      	cmp	r3, r6
 800c2c4:	b085      	sub	sp, #20
 800c2c6:	bfb8      	it	lt
 800c2c8:	3101      	addlt	r1, #1
 800c2ca:	f7ff fe91 	bl	800bff0 <_Balloc>
 800c2ce:	b930      	cbnz	r0, 800c2de <__multiply+0x42>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	f240 115d 	movw	r1, #349	; 0x15d
 800c2d6:	4b43      	ldr	r3, [pc, #268]	; (800c3e4 <__multiply+0x148>)
 800c2d8:	4843      	ldr	r0, [pc, #268]	; (800c3e8 <__multiply+0x14c>)
 800c2da:	f000 fdbf 	bl	800ce5c <__assert_func>
 800c2de:	f100 0514 	add.w	r5, r0, #20
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2ea:	4543      	cmp	r3, r8
 800c2ec:	d321      	bcc.n	800c332 <__multiply+0x96>
 800c2ee:	f104 0314 	add.w	r3, r4, #20
 800c2f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2f6:	f109 0314 	add.w	r3, r9, #20
 800c2fa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2fe:	9202      	str	r2, [sp, #8]
 800c300:	1b3a      	subs	r2, r7, r4
 800c302:	3a15      	subs	r2, #21
 800c304:	f022 0203 	bic.w	r2, r2, #3
 800c308:	3204      	adds	r2, #4
 800c30a:	f104 0115 	add.w	r1, r4, #21
 800c30e:	428f      	cmp	r7, r1
 800c310:	bf38      	it	cc
 800c312:	2204      	movcc	r2, #4
 800c314:	9201      	str	r2, [sp, #4]
 800c316:	9a02      	ldr	r2, [sp, #8]
 800c318:	9303      	str	r3, [sp, #12]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d80c      	bhi.n	800c338 <__multiply+0x9c>
 800c31e:	2e00      	cmp	r6, #0
 800c320:	dd03      	ble.n	800c32a <__multiply+0x8e>
 800c322:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c326:	2b00      	cmp	r3, #0
 800c328:	d059      	beq.n	800c3de <__multiply+0x142>
 800c32a:	6106      	str	r6, [r0, #16]
 800c32c:	b005      	add	sp, #20
 800c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c332:	f843 2b04 	str.w	r2, [r3], #4
 800c336:	e7d8      	b.n	800c2ea <__multiply+0x4e>
 800c338:	f8b3 a000 	ldrh.w	sl, [r3]
 800c33c:	f1ba 0f00 	cmp.w	sl, #0
 800c340:	d023      	beq.n	800c38a <__multiply+0xee>
 800c342:	46a9      	mov	r9, r5
 800c344:	f04f 0c00 	mov.w	ip, #0
 800c348:	f104 0e14 	add.w	lr, r4, #20
 800c34c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c350:	f8d9 1000 	ldr.w	r1, [r9]
 800c354:	fa1f fb82 	uxth.w	fp, r2
 800c358:	b289      	uxth	r1, r1
 800c35a:	fb0a 110b 	mla	r1, sl, fp, r1
 800c35e:	4461      	add	r1, ip
 800c360:	f8d9 c000 	ldr.w	ip, [r9]
 800c364:	0c12      	lsrs	r2, r2, #16
 800c366:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c36a:	fb0a c202 	mla	r2, sl, r2, ip
 800c36e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c372:	b289      	uxth	r1, r1
 800c374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c378:	4577      	cmp	r7, lr
 800c37a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c37e:	f849 1b04 	str.w	r1, [r9], #4
 800c382:	d8e3      	bhi.n	800c34c <__multiply+0xb0>
 800c384:	9a01      	ldr	r2, [sp, #4]
 800c386:	f845 c002 	str.w	ip, [r5, r2]
 800c38a:	9a03      	ldr	r2, [sp, #12]
 800c38c:	3304      	adds	r3, #4
 800c38e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c392:	f1b9 0f00 	cmp.w	r9, #0
 800c396:	d020      	beq.n	800c3da <__multiply+0x13e>
 800c398:	46ae      	mov	lr, r5
 800c39a:	f04f 0a00 	mov.w	sl, #0
 800c39e:	6829      	ldr	r1, [r5, #0]
 800c3a0:	f104 0c14 	add.w	ip, r4, #20
 800c3a4:	f8bc b000 	ldrh.w	fp, [ip]
 800c3a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c3ac:	b289      	uxth	r1, r1
 800c3ae:	fb09 220b 	mla	r2, r9, fp, r2
 800c3b2:	4492      	add	sl, r2
 800c3b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c3b8:	f84e 1b04 	str.w	r1, [lr], #4
 800c3bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c3c0:	f8be 1000 	ldrh.w	r1, [lr]
 800c3c4:	0c12      	lsrs	r2, r2, #16
 800c3c6:	fb09 1102 	mla	r1, r9, r2, r1
 800c3ca:	4567      	cmp	r7, ip
 800c3cc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c3d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3d4:	d8e6      	bhi.n	800c3a4 <__multiply+0x108>
 800c3d6:	9a01      	ldr	r2, [sp, #4]
 800c3d8:	50a9      	str	r1, [r5, r2]
 800c3da:	3504      	adds	r5, #4
 800c3dc:	e79b      	b.n	800c316 <__multiply+0x7a>
 800c3de:	3e01      	subs	r6, #1
 800c3e0:	e79d      	b.n	800c31e <__multiply+0x82>
 800c3e2:	bf00      	nop
 800c3e4:	0800e188 	.word	0x0800e188
 800c3e8:	0800e214 	.word	0x0800e214

0800c3ec <__pow5mult>:
 800c3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f0:	4615      	mov	r5, r2
 800c3f2:	f012 0203 	ands.w	r2, r2, #3
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	d007      	beq.n	800c40c <__pow5mult+0x20>
 800c3fc:	4c25      	ldr	r4, [pc, #148]	; (800c494 <__pow5mult+0xa8>)
 800c3fe:	3a01      	subs	r2, #1
 800c400:	2300      	movs	r3, #0
 800c402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c406:	f7ff fe55 	bl	800c0b4 <__multadd>
 800c40a:	4607      	mov	r7, r0
 800c40c:	10ad      	asrs	r5, r5, #2
 800c40e:	d03d      	beq.n	800c48c <__pow5mult+0xa0>
 800c410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c412:	b97c      	cbnz	r4, 800c434 <__pow5mult+0x48>
 800c414:	2010      	movs	r0, #16
 800c416:	f7ff fdc3 	bl	800bfa0 <malloc>
 800c41a:	4602      	mov	r2, r0
 800c41c:	6270      	str	r0, [r6, #36]	; 0x24
 800c41e:	b928      	cbnz	r0, 800c42c <__pow5mult+0x40>
 800c420:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c424:	4b1c      	ldr	r3, [pc, #112]	; (800c498 <__pow5mult+0xac>)
 800c426:	481d      	ldr	r0, [pc, #116]	; (800c49c <__pow5mult+0xb0>)
 800c428:	f000 fd18 	bl	800ce5c <__assert_func>
 800c42c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c430:	6004      	str	r4, [r0, #0]
 800c432:	60c4      	str	r4, [r0, #12]
 800c434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c43c:	b94c      	cbnz	r4, 800c452 <__pow5mult+0x66>
 800c43e:	f240 2171 	movw	r1, #625	; 0x271
 800c442:	4630      	mov	r0, r6
 800c444:	f7ff ff14 	bl	800c270 <__i2b>
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c450:	6003      	str	r3, [r0, #0]
 800c452:	f04f 0900 	mov.w	r9, #0
 800c456:	07eb      	lsls	r3, r5, #31
 800c458:	d50a      	bpl.n	800c470 <__pow5mult+0x84>
 800c45a:	4639      	mov	r1, r7
 800c45c:	4622      	mov	r2, r4
 800c45e:	4630      	mov	r0, r6
 800c460:	f7ff ff1c 	bl	800c29c <__multiply>
 800c464:	4680      	mov	r8, r0
 800c466:	4639      	mov	r1, r7
 800c468:	4630      	mov	r0, r6
 800c46a:	f7ff fe01 	bl	800c070 <_Bfree>
 800c46e:	4647      	mov	r7, r8
 800c470:	106d      	asrs	r5, r5, #1
 800c472:	d00b      	beq.n	800c48c <__pow5mult+0xa0>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	b938      	cbnz	r0, 800c488 <__pow5mult+0x9c>
 800c478:	4622      	mov	r2, r4
 800c47a:	4621      	mov	r1, r4
 800c47c:	4630      	mov	r0, r6
 800c47e:	f7ff ff0d 	bl	800c29c <__multiply>
 800c482:	6020      	str	r0, [r4, #0]
 800c484:	f8c0 9000 	str.w	r9, [r0]
 800c488:	4604      	mov	r4, r0
 800c48a:	e7e4      	b.n	800c456 <__pow5mult+0x6a>
 800c48c:	4638      	mov	r0, r7
 800c48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c492:	bf00      	nop
 800c494:	0800e360 	.word	0x0800e360
 800c498:	0800e116 	.word	0x0800e116
 800c49c:	0800e214 	.word	0x0800e214

0800c4a0 <__lshift>:
 800c4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	4607      	mov	r7, r0
 800c4a8:	4691      	mov	r9, r2
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	6849      	ldr	r1, [r1, #4]
 800c4ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4b2:	68a3      	ldr	r3, [r4, #8]
 800c4b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4b8:	f108 0601 	add.w	r6, r8, #1
 800c4bc:	42b3      	cmp	r3, r6
 800c4be:	db0b      	blt.n	800c4d8 <__lshift+0x38>
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	f7ff fd95 	bl	800bff0 <_Balloc>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	b948      	cbnz	r0, 800c4de <__lshift+0x3e>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4d0:	4b29      	ldr	r3, [pc, #164]	; (800c578 <__lshift+0xd8>)
 800c4d2:	482a      	ldr	r0, [pc, #168]	; (800c57c <__lshift+0xdc>)
 800c4d4:	f000 fcc2 	bl	800ce5c <__assert_func>
 800c4d8:	3101      	adds	r1, #1
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	e7ee      	b.n	800c4bc <__lshift+0x1c>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f100 0114 	add.w	r1, r0, #20
 800c4e4:	f100 0210 	add.w	r2, r0, #16
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	4553      	cmp	r3, sl
 800c4ec:	db37      	blt.n	800c55e <__lshift+0xbe>
 800c4ee:	6920      	ldr	r0, [r4, #16]
 800c4f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4f4:	f104 0314 	add.w	r3, r4, #20
 800c4f8:	f019 091f 	ands.w	r9, r9, #31
 800c4fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c504:	d02f      	beq.n	800c566 <__lshift+0xc6>
 800c506:	468a      	mov	sl, r1
 800c508:	f04f 0c00 	mov.w	ip, #0
 800c50c:	f1c9 0e20 	rsb	lr, r9, #32
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	fa02 f209 	lsl.w	r2, r2, r9
 800c516:	ea42 020c 	orr.w	r2, r2, ip
 800c51a:	f84a 2b04 	str.w	r2, [sl], #4
 800c51e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c522:	4298      	cmp	r0, r3
 800c524:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c528:	d8f2      	bhi.n	800c510 <__lshift+0x70>
 800c52a:	1b03      	subs	r3, r0, r4
 800c52c:	3b15      	subs	r3, #21
 800c52e:	f023 0303 	bic.w	r3, r3, #3
 800c532:	3304      	adds	r3, #4
 800c534:	f104 0215 	add.w	r2, r4, #21
 800c538:	4290      	cmp	r0, r2
 800c53a:	bf38      	it	cc
 800c53c:	2304      	movcc	r3, #4
 800c53e:	f841 c003 	str.w	ip, [r1, r3]
 800c542:	f1bc 0f00 	cmp.w	ip, #0
 800c546:	d001      	beq.n	800c54c <__lshift+0xac>
 800c548:	f108 0602 	add.w	r6, r8, #2
 800c54c:	3e01      	subs	r6, #1
 800c54e:	4638      	mov	r0, r7
 800c550:	4621      	mov	r1, r4
 800c552:	612e      	str	r6, [r5, #16]
 800c554:	f7ff fd8c 	bl	800c070 <_Bfree>
 800c558:	4628      	mov	r0, r5
 800c55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c562:	3301      	adds	r3, #1
 800c564:	e7c1      	b.n	800c4ea <__lshift+0x4a>
 800c566:	3904      	subs	r1, #4
 800c568:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56c:	4298      	cmp	r0, r3
 800c56e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c572:	d8f9      	bhi.n	800c568 <__lshift+0xc8>
 800c574:	e7ea      	b.n	800c54c <__lshift+0xac>
 800c576:	bf00      	nop
 800c578:	0800e188 	.word	0x0800e188
 800c57c:	0800e214 	.word	0x0800e214

0800c580 <__mcmp>:
 800c580:	4603      	mov	r3, r0
 800c582:	690a      	ldr	r2, [r1, #16]
 800c584:	6900      	ldr	r0, [r0, #16]
 800c586:	b530      	push	{r4, r5, lr}
 800c588:	1a80      	subs	r0, r0, r2
 800c58a:	d10d      	bne.n	800c5a8 <__mcmp+0x28>
 800c58c:	3314      	adds	r3, #20
 800c58e:	3114      	adds	r1, #20
 800c590:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c594:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c598:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c59c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c5a0:	4295      	cmp	r5, r2
 800c5a2:	d002      	beq.n	800c5aa <__mcmp+0x2a>
 800c5a4:	d304      	bcc.n	800c5b0 <__mcmp+0x30>
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	bd30      	pop	{r4, r5, pc}
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	d3f4      	bcc.n	800c598 <__mcmp+0x18>
 800c5ae:	e7fb      	b.n	800c5a8 <__mcmp+0x28>
 800c5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b4:	e7f8      	b.n	800c5a8 <__mcmp+0x28>
	...

0800c5b8 <__mdiff>:
 800c5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	460d      	mov	r5, r1
 800c5be:	4607      	mov	r7, r0
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	4614      	mov	r4, r2
 800c5c6:	f7ff ffdb 	bl	800c580 <__mcmp>
 800c5ca:	1e06      	subs	r6, r0, #0
 800c5cc:	d111      	bne.n	800c5f2 <__mdiff+0x3a>
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff fd0d 	bl	800bff0 <_Balloc>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	b928      	cbnz	r0, 800c5e6 <__mdiff+0x2e>
 800c5da:	f240 2132 	movw	r1, #562	; 0x232
 800c5de:	4b3a      	ldr	r3, [pc, #232]	; (800c6c8 <__mdiff+0x110>)
 800c5e0:	483a      	ldr	r0, [pc, #232]	; (800c6cc <__mdiff+0x114>)
 800c5e2:	f000 fc3b 	bl	800ce5c <__assert_func>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f2:	bfa4      	itt	ge
 800c5f4:	4623      	movge	r3, r4
 800c5f6:	462c      	movge	r4, r5
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	6861      	ldr	r1, [r4, #4]
 800c5fc:	bfa6      	itte	ge
 800c5fe:	461d      	movge	r5, r3
 800c600:	2600      	movge	r6, #0
 800c602:	2601      	movlt	r6, #1
 800c604:	f7ff fcf4 	bl	800bff0 <_Balloc>
 800c608:	4602      	mov	r2, r0
 800c60a:	b918      	cbnz	r0, 800c614 <__mdiff+0x5c>
 800c60c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c610:	4b2d      	ldr	r3, [pc, #180]	; (800c6c8 <__mdiff+0x110>)
 800c612:	e7e5      	b.n	800c5e0 <__mdiff+0x28>
 800c614:	f102 0814 	add.w	r8, r2, #20
 800c618:	46c2      	mov	sl, r8
 800c61a:	f04f 0c00 	mov.w	ip, #0
 800c61e:	6927      	ldr	r7, [r4, #16]
 800c620:	60c6      	str	r6, [r0, #12]
 800c622:	692e      	ldr	r6, [r5, #16]
 800c624:	f104 0014 	add.w	r0, r4, #20
 800c628:	f105 0914 	add.w	r9, r5, #20
 800c62c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c634:	3410      	adds	r4, #16
 800c636:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c63a:	f859 3b04 	ldr.w	r3, [r9], #4
 800c63e:	fa1f f18b 	uxth.w	r1, fp
 800c642:	448c      	add	ip, r1
 800c644:	b299      	uxth	r1, r3
 800c646:	0c1b      	lsrs	r3, r3, #16
 800c648:	ebac 0101 	sub.w	r1, ip, r1
 800c64c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c650:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c654:	b289      	uxth	r1, r1
 800c656:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c65a:	454e      	cmp	r6, r9
 800c65c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c660:	f84a 3b04 	str.w	r3, [sl], #4
 800c664:	d8e7      	bhi.n	800c636 <__mdiff+0x7e>
 800c666:	1b73      	subs	r3, r6, r5
 800c668:	3b15      	subs	r3, #21
 800c66a:	f023 0303 	bic.w	r3, r3, #3
 800c66e:	3515      	adds	r5, #21
 800c670:	3304      	adds	r3, #4
 800c672:	42ae      	cmp	r6, r5
 800c674:	bf38      	it	cc
 800c676:	2304      	movcc	r3, #4
 800c678:	4418      	add	r0, r3
 800c67a:	4443      	add	r3, r8
 800c67c:	461e      	mov	r6, r3
 800c67e:	4605      	mov	r5, r0
 800c680:	4575      	cmp	r5, lr
 800c682:	d30e      	bcc.n	800c6a2 <__mdiff+0xea>
 800c684:	f10e 0103 	add.w	r1, lr, #3
 800c688:	1a09      	subs	r1, r1, r0
 800c68a:	f021 0103 	bic.w	r1, r1, #3
 800c68e:	3803      	subs	r0, #3
 800c690:	4586      	cmp	lr, r0
 800c692:	bf38      	it	cc
 800c694:	2100      	movcc	r1, #0
 800c696:	4419      	add	r1, r3
 800c698:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c69c:	b18b      	cbz	r3, 800c6c2 <__mdiff+0x10a>
 800c69e:	6117      	str	r7, [r2, #16]
 800c6a0:	e7a4      	b.n	800c5ec <__mdiff+0x34>
 800c6a2:	f855 8b04 	ldr.w	r8, [r5], #4
 800c6a6:	fa1f f188 	uxth.w	r1, r8
 800c6aa:	4461      	add	r1, ip
 800c6ac:	140c      	asrs	r4, r1, #16
 800c6ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c6b2:	b289      	uxth	r1, r1
 800c6b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c6b8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c6bc:	f846 1b04 	str.w	r1, [r6], #4
 800c6c0:	e7de      	b.n	800c680 <__mdiff+0xc8>
 800c6c2:	3f01      	subs	r7, #1
 800c6c4:	e7e8      	b.n	800c698 <__mdiff+0xe0>
 800c6c6:	bf00      	nop
 800c6c8:	0800e188 	.word	0x0800e188
 800c6cc:	0800e214 	.word	0x0800e214

0800c6d0 <__ulp>:
 800c6d0:	4b11      	ldr	r3, [pc, #68]	; (800c718 <__ulp+0x48>)
 800c6d2:	400b      	ands	r3, r1
 800c6d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dd02      	ble.n	800c6e2 <__ulp+0x12>
 800c6dc:	2000      	movs	r0, #0
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4770      	bx	lr
 800c6e2:	425b      	negs	r3, r3
 800c6e4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c6e8:	f04f 0000 	mov.w	r0, #0
 800c6ec:	f04f 0100 	mov.w	r1, #0
 800c6f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c6f4:	da04      	bge.n	800c700 <__ulp+0x30>
 800c6f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c6fa:	fa43 f102 	asr.w	r1, r3, r2
 800c6fe:	4770      	bx	lr
 800c700:	f1a2 0314 	sub.w	r3, r2, #20
 800c704:	2b1e      	cmp	r3, #30
 800c706:	bfd6      	itet	le
 800c708:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c70c:	2301      	movgt	r3, #1
 800c70e:	fa22 f303 	lsrle.w	r3, r2, r3
 800c712:	4618      	mov	r0, r3
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	7ff00000 	.word	0x7ff00000

0800c71c <__b2d>:
 800c71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c720:	6907      	ldr	r7, [r0, #16]
 800c722:	f100 0914 	add.w	r9, r0, #20
 800c726:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c72a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c72e:	f1a7 0804 	sub.w	r8, r7, #4
 800c732:	4630      	mov	r0, r6
 800c734:	f7ff fd4e 	bl	800c1d4 <__hi0bits>
 800c738:	f1c0 0320 	rsb	r3, r0, #32
 800c73c:	280a      	cmp	r0, #10
 800c73e:	600b      	str	r3, [r1, #0]
 800c740:	491f      	ldr	r1, [pc, #124]	; (800c7c0 <__b2d+0xa4>)
 800c742:	dc17      	bgt.n	800c774 <__b2d+0x58>
 800c744:	45c1      	cmp	r9, r8
 800c746:	bf28      	it	cs
 800c748:	2200      	movcs	r2, #0
 800c74a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c74e:	fa26 f30c 	lsr.w	r3, r6, ip
 800c752:	bf38      	it	cc
 800c754:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c758:	ea43 0501 	orr.w	r5, r3, r1
 800c75c:	f100 0315 	add.w	r3, r0, #21
 800c760:	fa06 f303 	lsl.w	r3, r6, r3
 800c764:	fa22 f20c 	lsr.w	r2, r2, ip
 800c768:	ea43 0402 	orr.w	r4, r3, r2
 800c76c:	4620      	mov	r0, r4
 800c76e:	4629      	mov	r1, r5
 800c770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c774:	45c1      	cmp	r9, r8
 800c776:	bf2e      	itee	cs
 800c778:	2200      	movcs	r2, #0
 800c77a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c77e:	f1a7 0808 	subcc.w	r8, r7, #8
 800c782:	f1b0 030b 	subs.w	r3, r0, #11
 800c786:	d016      	beq.n	800c7b6 <__b2d+0x9a>
 800c788:	f1c3 0720 	rsb	r7, r3, #32
 800c78c:	fa22 f107 	lsr.w	r1, r2, r7
 800c790:	45c8      	cmp	r8, r9
 800c792:	fa06 f603 	lsl.w	r6, r6, r3
 800c796:	ea46 0601 	orr.w	r6, r6, r1
 800c79a:	bf94      	ite	ls
 800c79c:	2100      	movls	r1, #0
 800c79e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c7a2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c7a6:	fa02 f003 	lsl.w	r0, r2, r3
 800c7aa:	40f9      	lsrs	r1, r7
 800c7ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c7b0:	ea40 0401 	orr.w	r4, r0, r1
 800c7b4:	e7da      	b.n	800c76c <__b2d+0x50>
 800c7b6:	4614      	mov	r4, r2
 800c7b8:	ea46 0501 	orr.w	r5, r6, r1
 800c7bc:	e7d6      	b.n	800c76c <__b2d+0x50>
 800c7be:	bf00      	nop
 800c7c0:	3ff00000 	.word	0x3ff00000

0800c7c4 <__d2b>:
 800c7c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c7ce:	4690      	mov	r8, r2
 800c7d0:	461d      	mov	r5, r3
 800c7d2:	f7ff fc0d 	bl	800bff0 <_Balloc>
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	b930      	cbnz	r0, 800c7e8 <__d2b+0x24>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	f240 310a 	movw	r1, #778	; 0x30a
 800c7e0:	4b24      	ldr	r3, [pc, #144]	; (800c874 <__d2b+0xb0>)
 800c7e2:	4825      	ldr	r0, [pc, #148]	; (800c878 <__d2b+0xb4>)
 800c7e4:	f000 fb3a 	bl	800ce5c <__assert_func>
 800c7e8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c7ec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c7f0:	bb2d      	cbnz	r5, 800c83e <__d2b+0x7a>
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	f1b8 0300 	subs.w	r3, r8, #0
 800c7f8:	d026      	beq.n	800c848 <__d2b+0x84>
 800c7fa:	4668      	mov	r0, sp
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	f7ff fd09 	bl	800c214 <__lo0bits>
 800c802:	9900      	ldr	r1, [sp, #0]
 800c804:	b1f0      	cbz	r0, 800c844 <__d2b+0x80>
 800c806:	9a01      	ldr	r2, [sp, #4]
 800c808:	f1c0 0320 	rsb	r3, r0, #32
 800c80c:	fa02 f303 	lsl.w	r3, r2, r3
 800c810:	430b      	orrs	r3, r1
 800c812:	40c2      	lsrs	r2, r0
 800c814:	6163      	str	r3, [r4, #20]
 800c816:	9201      	str	r2, [sp, #4]
 800c818:	9b01      	ldr	r3, [sp, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bf14      	ite	ne
 800c81e:	2102      	movne	r1, #2
 800c820:	2101      	moveq	r1, #1
 800c822:	61a3      	str	r3, [r4, #24]
 800c824:	6121      	str	r1, [r4, #16]
 800c826:	b1c5      	cbz	r5, 800c85a <__d2b+0x96>
 800c828:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c82c:	4405      	add	r5, r0
 800c82e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c832:	603d      	str	r5, [r7, #0]
 800c834:	6030      	str	r0, [r6, #0]
 800c836:	4620      	mov	r0, r4
 800c838:	b002      	add	sp, #8
 800c83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c83e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c842:	e7d6      	b.n	800c7f2 <__d2b+0x2e>
 800c844:	6161      	str	r1, [r4, #20]
 800c846:	e7e7      	b.n	800c818 <__d2b+0x54>
 800c848:	a801      	add	r0, sp, #4
 800c84a:	f7ff fce3 	bl	800c214 <__lo0bits>
 800c84e:	2101      	movs	r1, #1
 800c850:	9b01      	ldr	r3, [sp, #4]
 800c852:	6121      	str	r1, [r4, #16]
 800c854:	6163      	str	r3, [r4, #20]
 800c856:	3020      	adds	r0, #32
 800c858:	e7e5      	b.n	800c826 <__d2b+0x62>
 800c85a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c85e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c862:	6038      	str	r0, [r7, #0]
 800c864:	6918      	ldr	r0, [r3, #16]
 800c866:	f7ff fcb5 	bl	800c1d4 <__hi0bits>
 800c86a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c86e:	6031      	str	r1, [r6, #0]
 800c870:	e7e1      	b.n	800c836 <__d2b+0x72>
 800c872:	bf00      	nop
 800c874:	0800e188 	.word	0x0800e188
 800c878:	0800e214 	.word	0x0800e214

0800c87c <__ratio>:
 800c87c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c880:	4688      	mov	r8, r1
 800c882:	4669      	mov	r1, sp
 800c884:	4681      	mov	r9, r0
 800c886:	f7ff ff49 	bl	800c71c <__b2d>
 800c88a:	460f      	mov	r7, r1
 800c88c:	4604      	mov	r4, r0
 800c88e:	460d      	mov	r5, r1
 800c890:	4640      	mov	r0, r8
 800c892:	a901      	add	r1, sp, #4
 800c894:	f7ff ff42 	bl	800c71c <__b2d>
 800c898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c89c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c8a0:	468b      	mov	fp, r1
 800c8a2:	eba3 0c02 	sub.w	ip, r3, r2
 800c8a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c8aa:	1a9b      	subs	r3, r3, r2
 800c8ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	bfd5      	itete	le
 800c8b4:	460a      	movle	r2, r1
 800c8b6:	462a      	movgt	r2, r5
 800c8b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c8bc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c8c0:	bfd8      	it	le
 800c8c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c8c6:	465b      	mov	r3, fp
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f7f3 ff2d 	bl	800072c <__aeabi_ddiv>
 800c8d2:	b003      	add	sp, #12
 800c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8d8 <__copybits>:
 800c8d8:	3901      	subs	r1, #1
 800c8da:	b570      	push	{r4, r5, r6, lr}
 800c8dc:	1149      	asrs	r1, r1, #5
 800c8de:	6914      	ldr	r4, [r2, #16]
 800c8e0:	3101      	adds	r1, #1
 800c8e2:	f102 0314 	add.w	r3, r2, #20
 800c8e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c8ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c8ee:	1f05      	subs	r5, r0, #4
 800c8f0:	42a3      	cmp	r3, r4
 800c8f2:	d30c      	bcc.n	800c90e <__copybits+0x36>
 800c8f4:	1aa3      	subs	r3, r4, r2
 800c8f6:	3b11      	subs	r3, #17
 800c8f8:	f023 0303 	bic.w	r3, r3, #3
 800c8fc:	3211      	adds	r2, #17
 800c8fe:	42a2      	cmp	r2, r4
 800c900:	bf88      	it	hi
 800c902:	2300      	movhi	r3, #0
 800c904:	4418      	add	r0, r3
 800c906:	2300      	movs	r3, #0
 800c908:	4288      	cmp	r0, r1
 800c90a:	d305      	bcc.n	800c918 <__copybits+0x40>
 800c90c:	bd70      	pop	{r4, r5, r6, pc}
 800c90e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c912:	f845 6f04 	str.w	r6, [r5, #4]!
 800c916:	e7eb      	b.n	800c8f0 <__copybits+0x18>
 800c918:	f840 3b04 	str.w	r3, [r0], #4
 800c91c:	e7f4      	b.n	800c908 <__copybits+0x30>

0800c91e <__any_on>:
 800c91e:	f100 0214 	add.w	r2, r0, #20
 800c922:	6900      	ldr	r0, [r0, #16]
 800c924:	114b      	asrs	r3, r1, #5
 800c926:	4298      	cmp	r0, r3
 800c928:	b510      	push	{r4, lr}
 800c92a:	db11      	blt.n	800c950 <__any_on+0x32>
 800c92c:	dd0a      	ble.n	800c944 <__any_on+0x26>
 800c92e:	f011 011f 	ands.w	r1, r1, #31
 800c932:	d007      	beq.n	800c944 <__any_on+0x26>
 800c934:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c938:	fa24 f001 	lsr.w	r0, r4, r1
 800c93c:	fa00 f101 	lsl.w	r1, r0, r1
 800c940:	428c      	cmp	r4, r1
 800c942:	d10b      	bne.n	800c95c <__any_on+0x3e>
 800c944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c948:	4293      	cmp	r3, r2
 800c94a:	d803      	bhi.n	800c954 <__any_on+0x36>
 800c94c:	2000      	movs	r0, #0
 800c94e:	bd10      	pop	{r4, pc}
 800c950:	4603      	mov	r3, r0
 800c952:	e7f7      	b.n	800c944 <__any_on+0x26>
 800c954:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c958:	2900      	cmp	r1, #0
 800c95a:	d0f5      	beq.n	800c948 <__any_on+0x2a>
 800c95c:	2001      	movs	r0, #1
 800c95e:	e7f6      	b.n	800c94e <__any_on+0x30>

0800c960 <_calloc_r>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	fba1 5402 	umull	r5, r4, r1, r2
 800c966:	b934      	cbnz	r4, 800c976 <_calloc_r+0x16>
 800c968:	4629      	mov	r1, r5
 800c96a:	f000 f875 	bl	800ca58 <_malloc_r>
 800c96e:	4606      	mov	r6, r0
 800c970:	b928      	cbnz	r0, 800c97e <_calloc_r+0x1e>
 800c972:	4630      	mov	r0, r6
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	220c      	movs	r2, #12
 800c978:	2600      	movs	r6, #0
 800c97a:	6002      	str	r2, [r0, #0]
 800c97c:	e7f9      	b.n	800c972 <_calloc_r+0x12>
 800c97e:	462a      	mov	r2, r5
 800c980:	4621      	mov	r1, r4
 800c982:	f7fc fbb7 	bl	80090f4 <memset>
 800c986:	e7f4      	b.n	800c972 <_calloc_r+0x12>

0800c988 <_free_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4605      	mov	r5, r0
 800c98c:	2900      	cmp	r1, #0
 800c98e:	d040      	beq.n	800ca12 <_free_r+0x8a>
 800c990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c994:	1f0c      	subs	r4, r1, #4
 800c996:	2b00      	cmp	r3, #0
 800c998:	bfb8      	it	lt
 800c99a:	18e4      	addlt	r4, r4, r3
 800c99c:	f000 faa8 	bl	800cef0 <__malloc_lock>
 800c9a0:	4a1c      	ldr	r2, [pc, #112]	; (800ca14 <_free_r+0x8c>)
 800c9a2:	6813      	ldr	r3, [r2, #0]
 800c9a4:	b933      	cbnz	r3, 800c9b4 <_free_r+0x2c>
 800c9a6:	6063      	str	r3, [r4, #4]
 800c9a8:	6014      	str	r4, [r2, #0]
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9b0:	f000 baa4 	b.w	800cefc <__malloc_unlock>
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	d908      	bls.n	800c9ca <_free_r+0x42>
 800c9b8:	6820      	ldr	r0, [r4, #0]
 800c9ba:	1821      	adds	r1, r4, r0
 800c9bc:	428b      	cmp	r3, r1
 800c9be:	bf01      	itttt	eq
 800c9c0:	6819      	ldreq	r1, [r3, #0]
 800c9c2:	685b      	ldreq	r3, [r3, #4]
 800c9c4:	1809      	addeq	r1, r1, r0
 800c9c6:	6021      	streq	r1, [r4, #0]
 800c9c8:	e7ed      	b.n	800c9a6 <_free_r+0x1e>
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	b10b      	cbz	r3, 800c9d4 <_free_r+0x4c>
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	d9fa      	bls.n	800c9ca <_free_r+0x42>
 800c9d4:	6811      	ldr	r1, [r2, #0]
 800c9d6:	1850      	adds	r0, r2, r1
 800c9d8:	42a0      	cmp	r0, r4
 800c9da:	d10b      	bne.n	800c9f4 <_free_r+0x6c>
 800c9dc:	6820      	ldr	r0, [r4, #0]
 800c9de:	4401      	add	r1, r0
 800c9e0:	1850      	adds	r0, r2, r1
 800c9e2:	4283      	cmp	r3, r0
 800c9e4:	6011      	str	r1, [r2, #0]
 800c9e6:	d1e0      	bne.n	800c9aa <_free_r+0x22>
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	4401      	add	r1, r0
 800c9ee:	6011      	str	r1, [r2, #0]
 800c9f0:	6053      	str	r3, [r2, #4]
 800c9f2:	e7da      	b.n	800c9aa <_free_r+0x22>
 800c9f4:	d902      	bls.n	800c9fc <_free_r+0x74>
 800c9f6:	230c      	movs	r3, #12
 800c9f8:	602b      	str	r3, [r5, #0]
 800c9fa:	e7d6      	b.n	800c9aa <_free_r+0x22>
 800c9fc:	6820      	ldr	r0, [r4, #0]
 800c9fe:	1821      	adds	r1, r4, r0
 800ca00:	428b      	cmp	r3, r1
 800ca02:	bf01      	itttt	eq
 800ca04:	6819      	ldreq	r1, [r3, #0]
 800ca06:	685b      	ldreq	r3, [r3, #4]
 800ca08:	1809      	addeq	r1, r1, r0
 800ca0a:	6021      	streq	r1, [r4, #0]
 800ca0c:	6063      	str	r3, [r4, #4]
 800ca0e:	6054      	str	r4, [r2, #4]
 800ca10:	e7cb      	b.n	800c9aa <_free_r+0x22>
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	200012ec 	.word	0x200012ec

0800ca18 <sbrk_aligned>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	4e0e      	ldr	r6, [pc, #56]	; (800ca54 <sbrk_aligned+0x3c>)
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	6831      	ldr	r1, [r6, #0]
 800ca20:	4605      	mov	r5, r0
 800ca22:	b911      	cbnz	r1, 800ca2a <sbrk_aligned+0x12>
 800ca24:	f000 f9e8 	bl	800cdf8 <_sbrk_r>
 800ca28:	6030      	str	r0, [r6, #0]
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f000 f9e3 	bl	800cdf8 <_sbrk_r>
 800ca32:	1c43      	adds	r3, r0, #1
 800ca34:	d00a      	beq.n	800ca4c <sbrk_aligned+0x34>
 800ca36:	1cc4      	adds	r4, r0, #3
 800ca38:	f024 0403 	bic.w	r4, r4, #3
 800ca3c:	42a0      	cmp	r0, r4
 800ca3e:	d007      	beq.n	800ca50 <sbrk_aligned+0x38>
 800ca40:	1a21      	subs	r1, r4, r0
 800ca42:	4628      	mov	r0, r5
 800ca44:	f000 f9d8 	bl	800cdf8 <_sbrk_r>
 800ca48:	3001      	adds	r0, #1
 800ca4a:	d101      	bne.n	800ca50 <sbrk_aligned+0x38>
 800ca4c:	f04f 34ff 	mov.w	r4, #4294967295
 800ca50:	4620      	mov	r0, r4
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	200012f0 	.word	0x200012f0

0800ca58 <_malloc_r>:
 800ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5c:	1ccd      	adds	r5, r1, #3
 800ca5e:	f025 0503 	bic.w	r5, r5, #3
 800ca62:	3508      	adds	r5, #8
 800ca64:	2d0c      	cmp	r5, #12
 800ca66:	bf38      	it	cc
 800ca68:	250c      	movcc	r5, #12
 800ca6a:	2d00      	cmp	r5, #0
 800ca6c:	4607      	mov	r7, r0
 800ca6e:	db01      	blt.n	800ca74 <_malloc_r+0x1c>
 800ca70:	42a9      	cmp	r1, r5
 800ca72:	d905      	bls.n	800ca80 <_malloc_r+0x28>
 800ca74:	230c      	movs	r3, #12
 800ca76:	2600      	movs	r6, #0
 800ca78:	603b      	str	r3, [r7, #0]
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca80:	4e2e      	ldr	r6, [pc, #184]	; (800cb3c <_malloc_r+0xe4>)
 800ca82:	f000 fa35 	bl	800cef0 <__malloc_lock>
 800ca86:	6833      	ldr	r3, [r6, #0]
 800ca88:	461c      	mov	r4, r3
 800ca8a:	bb34      	cbnz	r4, 800cada <_malloc_r+0x82>
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	4638      	mov	r0, r7
 800ca90:	f7ff ffc2 	bl	800ca18 <sbrk_aligned>
 800ca94:	1c43      	adds	r3, r0, #1
 800ca96:	4604      	mov	r4, r0
 800ca98:	d14d      	bne.n	800cb36 <_malloc_r+0xde>
 800ca9a:	6834      	ldr	r4, [r6, #0]
 800ca9c:	4626      	mov	r6, r4
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	d140      	bne.n	800cb24 <_malloc_r+0xcc>
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	4631      	mov	r1, r6
 800caa6:	4638      	mov	r0, r7
 800caa8:	eb04 0803 	add.w	r8, r4, r3
 800caac:	f000 f9a4 	bl	800cdf8 <_sbrk_r>
 800cab0:	4580      	cmp	r8, r0
 800cab2:	d13a      	bne.n	800cb2a <_malloc_r+0xd2>
 800cab4:	6821      	ldr	r1, [r4, #0]
 800cab6:	3503      	adds	r5, #3
 800cab8:	1a6d      	subs	r5, r5, r1
 800caba:	f025 0503 	bic.w	r5, r5, #3
 800cabe:	3508      	adds	r5, #8
 800cac0:	2d0c      	cmp	r5, #12
 800cac2:	bf38      	it	cc
 800cac4:	250c      	movcc	r5, #12
 800cac6:	4638      	mov	r0, r7
 800cac8:	4629      	mov	r1, r5
 800caca:	f7ff ffa5 	bl	800ca18 <sbrk_aligned>
 800cace:	3001      	adds	r0, #1
 800cad0:	d02b      	beq.n	800cb2a <_malloc_r+0xd2>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	442b      	add	r3, r5
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	e00e      	b.n	800caf8 <_malloc_r+0xa0>
 800cada:	6822      	ldr	r2, [r4, #0]
 800cadc:	1b52      	subs	r2, r2, r5
 800cade:	d41e      	bmi.n	800cb1e <_malloc_r+0xc6>
 800cae0:	2a0b      	cmp	r2, #11
 800cae2:	d916      	bls.n	800cb12 <_malloc_r+0xba>
 800cae4:	1961      	adds	r1, r4, r5
 800cae6:	42a3      	cmp	r3, r4
 800cae8:	6025      	str	r5, [r4, #0]
 800caea:	bf18      	it	ne
 800caec:	6059      	strne	r1, [r3, #4]
 800caee:	6863      	ldr	r3, [r4, #4]
 800caf0:	bf08      	it	eq
 800caf2:	6031      	streq	r1, [r6, #0]
 800caf4:	5162      	str	r2, [r4, r5]
 800caf6:	604b      	str	r3, [r1, #4]
 800caf8:	4638      	mov	r0, r7
 800cafa:	f104 060b 	add.w	r6, r4, #11
 800cafe:	f000 f9fd 	bl	800cefc <__malloc_unlock>
 800cb02:	f026 0607 	bic.w	r6, r6, #7
 800cb06:	1d23      	adds	r3, r4, #4
 800cb08:	1af2      	subs	r2, r6, r3
 800cb0a:	d0b6      	beq.n	800ca7a <_malloc_r+0x22>
 800cb0c:	1b9b      	subs	r3, r3, r6
 800cb0e:	50a3      	str	r3, [r4, r2]
 800cb10:	e7b3      	b.n	800ca7a <_malloc_r+0x22>
 800cb12:	6862      	ldr	r2, [r4, #4]
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	bf0c      	ite	eq
 800cb18:	6032      	streq	r2, [r6, #0]
 800cb1a:	605a      	strne	r2, [r3, #4]
 800cb1c:	e7ec      	b.n	800caf8 <_malloc_r+0xa0>
 800cb1e:	4623      	mov	r3, r4
 800cb20:	6864      	ldr	r4, [r4, #4]
 800cb22:	e7b2      	b.n	800ca8a <_malloc_r+0x32>
 800cb24:	4634      	mov	r4, r6
 800cb26:	6876      	ldr	r6, [r6, #4]
 800cb28:	e7b9      	b.n	800ca9e <_malloc_r+0x46>
 800cb2a:	230c      	movs	r3, #12
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	603b      	str	r3, [r7, #0]
 800cb30:	f000 f9e4 	bl	800cefc <__malloc_unlock>
 800cb34:	e7a1      	b.n	800ca7a <_malloc_r+0x22>
 800cb36:	6025      	str	r5, [r4, #0]
 800cb38:	e7de      	b.n	800caf8 <_malloc_r+0xa0>
 800cb3a:	bf00      	nop
 800cb3c:	200012ec 	.word	0x200012ec

0800cb40 <__ssputs_r>:
 800cb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb44:	688e      	ldr	r6, [r1, #8]
 800cb46:	4682      	mov	sl, r0
 800cb48:	429e      	cmp	r6, r3
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	4690      	mov	r8, r2
 800cb4e:	461f      	mov	r7, r3
 800cb50:	d838      	bhi.n	800cbc4 <__ssputs_r+0x84>
 800cb52:	898a      	ldrh	r2, [r1, #12]
 800cb54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb58:	d032      	beq.n	800cbc0 <__ssputs_r+0x80>
 800cb5a:	6825      	ldr	r5, [r4, #0]
 800cb5c:	6909      	ldr	r1, [r1, #16]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	eba5 0901 	sub.w	r9, r5, r1
 800cb64:	6965      	ldr	r5, [r4, #20]
 800cb66:	444b      	add	r3, r9
 800cb68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb70:	106d      	asrs	r5, r5, #1
 800cb72:	429d      	cmp	r5, r3
 800cb74:	bf38      	it	cc
 800cb76:	461d      	movcc	r5, r3
 800cb78:	0553      	lsls	r3, r2, #21
 800cb7a:	d531      	bpl.n	800cbe0 <__ssputs_r+0xa0>
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7ff ff6b 	bl	800ca58 <_malloc_r>
 800cb82:	4606      	mov	r6, r0
 800cb84:	b950      	cbnz	r0, 800cb9c <__ssputs_r+0x5c>
 800cb86:	230c      	movs	r3, #12
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8c:	f8ca 3000 	str.w	r3, [sl]
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb96:	81a3      	strh	r3, [r4, #12]
 800cb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9c:	464a      	mov	r2, r9
 800cb9e:	6921      	ldr	r1, [r4, #16]
 800cba0:	f7fc fa9a 	bl	80090d8 <memcpy>
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	6126      	str	r6, [r4, #16]
 800cbb2:	444e      	add	r6, r9
 800cbb4:	6026      	str	r6, [r4, #0]
 800cbb6:	463e      	mov	r6, r7
 800cbb8:	6165      	str	r5, [r4, #20]
 800cbba:	eba5 0509 	sub.w	r5, r5, r9
 800cbbe:	60a5      	str	r5, [r4, #8]
 800cbc0:	42be      	cmp	r6, r7
 800cbc2:	d900      	bls.n	800cbc6 <__ssputs_r+0x86>
 800cbc4:	463e      	mov	r6, r7
 800cbc6:	4632      	mov	r2, r6
 800cbc8:	4641      	mov	r1, r8
 800cbca:	6820      	ldr	r0, [r4, #0]
 800cbcc:	f000 f976 	bl	800cebc <memmove>
 800cbd0:	68a3      	ldr	r3, [r4, #8]
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	1b9b      	subs	r3, r3, r6
 800cbd6:	60a3      	str	r3, [r4, #8]
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	4433      	add	r3, r6
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	e7db      	b.n	800cb98 <__ssputs_r+0x58>
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	f000 f991 	bl	800cf08 <_realloc_r>
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d1e1      	bne.n	800cbb0 <__ssputs_r+0x70>
 800cbec:	4650      	mov	r0, sl
 800cbee:	6921      	ldr	r1, [r4, #16]
 800cbf0:	f7ff feca 	bl	800c988 <_free_r>
 800cbf4:	e7c7      	b.n	800cb86 <__ssputs_r+0x46>
	...

0800cbf8 <_svfiprintf_r>:
 800cbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfc:	4698      	mov	r8, r3
 800cbfe:	898b      	ldrh	r3, [r1, #12]
 800cc00:	4607      	mov	r7, r0
 800cc02:	061b      	lsls	r3, r3, #24
 800cc04:	460d      	mov	r5, r1
 800cc06:	4614      	mov	r4, r2
 800cc08:	b09d      	sub	sp, #116	; 0x74
 800cc0a:	d50e      	bpl.n	800cc2a <_svfiprintf_r+0x32>
 800cc0c:	690b      	ldr	r3, [r1, #16]
 800cc0e:	b963      	cbnz	r3, 800cc2a <_svfiprintf_r+0x32>
 800cc10:	2140      	movs	r1, #64	; 0x40
 800cc12:	f7ff ff21 	bl	800ca58 <_malloc_r>
 800cc16:	6028      	str	r0, [r5, #0]
 800cc18:	6128      	str	r0, [r5, #16]
 800cc1a:	b920      	cbnz	r0, 800cc26 <_svfiprintf_r+0x2e>
 800cc1c:	230c      	movs	r3, #12
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	f04f 30ff 	mov.w	r0, #4294967295
 800cc24:	e0d1      	b.n	800cdca <_svfiprintf_r+0x1d2>
 800cc26:	2340      	movs	r3, #64	; 0x40
 800cc28:	616b      	str	r3, [r5, #20]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc2e:	2320      	movs	r3, #32
 800cc30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc34:	2330      	movs	r3, #48	; 0x30
 800cc36:	f04f 0901 	mov.w	r9, #1
 800cc3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cde4 <_svfiprintf_r+0x1ec>
 800cc42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc46:	4623      	mov	r3, r4
 800cc48:	469a      	mov	sl, r3
 800cc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc4e:	b10a      	cbz	r2, 800cc54 <_svfiprintf_r+0x5c>
 800cc50:	2a25      	cmp	r2, #37	; 0x25
 800cc52:	d1f9      	bne.n	800cc48 <_svfiprintf_r+0x50>
 800cc54:	ebba 0b04 	subs.w	fp, sl, r4
 800cc58:	d00b      	beq.n	800cc72 <_svfiprintf_r+0x7a>
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4638      	mov	r0, r7
 800cc62:	f7ff ff6d 	bl	800cb40 <__ssputs_r>
 800cc66:	3001      	adds	r0, #1
 800cc68:	f000 80aa 	beq.w	800cdc0 <_svfiprintf_r+0x1c8>
 800cc6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc6e:	445a      	add	r2, fp
 800cc70:	9209      	str	r2, [sp, #36]	; 0x24
 800cc72:	f89a 3000 	ldrb.w	r3, [sl]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 80a2 	beq.w	800cdc0 <_svfiprintf_r+0x1c8>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc86:	f10a 0a01 	add.w	sl, sl, #1
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	9307      	str	r3, [sp, #28]
 800cc8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc92:	931a      	str	r3, [sp, #104]	; 0x68
 800cc94:	4654      	mov	r4, sl
 800cc96:	2205      	movs	r2, #5
 800cc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc9c:	4851      	ldr	r0, [pc, #324]	; (800cde4 <_svfiprintf_r+0x1ec>)
 800cc9e:	f7ff f999 	bl	800bfd4 <memchr>
 800cca2:	9a04      	ldr	r2, [sp, #16]
 800cca4:	b9d8      	cbnz	r0, 800ccde <_svfiprintf_r+0xe6>
 800cca6:	06d0      	lsls	r0, r2, #27
 800cca8:	bf44      	itt	mi
 800ccaa:	2320      	movmi	r3, #32
 800ccac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccb0:	0711      	lsls	r1, r2, #28
 800ccb2:	bf44      	itt	mi
 800ccb4:	232b      	movmi	r3, #43	; 0x2b
 800ccb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccba:	f89a 3000 	ldrb.w	r3, [sl]
 800ccbe:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc0:	d015      	beq.n	800ccee <_svfiprintf_r+0xf6>
 800ccc2:	4654      	mov	r4, sl
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	f04f 0c0a 	mov.w	ip, #10
 800ccca:	9a07      	ldr	r2, [sp, #28]
 800cccc:	4621      	mov	r1, r4
 800ccce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccd2:	3b30      	subs	r3, #48	; 0x30
 800ccd4:	2b09      	cmp	r3, #9
 800ccd6:	d94e      	bls.n	800cd76 <_svfiprintf_r+0x17e>
 800ccd8:	b1b0      	cbz	r0, 800cd08 <_svfiprintf_r+0x110>
 800ccda:	9207      	str	r2, [sp, #28]
 800ccdc:	e014      	b.n	800cd08 <_svfiprintf_r+0x110>
 800ccde:	eba0 0308 	sub.w	r3, r0, r8
 800cce2:	fa09 f303 	lsl.w	r3, r9, r3
 800cce6:	4313      	orrs	r3, r2
 800cce8:	46a2      	mov	sl, r4
 800ccea:	9304      	str	r3, [sp, #16]
 800ccec:	e7d2      	b.n	800cc94 <_svfiprintf_r+0x9c>
 800ccee:	9b03      	ldr	r3, [sp, #12]
 800ccf0:	1d19      	adds	r1, r3, #4
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	9103      	str	r1, [sp, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	bfbb      	ittet	lt
 800ccfa:	425b      	neglt	r3, r3
 800ccfc:	f042 0202 	orrlt.w	r2, r2, #2
 800cd00:	9307      	strge	r3, [sp, #28]
 800cd02:	9307      	strlt	r3, [sp, #28]
 800cd04:	bfb8      	it	lt
 800cd06:	9204      	strlt	r2, [sp, #16]
 800cd08:	7823      	ldrb	r3, [r4, #0]
 800cd0a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd0c:	d10c      	bne.n	800cd28 <_svfiprintf_r+0x130>
 800cd0e:	7863      	ldrb	r3, [r4, #1]
 800cd10:	2b2a      	cmp	r3, #42	; 0x2a
 800cd12:	d135      	bne.n	800cd80 <_svfiprintf_r+0x188>
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	3402      	adds	r4, #2
 800cd18:	1d1a      	adds	r2, r3, #4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	9203      	str	r2, [sp, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	bfb8      	it	lt
 800cd22:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd26:	9305      	str	r3, [sp, #20]
 800cd28:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cde8 <_svfiprintf_r+0x1f0>
 800cd2c:	2203      	movs	r2, #3
 800cd2e:	4650      	mov	r0, sl
 800cd30:	7821      	ldrb	r1, [r4, #0]
 800cd32:	f7ff f94f 	bl	800bfd4 <memchr>
 800cd36:	b140      	cbz	r0, 800cd4a <_svfiprintf_r+0x152>
 800cd38:	2340      	movs	r3, #64	; 0x40
 800cd3a:	eba0 000a 	sub.w	r0, r0, sl
 800cd3e:	fa03 f000 	lsl.w	r0, r3, r0
 800cd42:	9b04      	ldr	r3, [sp, #16]
 800cd44:	3401      	adds	r4, #1
 800cd46:	4303      	orrs	r3, r0
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4e:	2206      	movs	r2, #6
 800cd50:	4826      	ldr	r0, [pc, #152]	; (800cdec <_svfiprintf_r+0x1f4>)
 800cd52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd56:	f7ff f93d 	bl	800bfd4 <memchr>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d038      	beq.n	800cdd0 <_svfiprintf_r+0x1d8>
 800cd5e:	4b24      	ldr	r3, [pc, #144]	; (800cdf0 <_svfiprintf_r+0x1f8>)
 800cd60:	bb1b      	cbnz	r3, 800cdaa <_svfiprintf_r+0x1b2>
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	3307      	adds	r3, #7
 800cd66:	f023 0307 	bic.w	r3, r3, #7
 800cd6a:	3308      	adds	r3, #8
 800cd6c:	9303      	str	r3, [sp, #12]
 800cd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd70:	4433      	add	r3, r6
 800cd72:	9309      	str	r3, [sp, #36]	; 0x24
 800cd74:	e767      	b.n	800cc46 <_svfiprintf_r+0x4e>
 800cd76:	460c      	mov	r4, r1
 800cd78:	2001      	movs	r0, #1
 800cd7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd7e:	e7a5      	b.n	800cccc <_svfiprintf_r+0xd4>
 800cd80:	2300      	movs	r3, #0
 800cd82:	f04f 0c0a 	mov.w	ip, #10
 800cd86:	4619      	mov	r1, r3
 800cd88:	3401      	adds	r4, #1
 800cd8a:	9305      	str	r3, [sp, #20]
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd92:	3a30      	subs	r2, #48	; 0x30
 800cd94:	2a09      	cmp	r2, #9
 800cd96:	d903      	bls.n	800cda0 <_svfiprintf_r+0x1a8>
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d0c5      	beq.n	800cd28 <_svfiprintf_r+0x130>
 800cd9c:	9105      	str	r1, [sp, #20]
 800cd9e:	e7c3      	b.n	800cd28 <_svfiprintf_r+0x130>
 800cda0:	4604      	mov	r4, r0
 800cda2:	2301      	movs	r3, #1
 800cda4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cda8:	e7f0      	b.n	800cd8c <_svfiprintf_r+0x194>
 800cdaa:	ab03      	add	r3, sp, #12
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	462a      	mov	r2, r5
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	4b10      	ldr	r3, [pc, #64]	; (800cdf4 <_svfiprintf_r+0x1fc>)
 800cdb4:	a904      	add	r1, sp, #16
 800cdb6:	f7fc fa43 	bl	8009240 <_printf_float>
 800cdba:	1c42      	adds	r2, r0, #1
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	d1d6      	bne.n	800cd6e <_svfiprintf_r+0x176>
 800cdc0:	89ab      	ldrh	r3, [r5, #12]
 800cdc2:	065b      	lsls	r3, r3, #25
 800cdc4:	f53f af2c 	bmi.w	800cc20 <_svfiprintf_r+0x28>
 800cdc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdca:	b01d      	add	sp, #116	; 0x74
 800cdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd0:	ab03      	add	r3, sp, #12
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	462a      	mov	r2, r5
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	4b06      	ldr	r3, [pc, #24]	; (800cdf4 <_svfiprintf_r+0x1fc>)
 800cdda:	a904      	add	r1, sp, #16
 800cddc:	f7fc fccc 	bl	8009778 <_printf_i>
 800cde0:	e7eb      	b.n	800cdba <_svfiprintf_r+0x1c2>
 800cde2:	bf00      	nop
 800cde4:	0800e36c 	.word	0x0800e36c
 800cde8:	0800e372 	.word	0x0800e372
 800cdec:	0800e376 	.word	0x0800e376
 800cdf0:	08009241 	.word	0x08009241
 800cdf4:	0800cb41 	.word	0x0800cb41

0800cdf8 <_sbrk_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4d05      	ldr	r5, [pc, #20]	; (800ce14 <_sbrk_r+0x1c>)
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4608      	mov	r0, r1
 800ce02:	602b      	str	r3, [r5, #0]
 800ce04:	f7f7 fd8e 	bl	8004924 <_sbrk>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_sbrk_r+0x1a>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_sbrk_r+0x1a>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	200012f4 	.word	0x200012f4

0800ce18 <strncmp>:
 800ce18:	4603      	mov	r3, r0
 800ce1a:	b510      	push	{r4, lr}
 800ce1c:	b172      	cbz	r2, 800ce3c <strncmp+0x24>
 800ce1e:	3901      	subs	r1, #1
 800ce20:	1884      	adds	r4, r0, r2
 800ce22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce2a:	4290      	cmp	r0, r2
 800ce2c:	d101      	bne.n	800ce32 <strncmp+0x1a>
 800ce2e:	42a3      	cmp	r3, r4
 800ce30:	d101      	bne.n	800ce36 <strncmp+0x1e>
 800ce32:	1a80      	subs	r0, r0, r2
 800ce34:	bd10      	pop	{r4, pc}
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d1f3      	bne.n	800ce22 <strncmp+0xa>
 800ce3a:	e7fa      	b.n	800ce32 <strncmp+0x1a>
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	e7f9      	b.n	800ce34 <strncmp+0x1c>

0800ce40 <__ascii_wctomb>:
 800ce40:	4603      	mov	r3, r0
 800ce42:	4608      	mov	r0, r1
 800ce44:	b141      	cbz	r1, 800ce58 <__ascii_wctomb+0x18>
 800ce46:	2aff      	cmp	r2, #255	; 0xff
 800ce48:	d904      	bls.n	800ce54 <__ascii_wctomb+0x14>
 800ce4a:	228a      	movs	r2, #138	; 0x8a
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	4770      	bx	lr
 800ce54:	2001      	movs	r0, #1
 800ce56:	700a      	strb	r2, [r1, #0]
 800ce58:	4770      	bx	lr
	...

0800ce5c <__assert_func>:
 800ce5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce5e:	4614      	mov	r4, r2
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b09      	ldr	r3, [pc, #36]	; (800ce88 <__assert_func+0x2c>)
 800ce64:	4605      	mov	r5, r0
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68d8      	ldr	r0, [r3, #12]
 800ce6a:	b14c      	cbz	r4, 800ce80 <__assert_func+0x24>
 800ce6c:	4b07      	ldr	r3, [pc, #28]	; (800ce8c <__assert_func+0x30>)
 800ce6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce72:	9100      	str	r1, [sp, #0]
 800ce74:	462b      	mov	r3, r5
 800ce76:	4906      	ldr	r1, [pc, #24]	; (800ce90 <__assert_func+0x34>)
 800ce78:	f000 f80e 	bl	800ce98 <fiprintf>
 800ce7c:	f000 fa8a 	bl	800d394 <abort>
 800ce80:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <__assert_func+0x38>)
 800ce82:	461c      	mov	r4, r3
 800ce84:	e7f3      	b.n	800ce6e <__assert_func+0x12>
 800ce86:	bf00      	nop
 800ce88:	200000d0 	.word	0x200000d0
 800ce8c:	0800e37d 	.word	0x0800e37d
 800ce90:	0800e38a 	.word	0x0800e38a
 800ce94:	0800e3b8 	.word	0x0800e3b8

0800ce98 <fiprintf>:
 800ce98:	b40e      	push	{r1, r2, r3}
 800ce9a:	b503      	push	{r0, r1, lr}
 800ce9c:	4601      	mov	r1, r0
 800ce9e:	ab03      	add	r3, sp, #12
 800cea0:	4805      	ldr	r0, [pc, #20]	; (800ceb8 <fiprintf+0x20>)
 800cea2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea6:	6800      	ldr	r0, [r0, #0]
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	f000 f883 	bl	800cfb4 <_vfiprintf_r>
 800ceae:	b002      	add	sp, #8
 800ceb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceb4:	b003      	add	sp, #12
 800ceb6:	4770      	bx	lr
 800ceb8:	200000d0 	.word	0x200000d0

0800cebc <memmove>:
 800cebc:	4288      	cmp	r0, r1
 800cebe:	b510      	push	{r4, lr}
 800cec0:	eb01 0402 	add.w	r4, r1, r2
 800cec4:	d902      	bls.n	800cecc <memmove+0x10>
 800cec6:	4284      	cmp	r4, r0
 800cec8:	4623      	mov	r3, r4
 800ceca:	d807      	bhi.n	800cedc <memmove+0x20>
 800cecc:	1e43      	subs	r3, r0, #1
 800cece:	42a1      	cmp	r1, r4
 800ced0:	d008      	beq.n	800cee4 <memmove+0x28>
 800ced2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ced6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceda:	e7f8      	b.n	800cece <memmove+0x12>
 800cedc:	4601      	mov	r1, r0
 800cede:	4402      	add	r2, r0
 800cee0:	428a      	cmp	r2, r1
 800cee2:	d100      	bne.n	800cee6 <memmove+0x2a>
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceee:	e7f7      	b.n	800cee0 <memmove+0x24>

0800cef0 <__malloc_lock>:
 800cef0:	4801      	ldr	r0, [pc, #4]	; (800cef8 <__malloc_lock+0x8>)
 800cef2:	f000 bc0b 	b.w	800d70c <__retarget_lock_acquire_recursive>
 800cef6:	bf00      	nop
 800cef8:	200012f8 	.word	0x200012f8

0800cefc <__malloc_unlock>:
 800cefc:	4801      	ldr	r0, [pc, #4]	; (800cf04 <__malloc_unlock+0x8>)
 800cefe:	f000 bc06 	b.w	800d70e <__retarget_lock_release_recursive>
 800cf02:	bf00      	nop
 800cf04:	200012f8 	.word	0x200012f8

0800cf08 <_realloc_r>:
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	4680      	mov	r8, r0
 800cf0e:	4614      	mov	r4, r2
 800cf10:	460e      	mov	r6, r1
 800cf12:	b921      	cbnz	r1, 800cf1e <_realloc_r+0x16>
 800cf14:	4611      	mov	r1, r2
 800cf16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1a:	f7ff bd9d 	b.w	800ca58 <_malloc_r>
 800cf1e:	b92a      	cbnz	r2, 800cf2c <_realloc_r+0x24>
 800cf20:	f7ff fd32 	bl	800c988 <_free_r>
 800cf24:	4625      	mov	r5, r4
 800cf26:	4628      	mov	r0, r5
 800cf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2c:	f000 fc56 	bl	800d7dc <_malloc_usable_size_r>
 800cf30:	4284      	cmp	r4, r0
 800cf32:	4607      	mov	r7, r0
 800cf34:	d802      	bhi.n	800cf3c <_realloc_r+0x34>
 800cf36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf3a:	d812      	bhi.n	800cf62 <_realloc_r+0x5a>
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	4640      	mov	r0, r8
 800cf40:	f7ff fd8a 	bl	800ca58 <_malloc_r>
 800cf44:	4605      	mov	r5, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d0ed      	beq.n	800cf26 <_realloc_r+0x1e>
 800cf4a:	42bc      	cmp	r4, r7
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4631      	mov	r1, r6
 800cf50:	bf28      	it	cs
 800cf52:	463a      	movcs	r2, r7
 800cf54:	f7fc f8c0 	bl	80090d8 <memcpy>
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	f7ff fd14 	bl	800c988 <_free_r>
 800cf60:	e7e1      	b.n	800cf26 <_realloc_r+0x1e>
 800cf62:	4635      	mov	r5, r6
 800cf64:	e7df      	b.n	800cf26 <_realloc_r+0x1e>

0800cf66 <__sfputc_r>:
 800cf66:	6893      	ldr	r3, [r2, #8]
 800cf68:	b410      	push	{r4}
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	6093      	str	r3, [r2, #8]
 800cf70:	da07      	bge.n	800cf82 <__sfputc_r+0x1c>
 800cf72:	6994      	ldr	r4, [r2, #24]
 800cf74:	42a3      	cmp	r3, r4
 800cf76:	db01      	blt.n	800cf7c <__sfputc_r+0x16>
 800cf78:	290a      	cmp	r1, #10
 800cf7a:	d102      	bne.n	800cf82 <__sfputc_r+0x1c>
 800cf7c:	bc10      	pop	{r4}
 800cf7e:	f000 b949 	b.w	800d214 <__swbuf_r>
 800cf82:	6813      	ldr	r3, [r2, #0]
 800cf84:	1c58      	adds	r0, r3, #1
 800cf86:	6010      	str	r0, [r2, #0]
 800cf88:	7019      	strb	r1, [r3, #0]
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	bc10      	pop	{r4}
 800cf8e:	4770      	bx	lr

0800cf90 <__sfputs_r>:
 800cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf92:	4606      	mov	r6, r0
 800cf94:	460f      	mov	r7, r1
 800cf96:	4614      	mov	r4, r2
 800cf98:	18d5      	adds	r5, r2, r3
 800cf9a:	42ac      	cmp	r4, r5
 800cf9c:	d101      	bne.n	800cfa2 <__sfputs_r+0x12>
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	e007      	b.n	800cfb2 <__sfputs_r+0x22>
 800cfa2:	463a      	mov	r2, r7
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfaa:	f7ff ffdc 	bl	800cf66 <__sfputc_r>
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	d1f3      	bne.n	800cf9a <__sfputs_r+0xa>
 800cfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfb4 <_vfiprintf_r>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	460d      	mov	r5, r1
 800cfba:	4614      	mov	r4, r2
 800cfbc:	4698      	mov	r8, r3
 800cfbe:	4606      	mov	r6, r0
 800cfc0:	b09d      	sub	sp, #116	; 0x74
 800cfc2:	b118      	cbz	r0, 800cfcc <_vfiprintf_r+0x18>
 800cfc4:	6983      	ldr	r3, [r0, #24]
 800cfc6:	b90b      	cbnz	r3, 800cfcc <_vfiprintf_r+0x18>
 800cfc8:	f000 fb02 	bl	800d5d0 <__sinit>
 800cfcc:	4b89      	ldr	r3, [pc, #548]	; (800d1f4 <_vfiprintf_r+0x240>)
 800cfce:	429d      	cmp	r5, r3
 800cfd0:	d11b      	bne.n	800d00a <_vfiprintf_r+0x56>
 800cfd2:	6875      	ldr	r5, [r6, #4]
 800cfd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfd6:	07d9      	lsls	r1, r3, #31
 800cfd8:	d405      	bmi.n	800cfe6 <_vfiprintf_r+0x32>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	059a      	lsls	r2, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_vfiprintf_r+0x32>
 800cfe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe2:	f000 fb93 	bl	800d70c <__retarget_lock_acquire_recursive>
 800cfe6:	89ab      	ldrh	r3, [r5, #12]
 800cfe8:	071b      	lsls	r3, r3, #28
 800cfea:	d501      	bpl.n	800cff0 <_vfiprintf_r+0x3c>
 800cfec:	692b      	ldr	r3, [r5, #16]
 800cfee:	b9eb      	cbnz	r3, 800d02c <_vfiprintf_r+0x78>
 800cff0:	4629      	mov	r1, r5
 800cff2:	4630      	mov	r0, r6
 800cff4:	f000 f960 	bl	800d2b8 <__swsetup_r>
 800cff8:	b1c0      	cbz	r0, 800d02c <_vfiprintf_r+0x78>
 800cffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cffc:	07dc      	lsls	r4, r3, #31
 800cffe:	d50e      	bpl.n	800d01e <_vfiprintf_r+0x6a>
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	b01d      	add	sp, #116	; 0x74
 800d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00a:	4b7b      	ldr	r3, [pc, #492]	; (800d1f8 <_vfiprintf_r+0x244>)
 800d00c:	429d      	cmp	r5, r3
 800d00e:	d101      	bne.n	800d014 <_vfiprintf_r+0x60>
 800d010:	68b5      	ldr	r5, [r6, #8]
 800d012:	e7df      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d014:	4b79      	ldr	r3, [pc, #484]	; (800d1fc <_vfiprintf_r+0x248>)
 800d016:	429d      	cmp	r5, r3
 800d018:	bf08      	it	eq
 800d01a:	68f5      	ldreq	r5, [r6, #12]
 800d01c:	e7da      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d01e:	89ab      	ldrh	r3, [r5, #12]
 800d020:	0598      	lsls	r0, r3, #22
 800d022:	d4ed      	bmi.n	800d000 <_vfiprintf_r+0x4c>
 800d024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d026:	f000 fb72 	bl	800d70e <__retarget_lock_release_recursive>
 800d02a:	e7e9      	b.n	800d000 <_vfiprintf_r+0x4c>
 800d02c:	2300      	movs	r3, #0
 800d02e:	9309      	str	r3, [sp, #36]	; 0x24
 800d030:	2320      	movs	r3, #32
 800d032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d036:	2330      	movs	r3, #48	; 0x30
 800d038:	f04f 0901 	mov.w	r9, #1
 800d03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d040:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d200 <_vfiprintf_r+0x24c>
 800d044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d048:	4623      	mov	r3, r4
 800d04a:	469a      	mov	sl, r3
 800d04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d050:	b10a      	cbz	r2, 800d056 <_vfiprintf_r+0xa2>
 800d052:	2a25      	cmp	r2, #37	; 0x25
 800d054:	d1f9      	bne.n	800d04a <_vfiprintf_r+0x96>
 800d056:	ebba 0b04 	subs.w	fp, sl, r4
 800d05a:	d00b      	beq.n	800d074 <_vfiprintf_r+0xc0>
 800d05c:	465b      	mov	r3, fp
 800d05e:	4622      	mov	r2, r4
 800d060:	4629      	mov	r1, r5
 800d062:	4630      	mov	r0, r6
 800d064:	f7ff ff94 	bl	800cf90 <__sfputs_r>
 800d068:	3001      	adds	r0, #1
 800d06a:	f000 80aa 	beq.w	800d1c2 <_vfiprintf_r+0x20e>
 800d06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d070:	445a      	add	r2, fp
 800d072:	9209      	str	r2, [sp, #36]	; 0x24
 800d074:	f89a 3000 	ldrb.w	r3, [sl]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80a2 	beq.w	800d1c2 <_vfiprintf_r+0x20e>
 800d07e:	2300      	movs	r3, #0
 800d080:	f04f 32ff 	mov.w	r2, #4294967295
 800d084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d088:	f10a 0a01 	add.w	sl, sl, #1
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	9307      	str	r3, [sp, #28]
 800d090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d094:	931a      	str	r3, [sp, #104]	; 0x68
 800d096:	4654      	mov	r4, sl
 800d098:	2205      	movs	r2, #5
 800d09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09e:	4858      	ldr	r0, [pc, #352]	; (800d200 <_vfiprintf_r+0x24c>)
 800d0a0:	f7fe ff98 	bl	800bfd4 <memchr>
 800d0a4:	9a04      	ldr	r2, [sp, #16]
 800d0a6:	b9d8      	cbnz	r0, 800d0e0 <_vfiprintf_r+0x12c>
 800d0a8:	06d1      	lsls	r1, r2, #27
 800d0aa:	bf44      	itt	mi
 800d0ac:	2320      	movmi	r3, #32
 800d0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b2:	0713      	lsls	r3, r2, #28
 800d0b4:	bf44      	itt	mi
 800d0b6:	232b      	movmi	r3, #43	; 0x2b
 800d0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c2:	d015      	beq.n	800d0f0 <_vfiprintf_r+0x13c>
 800d0c4:	4654      	mov	r4, sl
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f04f 0c0a 	mov.w	ip, #10
 800d0cc:	9a07      	ldr	r2, [sp, #28]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d4:	3b30      	subs	r3, #48	; 0x30
 800d0d6:	2b09      	cmp	r3, #9
 800d0d8:	d94e      	bls.n	800d178 <_vfiprintf_r+0x1c4>
 800d0da:	b1b0      	cbz	r0, 800d10a <_vfiprintf_r+0x156>
 800d0dc:	9207      	str	r2, [sp, #28]
 800d0de:	e014      	b.n	800d10a <_vfiprintf_r+0x156>
 800d0e0:	eba0 0308 	sub.w	r3, r0, r8
 800d0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	46a2      	mov	sl, r4
 800d0ec:	9304      	str	r3, [sp, #16]
 800d0ee:	e7d2      	b.n	800d096 <_vfiprintf_r+0xe2>
 800d0f0:	9b03      	ldr	r3, [sp, #12]
 800d0f2:	1d19      	adds	r1, r3, #4
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	9103      	str	r1, [sp, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bfbb      	ittet	lt
 800d0fc:	425b      	neglt	r3, r3
 800d0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d102:	9307      	strge	r3, [sp, #28]
 800d104:	9307      	strlt	r3, [sp, #28]
 800d106:	bfb8      	it	lt
 800d108:	9204      	strlt	r2, [sp, #16]
 800d10a:	7823      	ldrb	r3, [r4, #0]
 800d10c:	2b2e      	cmp	r3, #46	; 0x2e
 800d10e:	d10c      	bne.n	800d12a <_vfiprintf_r+0x176>
 800d110:	7863      	ldrb	r3, [r4, #1]
 800d112:	2b2a      	cmp	r3, #42	; 0x2a
 800d114:	d135      	bne.n	800d182 <_vfiprintf_r+0x1ce>
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	3402      	adds	r4, #2
 800d11a:	1d1a      	adds	r2, r3, #4
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	9203      	str	r2, [sp, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	bfb8      	it	lt
 800d124:	f04f 33ff 	movlt.w	r3, #4294967295
 800d128:	9305      	str	r3, [sp, #20]
 800d12a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d204 <_vfiprintf_r+0x250>
 800d12e:	2203      	movs	r2, #3
 800d130:	4650      	mov	r0, sl
 800d132:	7821      	ldrb	r1, [r4, #0]
 800d134:	f7fe ff4e 	bl	800bfd4 <memchr>
 800d138:	b140      	cbz	r0, 800d14c <_vfiprintf_r+0x198>
 800d13a:	2340      	movs	r3, #64	; 0x40
 800d13c:	eba0 000a 	sub.w	r0, r0, sl
 800d140:	fa03 f000 	lsl.w	r0, r3, r0
 800d144:	9b04      	ldr	r3, [sp, #16]
 800d146:	3401      	adds	r4, #1
 800d148:	4303      	orrs	r3, r0
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d150:	2206      	movs	r2, #6
 800d152:	482d      	ldr	r0, [pc, #180]	; (800d208 <_vfiprintf_r+0x254>)
 800d154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d158:	f7fe ff3c 	bl	800bfd4 <memchr>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d03f      	beq.n	800d1e0 <_vfiprintf_r+0x22c>
 800d160:	4b2a      	ldr	r3, [pc, #168]	; (800d20c <_vfiprintf_r+0x258>)
 800d162:	bb1b      	cbnz	r3, 800d1ac <_vfiprintf_r+0x1f8>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	3307      	adds	r3, #7
 800d168:	f023 0307 	bic.w	r3, r3, #7
 800d16c:	3308      	adds	r3, #8
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d172:	443b      	add	r3, r7
 800d174:	9309      	str	r3, [sp, #36]	; 0x24
 800d176:	e767      	b.n	800d048 <_vfiprintf_r+0x94>
 800d178:	460c      	mov	r4, r1
 800d17a:	2001      	movs	r0, #1
 800d17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d180:	e7a5      	b.n	800d0ce <_vfiprintf_r+0x11a>
 800d182:	2300      	movs	r3, #0
 800d184:	f04f 0c0a 	mov.w	ip, #10
 800d188:	4619      	mov	r1, r3
 800d18a:	3401      	adds	r4, #1
 800d18c:	9305      	str	r3, [sp, #20]
 800d18e:	4620      	mov	r0, r4
 800d190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d194:	3a30      	subs	r2, #48	; 0x30
 800d196:	2a09      	cmp	r2, #9
 800d198:	d903      	bls.n	800d1a2 <_vfiprintf_r+0x1ee>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0c5      	beq.n	800d12a <_vfiprintf_r+0x176>
 800d19e:	9105      	str	r1, [sp, #20]
 800d1a0:	e7c3      	b.n	800d12a <_vfiprintf_r+0x176>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1aa:	e7f0      	b.n	800d18e <_vfiprintf_r+0x1da>
 800d1ac:	ab03      	add	r3, sp, #12
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	462a      	mov	r2, r5
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4b16      	ldr	r3, [pc, #88]	; (800d210 <_vfiprintf_r+0x25c>)
 800d1b6:	a904      	add	r1, sp, #16
 800d1b8:	f7fc f842 	bl	8009240 <_printf_float>
 800d1bc:	4607      	mov	r7, r0
 800d1be:	1c78      	adds	r0, r7, #1
 800d1c0:	d1d6      	bne.n	800d170 <_vfiprintf_r+0x1bc>
 800d1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c4:	07d9      	lsls	r1, r3, #31
 800d1c6:	d405      	bmi.n	800d1d4 <_vfiprintf_r+0x220>
 800d1c8:	89ab      	ldrh	r3, [r5, #12]
 800d1ca:	059a      	lsls	r2, r3, #22
 800d1cc:	d402      	bmi.n	800d1d4 <_vfiprintf_r+0x220>
 800d1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d0:	f000 fa9d 	bl	800d70e <__retarget_lock_release_recursive>
 800d1d4:	89ab      	ldrh	r3, [r5, #12]
 800d1d6:	065b      	lsls	r3, r3, #25
 800d1d8:	f53f af12 	bmi.w	800d000 <_vfiprintf_r+0x4c>
 800d1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1de:	e711      	b.n	800d004 <_vfiprintf_r+0x50>
 800d1e0:	ab03      	add	r3, sp, #12
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	462a      	mov	r2, r5
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4b09      	ldr	r3, [pc, #36]	; (800d210 <_vfiprintf_r+0x25c>)
 800d1ea:	a904      	add	r1, sp, #16
 800d1ec:	f7fc fac4 	bl	8009778 <_printf_i>
 800d1f0:	e7e4      	b.n	800d1bc <_vfiprintf_r+0x208>
 800d1f2:	bf00      	nop
 800d1f4:	0800e3dc 	.word	0x0800e3dc
 800d1f8:	0800e3fc 	.word	0x0800e3fc
 800d1fc:	0800e3bc 	.word	0x0800e3bc
 800d200:	0800e36c 	.word	0x0800e36c
 800d204:	0800e372 	.word	0x0800e372
 800d208:	0800e376 	.word	0x0800e376
 800d20c:	08009241 	.word	0x08009241
 800d210:	0800cf91 	.word	0x0800cf91

0800d214 <__swbuf_r>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	460e      	mov	r6, r1
 800d218:	4614      	mov	r4, r2
 800d21a:	4605      	mov	r5, r0
 800d21c:	b118      	cbz	r0, 800d226 <__swbuf_r+0x12>
 800d21e:	6983      	ldr	r3, [r0, #24]
 800d220:	b90b      	cbnz	r3, 800d226 <__swbuf_r+0x12>
 800d222:	f000 f9d5 	bl	800d5d0 <__sinit>
 800d226:	4b21      	ldr	r3, [pc, #132]	; (800d2ac <__swbuf_r+0x98>)
 800d228:	429c      	cmp	r4, r3
 800d22a:	d12b      	bne.n	800d284 <__swbuf_r+0x70>
 800d22c:	686c      	ldr	r4, [r5, #4]
 800d22e:	69a3      	ldr	r3, [r4, #24]
 800d230:	60a3      	str	r3, [r4, #8]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	071a      	lsls	r2, r3, #28
 800d236:	d52f      	bpl.n	800d298 <__swbuf_r+0x84>
 800d238:	6923      	ldr	r3, [r4, #16]
 800d23a:	b36b      	cbz	r3, 800d298 <__swbuf_r+0x84>
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	6820      	ldr	r0, [r4, #0]
 800d240:	b2f6      	uxtb	r6, r6
 800d242:	1ac0      	subs	r0, r0, r3
 800d244:	6963      	ldr	r3, [r4, #20]
 800d246:	4637      	mov	r7, r6
 800d248:	4283      	cmp	r3, r0
 800d24a:	dc04      	bgt.n	800d256 <__swbuf_r+0x42>
 800d24c:	4621      	mov	r1, r4
 800d24e:	4628      	mov	r0, r5
 800d250:	f000 f92a 	bl	800d4a8 <_fflush_r>
 800d254:	bb30      	cbnz	r0, 800d2a4 <__swbuf_r+0x90>
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	3001      	adds	r0, #1
 800d25a:	3b01      	subs	r3, #1
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	6022      	str	r2, [r4, #0]
 800d264:	701e      	strb	r6, [r3, #0]
 800d266:	6963      	ldr	r3, [r4, #20]
 800d268:	4283      	cmp	r3, r0
 800d26a:	d004      	beq.n	800d276 <__swbuf_r+0x62>
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	07db      	lsls	r3, r3, #31
 800d270:	d506      	bpl.n	800d280 <__swbuf_r+0x6c>
 800d272:	2e0a      	cmp	r6, #10
 800d274:	d104      	bne.n	800d280 <__swbuf_r+0x6c>
 800d276:	4621      	mov	r1, r4
 800d278:	4628      	mov	r0, r5
 800d27a:	f000 f915 	bl	800d4a8 <_fflush_r>
 800d27e:	b988      	cbnz	r0, 800d2a4 <__swbuf_r+0x90>
 800d280:	4638      	mov	r0, r7
 800d282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d284:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <__swbuf_r+0x9c>)
 800d286:	429c      	cmp	r4, r3
 800d288:	d101      	bne.n	800d28e <__swbuf_r+0x7a>
 800d28a:	68ac      	ldr	r4, [r5, #8]
 800d28c:	e7cf      	b.n	800d22e <__swbuf_r+0x1a>
 800d28e:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <__swbuf_r+0xa0>)
 800d290:	429c      	cmp	r4, r3
 800d292:	bf08      	it	eq
 800d294:	68ec      	ldreq	r4, [r5, #12]
 800d296:	e7ca      	b.n	800d22e <__swbuf_r+0x1a>
 800d298:	4621      	mov	r1, r4
 800d29a:	4628      	mov	r0, r5
 800d29c:	f000 f80c 	bl	800d2b8 <__swsetup_r>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d0cb      	beq.n	800d23c <__swbuf_r+0x28>
 800d2a4:	f04f 37ff 	mov.w	r7, #4294967295
 800d2a8:	e7ea      	b.n	800d280 <__swbuf_r+0x6c>
 800d2aa:	bf00      	nop
 800d2ac:	0800e3dc 	.word	0x0800e3dc
 800d2b0:	0800e3fc 	.word	0x0800e3fc
 800d2b4:	0800e3bc 	.word	0x0800e3bc

0800d2b8 <__swsetup_r>:
 800d2b8:	4b32      	ldr	r3, [pc, #200]	; (800d384 <__swsetup_r+0xcc>)
 800d2ba:	b570      	push	{r4, r5, r6, lr}
 800d2bc:	681d      	ldr	r5, [r3, #0]
 800d2be:	4606      	mov	r6, r0
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	b125      	cbz	r5, 800d2ce <__swsetup_r+0x16>
 800d2c4:	69ab      	ldr	r3, [r5, #24]
 800d2c6:	b913      	cbnz	r3, 800d2ce <__swsetup_r+0x16>
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	f000 f981 	bl	800d5d0 <__sinit>
 800d2ce:	4b2e      	ldr	r3, [pc, #184]	; (800d388 <__swsetup_r+0xd0>)
 800d2d0:	429c      	cmp	r4, r3
 800d2d2:	d10f      	bne.n	800d2f4 <__swsetup_r+0x3c>
 800d2d4:	686c      	ldr	r4, [r5, #4]
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2dc:	0719      	lsls	r1, r3, #28
 800d2de:	d42c      	bmi.n	800d33a <__swsetup_r+0x82>
 800d2e0:	06dd      	lsls	r5, r3, #27
 800d2e2:	d411      	bmi.n	800d308 <__swsetup_r+0x50>
 800d2e4:	2309      	movs	r3, #9
 800d2e6:	6033      	str	r3, [r6, #0]
 800d2e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f0:	81a3      	strh	r3, [r4, #12]
 800d2f2:	e03e      	b.n	800d372 <__swsetup_r+0xba>
 800d2f4:	4b25      	ldr	r3, [pc, #148]	; (800d38c <__swsetup_r+0xd4>)
 800d2f6:	429c      	cmp	r4, r3
 800d2f8:	d101      	bne.n	800d2fe <__swsetup_r+0x46>
 800d2fa:	68ac      	ldr	r4, [r5, #8]
 800d2fc:	e7eb      	b.n	800d2d6 <__swsetup_r+0x1e>
 800d2fe:	4b24      	ldr	r3, [pc, #144]	; (800d390 <__swsetup_r+0xd8>)
 800d300:	429c      	cmp	r4, r3
 800d302:	bf08      	it	eq
 800d304:	68ec      	ldreq	r4, [r5, #12]
 800d306:	e7e6      	b.n	800d2d6 <__swsetup_r+0x1e>
 800d308:	0758      	lsls	r0, r3, #29
 800d30a:	d512      	bpl.n	800d332 <__swsetup_r+0x7a>
 800d30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d30e:	b141      	cbz	r1, 800d322 <__swsetup_r+0x6a>
 800d310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d314:	4299      	cmp	r1, r3
 800d316:	d002      	beq.n	800d31e <__swsetup_r+0x66>
 800d318:	4630      	mov	r0, r6
 800d31a:	f7ff fb35 	bl	800c988 <_free_r>
 800d31e:	2300      	movs	r3, #0
 800d320:	6363      	str	r3, [r4, #52]	; 0x34
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d328:	81a3      	strh	r3, [r4, #12]
 800d32a:	2300      	movs	r3, #0
 800d32c:	6063      	str	r3, [r4, #4]
 800d32e:	6923      	ldr	r3, [r4, #16]
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f043 0308 	orr.w	r3, r3, #8
 800d338:	81a3      	strh	r3, [r4, #12]
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	b94b      	cbnz	r3, 800d352 <__swsetup_r+0x9a>
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d348:	d003      	beq.n	800d352 <__swsetup_r+0x9a>
 800d34a:	4621      	mov	r1, r4
 800d34c:	4630      	mov	r0, r6
 800d34e:	f000 fa05 	bl	800d75c <__smakebuf_r>
 800d352:	89a0      	ldrh	r0, [r4, #12]
 800d354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d358:	f010 0301 	ands.w	r3, r0, #1
 800d35c:	d00a      	beq.n	800d374 <__swsetup_r+0xbc>
 800d35e:	2300      	movs	r3, #0
 800d360:	60a3      	str	r3, [r4, #8]
 800d362:	6963      	ldr	r3, [r4, #20]
 800d364:	425b      	negs	r3, r3
 800d366:	61a3      	str	r3, [r4, #24]
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	b943      	cbnz	r3, 800d37e <__swsetup_r+0xc6>
 800d36c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d370:	d1ba      	bne.n	800d2e8 <__swsetup_r+0x30>
 800d372:	bd70      	pop	{r4, r5, r6, pc}
 800d374:	0781      	lsls	r1, r0, #30
 800d376:	bf58      	it	pl
 800d378:	6963      	ldrpl	r3, [r4, #20]
 800d37a:	60a3      	str	r3, [r4, #8]
 800d37c:	e7f4      	b.n	800d368 <__swsetup_r+0xb0>
 800d37e:	2000      	movs	r0, #0
 800d380:	e7f7      	b.n	800d372 <__swsetup_r+0xba>
 800d382:	bf00      	nop
 800d384:	200000d0 	.word	0x200000d0
 800d388:	0800e3dc 	.word	0x0800e3dc
 800d38c:	0800e3fc 	.word	0x0800e3fc
 800d390:	0800e3bc 	.word	0x0800e3bc

0800d394 <abort>:
 800d394:	2006      	movs	r0, #6
 800d396:	b508      	push	{r3, lr}
 800d398:	f000 fa50 	bl	800d83c <raise>
 800d39c:	2001      	movs	r0, #1
 800d39e:	f7f7 fa4e 	bl	800483e <_exit>
	...

0800d3a4 <__sflush_r>:
 800d3a4:	898a      	ldrh	r2, [r1, #12]
 800d3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	0710      	lsls	r0, r2, #28
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	d457      	bmi.n	800d460 <__sflush_r+0xbc>
 800d3b0:	684b      	ldr	r3, [r1, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	dc04      	bgt.n	800d3c0 <__sflush_r+0x1c>
 800d3b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	dc01      	bgt.n	800d3c0 <__sflush_r+0x1c>
 800d3bc:	2000      	movs	r0, #0
 800d3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3c2:	2e00      	cmp	r6, #0
 800d3c4:	d0fa      	beq.n	800d3bc <__sflush_r+0x18>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3cc:	682f      	ldr	r7, [r5, #0]
 800d3ce:	602b      	str	r3, [r5, #0]
 800d3d0:	d032      	beq.n	800d438 <__sflush_r+0x94>
 800d3d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	075a      	lsls	r2, r3, #29
 800d3d8:	d505      	bpl.n	800d3e6 <__sflush_r+0x42>
 800d3da:	6863      	ldr	r3, [r4, #4]
 800d3dc:	1ac0      	subs	r0, r0, r3
 800d3de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3e0:	b10b      	cbz	r3, 800d3e6 <__sflush_r+0x42>
 800d3e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3e4:	1ac0      	subs	r0, r0, r3
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	6a21      	ldr	r1, [r4, #32]
 800d3f0:	47b0      	blx	r6
 800d3f2:	1c43      	adds	r3, r0, #1
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	d106      	bne.n	800d406 <__sflush_r+0x62>
 800d3f8:	6829      	ldr	r1, [r5, #0]
 800d3fa:	291d      	cmp	r1, #29
 800d3fc:	d82c      	bhi.n	800d458 <__sflush_r+0xb4>
 800d3fe:	4a29      	ldr	r2, [pc, #164]	; (800d4a4 <__sflush_r+0x100>)
 800d400:	40ca      	lsrs	r2, r1
 800d402:	07d6      	lsls	r6, r2, #31
 800d404:	d528      	bpl.n	800d458 <__sflush_r+0xb4>
 800d406:	2200      	movs	r2, #0
 800d408:	6062      	str	r2, [r4, #4]
 800d40a:	6922      	ldr	r2, [r4, #16]
 800d40c:	04d9      	lsls	r1, r3, #19
 800d40e:	6022      	str	r2, [r4, #0]
 800d410:	d504      	bpl.n	800d41c <__sflush_r+0x78>
 800d412:	1c42      	adds	r2, r0, #1
 800d414:	d101      	bne.n	800d41a <__sflush_r+0x76>
 800d416:	682b      	ldr	r3, [r5, #0]
 800d418:	b903      	cbnz	r3, 800d41c <__sflush_r+0x78>
 800d41a:	6560      	str	r0, [r4, #84]	; 0x54
 800d41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d41e:	602f      	str	r7, [r5, #0]
 800d420:	2900      	cmp	r1, #0
 800d422:	d0cb      	beq.n	800d3bc <__sflush_r+0x18>
 800d424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d428:	4299      	cmp	r1, r3
 800d42a:	d002      	beq.n	800d432 <__sflush_r+0x8e>
 800d42c:	4628      	mov	r0, r5
 800d42e:	f7ff faab 	bl	800c988 <_free_r>
 800d432:	2000      	movs	r0, #0
 800d434:	6360      	str	r0, [r4, #52]	; 0x34
 800d436:	e7c2      	b.n	800d3be <__sflush_r+0x1a>
 800d438:	6a21      	ldr	r1, [r4, #32]
 800d43a:	2301      	movs	r3, #1
 800d43c:	4628      	mov	r0, r5
 800d43e:	47b0      	blx	r6
 800d440:	1c41      	adds	r1, r0, #1
 800d442:	d1c7      	bne.n	800d3d4 <__sflush_r+0x30>
 800d444:	682b      	ldr	r3, [r5, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d0c4      	beq.n	800d3d4 <__sflush_r+0x30>
 800d44a:	2b1d      	cmp	r3, #29
 800d44c:	d001      	beq.n	800d452 <__sflush_r+0xae>
 800d44e:	2b16      	cmp	r3, #22
 800d450:	d101      	bne.n	800d456 <__sflush_r+0xb2>
 800d452:	602f      	str	r7, [r5, #0]
 800d454:	e7b2      	b.n	800d3bc <__sflush_r+0x18>
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	e7ae      	b.n	800d3be <__sflush_r+0x1a>
 800d460:	690f      	ldr	r7, [r1, #16]
 800d462:	2f00      	cmp	r7, #0
 800d464:	d0aa      	beq.n	800d3bc <__sflush_r+0x18>
 800d466:	0793      	lsls	r3, r2, #30
 800d468:	bf18      	it	ne
 800d46a:	2300      	movne	r3, #0
 800d46c:	680e      	ldr	r6, [r1, #0]
 800d46e:	bf08      	it	eq
 800d470:	694b      	ldreq	r3, [r1, #20]
 800d472:	1bf6      	subs	r6, r6, r7
 800d474:	600f      	str	r7, [r1, #0]
 800d476:	608b      	str	r3, [r1, #8]
 800d478:	2e00      	cmp	r6, #0
 800d47a:	dd9f      	ble.n	800d3bc <__sflush_r+0x18>
 800d47c:	4633      	mov	r3, r6
 800d47e:	463a      	mov	r2, r7
 800d480:	4628      	mov	r0, r5
 800d482:	6a21      	ldr	r1, [r4, #32]
 800d484:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d488:	47e0      	blx	ip
 800d48a:	2800      	cmp	r0, #0
 800d48c:	dc06      	bgt.n	800d49c <__sflush_r+0xf8>
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	f04f 30ff 	mov.w	r0, #4294967295
 800d494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d498:	81a3      	strh	r3, [r4, #12]
 800d49a:	e790      	b.n	800d3be <__sflush_r+0x1a>
 800d49c:	4407      	add	r7, r0
 800d49e:	1a36      	subs	r6, r6, r0
 800d4a0:	e7ea      	b.n	800d478 <__sflush_r+0xd4>
 800d4a2:	bf00      	nop
 800d4a4:	20400001 	.word	0x20400001

0800d4a8 <_fflush_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	690b      	ldr	r3, [r1, #16]
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	b913      	cbnz	r3, 800d4b8 <_fflush_r+0x10>
 800d4b2:	2500      	movs	r5, #0
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	bd38      	pop	{r3, r4, r5, pc}
 800d4b8:	b118      	cbz	r0, 800d4c2 <_fflush_r+0x1a>
 800d4ba:	6983      	ldr	r3, [r0, #24]
 800d4bc:	b90b      	cbnz	r3, 800d4c2 <_fflush_r+0x1a>
 800d4be:	f000 f887 	bl	800d5d0 <__sinit>
 800d4c2:	4b14      	ldr	r3, [pc, #80]	; (800d514 <_fflush_r+0x6c>)
 800d4c4:	429c      	cmp	r4, r3
 800d4c6:	d11b      	bne.n	800d500 <_fflush_r+0x58>
 800d4c8:	686c      	ldr	r4, [r5, #4]
 800d4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d0ef      	beq.n	800d4b2 <_fflush_r+0xa>
 800d4d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4d4:	07d0      	lsls	r0, r2, #31
 800d4d6:	d404      	bmi.n	800d4e2 <_fflush_r+0x3a>
 800d4d8:	0599      	lsls	r1, r3, #22
 800d4da:	d402      	bmi.n	800d4e2 <_fflush_r+0x3a>
 800d4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4de:	f000 f915 	bl	800d70c <__retarget_lock_acquire_recursive>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	f7ff ff5d 	bl	800d3a4 <__sflush_r>
 800d4ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	07da      	lsls	r2, r3, #31
 800d4f0:	d4e0      	bmi.n	800d4b4 <_fflush_r+0xc>
 800d4f2:	89a3      	ldrh	r3, [r4, #12]
 800d4f4:	059b      	lsls	r3, r3, #22
 800d4f6:	d4dd      	bmi.n	800d4b4 <_fflush_r+0xc>
 800d4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4fa:	f000 f908 	bl	800d70e <__retarget_lock_release_recursive>
 800d4fe:	e7d9      	b.n	800d4b4 <_fflush_r+0xc>
 800d500:	4b05      	ldr	r3, [pc, #20]	; (800d518 <_fflush_r+0x70>)
 800d502:	429c      	cmp	r4, r3
 800d504:	d101      	bne.n	800d50a <_fflush_r+0x62>
 800d506:	68ac      	ldr	r4, [r5, #8]
 800d508:	e7df      	b.n	800d4ca <_fflush_r+0x22>
 800d50a:	4b04      	ldr	r3, [pc, #16]	; (800d51c <_fflush_r+0x74>)
 800d50c:	429c      	cmp	r4, r3
 800d50e:	bf08      	it	eq
 800d510:	68ec      	ldreq	r4, [r5, #12]
 800d512:	e7da      	b.n	800d4ca <_fflush_r+0x22>
 800d514:	0800e3dc 	.word	0x0800e3dc
 800d518:	0800e3fc 	.word	0x0800e3fc
 800d51c:	0800e3bc 	.word	0x0800e3bc

0800d520 <std>:
 800d520:	2300      	movs	r3, #0
 800d522:	b510      	push	{r4, lr}
 800d524:	4604      	mov	r4, r0
 800d526:	e9c0 3300 	strd	r3, r3, [r0]
 800d52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d52e:	6083      	str	r3, [r0, #8]
 800d530:	8181      	strh	r1, [r0, #12]
 800d532:	6643      	str	r3, [r0, #100]	; 0x64
 800d534:	81c2      	strh	r2, [r0, #14]
 800d536:	6183      	str	r3, [r0, #24]
 800d538:	4619      	mov	r1, r3
 800d53a:	2208      	movs	r2, #8
 800d53c:	305c      	adds	r0, #92	; 0x5c
 800d53e:	f7fb fdd9 	bl	80090f4 <memset>
 800d542:	4b05      	ldr	r3, [pc, #20]	; (800d558 <std+0x38>)
 800d544:	6224      	str	r4, [r4, #32]
 800d546:	6263      	str	r3, [r4, #36]	; 0x24
 800d548:	4b04      	ldr	r3, [pc, #16]	; (800d55c <std+0x3c>)
 800d54a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d54c:	4b04      	ldr	r3, [pc, #16]	; (800d560 <std+0x40>)
 800d54e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d550:	4b04      	ldr	r3, [pc, #16]	; (800d564 <std+0x44>)
 800d552:	6323      	str	r3, [r4, #48]	; 0x30
 800d554:	bd10      	pop	{r4, pc}
 800d556:	bf00      	nop
 800d558:	0800d875 	.word	0x0800d875
 800d55c:	0800d897 	.word	0x0800d897
 800d560:	0800d8cf 	.word	0x0800d8cf
 800d564:	0800d8f3 	.word	0x0800d8f3

0800d568 <_cleanup_r>:
 800d568:	4901      	ldr	r1, [pc, #4]	; (800d570 <_cleanup_r+0x8>)
 800d56a:	f000 b8af 	b.w	800d6cc <_fwalk_reent>
 800d56e:	bf00      	nop
 800d570:	0800d4a9 	.word	0x0800d4a9

0800d574 <__sfmoreglue>:
 800d574:	2268      	movs	r2, #104	; 0x68
 800d576:	b570      	push	{r4, r5, r6, lr}
 800d578:	1e4d      	subs	r5, r1, #1
 800d57a:	4355      	muls	r5, r2
 800d57c:	460e      	mov	r6, r1
 800d57e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d582:	f7ff fa69 	bl	800ca58 <_malloc_r>
 800d586:	4604      	mov	r4, r0
 800d588:	b140      	cbz	r0, 800d59c <__sfmoreglue+0x28>
 800d58a:	2100      	movs	r1, #0
 800d58c:	e9c0 1600 	strd	r1, r6, [r0]
 800d590:	300c      	adds	r0, #12
 800d592:	60a0      	str	r0, [r4, #8]
 800d594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d598:	f7fb fdac 	bl	80090f4 <memset>
 800d59c:	4620      	mov	r0, r4
 800d59e:	bd70      	pop	{r4, r5, r6, pc}

0800d5a0 <__sfp_lock_acquire>:
 800d5a0:	4801      	ldr	r0, [pc, #4]	; (800d5a8 <__sfp_lock_acquire+0x8>)
 800d5a2:	f000 b8b3 	b.w	800d70c <__retarget_lock_acquire_recursive>
 800d5a6:	bf00      	nop
 800d5a8:	200012f9 	.word	0x200012f9

0800d5ac <__sfp_lock_release>:
 800d5ac:	4801      	ldr	r0, [pc, #4]	; (800d5b4 <__sfp_lock_release+0x8>)
 800d5ae:	f000 b8ae 	b.w	800d70e <__retarget_lock_release_recursive>
 800d5b2:	bf00      	nop
 800d5b4:	200012f9 	.word	0x200012f9

0800d5b8 <__sinit_lock_acquire>:
 800d5b8:	4801      	ldr	r0, [pc, #4]	; (800d5c0 <__sinit_lock_acquire+0x8>)
 800d5ba:	f000 b8a7 	b.w	800d70c <__retarget_lock_acquire_recursive>
 800d5be:	bf00      	nop
 800d5c0:	200012fa 	.word	0x200012fa

0800d5c4 <__sinit_lock_release>:
 800d5c4:	4801      	ldr	r0, [pc, #4]	; (800d5cc <__sinit_lock_release+0x8>)
 800d5c6:	f000 b8a2 	b.w	800d70e <__retarget_lock_release_recursive>
 800d5ca:	bf00      	nop
 800d5cc:	200012fa 	.word	0x200012fa

0800d5d0 <__sinit>:
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	f7ff fff0 	bl	800d5b8 <__sinit_lock_acquire>
 800d5d8:	69a3      	ldr	r3, [r4, #24]
 800d5da:	b11b      	cbz	r3, 800d5e4 <__sinit+0x14>
 800d5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5e0:	f7ff bff0 	b.w	800d5c4 <__sinit_lock_release>
 800d5e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5e8:	6523      	str	r3, [r4, #80]	; 0x50
 800d5ea:	4b13      	ldr	r3, [pc, #76]	; (800d638 <__sinit+0x68>)
 800d5ec:	4a13      	ldr	r2, [pc, #76]	; (800d63c <__sinit+0x6c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5f2:	42a3      	cmp	r3, r4
 800d5f4:	bf08      	it	eq
 800d5f6:	2301      	moveq	r3, #1
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	bf08      	it	eq
 800d5fc:	61a3      	streq	r3, [r4, #24]
 800d5fe:	f000 f81f 	bl	800d640 <__sfp>
 800d602:	6060      	str	r0, [r4, #4]
 800d604:	4620      	mov	r0, r4
 800d606:	f000 f81b 	bl	800d640 <__sfp>
 800d60a:	60a0      	str	r0, [r4, #8]
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 f817 	bl	800d640 <__sfp>
 800d612:	2200      	movs	r2, #0
 800d614:	2104      	movs	r1, #4
 800d616:	60e0      	str	r0, [r4, #12]
 800d618:	6860      	ldr	r0, [r4, #4]
 800d61a:	f7ff ff81 	bl	800d520 <std>
 800d61e:	2201      	movs	r2, #1
 800d620:	2109      	movs	r1, #9
 800d622:	68a0      	ldr	r0, [r4, #8]
 800d624:	f7ff ff7c 	bl	800d520 <std>
 800d628:	2202      	movs	r2, #2
 800d62a:	2112      	movs	r1, #18
 800d62c:	68e0      	ldr	r0, [r4, #12]
 800d62e:	f7ff ff77 	bl	800d520 <std>
 800d632:	2301      	movs	r3, #1
 800d634:	61a3      	str	r3, [r4, #24]
 800d636:	e7d1      	b.n	800d5dc <__sinit+0xc>
 800d638:	0800df74 	.word	0x0800df74
 800d63c:	0800d569 	.word	0x0800d569

0800d640 <__sfp>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	4607      	mov	r7, r0
 800d644:	f7ff ffac 	bl	800d5a0 <__sfp_lock_acquire>
 800d648:	4b1e      	ldr	r3, [pc, #120]	; (800d6c4 <__sfp+0x84>)
 800d64a:	681e      	ldr	r6, [r3, #0]
 800d64c:	69b3      	ldr	r3, [r6, #24]
 800d64e:	b913      	cbnz	r3, 800d656 <__sfp+0x16>
 800d650:	4630      	mov	r0, r6
 800d652:	f7ff ffbd 	bl	800d5d0 <__sinit>
 800d656:	3648      	adds	r6, #72	; 0x48
 800d658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	d503      	bpl.n	800d668 <__sfp+0x28>
 800d660:	6833      	ldr	r3, [r6, #0]
 800d662:	b30b      	cbz	r3, 800d6a8 <__sfp+0x68>
 800d664:	6836      	ldr	r6, [r6, #0]
 800d666:	e7f7      	b.n	800d658 <__sfp+0x18>
 800d668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d66c:	b9d5      	cbnz	r5, 800d6a4 <__sfp+0x64>
 800d66e:	4b16      	ldr	r3, [pc, #88]	; (800d6c8 <__sfp+0x88>)
 800d670:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d674:	60e3      	str	r3, [r4, #12]
 800d676:	6665      	str	r5, [r4, #100]	; 0x64
 800d678:	f000 f847 	bl	800d70a <__retarget_lock_init_recursive>
 800d67c:	f7ff ff96 	bl	800d5ac <__sfp_lock_release>
 800d680:	2208      	movs	r2, #8
 800d682:	4629      	mov	r1, r5
 800d684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d68c:	6025      	str	r5, [r4, #0]
 800d68e:	61a5      	str	r5, [r4, #24]
 800d690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d694:	f7fb fd2e 	bl	80090f4 <memset>
 800d698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d69c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a4:	3468      	adds	r4, #104	; 0x68
 800d6a6:	e7d9      	b.n	800d65c <__sfp+0x1c>
 800d6a8:	2104      	movs	r1, #4
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	f7ff ff62 	bl	800d574 <__sfmoreglue>
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	6030      	str	r0, [r6, #0]
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d1d5      	bne.n	800d664 <__sfp+0x24>
 800d6b8:	f7ff ff78 	bl	800d5ac <__sfp_lock_release>
 800d6bc:	230c      	movs	r3, #12
 800d6be:	603b      	str	r3, [r7, #0]
 800d6c0:	e7ee      	b.n	800d6a0 <__sfp+0x60>
 800d6c2:	bf00      	nop
 800d6c4:	0800df74 	.word	0x0800df74
 800d6c8:	ffff0001 	.word	0xffff0001

0800d6cc <_fwalk_reent>:
 800d6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	4688      	mov	r8, r1
 800d6d4:	2700      	movs	r7, #0
 800d6d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6de:	f1b9 0901 	subs.w	r9, r9, #1
 800d6e2:	d505      	bpl.n	800d6f0 <_fwalk_reent+0x24>
 800d6e4:	6824      	ldr	r4, [r4, #0]
 800d6e6:	2c00      	cmp	r4, #0
 800d6e8:	d1f7      	bne.n	800d6da <_fwalk_reent+0xe>
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6f0:	89ab      	ldrh	r3, [r5, #12]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d907      	bls.n	800d706 <_fwalk_reent+0x3a>
 800d6f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	d003      	beq.n	800d706 <_fwalk_reent+0x3a>
 800d6fe:	4629      	mov	r1, r5
 800d700:	4630      	mov	r0, r6
 800d702:	47c0      	blx	r8
 800d704:	4307      	orrs	r7, r0
 800d706:	3568      	adds	r5, #104	; 0x68
 800d708:	e7e9      	b.n	800d6de <_fwalk_reent+0x12>

0800d70a <__retarget_lock_init_recursive>:
 800d70a:	4770      	bx	lr

0800d70c <__retarget_lock_acquire_recursive>:
 800d70c:	4770      	bx	lr

0800d70e <__retarget_lock_release_recursive>:
 800d70e:	4770      	bx	lr

0800d710 <__swhatbuf_r>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	460e      	mov	r6, r1
 800d714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d718:	4614      	mov	r4, r2
 800d71a:	2900      	cmp	r1, #0
 800d71c:	461d      	mov	r5, r3
 800d71e:	b096      	sub	sp, #88	; 0x58
 800d720:	da08      	bge.n	800d734 <__swhatbuf_r+0x24>
 800d722:	2200      	movs	r2, #0
 800d724:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d728:	602a      	str	r2, [r5, #0]
 800d72a:	061a      	lsls	r2, r3, #24
 800d72c:	d410      	bmi.n	800d750 <__swhatbuf_r+0x40>
 800d72e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d732:	e00e      	b.n	800d752 <__swhatbuf_r+0x42>
 800d734:	466a      	mov	r2, sp
 800d736:	f000 f903 	bl	800d940 <_fstat_r>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	dbf1      	blt.n	800d722 <__swhatbuf_r+0x12>
 800d73e:	9a01      	ldr	r2, [sp, #4]
 800d740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d748:	425a      	negs	r2, r3
 800d74a:	415a      	adcs	r2, r3
 800d74c:	602a      	str	r2, [r5, #0]
 800d74e:	e7ee      	b.n	800d72e <__swhatbuf_r+0x1e>
 800d750:	2340      	movs	r3, #64	; 0x40
 800d752:	2000      	movs	r0, #0
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	b016      	add	sp, #88	; 0x58
 800d758:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d75c <__smakebuf_r>:
 800d75c:	898b      	ldrh	r3, [r1, #12]
 800d75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d760:	079d      	lsls	r5, r3, #30
 800d762:	4606      	mov	r6, r0
 800d764:	460c      	mov	r4, r1
 800d766:	d507      	bpl.n	800d778 <__smakebuf_r+0x1c>
 800d768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	6123      	str	r3, [r4, #16]
 800d770:	2301      	movs	r3, #1
 800d772:	6163      	str	r3, [r4, #20]
 800d774:	b002      	add	sp, #8
 800d776:	bd70      	pop	{r4, r5, r6, pc}
 800d778:	466a      	mov	r2, sp
 800d77a:	ab01      	add	r3, sp, #4
 800d77c:	f7ff ffc8 	bl	800d710 <__swhatbuf_r>
 800d780:	9900      	ldr	r1, [sp, #0]
 800d782:	4605      	mov	r5, r0
 800d784:	4630      	mov	r0, r6
 800d786:	f7ff f967 	bl	800ca58 <_malloc_r>
 800d78a:	b948      	cbnz	r0, 800d7a0 <__smakebuf_r+0x44>
 800d78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d790:	059a      	lsls	r2, r3, #22
 800d792:	d4ef      	bmi.n	800d774 <__smakebuf_r+0x18>
 800d794:	f023 0303 	bic.w	r3, r3, #3
 800d798:	f043 0302 	orr.w	r3, r3, #2
 800d79c:	81a3      	strh	r3, [r4, #12]
 800d79e:	e7e3      	b.n	800d768 <__smakebuf_r+0xc>
 800d7a0:	4b0d      	ldr	r3, [pc, #52]	; (800d7d8 <__smakebuf_r+0x7c>)
 800d7a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	6020      	str	r0, [r4, #0]
 800d7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	9b00      	ldr	r3, [sp, #0]
 800d7b0:	6120      	str	r0, [r4, #16]
 800d7b2:	6163      	str	r3, [r4, #20]
 800d7b4:	9b01      	ldr	r3, [sp, #4]
 800d7b6:	b15b      	cbz	r3, 800d7d0 <__smakebuf_r+0x74>
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7be:	f000 f8d1 	bl	800d964 <_isatty_r>
 800d7c2:	b128      	cbz	r0, 800d7d0 <__smakebuf_r+0x74>
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	f023 0303 	bic.w	r3, r3, #3
 800d7ca:	f043 0301 	orr.w	r3, r3, #1
 800d7ce:	81a3      	strh	r3, [r4, #12]
 800d7d0:	89a0      	ldrh	r0, [r4, #12]
 800d7d2:	4305      	orrs	r5, r0
 800d7d4:	81a5      	strh	r5, [r4, #12]
 800d7d6:	e7cd      	b.n	800d774 <__smakebuf_r+0x18>
 800d7d8:	0800d569 	.word	0x0800d569

0800d7dc <_malloc_usable_size_r>:
 800d7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7e0:	1f18      	subs	r0, r3, #4
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bfbc      	itt	lt
 800d7e6:	580b      	ldrlt	r3, [r1, r0]
 800d7e8:	18c0      	addlt	r0, r0, r3
 800d7ea:	4770      	bx	lr

0800d7ec <_raise_r>:
 800d7ec:	291f      	cmp	r1, #31
 800d7ee:	b538      	push	{r3, r4, r5, lr}
 800d7f0:	4604      	mov	r4, r0
 800d7f2:	460d      	mov	r5, r1
 800d7f4:	d904      	bls.n	800d800 <_raise_r+0x14>
 800d7f6:	2316      	movs	r3, #22
 800d7f8:	6003      	str	r3, [r0, #0]
 800d7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d802:	b112      	cbz	r2, 800d80a <_raise_r+0x1e>
 800d804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d808:	b94b      	cbnz	r3, 800d81e <_raise_r+0x32>
 800d80a:	4620      	mov	r0, r4
 800d80c:	f000 f830 	bl	800d870 <_getpid_r>
 800d810:	462a      	mov	r2, r5
 800d812:	4601      	mov	r1, r0
 800d814:	4620      	mov	r0, r4
 800d816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d81a:	f000 b817 	b.w	800d84c <_kill_r>
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d00a      	beq.n	800d838 <_raise_r+0x4c>
 800d822:	1c59      	adds	r1, r3, #1
 800d824:	d103      	bne.n	800d82e <_raise_r+0x42>
 800d826:	2316      	movs	r3, #22
 800d828:	6003      	str	r3, [r0, #0]
 800d82a:	2001      	movs	r0, #1
 800d82c:	e7e7      	b.n	800d7fe <_raise_r+0x12>
 800d82e:	2400      	movs	r4, #0
 800d830:	4628      	mov	r0, r5
 800d832:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d836:	4798      	blx	r3
 800d838:	2000      	movs	r0, #0
 800d83a:	e7e0      	b.n	800d7fe <_raise_r+0x12>

0800d83c <raise>:
 800d83c:	4b02      	ldr	r3, [pc, #8]	; (800d848 <raise+0xc>)
 800d83e:	4601      	mov	r1, r0
 800d840:	6818      	ldr	r0, [r3, #0]
 800d842:	f7ff bfd3 	b.w	800d7ec <_raise_r>
 800d846:	bf00      	nop
 800d848:	200000d0 	.word	0x200000d0

0800d84c <_kill_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	2300      	movs	r3, #0
 800d850:	4d06      	ldr	r5, [pc, #24]	; (800d86c <_kill_r+0x20>)
 800d852:	4604      	mov	r4, r0
 800d854:	4608      	mov	r0, r1
 800d856:	4611      	mov	r1, r2
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	f7f6 ffe0 	bl	800481e <_kill>
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	d102      	bne.n	800d868 <_kill_r+0x1c>
 800d862:	682b      	ldr	r3, [r5, #0]
 800d864:	b103      	cbz	r3, 800d868 <_kill_r+0x1c>
 800d866:	6023      	str	r3, [r4, #0]
 800d868:	bd38      	pop	{r3, r4, r5, pc}
 800d86a:	bf00      	nop
 800d86c:	200012f4 	.word	0x200012f4

0800d870 <_getpid_r>:
 800d870:	f7f6 bfce 	b.w	8004810 <_getpid>

0800d874 <__sread>:
 800d874:	b510      	push	{r4, lr}
 800d876:	460c      	mov	r4, r1
 800d878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d87c:	f000 f894 	bl	800d9a8 <_read_r>
 800d880:	2800      	cmp	r0, #0
 800d882:	bfab      	itete	ge
 800d884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d886:	89a3      	ldrhlt	r3, [r4, #12]
 800d888:	181b      	addge	r3, r3, r0
 800d88a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d88e:	bfac      	ite	ge
 800d890:	6563      	strge	r3, [r4, #84]	; 0x54
 800d892:	81a3      	strhlt	r3, [r4, #12]
 800d894:	bd10      	pop	{r4, pc}

0800d896 <__swrite>:
 800d896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d89a:	461f      	mov	r7, r3
 800d89c:	898b      	ldrh	r3, [r1, #12]
 800d89e:	4605      	mov	r5, r0
 800d8a0:	05db      	lsls	r3, r3, #23
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	4616      	mov	r6, r2
 800d8a6:	d505      	bpl.n	800d8b4 <__swrite+0x1e>
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b0:	f000 f868 	bl	800d984 <_lseek_r>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	4632      	mov	r2, r6
 800d8b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8bc:	81a3      	strh	r3, [r4, #12]
 800d8be:	4628      	mov	r0, r5
 800d8c0:	463b      	mov	r3, r7
 800d8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ca:	f000 b817 	b.w	800d8fc <_write_r>

0800d8ce <__sseek>:
 800d8ce:	b510      	push	{r4, lr}
 800d8d0:	460c      	mov	r4, r1
 800d8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d6:	f000 f855 	bl	800d984 <_lseek_r>
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	bf15      	itete	ne
 800d8e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8ea:	81a3      	strheq	r3, [r4, #12]
 800d8ec:	bf18      	it	ne
 800d8ee:	81a3      	strhne	r3, [r4, #12]
 800d8f0:	bd10      	pop	{r4, pc}

0800d8f2 <__sclose>:
 800d8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f6:	f000 b813 	b.w	800d920 <_close_r>
	...

0800d8fc <_write_r>:
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	4604      	mov	r4, r0
 800d900:	4608      	mov	r0, r1
 800d902:	4611      	mov	r1, r2
 800d904:	2200      	movs	r2, #0
 800d906:	4d05      	ldr	r5, [pc, #20]	; (800d91c <_write_r+0x20>)
 800d908:	602a      	str	r2, [r5, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	f7f6 ffbe 	bl	800488c <_write>
 800d910:	1c43      	adds	r3, r0, #1
 800d912:	d102      	bne.n	800d91a <_write_r+0x1e>
 800d914:	682b      	ldr	r3, [r5, #0]
 800d916:	b103      	cbz	r3, 800d91a <_write_r+0x1e>
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	bd38      	pop	{r3, r4, r5, pc}
 800d91c:	200012f4 	.word	0x200012f4

0800d920 <_close_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	2300      	movs	r3, #0
 800d924:	4d05      	ldr	r5, [pc, #20]	; (800d93c <_close_r+0x1c>)
 800d926:	4604      	mov	r4, r0
 800d928:	4608      	mov	r0, r1
 800d92a:	602b      	str	r3, [r5, #0]
 800d92c:	f7f6 ffca 	bl	80048c4 <_close>
 800d930:	1c43      	adds	r3, r0, #1
 800d932:	d102      	bne.n	800d93a <_close_r+0x1a>
 800d934:	682b      	ldr	r3, [r5, #0]
 800d936:	b103      	cbz	r3, 800d93a <_close_r+0x1a>
 800d938:	6023      	str	r3, [r4, #0]
 800d93a:	bd38      	pop	{r3, r4, r5, pc}
 800d93c:	200012f4 	.word	0x200012f4

0800d940 <_fstat_r>:
 800d940:	b538      	push	{r3, r4, r5, lr}
 800d942:	2300      	movs	r3, #0
 800d944:	4d06      	ldr	r5, [pc, #24]	; (800d960 <_fstat_r+0x20>)
 800d946:	4604      	mov	r4, r0
 800d948:	4608      	mov	r0, r1
 800d94a:	4611      	mov	r1, r2
 800d94c:	602b      	str	r3, [r5, #0]
 800d94e:	f7f6 ffc4 	bl	80048da <_fstat>
 800d952:	1c43      	adds	r3, r0, #1
 800d954:	d102      	bne.n	800d95c <_fstat_r+0x1c>
 800d956:	682b      	ldr	r3, [r5, #0]
 800d958:	b103      	cbz	r3, 800d95c <_fstat_r+0x1c>
 800d95a:	6023      	str	r3, [r4, #0]
 800d95c:	bd38      	pop	{r3, r4, r5, pc}
 800d95e:	bf00      	nop
 800d960:	200012f4 	.word	0x200012f4

0800d964 <_isatty_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	2300      	movs	r3, #0
 800d968:	4d05      	ldr	r5, [pc, #20]	; (800d980 <_isatty_r+0x1c>)
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	602b      	str	r3, [r5, #0]
 800d970:	f7f6 ffc2 	bl	80048f8 <_isatty>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_isatty_r+0x1a>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_isatty_r+0x1a>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	200012f4 	.word	0x200012f4

0800d984 <_lseek_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	4611      	mov	r1, r2
 800d98c:	2200      	movs	r2, #0
 800d98e:	4d05      	ldr	r5, [pc, #20]	; (800d9a4 <_lseek_r+0x20>)
 800d990:	602a      	str	r2, [r5, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	f7f6 ffba 	bl	800490c <_lseek>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_lseek_r+0x1e>
 800d99c:	682b      	ldr	r3, [r5, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_lseek_r+0x1e>
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	200012f4 	.word	0x200012f4

0800d9a8 <_read_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	4d05      	ldr	r5, [pc, #20]	; (800d9c8 <_read_r+0x20>)
 800d9b4:	602a      	str	r2, [r5, #0]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f7f6 ff4b 	bl	8004852 <_read>
 800d9bc:	1c43      	adds	r3, r0, #1
 800d9be:	d102      	bne.n	800d9c6 <_read_r+0x1e>
 800d9c0:	682b      	ldr	r3, [r5, #0]
 800d9c2:	b103      	cbz	r3, 800d9c6 <_read_r+0x1e>
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	200012f4 	.word	0x200012f4

0800d9cc <_init>:
 800d9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ce:	bf00      	nop
 800d9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d2:	bc08      	pop	{r3}
 800d9d4:	469e      	mov	lr, r3
 800d9d6:	4770      	bx	lr

0800d9d8 <_fini>:
 800d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9da:	bf00      	nop
 800d9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9de:	bc08      	pop	{r3}
 800d9e0:	469e      	mov	lr, r3
 800d9e2:	4770      	bx	lr
