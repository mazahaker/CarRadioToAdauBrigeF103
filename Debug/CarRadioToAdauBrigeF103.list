
CarRadioToAdauBrigeF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800abf8  0800abf8  0001abf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b248  0800b248  0002027c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b248  0800b248  0002027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b248  0800b248  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b248  0800b248  0001b248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800b254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000027c  0800b4d0  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800b4d0  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea99  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003843  00000000  00000000  0003ed3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  00042588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  00043aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006560  00000000  00000000  00044ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012014  00000000  00000000  0004b428  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097cc7  00000000  00000000  0005d43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a6c  00000000  00000000  000f5180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000027c 	.word	0x2000027c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abdc 	.word	0x0800abdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000280 	.word	0x20000280
 800014c:	0800abdc 	.word	0x0800abdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <_ZN8SigmaDSPC1EP17I2C_HandleTypeDefhhP12GPIO_TypeDeftP20__UART_HandleTypeDef>:
          uint8_t i2cAddress;  DSP i2c address
          uint8_t device;      The DSP type, e.g ADAU1701
          uint8_t resetPin;    pin to reset DSP (optional parameter)
Returns:  None
 ***************************************/
SigmaDSP::SigmaDSP(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress, uint8_t device, GPIO_TypeDef* resetGPIO, uint16_t resetPin, UART_HandleTypeDef *uart) : _hi2c(hi2c), _dspAddress(i2cAddress), _deviceType(device), _resetGPIO(resetGPIO), _resetPin(resetPin), _uart(uart)
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4611      	mov	r1, r2
 8001194:	461a      	mov	r2, r3
 8001196:	460b      	mov	r3, r1
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	4613      	mov	r3, r2
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	79ba      	ldrb	r2, [r7, #6]
 80011ae:	721a      	strb	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8bba      	ldrh	r2, [r7, #28]
 80011ba:	821a      	strh	r2, [r3, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a3a      	ldr	r2, [r7, #32]
 80011c0:	615a      	str	r2, [r3, #20]
{

}
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
	...

080011d0 <_ZN8SigmaDSP5resetEv>:
Purpose:  Physically resets the DSP
Inputs:   None
Returns:  None
 ***************************************/
void SigmaDSP::reset()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_uart, (uint8_t*)"[adau] reset\n", 13, 2);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6958      	ldr	r0, [r3, #20]
 80011dc:	2302      	movs	r3, #2
 80011de:	220d      	movs	r2, #13
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <_ZN8SigmaDSP5resetEv+0x44>)
 80011e2:	f003 fcd8 	bl	8004b96 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(_resetGPIO, _resetPin, GPIO_PIN_RESET);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68d8      	ldr	r0, [r3, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	8a1b      	ldrh	r3, [r3, #16]
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	f002 f926 	bl	8003442 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80011f6:	2032      	movs	r0, #50	; 0x32
 80011f8:	f001 fddc 	bl	8002db4 <HAL_Delay>
	HAL_GPIO_WritePin(_resetGPIO, _resetPin, GPIO_PIN_SET);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68d8      	ldr	r0, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	8a1b      	ldrh	r3, [r3, #16]
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	f002 f91b 	bl	8003442 <HAL_GPIO_WritePin>
	//  {
	//    digitalWrite(_resetPin, LOW);
	//    delay(200);
	//    digitalWrite(_resetPin, HIGH);
	//  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800abf8 	.word	0x0800abf8

08001218 <_ZN8SigmaDSP4pingEv>:
          2 - error: address send, nack received
          3 - error: data send, nack received
          4 - error: unknown i2c error
 ***************************************/
bool SigmaDSP::ping()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
	//  return _WireObject.endTransmission();
	uint8_t emptyData[] = {};
	//	HAL_I2C_IsDeviceReady(_hi2c, _dspAddress, 5, 10);

//	HAL_Delay(10);
	int res= HAL_I2C_Master_Transmit(_hi2c, _dspAddress, emptyData, sizeof(emptyData), 10);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b299      	uxth	r1, r3
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	230a      	movs	r3, #10
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	f002 fa90 	bl	8003758 <HAL_I2C_Master_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(_uart, (uint8_t*)"[adau] ping: ", 13, 2);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6958      	ldr	r0, [r3, #20]
 8001240:	2302      	movs	r3, #2
 8001242:	220d      	movs	r2, #13
 8001244:	4921      	ldr	r1, [pc, #132]	; (80012cc <_ZN8SigmaDSP4pingEv+0xb4>)
 8001246:	f003 fca6 	bl	8004b96 <HAL_UART_Transmit>

	switch(res) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d82b      	bhi.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
 8001250:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <_ZN8SigmaDSP4pingEv+0x40>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	08001269 	.word	0x08001269
 800125c:	08001279 	.word	0x08001279
 8001260:	08001289 	.word	0x08001289
 8001264:	08001299 	.word	0x08001299
	case HAL_OK : HAL_UART_Transmit(_uart, (uint8_t*)"ok", 2, 2); break;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6958      	ldr	r0, [r3, #20]
 800126c:	2302      	movs	r3, #2
 800126e:	2202      	movs	r2, #2
 8001270:	4917      	ldr	r1, [pc, #92]	; (80012d0 <_ZN8SigmaDSP4pingEv+0xb8>)
 8001272:	f003 fc90 	bl	8004b96 <HAL_UART_Transmit>
 8001276:	e017      	b.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
	case HAL_ERROR: HAL_UART_Transmit(_uart, (uint8_t*)"error", 5, 2); break;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6958      	ldr	r0, [r3, #20]
 800127c:	2302      	movs	r3, #2
 800127e:	2205      	movs	r2, #5
 8001280:	4914      	ldr	r1, [pc, #80]	; (80012d4 <_ZN8SigmaDSP4pingEv+0xbc>)
 8001282:	f003 fc88 	bl	8004b96 <HAL_UART_Transmit>
 8001286:	e00f      	b.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
	case HAL_BUSY: HAL_UART_Transmit(_uart, (uint8_t*)"busy", 4, 2); break;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6958      	ldr	r0, [r3, #20]
 800128c:	2302      	movs	r3, #2
 800128e:	2204      	movs	r2, #4
 8001290:	4911      	ldr	r1, [pc, #68]	; (80012d8 <_ZN8SigmaDSP4pingEv+0xc0>)
 8001292:	f003 fc80 	bl	8004b96 <HAL_UART_Transmit>
 8001296:	e007      	b.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
	case HAL_TIMEOUT: HAL_UART_Transmit(_uart, (uint8_t*)"timeout", 7, 2); break;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6958      	ldr	r0, [r3, #20]
 800129c:	2302      	movs	r3, #2
 800129e:	2207      	movs	r2, #7
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <_ZN8SigmaDSP4pingEv+0xc4>)
 80012a2:	f003 fc78 	bl	8004b96 <HAL_UART_Transmit>
 80012a6:	bf00      	nop
	}

	HAL_UART_Transmit(_uart, (uint8_t*)"\n", 1, 2);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6958      	ldr	r0, [r3, #20]
 80012ac:	2302      	movs	r3, #2
 80012ae:	2201      	movs	r2, #1
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <_ZN8SigmaDSP4pingEv+0xc8>)
 80012b2:	f003 fc70 	bl	8004b96 <HAL_UART_Transmit>

	return HAL_OK == res;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
	//	return HAL_OK == HAL_I2C_IsDeviceReady(_hi2c, _dspAddress, 5, 100);
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0800ac08 	.word	0x0800ac08
 80012d0:	0800ac18 	.word	0x0800ac18
 80012d4:	0800ac1c 	.word	0x0800ac1c
 80012d8:	0800ac24 	.word	0x0800ac24
 80012dc:	0800ac2c 	.word	0x0800ac2c
 80012e0:	0800ac34 	.word	0x0800ac34

080012e4 <_ZN8SigmaDSP14twoChannelGainEtii>:
	safeload_writeRegister(startMemoryAddress, value, true);
}


void SigmaDSP::twoChannelGain(uint16_t startMemoryAddress, int gain1, int gain2)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	460b      	mov	r3, r1
 80012f2:	817b      	strh	r3, [r7, #10]

	//	float gain1f = gain1;
	//	float gain2f = gain2;
	//
	float _gain1 = powf(10.0, (float)gain1 / 20);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fcf1 	bl	8000cdc <__aeabi_i2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4914      	ldr	r1, [pc, #80]	; (8001350 <_ZN8SigmaDSP14twoChannelGainEtii+0x6c>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fdf4 	bl	8000eec <__aeabi_fdiv>
 8001304:	4603      	mov	r3, r0
 8001306:	4619      	mov	r1, r3
 8001308:	4812      	ldr	r0, [pc, #72]	; (8001354 <_ZN8SigmaDSP14twoChannelGainEtii+0x70>)
 800130a:	f005 f931 	bl	8006570 <powf>
 800130e:	6178      	str	r0, [r7, #20]
	float _gain2 = powf(10.0, (float)gain2 / 20);
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f7ff fce3 	bl	8000cdc <__aeabi_i2f>
 8001316:	4603      	mov	r3, r0
 8001318:	490d      	ldr	r1, [pc, #52]	; (8001350 <_ZN8SigmaDSP14twoChannelGainEtii+0x6c>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fde6 	bl	8000eec <__aeabi_fdiv>
 8001320:	4603      	mov	r3, r0
 8001322:	4619      	mov	r1, r3
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <_ZN8SigmaDSP14twoChannelGainEtii+0x70>)
 8001326:	f005 f923 	bl	8006570 <powf>
 800132a:	6138      	str	r0, [r7, #16]
	//	float _gain2 = pow(10, gain2 / 20); // 10^(dB / 20)
	//	float tt = ((float)level1 / 20);
	//	float lev = powf(10.0, tt);// ((float)level1 / 20);
	//	;

	safeload_writeRegister(startMemoryAddress++, _gain1, false);
 800132c:	8979      	ldrh	r1, [r7, #10]
 800132e:	1c4b      	adds	r3, r1, #1
 8001330:	817b      	strh	r3, [r7, #10]
 8001332:	2300      	movs	r3, #0
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f85a 	bl	80013f0 <_ZN8SigmaDSP22safeload_writeRegisterEtfb>
	safeload_writeRegister(startMemoryAddress, _gain2, true);
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	2301      	movs	r3, #1
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f854 	bl	80013f0 <_ZN8SigmaDSP22safeload_writeRegisterEtfb>
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	41a00000 	.word	0x41a00000
 8001354:	41200000 	.word	0x41200000

08001358 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>:
          uint8_t *data;                 Data array to write
          bool finished;                 Indicates if this is the last packet or not
Returns:  None
 ***************************************/
void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, uint8_t *data, bool finished)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	461a      	mov	r2, r3
 8001364:	460b      	mov	r3, r1
 8001366:	817b      	strh	r3, [r7, #10]
 8001368:	4613      	mov	r3, r2
 800136a:	727b      	strb	r3, [r7, #9]
	static uint8_t _safeload_count = 0; // Keeps track of the safeload count

	uint8_t addr[2]; // Address array

	addr[0] = (memoryAddress >> 8) & 0xFF;
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	b29b      	uxth	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	753b      	strb	r3, [r7, #20]
	addr[1] = memoryAddress & 0xFF;
 8001376:	897b      	ldrh	r3, [r7, #10]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	757b      	strb	r3, [r7, #21]

	writeRegister(dspRegister::SafeloadAddress0 + _safeload_count, sizeof(addr), addr); // Place passed 16-bit memory address in safeload address area
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	f603 0315 	addw	r3, r3, #2069	; 0x815
 8001386:	b299      	uxth	r1, r3
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2202      	movs	r2, #2
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f84a 	bl	8001428 <_ZN8SigmaDSP13writeRegisterEthPKh>
	// Q: Why is the safeload registers five bytes long, while I'm loading four-byte parameters into the RAM using these registers?
	// A: The safeload registers are also used to load the slew RAM data, which is five bytes long. For parameter RAM writes using safeload,
	// the first byte of the safeload register can be set to 0x00.

	// Needs 5 bytes of data
	writeRegister(dspRegister::SafeloadData0 + _safeload_count, 5, data); // Placed passed data (5 bytes) in the next safeload data space
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800139e:	b299      	uxth	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2205      	movs	r2, #5
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 f83f 	bl	8001428 <_ZN8SigmaDSP13writeRegisterEthPKh>

	_safeload_count++; // Increase counter
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80013b4:	701a      	strb	r2, [r3, #0]

	if(finished == true || _safeload_count >= 5) // Max 5 safeload memory registers
 80013b6:	7a7b      	ldrb	r3, [r7, #9]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x6c>
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d90e      	bls.n	80013e2 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x8a>
	{
		addr[0] = 0x00;
 80013c4:	2300      	movs	r3, #0
 80013c6:	753b      	strb	r3, [r7, #20]
		addr[1] = 0x3C; // Set the IST bit (initiate safeload transfer bit)
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	757b      	strb	r3, [r7, #21]
		writeRegister(dspRegister::CoreRegister, sizeof(addr), addr); // Load content from the safeload registers
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2202      	movs	r2, #2
 80013d2:	f640 011c 	movw	r1, #2076	; 0x81c
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f826 	bl	8001428 <_ZN8SigmaDSP13writeRegisterEthPKh>
		_safeload_count = 0;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	}
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000298 	.word	0x20000298

080013f0 <_ZN8SigmaDSP22safeload_writeRegisterEtfb>:
	intToFixed(data, dataArray);
	safeload_writeRegister(memoryAddress, dataArray, finished);
}

void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, float data, bool finished)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	461a      	mov	r2, r3
 80013fc:	460b      	mov	r3, r1
 80013fe:	817b      	strh	r3, [r7, #10]
 8001400:	4613      	mov	r3, r2
 8001402:	727b      	strb	r3, [r7, #9]
	uint8_t dataArray[5];
	floatToFixed(data, dataArray);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	461a      	mov	r2, r3
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f86f 	bl	80014f0 <_ZN8SigmaDSP12floatToFixedEfPh>
	safeload_writeRegister(memoryAddress, dataArray, finished);
 8001412:	7a7b      	ldrb	r3, [r7, #9]
 8001414:	f107 0210 	add.w	r2, r7, #16
 8001418:	8979      	ldrh	r1, [r7, #10]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff ff9c 	bl	8001358 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_ZN8SigmaDSP13writeRegisterEthPKh>:
          uint8_t length;                Number of bytes to write
          uint8_t *data;                 Data array to write
Returns:  None
 ***************************************/
void SigmaDSP::writeRegister(uint16_t address, uint8_t length, const uint8_t *data)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	817b      	strh	r3, [r7, #10]
 8001436:	4613      	mov	r3, r2
 8001438:	727b      	strb	r3, [r7, #9]
	package[1] = LSByte;
	for(uint8_t i = 2; i < length + 2; i++) {
		package[i] = data[i-2]; // Send all bytes in passed array
	}

	HAL_I2C_Master_Transmit(_hi2c, _dspAddress, package, length + 2, 10);
 800143a:	466b      	mov	r3, sp
 800143c:	461d      	mov	r5, r3
	uint8_t MSByte = address >> 8;
 800143e:	897b      	ldrh	r3, [r7, #10]
 8001440:	121b      	asrs	r3, r3, #8
 8001442:	77bb      	strb	r3, [r7, #30]
	uint8_t LSByte = (uint8_t)address & 0xFF;
 8001444:	897b      	ldrh	r3, [r7, #10]
 8001446:	777b      	strb	r3, [r7, #29]
	uint8_t package[length + 2];
 8001448:	7a7b      	ldrb	r3, [r7, #9]
 800144a:	1c58      	adds	r0, r3, #1
 800144c:	61b8      	str	r0, [r7, #24]
 800144e:	4603      	mov	r3, r0
 8001450:	3301      	adds	r3, #1
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f04f 0400 	mov.w	r4, #0
 8001460:	00d4      	lsls	r4, r2, #3
 8001462:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001466:	00cb      	lsls	r3, r1, #3
 8001468:	4603      	mov	r3, r0
 800146a:	3301      	adds	r3, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	f04f 0400 	mov.w	r4, #0
 800147a:	00d4      	lsls	r4, r2, #3
 800147c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001480:	00cb      	lsls	r3, r1, #3
 8001482:	4603      	mov	r3, r0
 8001484:	3301      	adds	r3, #1
 8001486:	3307      	adds	r3, #7
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	ebad 0d03 	sub.w	sp, sp, r3
 8001490:	ab02      	add	r3, sp, #8
 8001492:	3300      	adds	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
	package[0] = MSByte;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	7fba      	ldrb	r2, [r7, #30]
 800149a:	701a      	strb	r2, [r3, #0]
	package[1] = LSByte;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	7f7a      	ldrb	r2, [r7, #29]
 80014a0:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 2; i < length + 2; i++) {
 80014a2:	2302      	movs	r3, #2
 80014a4:	77fb      	strb	r3, [r7, #31]
 80014a6:	7ffa      	ldrb	r2, [r7, #31]
 80014a8:	7a7b      	ldrb	r3, [r7, #9]
 80014aa:	3302      	adds	r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	da0b      	bge.n	80014c8 <_ZN8SigmaDSP13writeRegisterEthPKh+0xa0>
		package[i] = data[i-2]; // Send all bytes in passed array
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	3b02      	subs	r3, #2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	441a      	add	r2, r3
 80014b8:	7ffb      	ldrb	r3, [r7, #31]
 80014ba:	7811      	ldrb	r1, [r2, #0]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 2; i < length + 2; i++) {
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	3301      	adds	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]
 80014c6:	e7ee      	b.n	80014a6 <_ZN8SigmaDSP13writeRegisterEthPKh+0x7e>
	HAL_I2C_Master_Transmit(_hi2c, _dspAddress, package, length + 2, 10);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6858      	ldr	r0, [r3, #4]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b299      	uxth	r1, r3
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	7a7b      	ldrb	r3, [r7, #9]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3302      	adds	r3, #2
 80014da:	b29c      	uxth	r4, r3
 80014dc:	230a      	movs	r3, #10
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4623      	mov	r3, r4
 80014e2:	f002 f939 	bl	8003758 <HAL_I2C_Master_Transmit>
 80014e6:	46ad      	mov	sp, r5
}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bdb0      	pop	{r4, r5, r7, pc}

080014f0 <_ZN8SigmaDSP12floatToFixedEfPh>:
Inputs:   float value;      Value to convert
          uint8_t *buffer;  Buffer to store the converted data to
Returns:  None
 ***************************************/
void SigmaDSP::floatToFixed(float value, uint8_t *buffer)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	// Convert float to 4 byte hex
	int32_t fixedval = (value * ((int32_t)1 << 23));
 80014fc:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f7ff fc3f 	bl	8000d84 <__aeabi_fmul>
 8001506:	4603      	mov	r3, r0
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe17 	bl	800113c <__aeabi_f2iz>
 800150e:	4603      	mov	r3, r0
 8001510:	617b      	str	r3, [r7, #20]

	//	 Store the 4 bytes in the passed buffer
	buffer[0] = 0x00; // First must be empty
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	buffer[1] = (fixedval >> 24) & 0xFF;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	0e1a      	lsrs	r2, r3, #24
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3301      	adds	r3, #1
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
	buffer[2] = (fixedval >> 16) & 0xFF;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	141a      	asrs	r2, r3, #16
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3302      	adds	r3, #2
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (fixedval >>  8) & 0xFF;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	121a      	asrs	r2, r3, #8
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3303      	adds	r3, #3
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	701a      	strb	r2, [r3, #0]
	buffer[4] = fixedval & 0xFF;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3304      	adds	r3, #4
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

	//		buffer[0] = (fixedval >> 24) & 0xFF;
	//		buffer[1] = (fixedval >> 16) & 0xFF;
	//		buffer[2] = (fixedval >>  8) & 0xFF;
	//		buffer[3] = fixedval & 0xFF;
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_ZN7AndroidC1EP20__UART_HandleTypeDefS1_>:
#include "Android.h"
#include "string.h"

Android::Android(UART_HandleTypeDef *_uartAndroid, UART_HandleTypeDef *_uartLog): uartAndroid(_uartAndroid), uartLog(_uartLog)
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001572:	821a      	strh	r2, [r3, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	749a      	strb	r2, [r3, #18]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	74da      	strb	r2, [r3, #19]
{
}
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <_ZN7Android7connectEv>:

void Android::connect() {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	switch (connectionState) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7c9b      	ldrb	r3, [r3, #18]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <_ZN7Android7connectEv+0x16>
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00c      	beq.n	80015ba <_ZN7Android7connectEv+0x2e>
		break;
	}
	default:;
	}

}
 80015a0:	e02f      	b.n	8001602 <_ZN7Android7connectEv+0x76>
		ping();
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f882 	bl	80016ac <_ZN7Android4pingEv>
		connectionState = PONG_WAIT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	749a      	strb	r2, [r3, #18]
		pingSysTime = HAL_GetTick();
 80015ae:	f001 fbf7 	bl	8002da0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	60da      	str	r2, [r3, #12]
		break;
 80015b8:	e023      	b.n	8001602 <_ZN7Android7connectEv+0x76>
		if(tryPong()) {
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f896 	bl	80016ec <_ZN7Android7tryPongEv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00a      	beq.n	80015dc <_ZN7Android7connectEv+0x50>
			connectionState = CONNECTED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2202      	movs	r2, #2
 80015ca:	749a      	strb	r2, [r3, #18]
			if(playing) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7a1b      	ldrb	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <_ZN7Android7connectEv+0x74>
				play();
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f89d 	bl	8001714 <_ZN7Android4playEv>
		break;
 80015da:	e011      	b.n	8001600 <_ZN7Android7connectEv+0x74>
		} else if(HAL_GetTick() - pingSysTime > tryPongTime) {
 80015dc:	f001 fbe0 	bl	8002da0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	8a12      	ldrh	r2, [r2, #16]
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bf8c      	ite	hi
 80015f0:	2301      	movhi	r3, #1
 80015f2:	2300      	movls	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <_ZN7Android7connectEv+0x74>
			connectionState = PING_SEND;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	749a      	strb	r2, [r3, #18]
		break;
 8001600:	bf00      	nop
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZN7Android11isConnectedEv>:

bool Android::isConnected() {
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	return connectionState == CONNECTED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7c9b      	ldrb	r3, [r3, #18]
 8001616:	2b02      	cmp	r3, #2
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
	...

0800162c <_ZN7Android13processComandEPc>:

void Android::resetState() {
	connectionState = PING_SEND;
}

void Android::processComand(char *command) {
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uartLog, (uint8_t *)"[android] received: ", 20, 2);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6858      	ldr	r0, [r3, #4]
 800163a:	2302      	movs	r3, #2
 800163c:	2214      	movs	r2, #20
 800163e:	4917      	ldr	r1, [pc, #92]	; (800169c <_ZN7Android13processComandEPc+0x70>)
 8001640:	f003 faa9 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uartLog, (uint8_t *)command, strlen(command), 2);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685c      	ldr	r4, [r3, #4]
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f7fe fd81 	bl	8000150 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	2302      	movs	r3, #2
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	4620      	mov	r0, r4
 8001658:	f003 fa9d 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uartLog, (uint8_t *)"\n", 1, 2);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6858      	ldr	r0, [r3, #4]
 8001660:	2302      	movs	r3, #2
 8001662:	2201      	movs	r2, #1
 8001664:	490e      	ldr	r1, [pc, #56]	; (80016a0 <_ZN7Android13processComandEPc+0x74>)
 8001666:	f003 fa96 	bl	8004b96 <HAL_UART_Transmit>
	if(strstr(command,"PONG") != NULL) {
 800166a:	490e      	ldr	r1, [pc, #56]	; (80016a4 <_ZN7Android13processComandEPc+0x78>)
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f006 fbbd 	bl	8007dec <strstr>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <_ZN7Android13processComandEPc+0x66>
		lastCommand = PONG;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	74da      	strb	r2, [r3, #19]
		HAL_Delay(30);
 800167e:	201e      	movs	r0, #30
 8001680:	f001 fb98 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] PONG received\n", 24, 2);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6858      	ldr	r0, [r3, #4]
 8001688:	2302      	movs	r3, #2
 800168a:	2218      	movs	r2, #24
 800168c:	4906      	ldr	r1, [pc, #24]	; (80016a8 <_ZN7Android13processComandEPc+0x7c>)
 800168e:	f003 fa82 	bl	8004b96 <HAL_UART_Transmit>
	//		char *istr = strstr(tmp,"PING:PONG");
	//		if(istr != NULL) {
	//			HAL_UART_Transmit(&huart1, (uint8_t*)"\nнашлась строка\n", 16, 10);
	//		}
	//	}
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	0800ac38 	.word	0x0800ac38
 80016a0:	0800ac50 	.word	0x0800ac50
 80016a4:	0800ac54 	.word	0x0800ac54
 80016a8:	0800ac5c 	.word	0x0800ac5c

080016ac <_ZN7Android4pingEv>:

void Android::ping() {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f001 fb7d 	bl	8002db4 <HAL_Delay>
	HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:PING>\n", 13, 2);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	2302      	movs	r3, #2
 80016c0:	220d      	movs	r2, #13
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <_ZN7Android4pingEv+0x38>)
 80016c4:	f003 fa67 	bl	8004b96 <HAL_UART_Transmit>
	HAL_Delay(30);
 80016c8:	201e      	movs	r0, #30
 80016ca:	f001 fb73 	bl	8002db4 <HAL_Delay>
	HAL_UART_Transmit(uartLog, (uint8_t *)"[android] ping\n", 15, 2);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6858      	ldr	r0, [r3, #4]
 80016d2:	2302      	movs	r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	4904      	ldr	r1, [pc, #16]	; (80016e8 <_ZN7Android4pingEv+0x3c>)
 80016d8:	f003 fa5d 	bl	8004b96 <HAL_UART_Transmit>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	0800ac78 	.word	0x0800ac78
 80016e8:	0800ac88 	.word	0x0800ac88

080016ec <_ZN7Android7tryPongEv>:

bool Android::tryPong() {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if(lastCommand == PONG) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7cdb      	ldrb	r3, [r3, #19]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d104      	bne.n	8001706 <_ZN7Android7tryPongEv+0x1a>
		lastCommand = EMPTY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	74da      	strb	r2, [r3, #19]
		return true;
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <_ZN7Android7tryPongEv+0x1c>
	}
	return false;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
	...

08001714 <_ZN7Android4playEv>:

void Android::play() {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	playing = true;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	721a      	strb	r2, [r3, #8]
	if(connectionState == CONNECTED) {
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7c9b      	ldrb	r3, [r3, #18]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d113      	bne.n	8001752 <_ZN7Android4playEv+0x3e>
		HAL_Delay(10);
 800172a:	200a      	movs	r0, #10
 800172c:	f001 fb42 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:PLAY>\n", 13, 2);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	2302      	movs	r3, #2
 8001736:	220d      	movs	r2, #13
 8001738:	4908      	ldr	r1, [pc, #32]	; (800175c <_ZN7Android4playEv+0x48>)
 800173a:	f003 fa2c 	bl	8004b96 <HAL_UART_Transmit>
		HAL_Delay(30);
 800173e:	201e      	movs	r0, #30
 8001740:	f001 fb38 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] play\n", 15, 2);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6858      	ldr	r0, [r3, #4]
 8001748:	2302      	movs	r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	4904      	ldr	r1, [pc, #16]	; (8001760 <_ZN7Android4playEv+0x4c>)
 800174e:	f003 fa22 	bl	8004b96 <HAL_UART_Transmit>
	}
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800ac98 	.word	0x0800ac98
 8001760:	0800aca8 	.word	0x0800aca8

08001764 <_ZN7Android4stopEv>:
void Android::stop() {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	playing = false;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	721a      	strb	r2, [r3, #8]
	if(connectionState == CONNECTED) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7c9b      	ldrb	r3, [r3, #18]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d113      	bne.n	80017a2 <_ZN7Android4stopEv+0x3e>
		HAL_Delay(10);
 800177a:	200a      	movs	r0, #10
 800177c:	f001 fb1a 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:STOP>\n", 13, 2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	2302      	movs	r3, #2
 8001786:	220d      	movs	r2, #13
 8001788:	4908      	ldr	r1, [pc, #32]	; (80017ac <_ZN7Android4stopEv+0x48>)
 800178a:	f003 fa04 	bl	8004b96 <HAL_UART_Transmit>
		HAL_Delay(30);
 800178e:	201e      	movs	r0, #30
 8001790:	f001 fb10 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] stop\n", 15, 2);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6858      	ldr	r0, [r3, #4]
 8001798:	2302      	movs	r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <_ZN7Android4stopEv+0x4c>)
 800179e:	f003 f9fa 	bl	8004b96 <HAL_UART_Transmit>
	}
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	0800acb8 	.word	0x0800acb8
 80017b0:	0800acc8 	.word	0x0800acc8

080017b4 <_ZN7Android4nextEv>:
void Android::next() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	if(connectionState == CONNECTED) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7c9b      	ldrb	r3, [r3, #18]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d113      	bne.n	80017ec <_ZN7Android4nextEv+0x38>
		HAL_Delay(10);
 80017c4:	200a      	movs	r0, #10
 80017c6:	f001 faf5 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:NEXT>\n", 13, 2);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	2302      	movs	r3, #2
 80017d0:	220d      	movs	r2, #13
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <_ZN7Android4nextEv+0x40>)
 80017d4:	f003 f9df 	bl	8004b96 <HAL_UART_Transmit>
		HAL_Delay(30);
 80017d8:	201e      	movs	r0, #30
 80017da:	f001 faeb 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] next\n", 15, 2);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6858      	ldr	r0, [r3, #4]
 80017e2:	2302      	movs	r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	4904      	ldr	r1, [pc, #16]	; (80017f8 <_ZN7Android4nextEv+0x44>)
 80017e8:	f003 f9d5 	bl	8004b96 <HAL_UART_Transmit>
	}
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800acd8 	.word	0x0800acd8
 80017f8:	0800ace8 	.word	0x0800ace8

080017fc <_ZN7Android4prevEv>:
void Android::prev() {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	if(connectionState == CONNECTED) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7c9b      	ldrb	r3, [r3, #18]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d113      	bne.n	8001834 <_ZN7Android4prevEv+0x38>
		HAL_Delay(10);
 800180c:	200a      	movs	r0, #10
 800180e:	f001 fad1 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:PREV>\n", 13, 2);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	2302      	movs	r3, #2
 8001818:	220d      	movs	r2, #13
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <_ZN7Android4prevEv+0x40>)
 800181c:	f003 f9bb 	bl	8004b96 <HAL_UART_Transmit>
		HAL_Delay(30);
 8001820:	201e      	movs	r0, #30
 8001822:	f001 fac7 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] prev\n", 15, 2);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6858      	ldr	r0, [r3, #4]
 800182a:	2302      	movs	r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	4904      	ldr	r1, [pc, #16]	; (8001840 <_ZN7Android4prevEv+0x44>)
 8001830:	f003 f9b1 	bl	8004b96 <HAL_UART_Transmit>
	}
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	0800acf8 	.word	0x0800acf8
 8001840:	0800ad08 	.word	0x0800ad08

08001844 <_ZN7Android8shutdownEv>:
void Android::shutdown() {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if(connectionState == CONNECTED) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7c9b      	ldrb	r3, [r3, #18]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d113      	bne.n	800187c <_ZN7Android8shutdownEv+0x38>
		HAL_Delay(10);
 8001854:	200a      	movs	r0, #10
 8001856:	f001 faad 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:SHUTDOWN>\n", 17, 2);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	2302      	movs	r3, #2
 8001860:	2211      	movs	r2, #17
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <_ZN7Android8shutdownEv+0x40>)
 8001864:	f003 f997 	bl	8004b96 <HAL_UART_Transmit>
		HAL_Delay(30);
 8001868:	201e      	movs	r0, #30
 800186a:	f001 faa3 	bl	8002db4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] shutdown\n", 19, 2);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6858      	ldr	r0, [r3, #4]
 8001872:	2302      	movs	r3, #2
 8001874:	2213      	movs	r2, #19
 8001876:	4904      	ldr	r1, [pc, #16]	; (8001888 <_ZN7Android8shutdownEv+0x44>)
 8001878:	f003 f98d 	bl	8004b96 <HAL_UART_Transmit>
	}
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	0800ad18 	.word	0x0800ad18
 8001888:	0800ad2c 	.word	0x0800ad2c

0800188c <_ZN12PowerManagerC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvvES5_S5_S5_>:
#include "PowerManager.h"
#include <string.h>

PowerManager::PowerManager(
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	80fb      	strh	r3, [r7, #6]
		relayPin(_relayPin),
		uart(_uart),
		accOnCallback(_accOnCallback),
		accOffCallback(_accOffCallback),
		waitOffCallback(_waitOffCallback),
		offCallback(_offCallback)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	809a      	strh	r2, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	819a      	strh	r2, [r3, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	619a      	str	r2, [r3, #24]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ca:	61da      	str	r2, [r3, #28]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d0:	621a      	str	r2, [r3, #32]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2202      	movs	r2, #2
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
{
}
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
	...

08001900 <_ZN12PowerManager15powerProcessingEv>:

void PowerManager::powerProcessing() {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	switch (powerState) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800190e:	2b04      	cmp	r3, #4
 8001910:	f200 8090 	bhi.w	8001a34 <_ZN12PowerManager15powerProcessingEv+0x134>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <_ZN12PowerManager15powerProcessingEv+0x1c>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001931 	.word	0x08001931
 8001920:	08001951 	.word	0x08001951
 8001924:	08001967 	.word	0x08001967
 8001928:	080019bd 	.word	0x080019bd
 800192c:	08001a07 	.word	0x08001a07
	case ACC_ON : {
		if(!checkAcc()) {
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f883 	bl	8001a3c <_ZN12PowerManager8checkAccEv>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d06f      	beq.n	8001a26 <_ZN12PowerManager15powerProcessingEv+0x126>
			changeState(ACC_OFF);
 8001946:	2101      	movs	r1, #1
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f889 	bl	8001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		}
		break;
 800194e:	e06a      	b.n	8001a26 <_ZN12PowerManager15powerProcessingEv+0x126>
	}
	case ACC_OFF : {
		waitAccTime = HAL_GetTick();
 8001950:	f001 fa26 	bl	8002da0 <HAL_GetTick>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
		changeState(WAIT_ACC);
 800195c:	2102      	movs	r1, #2
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f87e 	bl	8001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8001964:	e066      	b.n	8001a34 <_ZN12PowerManager15powerProcessingEv+0x134>
	}
	case WAIT_ACC : {
		if(checkAcc()) {
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f868 	bl	8001a3c <_ZN12PowerManager8checkAccEv>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <_ZN12PowerManager15powerProcessingEv+0x86>
			changeState(ACC_ON);
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f86e 	bl	8001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>
			if(maxAccWaitTime < HAL_GetTick() - waitAccTime) {
				waitPowerOffTime = HAL_GetTick();
				changeState(WAIT_OFF);
			}
		}
		break;
 8001984:	e051      	b.n	8001a2a <_ZN12PowerManager15powerProcessingEv+0x12a>
			if(maxAccWaitTime < HAL_GetTick() - waitAccTime) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	461c      	mov	r4, r3
 800198c:	f001 fa08 	bl	8002da0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	429c      	cmp	r4, r3
 800199a:	bf34      	ite	cc
 800199c:	2301      	movcc	r3, #1
 800199e:	2300      	movcs	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d041      	beq.n	8001a2a <_ZN12PowerManager15powerProcessingEv+0x12a>
				waitPowerOffTime = HAL_GetTick();
 80019a6:	f001 f9fb 	bl	8002da0 <HAL_GetTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
				changeState(WAIT_OFF);
 80019b2:	2103      	movs	r1, #3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f853 	bl	8001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 80019ba:	e036      	b.n	8001a2a <_ZN12PowerManager15powerProcessingEv+0x12a>
	}
	case WAIT_OFF : {
		if(checkAcc()) {
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f83d 	bl	8001a3c <_ZN12PowerManager8checkAccEv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <_ZN12PowerManager15powerProcessingEv+0xdc>
			changeState(ACC_ON);
 80019d2:	2100      	movs	r1, #0
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f843 	bl	8001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		} else {
			if(maxPowerOffTime < HAL_GetTick() - waitPowerOffTime) {
				changeState(OFF);
			}
		}
		break;
 80019da:	e028      	b.n	8001a2e <_ZN12PowerManager15powerProcessingEv+0x12e>
			if(maxPowerOffTime < HAL_GetTick() - waitPowerOffTime) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	461c      	mov	r4, r3
 80019e2:	f001 f9dd 	bl	8002da0 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	429c      	cmp	r4, r3
 80019f0:	bf34      	ite	cc
 80019f2:	2301      	movcc	r3, #1
 80019f4:	2300      	movcs	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d018      	beq.n	8001a2e <_ZN12PowerManager15powerProcessingEv+0x12e>
				changeState(OFF);
 80019fc:	2104      	movs	r1, #4
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f82e 	bl	8001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8001a04:	e013      	b.n	8001a2e <_ZN12PowerManager15powerProcessingEv+0x12e>
	}
	case OFF : {
		if(checkAcc()) {
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f818 	bl	8001a3c <_ZN12PowerManager8checkAccEv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <_ZN12PowerManager15powerProcessingEv+0x132>
			changeState(WAIT_ACC);
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f81e 	bl	8001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		}
		break;
 8001a24:	e005      	b.n	8001a32 <_ZN12PowerManager15powerProcessingEv+0x132>
		break;
 8001a26:	bf00      	nop
 8001a28:	e004      	b.n	8001a34 <_ZN12PowerManager15powerProcessingEv+0x134>
		break;
 8001a2a:	bf00      	nop
 8001a2c:	e002      	b.n	8001a34 <_ZN12PowerManager15powerProcessingEv+0x134>
		break;
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <_ZN12PowerManager15powerProcessingEv+0x134>
		break;
 8001a32:	bf00      	nop
	}
	}
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <_ZN12PowerManager8checkAccEv>:

GPIO_PinState PowerManager::checkAcc() {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(accGPIO, accPin);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	899b      	ldrh	r3, [r3, #12]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f001 fce0 	bl	8003414 <HAL_GPIO_ReadPin>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <_ZN12PowerManager11changeStateENS_10PowerStateE>:

void PowerManager::changeState(PowerState newState) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
	powerState = newState;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	switch (newState) {
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d841      	bhi.n	8001afe <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x20>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a95 	.word	0x08001a95
 8001a84:	08001ab5 	.word	0x08001ab5
 8001a88:	08001ac5 	.word	0x08001ac5
 8001a8c:	08001acf 	.word	0x08001acf
 8001a90:	08001adf 	.word	0x08001adf
	case ACC_ON : {
		uartLog("acc on");
 8001a94:	491c      	ldr	r1, [pc, #112]	; (8001b08 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xa8>)
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f840 	bl	8001b1c <_ZN12PowerManager7uartLogEPc>
		(*accOnCallback)();
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	4798      	blx	r3
		HAL_GPIO_WritePin(relayGPIO, relayPin, GPIO_PIN_SET);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	889b      	ldrh	r3, [r3, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4619      	mov	r1, r3
 8001aae:	f001 fcc8 	bl	8003442 <HAL_GPIO_WritePin>
		break;
 8001ab2:	e024      	b.n	8001afe <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case ACC_OFF : {
		uartLog("acc off");
 8001ab4:	4915      	ldr	r1, [pc, #84]	; (8001b0c <_ZN12PowerManager11changeStateENS_10PowerStateE+0xac>)
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f830 	bl	8001b1c <_ZN12PowerManager7uartLogEPc>
		(*accOffCallback)();
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4798      	blx	r3
		break;
 8001ac2:	e01c      	b.n	8001afe <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case WAIT_ACC : {
		uartLog("wait acc");
 8001ac4:	4912      	ldr	r1, [pc, #72]	; (8001b10 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xb0>)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f828 	bl	8001b1c <_ZN12PowerManager7uartLogEPc>
		break;
 8001acc:	e017      	b.n	8001afe <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case WAIT_OFF : {
		uartLog("wait off");
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xb4>)
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f823 	bl	8001b1c <_ZN12PowerManager7uartLogEPc>
		(*waitOffCallback)();
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4798      	blx	r3
		break;
 8001adc:	e00f      	b.n	8001afe <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case OFF : {
		uartLog("off");
 8001ade:	490e      	ldr	r1, [pc, #56]	; (8001b18 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xb8>)
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f81b 	bl	8001b1c <_ZN12PowerManager7uartLogEPc>
		(*offCallback)();
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4798      	blx	r3
		HAL_GPIO_WritePin(relayGPIO, relayPin, GPIO_PIN_RESET);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	889b      	ldrh	r3, [r3, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	4619      	mov	r1, r3
 8001af8:	f001 fca3 	bl	8003442 <HAL_GPIO_WritePin>
		break;
 8001afc:	bf00      	nop
	}
	}


}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0800ad40 	.word	0x0800ad40
 8001b0c:	0800ad48 	.word	0x0800ad48
 8001b10:	0800ad50 	.word	0x0800ad50
 8001b14:	0800ad5c 	.word	0x0800ad5c
 8001b18:	0800ad68 	.word	0x0800ad68

08001b1c <_ZN12PowerManager7uartLogEPc>:

void PowerManager::uartLog(char *str) {
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart, (uint8_t *)"[power] ", 8, 2);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6918      	ldr	r0, [r3, #16]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <_ZN12PowerManager7uartLogEPc+0x48>)
 8001b30:	f003 f831 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t *)str, strlen(str), 2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691c      	ldr	r4, [r3, #16]
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f7fe fb09 	bl	8000150 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	2302      	movs	r3, #2
 8001b44:	6839      	ldr	r1, [r7, #0]
 8001b46:	4620      	mov	r0, r4
 8001b48:	f003 f825 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t *)"\n", 1, 2);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6918      	ldr	r0, [r3, #16]
 8001b50:	2302      	movs	r3, #2
 8001b52:	2201      	movs	r2, #1
 8001b54:	4904      	ldr	r1, [pc, #16]	; (8001b68 <_ZN12PowerManager7uartLogEPc+0x4c>)
 8001b56:	f003 f81e 	bl	8004b96 <HAL_UART_Transmit>
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	0800ad6c 	.word	0x0800ad6c
 8001b68:	0800ad78 	.word	0x0800ad78

08001b6c <_ZN13SerialReciverC1EP20__UART_HandleTypeDef>:
#include "SerialReciver.h"

SerialReciver::SerialReciver(UART_HandleTypeDef *_uart): uart(_uart) {}
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	711a      	strb	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <_ZN13SerialReciver7getDataEPc>:

int SerialReciver::getData(char *data) {
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
	if(!hasData || HAL_GetTick() - lastReciveTime < 10) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <_ZN13SerialReciver7getDataEPc+0x2a>
 8001bb6:	f001 f8f3 	bl	8002da0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	d801      	bhi.n	8001bcc <_ZN13SerialReciver7getDataEPc+0x2e>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <_ZN13SerialReciver7getDataEPc+0x30>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <_ZN13SerialReciver7getDataEPc+0x38>
		return 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e02b      	b.n	8001c2e <_ZN13SerialReciver7getDataEPc+0x90>
	}

	int size = idx == 0 ? BUFFER_SIZE : idx;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <_ZN13SerialReciver7getDataEPc+0x4a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001be6:	e000      	b.n	8001bea <_ZN13SerialReciver7getDataEPc+0x4c>
 8001be8:	23c8      	movs	r3, #200	; 0xc8
 8001bea:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < size; i++) {
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	da12      	bge.n	8001c1e <_ZN13SerialReciver7getDataEPc+0x80>
		data[i] = buffer[i];
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	440a      	add	r2, r1
 8001c04:	3205      	adds	r2, #5
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	701a      	strb	r2, [r3, #0]
		buffer[i] = '\0';
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3305      	adds	r3, #5
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++) {
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e7e8      	b.n	8001bf0 <_ZN13SerialReciver7getDataEPc+0x52>
	}

	hasData = 0;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	711a      	strb	r2, [r3, #4]
	idx = 0;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	return size;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_ZN13SerialReciver22reciveInterruptHandlerEv>:

void SerialReciver::reciveInterruptHandler() {
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	if((uart->Instance->SR & USART_SR_RXNE) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x3a>
	{
		buffer[idx] = (uint8_t)(uart->Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c66:	b2d1      	uxtb	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	715a      	strb	r2, [r3, #5]
	}
	//		if(sim[idx] == end){
	//			hasData = 1;
	//		}
	idx = idx == BUFFER_SIZE-1 ? 0 : idx + 1;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c76:	2bc7      	cmp	r3, #199	; 0xc7
 8001c78:	d004      	beq.n	8001c84 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x4e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c80:	3301      	adds	r3, #1
 8001c82:	e000      	b.n	8001c86 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x50>
 8001c84:	2300      	movs	r3, #0
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	hasData=1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	711a      	strb	r2, [r3, #4]
	lastReciveTime = HAL_GetTick();
 8001c92:	f001 f885 	bl	8002da0 <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0e      	blt.n	8001cd8 <__NVIC_ClearPendingIRQ+0x30>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_ClearPendingIRQ+0x3c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <__NVIC_SystemReset+0x20>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_SystemReset+0x24>)
 8001cfc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <__NVIC_SystemReset+0x1c>
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	05fa0004 	.word	0x05fa0004

08001d10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d14:	f000 ffec 	bl	8002cf0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d18:	f000 f87c 	bl	8001e14 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d1c:	f000 fa3c 	bl	8002198 <_ZL12MX_GPIO_Initv>
	MX_TIM4_Init();
 8001d20:	f000 f980 	bl	8002024 <_ZL12MX_TIM4_Initv>
	MX_I2C2_Init();
 8001d24:	f000 f8ea 	bl	8001efc <_ZL12MX_I2C2_Initv>
	MX_USART2_UART_Init();
 8001d28:	f000 fa08 	bl	800213c <_ZL19MX_USART2_UART_Initv>
	MX_USART1_UART_Init();
 8001d2c:	f000 f9d8 	bl	80020e0 <_ZL19MX_USART1_UART_Initv>
	MX_TIM1_Init();
 8001d30:	f000 f918 	bl	8001f64 <_ZL12MX_TIM1_Initv>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001d34:	f000 f8bd 	bl	8001eb2 <_ZL12MX_NVIC_Initv>
	/* USER CODE BEGIN 2 */

	extDeviceCommandReciver.startTimer();
 8001d38:	482c      	ldr	r0, [pc, #176]	; (8001dec <main+0xdc>)
 8001d3a:	f004 fb3d 	bl	80063b8 <_ZN23ExtDeviceCommandReciver10startTimerEv>

	HAL_Delay(100);
 8001d3e:	2064      	movs	r0, #100	; 0x64
 8001d40:	f001 f838 	bl	8002db4 <HAL_Delay>
	serial.println("[stm32] started");
 8001d44:	492a      	ldr	r1, [pc, #168]	; (8001df0 <main+0xe0>)
 8001d46:	482b      	ldr	r0, [pc, #172]	; (8001df4 <main+0xe4>)
 8001d48:	f004 fb9f 	bl	800648a <_ZN6Serial7printlnEPc>
	resetAdauCmd();
 8001d4c:	f000 fd16 	bl	800277c <resetAdauCmd>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		powerManager.powerProcessing();
 8001d50:	4829      	ldr	r0, [pc, #164]	; (8001df8 <main+0xe8>)
 8001d52:	f7ff fdd5 	bl	8001900 <_ZN12PowerManager15powerProcessingEv>
		volumeProcessing();
 8001d56:	f000 fb73 	bl	8002440 <volumeProcessing>
		timeProcessing();
 8001d5a:	f000 fb2d 	bl	80023b8 <timeProcessing>
		monitorProcessing();
 8001d5e:	f000 fc3b 	bl	80025d8 <monitorProcessing>
		amplifierProcessing();
 8001d62:	f000 fbed 	bl	8002540 <amplifierProcessing>
//		if(!android.isConnected() && extDeviceCommandReciver.isPlaying()) {
		if(!android.isConnected()) {
 8001d66:	4825      	ldr	r0, [pc, #148]	; (8001dfc <main+0xec>)
 8001d68:	f7ff fc4f 	bl	800160a <_ZN7Android11isConnectedEv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f083 0301 	eor.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <main+0x84>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // включить прерывания usart'a
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <main+0xf0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <main+0xf0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	60da      	str	r2, [r3, #12]
			HAL_Delay(20);
 8001d88:	2014      	movs	r0, #20
 8001d8a:	f001 f813 	bl	8002db4 <HAL_Delay>
			android.connect();
 8001d8e:	481b      	ldr	r0, [pc, #108]	; (8001dfc <main+0xec>)
 8001d90:	f7ff fbfc 	bl	800158c <_ZN7Android7connectEv>
		}
		cmdInfoToSerial();
 8001d94:	f000 fd0c 	bl	80027b0 <cmdInfoToSerial>

		if(serialReciver.getData(tmp)) {
 8001d98:	491a      	ldr	r1, [pc, #104]	; (8001e04 <main+0xf4>)
 8001d9a:	481b      	ldr	r0, [pc, #108]	; (8001e08 <main+0xf8>)
 8001d9c:	f7ff feff 	bl	8001b9e <_ZN13SerialReciver7getDataEPc>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0cf      	beq.n	8001d50 <main+0x40>
			if(strstr(tmp, adauResetCmd) != NULL) {
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <main+0xfc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4813      	ldr	r0, [pc, #76]	; (8001e04 <main+0xf4>)
 8001db8:	f006 f818 	bl	8007dec <strstr>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <main+0xb8>
				resetAdauCmd();
 8001dc2:	f000 fcdb 	bl	800277c <resetAdauCmd>
 8001dc6:	e00e      	b.n	8001de6 <main+0xd6>
			} else if(strstr(tmp, stmResetCmd) != NULL) {
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <main+0x100>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480d      	ldr	r0, [pc, #52]	; (8001e04 <main+0xf4>)
 8001dd0:	f006 f80c 	bl	8007dec <strstr>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <main+0xce>
				NVIC_SystemReset();
 8001dda:	f7ff ff85 	bl	8001ce8 <__NVIC_SystemReset>
			} else {
				android.processComand(tmp);
 8001dde:	4909      	ldr	r1, [pc, #36]	; (8001e04 <main+0xf4>)
 8001de0:	4806      	ldr	r0, [pc, #24]	; (8001dfc <main+0xec>)
 8001de2:	f7ff fc23 	bl	800162c <_ZN7Android13processComandEPc>
			}
			clearTmp();
 8001de6:	f000 fca1 	bl	800272c <clearTmp>
		powerManager.powerProcessing();
 8001dea:	e7b1      	b.n	8001d50 <main+0x40>
 8001dec:	20000518 	.word	0x20000518
 8001df0:	0800ad94 	.word	0x0800ad94
 8001df4:	20000400 	.word	0x20000400
 8001df8:	20000548 	.word	0x20000548
 8001dfc:	20000584 	.word	0x20000584
 8001e00:	200003c0 	.word	0x200003c0
 8001e04:	20000684 	.word	0x20000684
 8001e08:	20000598 	.word	0x20000598
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	2000000c 	.word	0x2000000c

08001e14 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b090      	sub	sp, #64	; 0x40
 8001e18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	2228      	movs	r2, #40	; 0x28
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 f98b 	bl	800713e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e44:	2301      	movs	r3, #1
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 ff81 	bl	8003d64 <HAL_RCC_OscConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <_Z18SystemClock_Configv+0x62>
	{
		Error_Handler();
 8001e72:	f000 fcd7 	bl	8002824 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e76:	230f      	movs	r3, #15
 8001e78:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e86:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 f9e7 	bl	8004264 <HAL_RCC_ClockConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_Z18SystemClock_Configv+0x96>
	{
		Error_Handler();
 8001ea6:	f000 fcbd 	bl	8002824 <Error_Handler>
	}
}
 8001eaa:	bf00      	nop
 8001eac:	3740      	adds	r7, #64	; 0x40
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_ZL12MX_NVIC_Initv>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2102      	movs	r1, #2
 8001eba:	2006      	movs	r0, #6
 8001ebc:	f001 f895 	bl	8002fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ec0:	2006      	movs	r0, #6
 8001ec2:	f001 f8ae 	bl	8003022 <HAL_NVIC_EnableIRQ>
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2017      	movs	r0, #23
 8001ecc:	f001 f88d 	bl	8002fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ed0:	2017      	movs	r0, #23
 8001ed2:	f001 f8a6 	bl	8003022 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2101      	movs	r1, #1
 8001eda:	2026      	movs	r0, #38	; 0x26
 8001edc:	f001 f885 	bl	8002fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ee0:	2026      	movs	r0, #38	; 0x26
 8001ee2:	f001 f89e 	bl	8003022 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2101      	movs	r1, #1
 8001eea:	2025      	movs	r0, #37	; 0x25
 8001eec:	f001 f87d 	bl	8002fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ef0:	2025      	movs	r0, #37	; 0x25
 8001ef2:	f001 f896 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <_ZL12MX_I2C2_Initv>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f02:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <_ZL12MX_I2C2_Initv+0x60>)
 8001f04:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f08:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <_ZL12MX_I2C2_Initv+0x64>)
 8001f0a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f1e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f38:	4807      	ldr	r0, [pc, #28]	; (8001f58 <_ZL12MX_I2C2_Initv+0x5c>)
 8001f3a:	f001 fad5 	bl	80034e8 <HAL_I2C_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <_ZL12MX_I2C2_Initv+0x56>
	{
		Error_Handler();
 8001f4e:	f000 fc69 	bl	8002824 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000029c 	.word	0x2000029c
 8001f5c:	40005800 	.word	0x40005800
 8001f60:	000186a0 	.word	0x000186a0

08001f64 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001f82:	4a27      	ldr	r2, [pc, #156]	; (8002020 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f84:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72-1;
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001f88:	2247      	movs	r2, #71	; 0x47
 8001f8a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fac:	481b      	ldr	r0, [pc, #108]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001fae:	f002 faf5 	bl	800459c <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <_ZL12MX_TIM1_Initv+0x62>
	{
		Error_Handler();
 8001fc2:	f000 fc2f 	bl	8002824 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4812      	ldr	r0, [pc, #72]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001fd4:	f002 fb84 	bl	80046e0 <HAL_TIM_ConfigClockSource>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <_ZL12MX_TIM1_Initv+0x88>
	{
		Error_Handler();
 8001fe8:	f000 fc1c 	bl	8002824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fec:	2320      	movs	r3, #32
 8001fee:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <_ZL12MX_TIM1_Initv+0xb8>)
 8001ffa:	f002 fd21 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <_ZL12MX_TIM1_Initv+0xae>
	{
		Error_Handler();
 800200e:	f000 fc09 	bl	8002824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002f0 	.word	0x200002f0
 8002020:	40012c00 	.word	0x40012c00

08002024 <_ZL12MX_TIM4_Initv>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	463b      	mov	r3, r7
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002042:	4a26      	ldr	r2, [pc, #152]	; (80020dc <_ZL12MX_TIM4_Initv+0xb8>)
 8002044:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 36000-1;
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002048:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800204c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002054:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800205a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002068:	481b      	ldr	r0, [pc, #108]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 800206a:	f002 fa97 	bl	800459c <HAL_TIM_Base_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <_ZL12MX_TIM4_Initv+0x5e>
	{
		Error_Handler();
 800207e:	f000 fbd1 	bl	8002824 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002086:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	4619      	mov	r1, r3
 800208e:	4812      	ldr	r0, [pc, #72]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002090:	f002 fb26 	bl	80046e0 <HAL_TIM_ConfigClockSource>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <_ZL12MX_TIM4_Initv+0x84>
	{
		Error_Handler();
 80020a4:	f000 fbbe 	bl	8002824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020a8:	2320      	movs	r3, #32
 80020aa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020b0:	463b      	mov	r3, r7
 80020b2:	4619      	mov	r1, r3
 80020b4:	4808      	ldr	r0, [pc, #32]	; (80020d8 <_ZL12MX_TIM4_Initv+0xb4>)
 80020b6:	f002 fcc3 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <_ZL12MX_TIM4_Initv+0xaa>
	{
		Error_Handler();
 80020ca:	f000 fbab 	bl	8002824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000338 	.word	0x20000338
 80020dc:	40000800 	.word	0x40000800

080020e0 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 80020e6:	4a14      	ldr	r2, [pc, #80]	; (8002138 <_ZL19MX_USART1_UART_Initv+0x58>)
 80020e8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002116:	4807      	ldr	r0, [pc, #28]	; (8002134 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002118:	f002 fcf0 	bl	8004afc <HAL_UART_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <_ZL19MX_USART1_UART_Initv+0x50>
	{
		Error_Handler();
 800212c:	f000 fb7a 	bl	8002824 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000380 	.word	0x20000380
 8002138:	40013800 	.word	0x40013800

0800213c <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002144:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800214c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002162:	220c      	movs	r2, #12
 8002164:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002174:	f002 fcc2 	bl	8004afc <HAL_UART_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_ZL19MX_USART2_UART_Initv+0x50>
	{
		Error_Handler();
 8002188:	f000 fb4c 	bl	8002824 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200003c0 	.word	0x200003c0
 8002194:	40004400 	.word	0x40004400

08002198 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021ac:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a59      	ldr	r2, [pc, #356]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80021c4:	4b54      	ldr	r3, [pc, #336]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a53      	ldr	r2, [pc, #332]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ca:	f043 0320 	orr.w	r3, r3, #32
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b51      	ldr	r3, [pc, #324]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a4d      	ldr	r2, [pc, #308]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b48      	ldr	r3, [pc, #288]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a47      	ldr	r2, [pc, #284]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b45      	ldr	r3, [pc, #276]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_Pin|MONITOR_OPEN_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8002212:	4842      	ldr	r0, [pc, #264]	; (800231c <_ZL12MX_GPIO_Initv+0x184>)
 8002214:	f001 f915 	bl	8003442 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ADAU_RESET_Pin|POWER_RELAY_Pin, GPIO_PIN_SET);
 8002218:	2201      	movs	r2, #1
 800221a:	2111      	movs	r1, #17
 800221c:	4840      	ldr	r0, [pc, #256]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 800221e:	f001 f910 	bl	8003442 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	2120      	movs	r1, #32
 8002226:	483e      	ldr	r0, [pc, #248]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 8002228:	f001 f90b 	bl	8003442 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MBUS_TX_GPIO_Port, MBUS_TX_Pin, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	2102      	movs	r1, #2
 8002230:	483c      	ldr	r0, [pc, #240]	; (8002324 <_ZL12MX_GPIO_Initv+0x18c>)
 8002232:	f001 f906 	bl	8003442 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8002236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2302      	movs	r3, #2
 8002246:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	4619      	mov	r1, r3
 800224e:	4833      	ldr	r0, [pc, #204]	; (800231c <_ZL12MX_GPIO_Initv+0x184>)
 8002250:	f000 ff86 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : MONITOR_OPEN_Pin */
	GPIO_InitStruct.Pin = MONITOR_OPEN_Pin;
 8002254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002258:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225a:	2301      	movs	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2302      	movs	r3, #2
 8002264:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MONITOR_OPEN_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4619      	mov	r1, r3
 800226c:	482b      	ldr	r0, [pc, #172]	; (800231c <_ZL12MX_GPIO_Initv+0x184>)
 800226e:	f000 ff77 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : ADAU_RESET_Pin */
	GPIO_InitStruct.Pin = ADAU_RESET_Pin;
 8002272:	2301      	movs	r3, #1
 8002274:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2302      	movs	r3, #2
 8002280:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ADAU_RESET_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	4825      	ldr	r0, [pc, #148]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 800228a:	f000 ff69 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pins : AC_Pin DSP_DATA_Pin */
	GPIO_InitStruct.Pin = AC_Pin|DSP_DATA_Pin;
 800228e:	2382      	movs	r3, #130	; 0x82
 8002290:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002296:	2302      	movs	r3, #2
 8002298:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	4619      	mov	r1, r3
 80022a0:	481f      	ldr	r0, [pc, #124]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 80022a2:	f000 ff5d 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pins : POWER_RELAY_Pin AMPLIFIER_RELAY_Pin */
	GPIO_InitStruct.Pin = POWER_RELAY_Pin|AMPLIFIER_RELAY_Pin;
 80022a6:	2330      	movs	r3, #48	; 0x30
 80022a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4619      	mov	r1, r3
 80022bc:	4818      	ldr	r0, [pc, #96]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 80022be:	f000 ff4f 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : DSP_CLOCK_Pin */
	GPIO_InitStruct.Pin = DSP_CLOCK_Pin;
 80022c2:	2340      	movs	r3, #64	; 0x40
 80022c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <_ZL12MX_GPIO_Initv+0x190>)
 80022c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DSP_CLOCK_GPIO_Port, &GPIO_InitStruct);
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	4619      	mov	r1, r3
 80022d4:	4812      	ldr	r0, [pc, #72]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 80022d6:	f000 ff43 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : MBUS_RX_Pin */
	GPIO_InitStruct.Pin = MBUS_RX_Pin;
 80022da:	2301      	movs	r3, #1
 80022dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <_ZL12MX_GPIO_Initv+0x194>)
 80022e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MBUS_RX_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	4619      	mov	r1, r3
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <_ZL12MX_GPIO_Initv+0x18c>)
 80022ee:	f000 ff37 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : MBUS_TX_Pin */
	GPIO_InitStruct.Pin = MBUS_TX_Pin;
 80022f2:	2302      	movs	r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MBUS_TX_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4619      	mov	r1, r3
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <_ZL12MX_GPIO_Initv+0x18c>)
 800230a:	f000 ff29 	bl	8003160 <HAL_GPIO_Init>

}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40011000 	.word	0x40011000
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00
 8002328:	10110000 	.word	0x10110000
 800232c:	10210000 	.word	0x10210000

08002330 <clearPendingInterrupt>:

/* USER CODE BEGIN 4 */
void clearPendingInterrupt() {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	EXTI->PR = EXTI_PR_PR0; //Сбрасываем флаг прерывания
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <clearPendingInterrupt+0x24>)
 8002336:	2201      	movs	r2, #1
 8002338:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800233a:	2006      	movs	r0, #6
 800233c:	f7ff fcb4 	bl	8001ca8 <__NVIC_ClearPendingIRQ>
	EXTI->PR = EXTI_PR_PR9; //Сбрасываем флаг прерывания
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <clearPendingInterrupt+0x24>)
 8002342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002346:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8002348:	2017      	movs	r0, #23
 800234a:	f7ff fcad 	bl	8001ca8 <__NVIC_ClearPendingIRQ>
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40010400 	.word	0x40010400

08002358 <dataRequestInterrupt>:

void dataRequestInterrupt() {
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	dspCommandReciver.readPackage();
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <dataRequestInterrupt+0x1c>)
 800235e:	f003 f891 	bl	8005484 <_ZN17DspCommandReciver11readPackageEv>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8002362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002366:	4804      	ldr	r0, [pc, #16]	; (8002378 <dataRequestInterrupt+0x20>)
 8002368:	f001 f883 	bl	8003472 <HAL_GPIO_TogglePin>
	clearPendingInterrupt();
 800236c:	f7ff ffe0 	bl	8002330 <clearPendingInterrupt>
	//	serial.println("dataRequestInterrupt");
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	2000041c 	.word	0x2000041c
 8002378:	40011000 	.word	0x40011000

0800237c <mBusRequestInterrupt>:

void mBusRequestInterrupt() {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
	uint32_t value = extDeviceCommandReciver.commandProcessing();
 8002382:	480a      	ldr	r0, [pc, #40]	; (80023ac <mBusRequestInterrupt+0x30>)
 8002384:	f003 fcea 	bl	8005d5c <_ZN23ExtDeviceCommandReciver17commandProcessingEv>
 8002388:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800238a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800238e:	4808      	ldr	r0, [pc, #32]	; (80023b0 <mBusRequestInterrupt+0x34>)
 8002390:	f001 f86f 	bl	8003472 <HAL_GPIO_TogglePin>
	sysTime = HAL_GetTick();
 8002394:	f000 fd04 	bl	8002da0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <mBusRequestInterrupt+0x38>)
 800239c:	601a      	str	r2, [r3, #0]
	clearPendingInterrupt();
 800239e:	f7ff ffc7 	bl	8002330 <clearPendingInterrupt>
	//	serial.println("mBusRequestInterrupt");
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000518 	.word	0x20000518
 80023b0:	40011000 	.word	0x40011000
 80023b4:	20000670 	.word	0x20000670

080023b8 <timeProcessing>:

void timeProcessing() {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
	uint32_t newSysTime = HAL_GetTick();
 80023be:	f000 fcef 	bl	8002da0 <HAL_GetTick>
 80023c2:	6078      	str	r0, [r7, #4]
	if(newSysTime - sysTime > sendTimePeriod && extDeviceCommandReciver.isPlaying()) {
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <timeProcessing+0x74>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4a18      	ldr	r2, [pc, #96]	; (8002430 <timeProcessing+0x78>)
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d907      	bls.n	80023e4 <timeProcessing+0x2c>
 80023d4:	4817      	ldr	r0, [pc, #92]	; (8002434 <timeProcessing+0x7c>)
 80023d6:	f003 fd99 	bl	8005f0c <_ZN23ExtDeviceCommandReciver9isPlayingEv>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <timeProcessing+0x2c>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <timeProcessing+0x2e>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01c      	beq.n	8002424 <timeProcessing+0x6c>
		sysTime = newSysTime;
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <timeProcessing+0x74>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6013      	str	r3, [r2, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80023f0:	2006      	movs	r0, #6
 80023f2:	f000 fe24 	bl	800303e <HAL_NVIC_DisableIRQ>
		extDeviceCommandReciver.sendTime(abs(volumeLastValue), sendVolumeLastStatus ? 1 : 2);
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <timeProcessing+0x80>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bfb8      	it	lt
 80023fe:	425b      	neglt	r3, r3
 8002400:	b2d9      	uxtb	r1, r3
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <timeProcessing+0x84>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <timeProcessing+0x58>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <timeProcessing+0x5a>
 8002410:	2302      	movs	r3, #2
 8002412:	461a      	mov	r2, r3
 8002414:	4807      	ldr	r0, [pc, #28]	; (8002434 <timeProcessing+0x7c>)
 8002416:	f003 fd3f 	bl	8005e98 <_ZN23ExtDeviceCommandReciver8sendTimeEhh>
		clearPendingInterrupt();
 800241a:	f7ff ff89 	bl	8002330 <clearPendingInterrupt>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800241e:	2006      	movs	r0, #6
 8002420:	f000 fdff 	bl	8003022 <HAL_NVIC_EnableIRQ>
	}
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000670 	.word	0x20000670
 8002430:	20000000 	.word	0x20000000
 8002434:	20000518 	.word	0x20000518
 8002438:	20000674 	.word	0x20000674
 800243c:	20000678 	.word	0x20000678

08002440 <volumeProcessing>:

void volumeProcessing() {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
	if(dspCommandReciver.isChanged()) {
 8002446:	4834      	ldr	r0, [pc, #208]	; (8002518 <volumeProcessing+0xd8>)
 8002448:	f003 fabc 	bl	80059c4 <_ZN17DspCommandReciver9isChangedEv>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d05e      	beq.n	8002510 <volumeProcessing+0xd0>
		if(HAL_GetTick() - lastVolumeChanged < 50) {
 8002452:	f000 fca5 	bl	8002da0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <volumeProcessing+0xdc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b31      	cmp	r3, #49	; 0x31
 8002460:	bf94      	ite	ls
 8002462:	2301      	movls	r3, #1
 8002464:	2300      	movhi	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d14e      	bne.n	800250a <volumeProcessing+0xca>
			return;
		}

		int8_t level1 = dspCommandReciver.getAbsoluteLevel(CH1);
 800246c:	2100      	movs	r1, #0
 800246e:	482a      	ldr	r0, [pc, #168]	; (8002518 <volumeProcessing+0xd8>)
 8002470:	f003 fa38 	bl	80058e4 <_ZN17DspCommandReciver16getAbsoluteLevelEh>
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
		int8_t level2 = dspCommandReciver.getAbsoluteLevel(CH2);
 8002478:	2101      	movs	r1, #1
 800247a:	4827      	ldr	r0, [pc, #156]	; (8002518 <volumeProcessing+0xd8>)
 800247c:	f003 fa32 	bl	80058e4 <_ZN17DspCommandReciver16getAbsoluteLevelEh>
 8002480:	4603      	mov	r3, r0
 8002482:	71bb      	strb	r3, [r7, #6]

		serial.print("[volume] changed (DB)");
 8002484:	4926      	ldr	r1, [pc, #152]	; (8002520 <volumeProcessing+0xe0>)
 8002486:	4827      	ldr	r0, [pc, #156]	; (8002524 <volumeProcessing+0xe4>)
 8002488:	f003 ffea 	bl	8006460 <_ZN6Serial5printEPc>
		serial.print(" CH1:");
 800248c:	4926      	ldr	r1, [pc, #152]	; (8002528 <volumeProcessing+0xe8>)
 800248e:	4825      	ldr	r0, [pc, #148]	; (8002524 <volumeProcessing+0xe4>)
 8002490:	f003 ffe6 	bl	8006460 <_ZN6Serial5printEPc>
		serial.print(level1);
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	4619      	mov	r1, r3
 800249a:	4822      	ldr	r0, [pc, #136]	; (8002524 <volumeProcessing+0xe4>)
 800249c:	f004 f850 	bl	8006540 <_ZN6Serial5printEi>
		serial.print(" CH2:");
 80024a0:	4922      	ldr	r1, [pc, #136]	; (800252c <volumeProcessing+0xec>)
 80024a2:	4820      	ldr	r0, [pc, #128]	; (8002524 <volumeProcessing+0xe4>)
 80024a4:	f003 ffdc 	bl	8006460 <_ZN6Serial5printEPc>
		serial.print(level2);
 80024a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024ac:	4619      	mov	r1, r3
 80024ae:	481d      	ldr	r0, [pc, #116]	; (8002524 <volumeProcessing+0xe4>)
 80024b0:	f004 f846 	bl	8006540 <_ZN6Serial5printEi>
		serial.print(" ");
 80024b4:	491e      	ldr	r1, [pc, #120]	; (8002530 <volumeProcessing+0xf0>)
 80024b6:	481b      	ldr	r0, [pc, #108]	; (8002524 <volumeProcessing+0xe4>)
 80024b8:	f003 ffd2 	bl	8006460 <_ZN6Serial5printEPc>

		bool connected = dsp.ping();
 80024bc:	481d      	ldr	r0, [pc, #116]	; (8002534 <volumeProcessing+0xf4>)
 80024be:	f7fe feab 	bl	8001218 <_ZN8SigmaDSP4pingEv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	717b      	strb	r3, [r7, #5]
		dspCommandReciver.resetChangedFlag();
 80024c6:	4814      	ldr	r0, [pc, #80]	; (8002518 <volumeProcessing+0xd8>)
 80024c8:	f003 fa88 	bl	80059dc <_ZN17DspCommandReciver16resetChangedFlagEv>

		volumeLastValue = level1;
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <volumeProcessing+0xf8>)
 80024d2:	6013      	str	r3, [r2, #0]
		sendVolumeLastStatus = connected;
 80024d4:	4a19      	ldr	r2, [pc, #100]	; (800253c <volumeProcessing+0xfc>)
 80024d6:	797b      	ldrb	r3, [r7, #5]
 80024d8:	7013      	strb	r3, [r2, #0]

		if(!connected) {
 80024da:	797b      	ldrb	r3, [r7, #5]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d113      	bne.n	800250e <volumeProcessing+0xce>
			return;
		}
		HAL_Delay(20);
 80024e6:	2014      	movs	r0, #20
 80024e8:	f000 fc64 	bl	8002db4 <HAL_Delay>
		dsp.twoChannelGain(MOD_DIGITALINPUTGAIN_ALG0_GAIN1940ALGNS8_ADDR, level1, level2);
 80024ec:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80024f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024f4:	2108      	movs	r1, #8
 80024f6:	480f      	ldr	r0, [pc, #60]	; (8002534 <volumeProcessing+0xf4>)
 80024f8:	f7fe fef4 	bl	80012e4 <_ZN8SigmaDSP14twoChannelGainEtii>
		lastVolumeChanged = HAL_GetTick();
 80024fc:	f000 fc50 	bl	8002da0 <HAL_GetTick>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <volumeProcessing+0xdc>)
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e002      	b.n	8002510 <volumeProcessing+0xd0>
			return;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <volumeProcessing+0xd0>
			return;
 800250e:	bf00      	nop
	}
}
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000041c 	.word	0x2000041c
 800251c:	2000074c 	.word	0x2000074c
 8002520:	0800ada4 	.word	0x0800ada4
 8002524:	20000400 	.word	0x20000400
 8002528:	0800adbc 	.word	0x0800adbc
 800252c:	0800adc4 	.word	0x0800adc4
 8002530:	0800adcc 	.word	0x0800adcc
 8002534:	20000404 	.word	0x20000404
 8002538:	20000674 	.word	0x20000674
 800253c:	20000678 	.word	0x20000678

08002540 <amplifierProcessing>:

void amplifierProcessing() {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	if(amplifierStart) {
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <amplifierProcessing+0x7c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01f      	beq.n	800258c <amplifierProcessing+0x4c>
		if(HAL_GetTick() - amplifierStartTime > amplifierStartTimePeriod && !HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
 800254c:	f000 fc28 	bl	8002da0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <amplifierProcessing+0x80>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <amplifierProcessing+0x84>)
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	4293      	cmp	r3, r2
 800255e:	d908      	bls.n	8002572 <amplifierProcessing+0x32>
 8002560:	2120      	movs	r1, #32
 8002562:	4819      	ldr	r0, [pc, #100]	; (80025c8 <amplifierProcessing+0x88>)
 8002564:	f000 ff56 	bl	8003414 <HAL_GPIO_ReadPin>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <amplifierProcessing+0x32>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <amplifierProcessing+0x34>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01e      	beq.n	80025b6 <amplifierProcessing+0x76>
			HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_SET);
 8002578:	2201      	movs	r2, #1
 800257a:	2120      	movs	r1, #32
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <amplifierProcessing+0x88>)
 800257e:	f000 ff60 	bl	8003442 <HAL_GPIO_WritePin>
			serial.println("[amplifier] power on");
 8002582:	4912      	ldr	r1, [pc, #72]	; (80025cc <amplifierProcessing+0x8c>)
 8002584:	4812      	ldr	r0, [pc, #72]	; (80025d0 <amplifierProcessing+0x90>)
 8002586:	f003 ff80 	bl	800648a <_ZN6Serial7printlnEPc>
		}
	} else if(HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
		HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
		serial.println("[amplifier] power off");
	}
}
 800258a:	e014      	b.n	80025b6 <amplifierProcessing+0x76>
	} else if(HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
 800258c:	2120      	movs	r1, #32
 800258e:	480e      	ldr	r0, [pc, #56]	; (80025c8 <amplifierProcessing+0x88>)
 8002590:	f000 ff40 	bl	8003414 <HAL_GPIO_ReadPin>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <amplifierProcessing+0x76>
		HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2120      	movs	r1, #32
 80025a8:	4807      	ldr	r0, [pc, #28]	; (80025c8 <amplifierProcessing+0x88>)
 80025aa:	f000 ff4a 	bl	8003442 <HAL_GPIO_WritePin>
		serial.println("[amplifier] power off");
 80025ae:	4909      	ldr	r1, [pc, #36]	; (80025d4 <amplifierProcessing+0x94>)
 80025b0:	4807      	ldr	r0, [pc, #28]	; (80025d0 <amplifierProcessing+0x90>)
 80025b2:	f003 ff6a 	bl	800648a <_ZN6Serial7printlnEPc>
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000679 	.word	0x20000679
 80025c0:	2000067c 	.word	0x2000067c
 80025c4:	20000004 	.word	0x20000004
 80025c8:	40010800 	.word	0x40010800
 80025cc:	0800add0 	.word	0x0800add0
 80025d0:	20000400 	.word	0x20000400
 80025d4:	0800ade8 	.word	0x0800ade8

080025d8 <monitorProcessing>:

void monitorProcessing() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	if(monitorOpen) {
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <monitorProcessing+0x70>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <monitorProcessing+0x3c>
		if(!HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
 80025e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e8:	4818      	ldr	r0, [pc, #96]	; (800264c <monitorProcessing+0x74>)
 80025ea:	f000 ff13 	bl	8003414 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d021      	beq.n	8002642 <monitorProcessing+0x6a>
			HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_SET);
 80025fe:	2201      	movs	r2, #1
 8002600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002604:	4811      	ldr	r0, [pc, #68]	; (800264c <monitorProcessing+0x74>)
 8002606:	f000 ff1c 	bl	8003442 <HAL_GPIO_WritePin>
			serial.println("[monitor] open");
 800260a:	4911      	ldr	r1, [pc, #68]	; (8002650 <monitorProcessing+0x78>)
 800260c:	4811      	ldr	r0, [pc, #68]	; (8002654 <monitorProcessing+0x7c>)
 800260e:	f003 ff3c 	bl	800648a <_ZN6Serial7printlnEPc>
		}
	} else if(HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
		HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_RESET);
		serial.println("[monitor] close");
	}
}
 8002612:	e016      	b.n	8002642 <monitorProcessing+0x6a>
	} else if(HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
 8002614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <monitorProcessing+0x74>)
 800261a:	f000 fefb 	bl	8003414 <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <monitorProcessing+0x6a>
		HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_RESET);
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002634:	4805      	ldr	r0, [pc, #20]	; (800264c <monitorProcessing+0x74>)
 8002636:	f000 ff04 	bl	8003442 <HAL_GPIO_WritePin>
		serial.println("[monitor] close");
 800263a:	4907      	ldr	r1, [pc, #28]	; (8002658 <monitorProcessing+0x80>)
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <monitorProcessing+0x7c>)
 800263e:	f003 ff24 	bl	800648a <_ZN6Serial7printlnEPc>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000680 	.word	0x20000680
 800264c:	40011000 	.word	0x40011000
 8002650:	0800ae00 	.word	0x0800ae00
 8002654:	20000400 	.word	0x20000400
 8002658:	0800ae10 	.word	0x0800ae10

0800265c <accOn>:

void accOn() {
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	//через 5 сек вкл усилитель
	amplifierStart = true;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <accOn+0x20>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
	amplifierStartTime = HAL_GetTick();
 8002666:	f000 fb9b 	bl	8002da0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <accOn+0x24>)
 800266e:	601a      	str	r2, [r3, #0]
	monitorOpen = true;
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <accOn+0x28>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000679 	.word	0x20000679
 8002680:	2000067c 	.word	0x2000067c
 8002684:	20000680 	.word	0x20000680

08002688 <accOff>:

void accOff() {
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	amplifierStart = false;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <accOff+0x1c>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
	extDeviceCommandReciver.resetPlayingFlag();
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <accOff+0x20>)
 8002694:	f003 fc2e 	bl	8005ef4 <_ZN23ExtDeviceCommandReciver16resetPlayingFlagEv>
	android.stop();
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <accOff+0x24>)
 800269a:	f7ff f863 	bl	8001764 <_ZN7Android4stopEv>
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000679 	.word	0x20000679
 80026a8:	20000518 	.word	0x20000518
 80026ac:	20000584 	.word	0x20000584

080026b0 <waitOff>:

void waitOff() {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	android.shutdown();
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <waitOff+0x10>)
 80026b6:	f7ff f8c5 	bl	8001844 <_ZN7Android8shutdownEv>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000584 	.word	0x20000584

080026c4 <off>:

void off() {
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	monitorOpen = false;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <off+0x14>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000680 	.word	0x20000680

080026dc <playTrack>:

void playTrack() {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	android.play();
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <playTrack+0x10>)
 80026e2:	f7ff f817 	bl	8001714 <_ZN7Android4playEv>
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000584 	.word	0x20000584

080026f0 <stopTrack>:

void stopTrack() {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	android.stop();
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <stopTrack+0x10>)
 80026f6:	f7ff f835 	bl	8001764 <_ZN7Android4stopEv>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000584 	.word	0x20000584

08002704 <nextTrack>:

void nextTrack() {
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	android.next();
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <nextTrack+0x10>)
 800270a:	f7ff f853 	bl	80017b4 <_ZN7Android4nextEv>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000584 	.word	0x20000584

08002718 <prevTrack>:

void prevTrack() {
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	android.prev();
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <prevTrack+0x10>)
 800271e:	f7ff f86d 	bl	80017fc <_ZN7Android4prevEv>
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000584 	.word	0x20000584

0800272c <clearTmp>:

void clearTmp() {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
	for(int i = 0; i < 200; i++) {
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2bc7      	cmp	r3, #199	; 0xc7
 800273a:	dc08      	bgt.n	800274e <clearTmp+0x22>
		tmp[i] = '\0';
 800273c:	4a06      	ldr	r2, [pc, #24]	; (8002758 <clearTmp+0x2c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 200; i++) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3301      	adds	r3, #1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	e7f3      	b.n	8002736 <clearTmp+0xa>
	}
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000684 	.word	0x20000684

0800275c <uartRequestInterrupt>:

void uartRequestInterrupt() {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	serialReciver.reciveInterruptHandler();
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <uartRequestInterrupt+0x18>)
 8002762:	f7ff fa68 	bl	8001c36 <_ZN13SerialReciver22reciveInterruptHandlerEv>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8002766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800276a:	4803      	ldr	r0, [pc, #12]	; (8002778 <uartRequestInterrupt+0x1c>)
 800276c:	f000 fe81 	bl	8003472 <HAL_GPIO_TogglePin>
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000598 	.word	0x20000598
 8002778:	40011000 	.word	0x40011000

0800277c <resetAdauCmd>:

void resetAdauCmd() {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	dsp.reset();
 8002780:	4808      	ldr	r0, [pc, #32]	; (80027a4 <resetAdauCmd+0x28>)
 8002782:	f7fe fd25 	bl	80011d0 <_ZN8SigmaDSP5resetEv>
	dspCommandReciver.setChangedFlag();
 8002786:	4808      	ldr	r0, [pc, #32]	; (80027a8 <resetAdauCmd+0x2c>)
 8002788:	f003 f936 	bl	80059f8 <_ZN17DspCommandReciver14setChangedFlagEv>
	HAL_Delay(100);
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	f000 fb11 	bl	8002db4 <HAL_Delay>
	lastVolumeChanged = HAL_GetTick();
 8002792:	f000 fb05 	bl	8002da0 <HAL_GetTick>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <resetAdauCmd+0x30>)
 800279c:	601a      	str	r2, [r3, #0]
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000404 	.word	0x20000404
 80027a8:	2000041c 	.word	0x2000041c
 80027ac:	2000074c 	.word	0x2000074c

080027b0 <cmdInfoToSerial>:

void cmdInfoToSerial() {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - lastInfoSend < 10000) {
 80027b4:	f000 faf4 	bl	8002da0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <cmdInfoToSerial+0x5c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11a      	bne.n	8002808 <cmdInfoToSerial+0x58>
		return;
	}
	serial.print("[Available commands] ");
 80027d2:	490f      	ldr	r1, [pc, #60]	; (8002810 <cmdInfoToSerial+0x60>)
 80027d4:	480f      	ldr	r0, [pc, #60]	; (8002814 <cmdInfoToSerial+0x64>)
 80027d6:	f003 fe43 	bl	8006460 <_ZN6Serial5printEPc>
	serial.print(adauResetCmd);
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <cmdInfoToSerial+0x68>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	480c      	ldr	r0, [pc, #48]	; (8002814 <cmdInfoToSerial+0x64>)
 80027e2:	f003 fe3d 	bl	8006460 <_ZN6Serial5printEPc>
	serial.print(", ");
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <cmdInfoToSerial+0x6c>)
 80027e8:	480a      	ldr	r0, [pc, #40]	; (8002814 <cmdInfoToSerial+0x64>)
 80027ea:	f003 fe39 	bl	8006460 <_ZN6Serial5printEPc>
	serial.println(stmResetCmd);
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <cmdInfoToSerial+0x70>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	4807      	ldr	r0, [pc, #28]	; (8002814 <cmdInfoToSerial+0x64>)
 80027f6:	f003 fe48 	bl	800648a <_ZN6Serial7printlnEPc>
	lastInfoSend = HAL_GetTick();
 80027fa:	f000 fad1 	bl	8002da0 <HAL_GetTick>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	4b02      	ldr	r3, [pc, #8]	; (800280c <cmdInfoToSerial+0x5c>)
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e000      	b.n	800280a <cmdInfoToSerial+0x5a>
		return;
 8002808:	bf00      	nop
}
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000750 	.word	0x20000750
 8002810:	0800ae20 	.word	0x0800ae20
 8002814:	20000400 	.word	0x20000400
 8002818:	20000008 	.word	0x20000008
 800281c:	0800ae38 	.word	0x0800ae38
 8002820:	2000000c 	.word	0x2000000c

08002824 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <_Z41__static_initialization_and_destruction_0ii>:
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af08      	add	r7, sp, #32
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d14d      	bne.n	80028dc <_Z41__static_initialization_and_destruction_0ii+0xac>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002846:	4293      	cmp	r3, r2
 8002848:	d148      	bne.n	80028dc <_Z41__static_initialization_and_destruction_0ii+0xac>
Serial serial(&huart2);
 800284a:	4926      	ldr	r1, [pc, #152]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800284c:	4826      	ldr	r0, [pc, #152]	; (80028e8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800284e:	f003 fdf9 	bl	8006444 <_ZN6SerialC1EP20__UART_HandleTypeDef>
SigmaDSP dsp(&hi2c2, DSP_I2C_ADDRESS, ADAU1701, GPIOA, ADAU_RESET_Pin, &huart2);
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	2301      	movs	r3, #1
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2300      	movs	r3, #0
 8002860:	2268      	movs	r2, #104	; 0x68
 8002862:	4923      	ldr	r1, [pc, #140]	; (80028f0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002864:	4823      	ldr	r0, [pc, #140]	; (80028f4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002866:	f7fe fc8f 	bl	8001188 <_ZN8SigmaDSPC1EP17I2C_HandleTypeDefhhP12GPIO_TypeDeftP20__UART_HandleTypeDef>
DspCommandReciver dspCommandReciver(GPIOA, DSP_CLOCK_Pin, GPIOA, DSP_DATA_Pin, &huart2);
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	491d      	ldr	r1, [pc, #116]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002878:	481f      	ldr	r0, [pc, #124]	; (80028f8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800287a:	f002 fd2b 	bl	80052d4 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef>
ExtDeviceCommandReciver extDeviceCommandReciver(GPIOB, MBUS_RX_Pin, GPIOB, MBUS_TX_Pin, &htim1, &huart2, playTrack, stopTrack, nextTrack, prevTrack);
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002880:	9306      	str	r3, [sp, #24]
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002884:	9305      	str	r3, [sp, #20]
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002888:	9304      	str	r3, [sp, #16]
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800288c:	9303      	str	r3, [sp, #12]
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002890:	9302      	str	r3, [sp, #8]
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	2302      	movs	r3, #2
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800289c:	2201      	movs	r2, #1
 800289e:	491c      	ldr	r1, [pc, #112]	; (8002910 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80028a0:	481c      	ldr	r0, [pc, #112]	; (8002914 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80028a2:	f003 f8dc 	bl	8005a5e <_ZN23ExtDeviceCommandReciverC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefP20__UART_HandleTypeDefPFvvES7_S7_S7_>
PowerManager powerManager(GPIOA, AC_Pin, GPIOA, POWER_RELAY_Pin, &huart2, accOn, accOff, waitOff, off);
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80028a8:	9305      	str	r3, [sp, #20]
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80028b0:	9303      	str	r3, [sp, #12]
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80028b4:	9302      	str	r3, [sp, #8]
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2310      	movs	r3, #16
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80028c0:	2202      	movs	r2, #2
 80028c2:	490a      	ldr	r1, [pc, #40]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80028c4:	4818      	ldr	r0, [pc, #96]	; (8002928 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80028c6:	f7fe ffe1 	bl	800188c <_ZN12PowerManagerC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvvES5_S5_S5_>
Android android(&huart2, &huart2);
 80028ca:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80028cc:	4905      	ldr	r1, [pc, #20]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80028ce:	4817      	ldr	r0, [pc, #92]	; (800292c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80028d0:	f7fe fe3d 	bl	800154e <_ZN7AndroidC1EP20__UART_HandleTypeDefS1_>
SerialReciver serialReciver(&huart2);
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80028d6:	4816      	ldr	r0, [pc, #88]	; (8002930 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80028d8:	f7ff f948 	bl	8001b6c <_ZN13SerialReciverC1EP20__UART_HandleTypeDef>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200003c0 	.word	0x200003c0
 80028e8:	20000400 	.word	0x20000400
 80028ec:	40010800 	.word	0x40010800
 80028f0:	2000029c 	.word	0x2000029c
 80028f4:	20000404 	.word	0x20000404
 80028f8:	2000041c 	.word	0x2000041c
 80028fc:	08002719 	.word	0x08002719
 8002900:	08002705 	.word	0x08002705
 8002904:	080026f1 	.word	0x080026f1
 8002908:	080026dd 	.word	0x080026dd
 800290c:	200002f0 	.word	0x200002f0
 8002910:	40010c00 	.word	0x40010c00
 8002914:	20000518 	.word	0x20000518
 8002918:	080026c5 	.word	0x080026c5
 800291c:	080026b1 	.word	0x080026b1
 8002920:	08002689 	.word	0x08002689
 8002924:	0800265d 	.word	0x0800265d
 8002928:	20000548 	.word	0x20000548
 800292c:	20000584 	.word	0x20000584
 8002930:	20000598 	.word	0x20000598

08002934 <_GLOBAL__sub_I_hi2c2>:
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
 8002938:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800293c:	2001      	movs	r0, #1
 800293e:	f7ff ff77 	bl	8002830 <_Z41__static_initialization_and_destruction_0ii>
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_MspInit+0x5c>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_MspInit+0x5c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6193      	str	r3, [r2, #24]
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_MspInit+0x5c>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_MspInit+0x5c>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_MspInit+0x5c>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_MspInit+0x5c>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_MspInit+0x60>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_MspInit+0x60>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010000 	.word	0x40010000

080029a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <HAL_I2C_MspInit+0x74>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d124      	bne.n	8002a12 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_I2C_MspInit+0x78>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_I2C_MspInit+0x78>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_I2C_MspInit+0x78>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ADAU_SCL_Pin|ADAU_SDA_Pin;
 80029e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e6:	2312      	movs	r3, #18
 80029e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4619      	mov	r1, r3
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <HAL_I2C_MspInit+0x7c>)
 80029f6:	f000 fbb3 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_I2C_MspInit+0x78>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_I2C_MspInit+0x78>)
 8002a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a04:	61d3      	str	r3, [r2, #28]
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_I2C_MspInit+0x78>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a12:	bf00      	nop
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40005800 	.word	0x40005800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010c00 	.word	0x40010c00

08002a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <HAL_TIM_Base_MspInit+0x58>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10c      	bne.n	8002a54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_TIM_Base_MspInit+0x5c>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_TIM_Base_MspInit+0x5c>)
 8002a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a44:	6193      	str	r3, [r2, #24]
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_TIM_Base_MspInit+0x5c>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a52:	e010      	b.n	8002a76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_TIM_Base_MspInit+0x60>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10b      	bne.n	8002a76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_TIM_Base_MspInit+0x5c>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_TIM_Base_MspInit+0x5c>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_TIM_Base_MspInit+0x5c>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40000800 	.word	0x40000800

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0318 	add.w	r3, r7, #24
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a37      	ldr	r2, [pc, #220]	; (8002b84 <HAL_UART_MspInit+0xf8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d132      	bne.n	8002b12 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	4a35      	ldr	r2, [pc, #212]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab6:	6193      	str	r3, [r2, #24]
 8002ab8:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac4:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	6193      	str	r3, [r2, #24]
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	f107 0318 	add.w	r3, r7, #24
 8002aee:	4619      	mov	r1, r3
 8002af0:	4826      	ldr	r0, [pc, #152]	; (8002b8c <HAL_UART_MspInit+0x100>)
 8002af2:	f000 fb35 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	f107 0318 	add.w	r3, r7, #24
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4820      	ldr	r0, [pc, #128]	; (8002b8c <HAL_UART_MspInit+0x100>)
 8002b0c:	f000 fb28 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b10:	e034      	b.n	8002b7c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_UART_MspInit+0x104>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d12f      	bne.n	8002b7c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b26:	61d3      	str	r3, [r2, #28]
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_UART_MspInit+0xfc>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480b      	ldr	r0, [pc, #44]	; (8002b8c <HAL_UART_MspInit+0x100>)
 8002b60:	f000 fafe 	bl	8003160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_RX_Pin;
 8002b64:	2308      	movs	r3, #8
 8002b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 0318 	add.w	r3, r7, #24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <HAL_UART_MspInit+0x100>)
 8002b78:	f000 faf2 	bl	8003160 <HAL_GPIO_Init>
}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40010800 	.word	0x40010800
 8002b90:	40004400 	.word	0x40004400

08002b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <HardFault_Handler+0x4>

08002ba6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002baa:	e7fe      	b.n	8002baa <MemManage_Handler+0x4>

08002bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <BusFault_Handler+0x4>

08002bb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <UsageFault_Handler+0x4>

08002bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be0:	f000 f8cc 	bl	8002d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	mBusRequestInterrupt();
 8002bec:	f7ff fbc6 	bl	800237c <mBusRequestInterrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f000 fc57 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataRequestInterrupt();
 8002bfe:	f7ff fbab 	bl	8002358 <dataRequestInterrupt>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c02:	2040      	movs	r0, #64	; 0x40
 8002c04:	f000 fc4e 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	HAL_UART_Transmit(&huart1, (uint8_t *)"USART1_IRQHandler\n", 18, 5);
//	uartRequestInterrupt();
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <USART1_IRQHandler+0x10>)
 8002c12:	f002 f853 	bl	8004cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000380 	.word	0x20000380

08002c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uartRequestInterrupt();
 8002c24:	f7ff fd9a 	bl	800275c <uartRequestInterrupt>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <_sbrk+0x5c>)
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <_sbrk+0x60>)
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <_sbrk+0x64>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <_sbrk+0x64>)
 8002c4a:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <_sbrk+0x68>)
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <_sbrk+0x64>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d207      	bcs.n	8002c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c5c:	f004 fa3a 	bl	80070d4 <__errno>
 8002c60:	4602      	mov	r2, r0
 8002c62:	230c      	movs	r3, #12
 8002c64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6a:	e009      	b.n	8002c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <_sbrk+0x64>)
 8002c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20005000 	.word	0x20005000
 8002c8c:	00000400 	.word	0x00000400
 8002c90:	20000754 	.word	0x20000754
 8002c94:	20000768 	.word	0x20000768

08002c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ca4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ca6:	e003      	b.n	8002cb0 <LoopCopyDataInit>

08002ca8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002caa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cae:	3104      	adds	r1, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002cb0:	480a      	ldr	r0, [pc, #40]	; (8002cdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cb8:	d3f6      	bcc.n	8002ca8 <CopyDataInit>
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cbc:	e002      	b.n	8002cc4 <LoopFillZerobss>

08002cbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cc0:	f842 3b04 	str.w	r3, [r2], #4

08002cc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002cc8:	d3f9      	bcc.n	8002cbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cca:	f7ff ffe5 	bl	8002c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cce:	f004 fa07 	bl	80070e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cd2:	f7ff f81d 	bl	8001d10 <main>
  bx lr
 8002cd6:	4770      	bx	lr
  ldr r3, =_sidata
 8002cd8:	0800b254 	.word	0x0800b254
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ce0:	2000027c 	.word	0x2000027c
  ldr r2, =_sbss
 8002ce4:	2000027c 	.word	0x2000027c
  ldr r3, = _ebss
 8002ce8:	20000768 	.word	0x20000768

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>
	...

08002cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_Init+0x28>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_Init+0x28>)
 8002cfa:	f043 0310 	orr.w	r3, r3, #16
 8002cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f000 f967 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f000 f808 	bl	8002d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0c:	f7ff fe1a 	bl	8002944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40022000 	.word	0x40022000

08002d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_InitTick+0x54>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_InitTick+0x58>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f98d 	bl	800305a <HAL_SYSTICK_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00e      	b.n	8002d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d80a      	bhi.n	8002d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d50:	2200      	movs	r2, #0
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f000 f947 	bl	8002fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <HAL_InitTick+0x5c>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e000      	b.n	8002d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000010 	.word	0x20000010
 8002d74:	20000018 	.word	0x20000018
 8002d78:	20000014 	.word	0x20000014

08002d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_IncTick+0x1c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_IncTick+0x20>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_IncTick+0x20>)
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	20000018 	.word	0x20000018
 8002d9c:	20000760 	.word	0x20000760

08002da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return uwTick;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_GetTick+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000760 	.word	0x20000760

08002db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_GetTick>
 8002dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d005      	beq.n	8002dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_Delay+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dda:	bf00      	nop
 8002ddc:	f7ff ffe0 	bl	8002da0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d8f7      	bhi.n	8002ddc <HAL_Delay+0x28>
  {
  }
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000018 	.word	0x20000018

08002df8 <__NVIC_SetPriorityGrouping>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e14:	4013      	ands	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	60d3      	str	r3, [r2, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_GetPriorityGrouping>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <__NVIC_GetPriorityGrouping+0x18>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f003 0307 	and.w	r3, r3, #7
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_EnableIRQ>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db0b      	blt.n	8002e86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f003 021f 	and.w	r2, r3, #31
 8002e74:	4906      	ldr	r1, [pc, #24]	; (8002e90 <__NVIC_EnableIRQ+0x34>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_DisableIRQ>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db10      	blt.n	8002ec8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4909      	ldr	r1, [pc, #36]	; (8002ed4 <__NVIC_DisableIRQ+0x40>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	3320      	adds	r3, #32
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ec4:	f3bf 8f6f 	isb	sy
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	f7ff ff90 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff0b 	bl	8002df8 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff20 	bl	8002e40 <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff90 	bl	8002f2c <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5f 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff13 	bl	8002e5c <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff21 	bl	8002e94 <__NVIC_DisableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff94 	bl	8002f90 <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003086:	2b02      	cmp	r3, #2
 8003088:	d005      	beq.n	8003096 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2204      	movs	r2, #4
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	e051      	b.n	800313a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 020e 	bic.w	r2, r2, #14
 80030a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a22      	ldr	r2, [pc, #136]	; (8003144 <HAL_DMA_Abort_IT+0xd0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d029      	beq.n	8003114 <HAL_DMA_Abort_IT+0xa0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_DMA_Abort_IT+0xd4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_Abort_IT+0x9c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_DMA_Abort_IT+0xd8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01a      	beq.n	800310a <HAL_DMA_Abort_IT+0x96>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <HAL_DMA_Abort_IT+0xdc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d012      	beq.n	8003104 <HAL_DMA_Abort_IT+0x90>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_DMA_Abort_IT+0xe0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00a      	beq.n	80030fe <HAL_DMA_Abort_IT+0x8a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <HAL_DMA_Abort_IT+0xe4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d102      	bne.n	80030f8 <HAL_DMA_Abort_IT+0x84>
 80030f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030f6:	e00e      	b.n	8003116 <HAL_DMA_Abort_IT+0xa2>
 80030f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030fc:	e00b      	b.n	8003116 <HAL_DMA_Abort_IT+0xa2>
 80030fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003102:	e008      	b.n	8003116 <HAL_DMA_Abort_IT+0xa2>
 8003104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003108:	e005      	b.n	8003116 <HAL_DMA_Abort_IT+0xa2>
 800310a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310e:	e002      	b.n	8003116 <HAL_DMA_Abort_IT+0xa2>
 8003110:	2310      	movs	r3, #16
 8003112:	e000      	b.n	8003116 <HAL_DMA_Abort_IT+0xa2>
 8003114:	2301      	movs	r3, #1
 8003116:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_DMA_Abort_IT+0xe8>)
 8003118:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
    } 
  }
  return status;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40020008 	.word	0x40020008
 8003148:	4002001c 	.word	0x4002001c
 800314c:	40020030 	.word	0x40020030
 8003150:	40020044 	.word	0x40020044
 8003154:	40020058 	.word	0x40020058
 8003158:	4002006c 	.word	0x4002006c
 800315c:	40020000 	.word	0x40020000

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b08b      	sub	sp, #44	; 0x2c
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800316e:	2300      	movs	r3, #0
 8003170:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003172:	e127      	b.n	80033c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003174:	2201      	movs	r2, #1
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	429a      	cmp	r2, r3
 800318e:	f040 8116 	bne.w	80033be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b12      	cmp	r3, #18
 8003198:	d034      	beq.n	8003204 <HAL_GPIO_Init+0xa4>
 800319a:	2b12      	cmp	r3, #18
 800319c:	d80d      	bhi.n	80031ba <HAL_GPIO_Init+0x5a>
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d02b      	beq.n	80031fa <HAL_GPIO_Init+0x9a>
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d804      	bhi.n	80031b0 <HAL_GPIO_Init+0x50>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d031      	beq.n	800320e <HAL_GPIO_Init+0xae>
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d01c      	beq.n	80031e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ae:	e048      	b.n	8003242 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d043      	beq.n	800323c <HAL_GPIO_Init+0xdc>
 80031b4:	2b11      	cmp	r3, #17
 80031b6:	d01b      	beq.n	80031f0 <HAL_GPIO_Init+0x90>
          break;
 80031b8:	e043      	b.n	8003242 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031ba:	4a89      	ldr	r2, [pc, #548]	; (80033e0 <HAL_GPIO_Init+0x280>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d026      	beq.n	800320e <HAL_GPIO_Init+0xae>
 80031c0:	4a87      	ldr	r2, [pc, #540]	; (80033e0 <HAL_GPIO_Init+0x280>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d806      	bhi.n	80031d4 <HAL_GPIO_Init+0x74>
 80031c6:	4a87      	ldr	r2, [pc, #540]	; (80033e4 <HAL_GPIO_Init+0x284>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d020      	beq.n	800320e <HAL_GPIO_Init+0xae>
 80031cc:	4a86      	ldr	r2, [pc, #536]	; (80033e8 <HAL_GPIO_Init+0x288>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_GPIO_Init+0xae>
          break;
 80031d2:	e036      	b.n	8003242 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031d4:	4a85      	ldr	r2, [pc, #532]	; (80033ec <HAL_GPIO_Init+0x28c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0xae>
 80031da:	4a85      	ldr	r2, [pc, #532]	; (80033f0 <HAL_GPIO_Init+0x290>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d016      	beq.n	800320e <HAL_GPIO_Init+0xae>
 80031e0:	4a84      	ldr	r2, [pc, #528]	; (80033f4 <HAL_GPIO_Init+0x294>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_GPIO_Init+0xae>
          break;
 80031e6:	e02c      	b.n	8003242 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	623b      	str	r3, [r7, #32]
          break;
 80031ee:	e028      	b.n	8003242 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	3304      	adds	r3, #4
 80031f6:	623b      	str	r3, [r7, #32]
          break;
 80031f8:	e023      	b.n	8003242 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	3308      	adds	r3, #8
 8003200:	623b      	str	r3, [r7, #32]
          break;
 8003202:	e01e      	b.n	8003242 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	330c      	adds	r3, #12
 800320a:	623b      	str	r3, [r7, #32]
          break;
 800320c:	e019      	b.n	8003242 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003216:	2304      	movs	r3, #4
 8003218:	623b      	str	r3, [r7, #32]
          break;
 800321a:	e012      	b.n	8003242 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003224:	2308      	movs	r3, #8
 8003226:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	611a      	str	r2, [r3, #16]
          break;
 800322e:	e008      	b.n	8003242 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003230:	2308      	movs	r3, #8
 8003232:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	615a      	str	r2, [r3, #20]
          break;
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2bff      	cmp	r3, #255	; 0xff
 8003246:	d801      	bhi.n	800324c <HAL_GPIO_Init+0xec>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	e001      	b.n	8003250 <HAL_GPIO_Init+0xf0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2bff      	cmp	r3, #255	; 0xff
 8003256:	d802      	bhi.n	800325e <HAL_GPIO_Init+0xfe>
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x104>
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	3b08      	subs	r3, #8
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	210f      	movs	r1, #15
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	401a      	ands	r2, r3
 8003276:	6a39      	ldr	r1, [r7, #32]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	431a      	orrs	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8096 	beq.w	80033be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003292:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_GPIO_Init+0x298>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <HAL_GPIO_Init+0x298>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6193      	str	r3, [r2, #24]
 800329e:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <HAL_GPIO_Init+0x298>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032aa:	4a54      	ldr	r2, [pc, #336]	; (80033fc <HAL_GPIO_Init+0x29c>)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4b      	ldr	r2, [pc, #300]	; (8003400 <HAL_GPIO_Init+0x2a0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0x19e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4a      	ldr	r2, [pc, #296]	; (8003404 <HAL_GPIO_Init+0x2a4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00d      	beq.n	80032fa <HAL_GPIO_Init+0x19a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a49      	ldr	r2, [pc, #292]	; (8003408 <HAL_GPIO_Init+0x2a8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <HAL_GPIO_Init+0x196>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a48      	ldr	r2, [pc, #288]	; (800340c <HAL_GPIO_Init+0x2ac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_GPIO_Init+0x192>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x1a0>
 80032f2:	2304      	movs	r3, #4
 80032f4:	e004      	b.n	8003300 <HAL_GPIO_Init+0x1a0>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e002      	b.n	8003300 <HAL_GPIO_Init+0x1a0>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_GPIO_Init+0x1a0>
 80032fe:	2300      	movs	r3, #0
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	f002 0203 	and.w	r2, r2, #3
 8003306:	0092      	lsls	r2, r2, #2
 8003308:	4093      	lsls	r3, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003310:	493a      	ldr	r1, [pc, #232]	; (80033fc <HAL_GPIO_Init+0x29c>)
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800332a:	4b39      	ldr	r3, [pc, #228]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4938      	ldr	r1, [pc, #224]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
 8003336:	e006      	b.n	8003346 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	43db      	mvns	r3, r3
 8003340:	4933      	ldr	r1, [pc, #204]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 8003342:	4013      	ands	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003352:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	492e      	ldr	r1, [pc, #184]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
 800335e:	e006      	b.n	800336e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	43db      	mvns	r3, r3
 8003368:	4929      	ldr	r1, [pc, #164]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 800336a:	4013      	ands	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	4924      	ldr	r1, [pc, #144]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
 8003386:	e006      	b.n	8003396 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	43db      	mvns	r3, r3
 8003390:	491f      	ldr	r1, [pc, #124]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 8003392:	4013      	ands	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d006      	beq.n	80033b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	491a      	ldr	r1, [pc, #104]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60cb      	str	r3, [r1, #12]
 80033ae:	e006      	b.n	80033be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	4915      	ldr	r1, [pc, #84]	; (8003410 <HAL_GPIO_Init+0x2b0>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	3301      	adds	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f47f aed0 	bne.w	8003174 <HAL_GPIO_Init+0x14>
  }
}
 80033d4:	bf00      	nop
 80033d6:	372c      	adds	r7, #44	; 0x2c
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	10210000 	.word	0x10210000
 80033e4:	10110000 	.word	0x10110000
 80033e8:	10120000 	.word	0x10120000
 80033ec:	10310000 	.word	0x10310000
 80033f0:	10320000 	.word	0x10320000
 80033f4:	10220000 	.word	0x10220000
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010000 	.word	0x40010000
 8003400:	40010800 	.word	0x40010800
 8003404:	40010c00 	.word	0x40010c00
 8003408:	40011000 	.word	0x40011000
 800340c:	40011400 	.word	0x40011400
 8003410:	40010400 	.word	0x40010400

08003414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e001      	b.n	8003436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	807b      	strh	r3, [r7, #2]
 800344e:	4613      	mov	r3, r2
 8003450:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003452:	787b      	ldrb	r3, [r7, #1]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003458:	887a      	ldrh	r2, [r7, #2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800345e:	e003      	b.n	8003468 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	041a      	lsls	r2, r3, #16
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	611a      	str	r2, [r3, #16]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4013      	ands	r3, r2
 800348a:	041a      	lsls	r2, r3, #16
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43d9      	mvns	r1, r3
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	400b      	ands	r3, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f806 	bl	80034d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40010400 	.word	0x40010400

080034d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e11f      	b.n	800373a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fa4a 	bl	80029a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800353a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800354c:	f000 ffe0 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a7b      	ldr	r2, [pc, #492]	; (8003744 <HAL_I2C_Init+0x25c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d807      	bhi.n	800356c <HAL_I2C_Init+0x84>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a7a      	ldr	r2, [pc, #488]	; (8003748 <HAL_I2C_Init+0x260>)
 8003560:	4293      	cmp	r3, r2
 8003562:	bf94      	ite	ls
 8003564:	2301      	movls	r3, #1
 8003566:	2300      	movhi	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e006      	b.n	800357a <HAL_I2C_Init+0x92>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a77      	ldr	r2, [pc, #476]	; (800374c <HAL_I2C_Init+0x264>)
 8003570:	4293      	cmp	r3, r2
 8003572:	bf94      	ite	ls
 8003574:	2301      	movls	r3, #1
 8003576:	2300      	movhi	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0db      	b.n	800373a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a72      	ldr	r2, [pc, #456]	; (8003750 <HAL_I2C_Init+0x268>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0c9b      	lsrs	r3, r3, #18
 800358c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a64      	ldr	r2, [pc, #400]	; (8003744 <HAL_I2C_Init+0x25c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d802      	bhi.n	80035bc <HAL_I2C_Init+0xd4>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3301      	adds	r3, #1
 80035ba:	e009      	b.n	80035d0 <HAL_I2C_Init+0xe8>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	4a63      	ldr	r2, [pc, #396]	; (8003754 <HAL_I2C_Init+0x26c>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	3301      	adds	r3, #1
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4956      	ldr	r1, [pc, #344]	; (8003744 <HAL_I2C_Init+0x25c>)
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d80d      	bhi.n	800360c <HAL_I2C_Init+0x124>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e59      	subs	r1, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fe:	3301      	adds	r3, #1
 8003600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003604:	2b04      	cmp	r3, #4
 8003606:	bf38      	it	cc
 8003608:	2304      	movcc	r3, #4
 800360a:	e04f      	b.n	80036ac <HAL_I2C_Init+0x1c4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d111      	bne.n	8003638 <HAL_I2C_Init+0x150>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	440b      	add	r3, r1
 8003622:	fbb0 f3f3 	udiv	r3, r0, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e012      	b.n	800365e <HAL_I2C_Init+0x176>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Init+0x17e>
 8003662:	2301      	movs	r3, #1
 8003664:	e022      	b.n	80036ac <HAL_I2C_Init+0x1c4>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10e      	bne.n	800368c <HAL_I2C_Init+0x1a4>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1e58      	subs	r0, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	440b      	add	r3, r1
 800367c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003680:	3301      	adds	r3, #1
 8003682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Init+0x1c4>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	0099      	lsls	r1, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	6809      	ldr	r1, [r1, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6911      	ldr	r1, [r2, #16]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	000186a0 	.word	0x000186a0
 8003748:	001e847f 	.word	0x001e847f
 800374c:	003d08ff 	.word	0x003d08ff
 8003750:	431bde83 	.word	0x431bde83
 8003754:	10624dd3 	.word	0x10624dd3

08003758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
 8003768:	4613      	mov	r3, r2
 800376a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff fb18 	bl	8002da0 <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	f040 80e0 	bne.w	8003940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2319      	movs	r3, #25
 8003786:	2201      	movs	r2, #1
 8003788:	4970      	ldr	r1, [pc, #448]	; (800394c <HAL_I2C_Master_Transmit+0x1f4>)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f964 	bl	8003a58 <I2C_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	e0d3      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_I2C_Master_Transmit+0x50>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e0cc      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d007      	beq.n	80037ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2221      	movs	r2, #33	; 0x21
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2210      	movs	r2, #16
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a50      	ldr	r2, [pc, #320]	; (8003950 <HAL_I2C_Master_Transmit+0x1f8>)
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f89c 	bl	8003954 <I2C_MasterRequestWrite>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e08d      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800383c:	e066      	b.n	800390c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6a39      	ldr	r1, [r7, #32]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f9de 	bl	8003c04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b04      	cmp	r3, #4
 8003854:	d107      	bne.n	8003866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d11b      	bne.n	80038e0 <HAL_I2C_Master_Transmit+0x188>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	6a39      	ldr	r1, [r7, #32]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f9ce 	bl	8003c86 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d107      	bne.n	8003908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01a      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d194      	bne.n	800383e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	00100002 	.word	0x00100002
 8003950:	ffff0000 	.word	0xffff0000

08003954 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	460b      	mov	r3, r1
 8003962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d006      	beq.n	800397e <I2C_MasterRequestWrite+0x2a>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d003      	beq.n	800397e <I2C_MasterRequestWrite+0x2a>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800397c:	d108      	bne.n	8003990 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e00b      	b.n	80039a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	2b12      	cmp	r3, #18
 8003996:	d107      	bne.n	80039a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f84f 	bl	8003a58 <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d103      	bne.n	80039d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e035      	b.n	8003a48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e4:	d108      	bne.n	80039f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	e01b      	b.n	8003a30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039f8:	897b      	ldrh	r3, [r7, #10]
 80039fa:	11db      	asrs	r3, r3, #7
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f063 030f 	orn	r3, r3, #15
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	490e      	ldr	r1, [pc, #56]	; (8003a50 <I2C_MasterRequestWrite+0xfc>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f875 	bl	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e010      	b.n	8003a48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4907      	ldr	r1, [pc, #28]	; (8003a54 <I2C_MasterRequestWrite+0x100>)
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f865 	bl	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	00010008 	.word	0x00010008
 8003a54:	00010002 	.word	0x00010002

08003a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a68:	e025      	b.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d021      	beq.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7ff f995 	bl	8002da0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d116      	bne.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e023      	b.n	8003afe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10d      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	e00c      	b.n	8003af6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d0b6      	beq.n	8003a6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b14:	e051      	b.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b24:	d123      	bne.n	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e046      	b.n	8003bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d021      	beq.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7ff f913 	bl	8002da0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e020      	b.n	8003bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10c      	bne.n	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	e00b      	b.n	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	43da      	mvns	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d18d      	bne.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c10:	e02d      	b.n	8003c6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f878 	bl	8003d08 <I2C_IsAcknowledgeFailed>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e02d      	b.n	8003c7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d021      	beq.n	8003c6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7ff f8b9 	bl	8002da0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e007      	b.n	8003c7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d1ca      	bne.n	8003c12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c92:	e02d      	b.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f837 	bl	8003d08 <I2C_IsAcknowledgeFailed>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e02d      	b.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d021      	beq.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	f7ff f878 	bl	8002da0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e007      	b.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d1ca      	bne.n	8003c94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d11b      	bne.n	8003d58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0204 	orr.w	r2, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e26c      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8087 	beq.w	8003e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d84:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d00c      	beq.n	8003daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d90:	4b8f      	ldr	r3, [pc, #572]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d112      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5e>
 8003d9c:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d10b      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003daa:	4b89      	ldr	r3, [pc, #548]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d06c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x12c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d168      	bne.n	8003e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e246      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x76>
 8003dcc:	4b80      	ldr	r3, [pc, #512]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7f      	ldr	r2, [pc, #508]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e02e      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x98>
 8003de2:	4b7b      	ldr	r3, [pc, #492]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7a      	ldr	r2, [pc, #488]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b78      	ldr	r3, [pc, #480]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a77      	ldr	r2, [pc, #476]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e01d      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0xbc>
 8003e06:	4b72      	ldr	r3, [pc, #456]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a71      	ldr	r2, [pc, #452]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6e      	ldr	r2, [pc, #440]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6a      	ldr	r2, [pc, #424]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe ffae 	bl	8002da0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fe ffaa 	bl	8002da0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1fa      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0xe4>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe ff9a 	bl	8002da0 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe ff96 	bl	8002da0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1e6      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x10c>
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e9e:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eaa:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x18c>
 8003eb6:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x176>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1ba      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4939      	ldr	r1, [pc, #228]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	e03a      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_RCC_OscConfig+0x270>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fe ff4f 	bl	8002da0 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fe ff4b 	bl	8002da0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e19b      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4927      	ldr	r1, [pc, #156]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe ff2e 	bl	8002da0 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fe ff2a 	bl	8002da0 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e17a      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d03a      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe ff0e 	bl	8002da0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe ff0a 	bl	8002da0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e15a      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f000 fada 	bl	8004560 <RCC_Delay>
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fe fef4 	bl	8002da0 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fba:	e00f      	b.n	8003fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fef0 	bl	8002da0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d908      	bls.n	8003fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e140      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	42420000 	.word	0x42420000
 8003fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b9e      	ldr	r3, [pc, #632]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e9      	bne.n	8003fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a6 	beq.w	8004142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b97      	ldr	r3, [pc, #604]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b94      	ldr	r3, [pc, #592]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a93      	ldr	r2, [pc, #588]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]
 8004012:	4b91      	ldr	r3, [pc, #580]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b8e      	ldr	r3, [pc, #568]	; (800425c <HAL_RCC_OscConfig+0x4f8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d118      	bne.n	8004060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402e:	4b8b      	ldr	r3, [pc, #556]	; (800425c <HAL_RCC_OscConfig+0x4f8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a8a      	ldr	r2, [pc, #552]	; (800425c <HAL_RCC_OscConfig+0x4f8>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe feb1 	bl	8002da0 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fe fead 	bl	8002da0 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	; 0x64
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0fd      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	4b81      	ldr	r3, [pc, #516]	; (800425c <HAL_RCC_OscConfig+0x4f8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x312>
 8004068:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4a7a      	ldr	r2, [pc, #488]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6213      	str	r3, [r2, #32]
 8004074:	e02d      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x334>
 800407e:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4a75      	ldr	r2, [pc, #468]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6213      	str	r3, [r2, #32]
 800408a:	4b73      	ldr	r3, [pc, #460]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a72      	ldr	r2, [pc, #456]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	e01c      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b05      	cmp	r3, #5
 800409e:	d10c      	bne.n	80040ba <HAL_RCC_OscConfig+0x356>
 80040a0:	4b6d      	ldr	r3, [pc, #436]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a6c      	ldr	r2, [pc, #432]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4a69      	ldr	r2, [pc, #420]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6213      	str	r3, [r2, #32]
 80040b8:	e00b      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a66      	ldr	r2, [pc, #408]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6213      	str	r3, [r2, #32]
 80040c6:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d015      	beq.n	8004106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040da:	f7fe fe61 	bl	8002da0 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fe fe5d 	bl	8002da0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e0ab      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	4b57      	ldr	r3, [pc, #348]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ee      	beq.n	80040e2 <HAL_RCC_OscConfig+0x37e>
 8004104:	e014      	b.n	8004130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fe fe4b 	bl	8002da0 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe fe47 	bl	8002da0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e095      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004124:	4b4c      	ldr	r3, [pc, #304]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ee      	bne.n	800410e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4b48      	ldr	r3, [pc, #288]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4a47      	ldr	r2, [pc, #284]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8081 	beq.w	800424e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414c:	4b42      	ldr	r3, [pc, #264]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b08      	cmp	r3, #8
 8004156:	d061      	beq.n	800421c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d146      	bne.n	80041ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <HAL_RCC_OscConfig+0x4fc>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fe fe1b 	bl	8002da0 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416e:	f7fe fe17 	bl	8002da0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e067      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d108      	bne.n	80041a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004196:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	492d      	ldr	r1, [pc, #180]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a19      	ldr	r1, [r3, #32]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	430b      	orrs	r3, r1
 80041ba:	4927      	ldr	r1, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_OscConfig+0x4fc>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fe fdeb 	bl	8002da0 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fe fde7 	bl	8002da0 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e037      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x46a>
 80041ec:	e02f      	b.n	800424e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <HAL_RCC_OscConfig+0x4fc>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fdd4 	bl	8002da0 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe fdd0 	bl	8002da0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e020      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x498>
 800421a:	e018      	b.n	800424e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e013      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_OscConfig+0x4f4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	429a      	cmp	r2, r3
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
 8004260:	42420060 	.word	0x42420060

08004264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0d0      	b.n	800441a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d910      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0207 	bic.w	r2, r3, #7
 800428e:	4965      	ldr	r1, [pc, #404]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d8:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d040      	beq.n	8004384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d115      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07f      	b.n	800441a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e073      	b.n	800441a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e06b      	b.n	800441a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f023 0203 	bic.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4936      	ldr	r1, [pc, #216]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004354:	f7fe fd24 	bl	8002da0 <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	e00a      	b.n	8004372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7fe fd20 	bl	8002da0 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e053      	b.n	800441a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 020c 	and.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d1eb      	bne.n	800435c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d210      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b24      	ldr	r3, [pc, #144]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 0207 	bic.w	r2, r3, #7
 800439a:	4922      	ldr	r1, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e032      	b.n	800441a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043f2:	f000 f821 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043f6:	4601      	mov	r1, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	fa21 f303 	lsr.w	r3, r1, r3
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1cc>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1d0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fc82 	bl	8002d1c <HAL_InitTick>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40022000 	.word	0x40022000
 8004428:	40021000 	.word	0x40021000
 800442c:	0800af50 	.word	0x0800af50
 8004430:	20000010 	.word	0x20000010
 8004434:	20000014 	.word	0x20000014

08004438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	b490      	push	{r4, r7}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800443e:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004440:	1d3c      	adds	r4, r7, #4
 8004442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004448:	4b28      	ldr	r3, [pc, #160]	; (80044ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004462:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b04      	cmp	r3, #4
 8004470:	d002      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x40>
 8004472:	2b08      	cmp	r3, #8
 8004474:	d003      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x46>
 8004476:	e02d      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800447a:	623b      	str	r3, [r7, #32]
      break;
 800447c:	e02d      	b.n	80044da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	0c9b      	lsrs	r3, r3, #18
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800448a:	4413      	add	r3, r2
 800448c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004490:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	0c5b      	lsrs	r3, r3, #17
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044aa:	4413      	add	r3, r2
 80044ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b6:	fb02 f203 	mul.w	r2, r2, r3
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	e004      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4a0c      	ldr	r2, [pc, #48]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	623b      	str	r3, [r7, #32]
      break;
 80044d2:	e002      	b.n	80044da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044d6:	623b      	str	r3, [r7, #32]
      break;
 80044d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044da:	6a3b      	ldr	r3, [r7, #32]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3728      	adds	r7, #40	; 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc90      	pop	{r4, r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	0800ae3c 	.word	0x0800ae3c
 80044ec:	0800ae4c 	.word	0x0800ae4c
 80044f0:	40021000 	.word	0x40021000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	003d0900 	.word	0x003d0900

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b02      	ldr	r3, [pc, #8]	; (800450c <HAL_RCC_GetHCLKFreq+0x10>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	20000010 	.word	0x20000010

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff2 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004518:	4601      	mov	r1, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	0a1b      	lsrs	r3, r3, #8
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4a03      	ldr	r2, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	fa21 f303 	lsr.w	r3, r1, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	0800af60 	.word	0x0800af60

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffde 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004540:	4601      	mov	r1, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0adb      	lsrs	r3, r3, #11
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4a03      	ldr	r2, [pc, #12]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5cd3      	ldrb	r3, [r2, r3]
 8004550:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	0800af60 	.word	0x0800af60

08004560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <RCC_Delay+0x34>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <RCC_Delay+0x38>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0a5b      	lsrs	r3, r3, #9
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800457c:	bf00      	nop
  }
  while (Delay --);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f9      	bne.n	800457c <RCC_Delay+0x1c>
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000010 	.word	0x20000010
 8004598:	10624dd3 	.word	0x10624dd3

0800459c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e041      	b.n	8004632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fe fa30 	bl	8002a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f000 f938 	bl	8004850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d001      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e03a      	b.n	80046ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x58>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d009      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x58>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x58>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_TIM_Base_Start_IT+0xa0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d010      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e007      	b.n	80046c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800

080046e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_ConfigClockSource+0x18>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0a6      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x166>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d067      	beq.n	8004800 <HAL_TIM_ConfigClockSource+0x120>
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d80b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x6c>
 8004734:	2b10      	cmp	r3, #16
 8004736:	d073      	beq.n	8004820 <HAL_TIM_ConfigClockSource+0x140>
 8004738:	2b10      	cmp	r3, #16
 800473a:	d802      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x62>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d06f      	beq.n	8004820 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004740:	e078      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004742:	2b20      	cmp	r3, #32
 8004744:	d06c      	beq.n	8004820 <HAL_TIM_ConfigClockSource+0x140>
 8004746:	2b30      	cmp	r3, #48	; 0x30
 8004748:	d06a      	beq.n	8004820 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800474a:	e073      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800474c:	2b70      	cmp	r3, #112	; 0x70
 800474e:	d00d      	beq.n	800476c <HAL_TIM_ConfigClockSource+0x8c>
 8004750:	2b70      	cmp	r3, #112	; 0x70
 8004752:	d804      	bhi.n	800475e <HAL_TIM_ConfigClockSource+0x7e>
 8004754:	2b50      	cmp	r3, #80	; 0x50
 8004756:	d033      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0xe0>
 8004758:	2b60      	cmp	r3, #96	; 0x60
 800475a:	d041      	beq.n	80047e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800475c:	e06a      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d066      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x152>
 8004764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004768:	d017      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800476a:	e063      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6899      	ldr	r1, [r3, #8]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f000 f941 	bl	8004a02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800478e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	609a      	str	r2, [r3, #8]
      break;
 8004798:	e04c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f000 f92a 	bl	8004a02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047bc:	609a      	str	r2, [r3, #8]
      break;
 80047be:	e039      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	461a      	mov	r2, r3
 80047ce:	f000 f8a1 	bl	8004914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2150      	movs	r1, #80	; 0x50
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f8f8 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80047de:	e029      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f000 f8bf 	bl	8004970 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2160      	movs	r1, #96	; 0x60
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 f8e8 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80047fe:	e019      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6859      	ldr	r1, [r3, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	461a      	mov	r2, r3
 800480e:	f000 f881 	bl	8004914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f8d8 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 800481e:	e009      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f000 f8cf 	bl	80049ce <TIM_ITRx_SetConfig>
        break;
 8004830:	e000      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a29      	ldr	r2, [pc, #164]	; (8004908 <TIM_Base_SetConfig+0xb8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_Base_SetConfig+0x30>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0x30>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a26      	ldr	r2, [pc, #152]	; (800490c <TIM_Base_SetConfig+0xbc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0x30>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a25      	ldr	r2, [pc, #148]	; (8004910 <TIM_Base_SetConfig+0xc0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <TIM_Base_SetConfig+0xb8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0x62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0x62>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <TIM_Base_SetConfig+0xbc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <TIM_Base_SetConfig+0xc0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <TIM_Base_SetConfig+0xb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800

08004914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 030a 	bic.w	r3, r3, #10
 8004950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f023 0210 	bic.w	r2, r3, #16
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800499a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	621a      	str	r2, [r3, #32]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f043 0307 	orr.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b087      	sub	sp, #28
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	021a      	lsls	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	609a      	str	r2, [r3, #8]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e046      	b.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d009      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a12      	ldr	r2, [pc, #72]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800

08004afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e03f      	b.n	8004b8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd ffb2 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fb39 	bl	80051b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b08a      	sub	sp, #40	; 0x28
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d17c      	bne.n	8004cb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_UART_Transmit+0x2c>
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e075      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Transmit+0x3e>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e06e      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2221      	movs	r2, #33	; 0x21
 8004be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bea:	f7fe f8d9 	bl	8002da0 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x82>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c28:	e02a      	b.n	8004c80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f95c 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e036      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e007      	b.n	8004c72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1cf      	bne.n	8004c2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2140      	movs	r1, #64	; 0x40
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f92c 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e000      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_UART_IRQHandler+0x52>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f9d5 	bl	80050b6 <UART_Receive_IT>
      return;
 8004d0c:	e0d1      	b.n	8004eb2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80b0 	beq.w	8004e76 <HAL_UART_IRQHandler+0x1ba>
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_UART_IRQHandler+0x70>
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80a5 	beq.w	8004e76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_UART_IRQHandler+0x90>
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	f043 0201 	orr.w	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_UART_IRQHandler+0xb0>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	f043 0202 	orr.w	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_UART_IRQHandler+0xd0>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	f043 0204 	orr.w	r2, r3, #4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <HAL_UART_IRQHandler+0xfa>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_UART_IRQHandler+0xee>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d078      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x11c>
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f96f 	bl	80050b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <HAL_UART_IRQHandler+0x144>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d031      	beq.n	8004e64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f8c0 	bl	8004f86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d023      	beq.n	8004e5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <HAL_UART_IRQHandler+0x1fc>)
 8004e32:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe f91b 	bl	8003074 <HAL_DMA_Abort_IT>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d016      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e52:	e00e      	b.n	8004e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f843 	bl	8004ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5a:	e00a      	b.n	8004e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f83f 	bl	8004ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e62:	e006      	b.n	8004e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f83b 	bl	8004ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004e70:	e01e      	b.n	8004eb0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e72:	bf00      	nop
    return;
 8004e74:	e01c      	b.n	8004eb0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_UART_IRQHandler+0x1d6>
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8ac 	bl	8004fe8 <UART_Transmit_IT>
    return;
 8004e90:	e00f      	b.n	8004eb2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x1f6>
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f8ed 	bl	8005086 <UART_EndTransmit_IT>
    return;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004eb0:	bf00      	nop
  }
}
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	08004fc1 	.word	0x08004fc1

08004ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f02:	e02c      	b.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d028      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f12:	f7fd ff45 	bl	8002da0 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d21d      	bcs.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e00f      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4013      	ands	r3, r2
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d0c3      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff ff80 	bl	8004ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b21      	cmp	r3, #33	; 0x21
 8004ffa:	d13e      	bne.n	800507a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005004:	d114      	bne.n	8005030 <UART_Transmit_IT+0x48>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d110      	bne.n	8005030 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	1c9a      	adds	r2, r3, #2
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]
 800502e:	e008      	b.n	8005042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	1c59      	adds	r1, r3, #1
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6211      	str	r1, [r2, #32]
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4619      	mov	r1, r3
 8005050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff08 	bl	8004ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b22      	cmp	r3, #34	; 0x22
 80050c8:	d170      	bne.n	80051ac <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d117      	bne.n	8005104 <UART_Receive_IT+0x4e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d113      	bne.n	8005104 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	1c9a      	adds	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	629a      	str	r2, [r3, #40]	; 0x28
 8005102:	e026      	b.n	8005152 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d007      	beq.n	8005128 <UART_Receive_IT+0x72>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <UART_Receive_IT+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e008      	b.n	8005148 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29b      	uxth	r3, r3
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4619      	mov	r1, r3
 8005160:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005162:	2b00      	cmp	r3, #0
 8005164:	d120      	bne.n	80051a8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0220 	bic.w	r2, r2, #32
 8005174:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005184:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fe95 	bl	8004ece <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e002      	b.n	80051ae <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e000      	b.n	80051ae <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80051ac:	2302      	movs	r3, #2
  }
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051f2:	f023 030c 	bic.w	r3, r3, #12
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <UART_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7ff f98a 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	e002      	b.n	800522e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005228:	f7ff f972 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 800522c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009a      	lsls	r2, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <UART_SetConfig+0x118>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	0119      	lsls	r1, r3, #4
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009a      	lsls	r2, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	fbb2 f2f3 	udiv	r2, r2, r3
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <UART_SetConfig+0x118>)
 8005266:	fba3 0302 	umull	r0, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	2064      	movs	r0, #100	; 0x64
 800526e:	fb00 f303 	mul.w	r3, r0, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	3332      	adds	r3, #50	; 0x32
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <UART_SetConfig+0x118>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005284:	4419      	add	r1, r3
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009a      	lsls	r2, r3, #2
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	fbb2 f2f3 	udiv	r2, r2, r3
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <UART_SetConfig+0x118>)
 800529e:	fba3 0302 	umull	r0, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2064      	movs	r0, #100	; 0x64
 80052a6:	fb00 f303 	mul.w	r3, r0, r3
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	3332      	adds	r3, #50	; 0x32
 80052b0:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <UART_SetConfig+0x118>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	440a      	add	r2, r1
 80052c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40013800 	.word	0x40013800
 80052d0:	51eb851f 	.word	0x51eb851f

080052d4 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef>:
#include "DspCommandReciver.h"
#include <string.h>
#include "LevelMapping.h"

DspCommandReciver::DspCommandReciver(GPIO_TypeDef* clockGPIO, uint16_t clockPin, GPIO_TypeDef* dataGPIO, uint16_t dataPin, UART_HandleTypeDef *uart)
 80052d4:	b5b0      	push	{r4, r5, r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	80fb      	strh	r3, [r7, #6]
:_clockGPIO(clockGPIO), _clockPin(clockPin), _dataGPIO(dataGPIO), _dataPin(dataPin), _uart(uart) {
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	809a      	strh	r2, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8c3a      	ldrh	r2, [r7, #32]
 80052fa:	819a      	strh	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	675a      	str	r2, [r3, #116]	; 0x74
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a27      	ldr	r2, [pc, #156]	; (80053b4 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xe0>)
 8005316:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800531a:	4615      	mov	r5, r2
 800531c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800531e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005320:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xe4>)
 800532c:	3398      	adds	r3, #152	; 0x98
 800532e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005330:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a21      	ldr	r2, [pc, #132]	; (80053bc <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xe8>)
 8005338:	33a4      	adds	r3, #164	; 0xa4
 800533a:	4611      	mov	r1, r2
 800533c:	224b      	movs	r2, #75	; 0x4b
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fef2 	bl	8007128 <memcpy>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a1e      	ldr	r2, [pc, #120]	; (80053c0 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xec>)
 8005348:	f103 04ef 	add.w	r4, r3, #239	; 0xef
 800534c:	4613      	mov	r3, r2
 800534e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005350:	6020      	str	r0, [r4, #0]
 8005352:	6061      	str	r1, [r4, #4]
 8005354:	60a2      	str	r2, [r4, #8]
	clearData(buff);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	335a      	adds	r3, #90	; 0x5a
 800535a:	4619      	mov	r1, r3
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f9c9 	bl	80056f4 <_ZN17DspCommandReciver9clearDataEPa>

	volumeRead = false;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	faderCh1Read = false;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	faderCh2Read = false;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	equalizerRead = false;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	volumeChng = false;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	faderCh1Chng = false;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	faderCh2Chng = false;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	equalizerChng = false;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	changed = false;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

	//	clearData(volume);
	//	clearData(faderCh1);
	//	clearData(faderCh2);
	//	clearData(equalizer);
}
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bdb0      	pop	{r4, r5, r7, pc}
 80053b4:	0800ae50 	.word	0x0800ae50
 80053b8:	0800ae70 	.word	0x0800ae70
 80053bc:	0800ae7c 	.word	0x0800ae7c
 80053c0:	0800aec8 	.word	0x0800aec8

080053c4 <_ZN17DspCommandReciver11readPackageEi>:
		}
	}
}

//Вход с clock == 1
bool DspCommandReciver::readPackage(int iterator) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
	//Если итератор больше номера последнего бита, то пакет битый. Выходим
	if(iterator > M_SIZE - 1) {
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	dd01      	ble.n	80053d8 <_ZN17DspCommandReciver11readPackageEi+0x14>
		return false;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e050      	b.n	800547a <_ZN17DspCommandReciver11readPackageEi+0xb6>
	}

	//считываем значение data в текущую позицию буфера
	buff[iterator] = HAL_GPIO_ReadPin(_dataGPIO, _dataPin);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	899b      	ldrh	r3, [r3, #12]
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7fe f816 	bl	8003414 <HAL_GPIO_ReadPin>
 80053e8:	4603      	mov	r3, r0
 80053ea:	b259      	sxtb	r1, r3
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	4413      	add	r3, r2
 80053f2:	335a      	adds	r3, #90	; 0x5a
 80053f4:	460a      	mov	r2, r1
 80053f6:	701a      	strb	r2, [r3, #0]

	//ждем пока опустится clock
	while(HAL_GPIO_ReadPin(_clockGPIO, _clockPin)){}
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	889b      	ldrh	r3, [r3, #4]
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f7fe f806 	bl	8003414 <HAL_GPIO_ReadPin>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d000      	beq.n	800541a <_ZN17DspCommandReciver11readPackageEi+0x56>
 8005418:	e7ee      	b.n	80053f8 <_ZN17DspCommandReciver11readPackageEi+0x34>

	//когда clock опустился и data != 1, значит не конец пакета
	//если clock опустился и data == 1, значит конец пакета
	if(!HAL_GPIO_ReadPin(_dataGPIO, _dataPin)) {
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	899b      	ldrh	r3, [r3, #12]
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f7fd fff5 	bl	8003414 <HAL_GPIO_ReadPin>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d019      	beq.n	800546e <_ZN17DspCommandReciver11readPackageEi+0xaa>
		//ждем пока clock снова поднимется
		while(!HAL_GPIO_ReadPin(_clockGPIO, _clockPin));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	889b      	ldrh	r3, [r3, #4]
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7fd ffe5 	bl	8003414 <HAL_GPIO_ReadPin>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d000      	beq.n	800545c <_ZN17DspCommandReciver11readPackageEi+0x98>
 800545a:	e7ee      	b.n	800543a <_ZN17DspCommandReciver11readPackageEi+0x76>
		//когда clock поднялся - нужно читать след бит, уходим в след уровень рекурсии для чтения
		return readPackage(++iterator);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff ffad 	bl	80053c4 <_ZN17DspCommandReciver11readPackageEi>
 800546a:	4603      	mov	r3, r0
 800546c:	e005      	b.n	800547a <_ZN17DspCommandReciver11readPackageEi+0xb6>
	} else {
		//Если итератор равен 16 (номер последнего бита в пакете 0...16) то все впорядке иначе пакет битый

		//		char tmp[20];
		//		HAL_UART_Transmit(_uart, (uint8_t *)itoa(iterator,tmp,10), strlen(tmp), 10);
		if(iterator == M_SIZE - 1) {
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b10      	cmp	r3, #16
 8005472:	d101      	bne.n	8005478 <_ZN17DspCommandReciver11readPackageEi+0xb4>
			//			HAL_UART_Transmit(_uart, (uint8_t *)"PACK\n", 5, 10);
			return true;
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <_ZN17DspCommandReciver11readPackageEi+0xb6>
		} else {
			//			HAL_UART_Transmit(_uart, (uint8_t *)"NO PACK\n", 8, 10);
			return false;
 8005478:	2300      	movs	r3, #0

		//		return iterator == M_SIZE - 1 ? true : false;
		//		HAL_UART_Transmit(_uart, (uint8_t *)"PACK\n", 5, 10);
		//конец пакета
	}
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <_ZN17DspCommandReciver11readPackageEv>:

void DspCommandReciver::readPackage() {
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	//перед чтением пакета проверяем, что clock поднят
	if(!HAL_GPIO_ReadPin(_clockGPIO, _clockPin)) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	889b      	ldrh	r3, [r3, #4]
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7fd ffbc 	bl	8003414 <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bf0c      	ite	eq
 80054a2:	2301      	moveq	r3, #1
 80054a4:	2300      	movne	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <_ZN17DspCommandReciver11readPackageEv+0x38>
		HAL_UART_Transmit(_uart, (uint8_t *)"[m-dsp] R-ERROR: clock not up\n", 30, 2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80054b0:	2302      	movs	r3, #2
 80054b2:	221e      	movs	r2, #30
 80054b4:	490b      	ldr	r1, [pc, #44]	; (80054e4 <_ZN17DspCommandReciver11readPackageEv+0x60>)
 80054b6:	f7ff fb6e 	bl	8004b96 <HAL_UART_Transmit>
		return;
 80054ba:	e00f      	b.n	80054dc <_ZN17DspCommandReciver11readPackageEv+0x58>
	}

	if(readPackage(0)) {
 80054bc:	2100      	movs	r1, #0
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ff80 	bl	80053c4 <_ZN17DspCommandReciver11readPackageEi>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <_ZN17DspCommandReciver11readPackageEv+0x4c>
		typeDetectAndSave();
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f80c 	bl	80054e8 <_ZN17DspCommandReciver17typeDetectAndSaveEv>
	}

	clearData(buff);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	335a      	adds	r3, #90	; 0x5a
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f90c 	bl	80056f4 <_ZN17DspCommandReciver9clearDataEPa>
}
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	0800aed4 	.word	0x0800aed4

080054e8 <_ZN17DspCommandReciver17typeDetectAndSaveEv>:


void DspCommandReciver::typeDetectAndSave() {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	if(buff[15] == 0 && buff[16] == 0) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d114      	bne.n	8005524 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x3c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10f      	bne.n	8005524 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x3c>
		volumeChng = tranferDataFromBuffer(volume, false);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	330e      	adds	r3, #14
 8005508:	2200      	movs	r2, #0
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8b4 	bl	800567a <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8005512:	4603      	mov	r3, r0
 8005514:	461a      	mov	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		volumeRead = true;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	if(buff[15] == 1 && buff[16] == 0) {
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800552a:	2b01      	cmp	r3, #1
 800552c:	d12a      	bne.n	8005584 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8005534:	2b00      	cmp	r3, #0
 8005536:	d125      	bne.n	8005584 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
		if(buff[0] == 0) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f993 305a 	ldrsb.w	r3, [r3, #90]	; 0x5a
 800553e:	2b00      	cmp	r3, #0
 8005540:	d110      	bne.n	8005564 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x7c>
			faderCh1Chng = tranferDataFromBuffer(faderCh1, false);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	331f      	adds	r3, #31
 8005546:	2200      	movs	r2, #0
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f895 	bl	800567a <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			faderCh1Read = true;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005562:	e00f      	b.n	8005584 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
		} else {
			faderCh2Chng = tranferDataFromBuffer(faderCh2, false);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3330      	adds	r3, #48	; 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f884 	bl	800567a <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8005572:	4603      	mov	r3, r0
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			faderCh2Read = true;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}

	}
	if(buff[15] == 0 && buff[16] == 1) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800558a:	2b00      	cmp	r3, #0
 800558c:	d171      	bne.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8005594:	2b01      	cmp	r3, #1
 8005596:	d16c      	bne.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
		equalizerChng = tranferDataFromBuffer(equalizer, true);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3341      	adds	r3, #65	; 0x41
 800559c:	2201      	movs	r2, #1
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f86a 	bl	800567a <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		equalizerRead = true;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

		if((volumeChng || faderCh1Chng || faderCh2Chng || (equalizerChng && eqChangedDetect))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d113      	bne.n	80055ea <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10e      	bne.n	80055ea <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d048      	beq.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d043      	beq.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
				&& (volumeRead && faderCh1Read && faderCh2Read && equalizerRead)) {
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d03e      	beq.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d039      	beq.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005604:	2b00      	cmp	r3, #0
 8005606:	d034      	beq.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02f      	beq.n	8005672 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
			volumeChng = faderCh1Chng = faderCh2Chng = equalizerChng = false;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			volumeRead = faderCh1Read = faderCh2Read = equalizerRead = false;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			changed = true;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			//			printToSerial(_uart);
		}
	}
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <_ZN17DspCommandReciver21tranferDataFromBufferEPab>:

bool DspCommandReciver::tranferDataFromBuffer(int8_t *target, bool eq) {
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	4613      	mov	r3, r2
 8005686:	71fb      	strb	r3, [r7, #7]
	bool targetChanged = false;
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < M_SIZE; i++) {
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b10      	cmp	r3, #16
 8005694:	dc28      	bgt.n	80056e8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x6e>
		if(target[i] != buff[i]) {
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4413      	add	r3, r2
 800569c:	f993 2000 	ldrsb.w	r2, [r3]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	440b      	add	r3, r1
 80056a6:	335a      	adds	r3, #90	; 0x5a
 80056a8:	f993 3000 	ldrsb.w	r3, [r3]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d017      	beq.n	80056e0 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
			target[i] = buff[i];
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	440a      	add	r2, r1
 80056bc:	325a      	adds	r2, #90	; 0x5a
 80056be:	f992 2000 	ldrsb.w	r2, [r2]
 80056c2:	701a      	strb	r2, [r3, #0]
			if(eq || (i != 0 && i != 1 && i != 14)) {
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d108      	bne.n	80056dc <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x62>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d004      	beq.n	80056e0 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b0e      	cmp	r3, #14
 80056da:	d001      	beq.n	80056e0 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
				targetChanged = true;
 80056dc:	2301      	movs	r3, #1
 80056de:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < M_SIZE; i++) {
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	3301      	adds	r3, #1
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e7d3      	b.n	8005690 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x16>
			}
		}
	}
	//	if(targetChanged) HAL_UART_Transmit(_uart, (uint8_t *)"Changed\n", 8, 10);
	return targetChanged;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <_ZN17DspCommandReciver9clearDataEPa>:
	for(uint8_t i = 0; i < sizeof(array); i++) {
		array[i] = '\0';
	}
}

void DspCommandReciver::clearData(int8_t *array) {
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
	for(int8_t i = 0; i < M_SIZE; i++) {
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
 8005702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005706:	2b10      	cmp	r3, #16
 8005708:	dc0c      	bgt.n	8005724 <_ZN17DspCommandReciver9clearDataEPa+0x30>
		array[i] = -2;
 800570a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	4413      	add	r3, r2
 8005712:	22fe      	movs	r2, #254	; 0xfe
 8005714:	701a      	strb	r2, [r3, #0]
	for(int8_t i = 0; i < M_SIZE; i++) {
 8005716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	3301      	adds	r3, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	e7ee      	b.n	8005702 <_ZN17DspCommandReciver9clearDataEPa+0xe>
	}
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
	...

08005730 <_ZN17DspCommandReciver8getLevelEhh>:

//функция получения уровня громкости. параметры тип пакета, канал 1 или 2, массив данных для разбора
int8_t DspCommandReciver::getLevel(uint8_t type, uint8_t channel) {
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
 800573c:	4613      	mov	r3, r2
 800573e:	70bb      	strb	r3, [r7, #2]
	//в этом массиве хранятся значения для анализа
	int8_t valuesArrayForCheck[] = {-1, -1, -1, -1};
 8005740:	4b67      	ldr	r3, [pc, #412]	; (80058e0 <_ZN17DspCommandReciver8getLevelEhh+0x1b0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]
	uint8_t width;

	//складываем значения для анализа в зависимости от типа пакета
	//из каждого пакета бере данные в нужных позициях
	//кол-во проверяемых элементов до 4 в завистимости от типа пакета
	switch(type) {
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	2b03      	cmp	r3, #3
 800574a:	f200 8093 	bhi.w	8005874 <_ZN17DspCommandReciver8getLevelEhh+0x144>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <_ZN17DspCommandReciver8getLevelEhh+0x24>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005765 	.word	0x08005765
 8005758:	080057ad 	.word	0x080057ad
 800575c:	080057e5 	.word	0x080057e5
 8005760:	0800583d 	.word	0x0800583d
	//громкость атт1 канал 1
	case VOLUME_ATTV1:
		if(channel == CH1) {
 8005764:	78bb      	ldrb	r3, [r7, #2]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10c      	bne.n	8005784 <_ZN17DspCommandReciver8getLevelEhh+0x54>
			valuesArrayForCheck[0] = volume[2];
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8005770:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[3];
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8005778:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = volume[4];
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8005780:	72bb      	strb	r3, [r7, #10]
 8005782:	e00b      	b.n	800579c <_ZN17DspCommandReciver8getLevelEhh+0x6c>
		} else {
			//громкость атт1 канал 2
			valuesArrayForCheck[0] = volume[7];
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800578a:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[8];
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8005792:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = volume[9];
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800579a:	72bb      	strb	r3, [r7, #10]
		}

		//Так же установим значения размерности целевого массива
		height = VOLUME_ATTV1_H;
 800579c:	2308      	movs	r3, #8
 800579e:	74fb      	strb	r3, [r7, #19]
		width = VOLUME_ATTV1_W;
 80057a0:	2304      	movs	r3, #4
 80057a2:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)volumeATTV1;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3378      	adds	r3, #120	; 0x78
 80057a8:	617b      	str	r3, [r7, #20]
		break;
 80057aa:	e064      	b.n	8005876 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case VOLUME_ATTV2:
		if(channel == CH1) {
 80057ac:	78bb      	ldrb	r3, [r7, #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d108      	bne.n	80057c4 <_ZN17DspCommandReciver8getLevelEhh+0x94>
			valuesArrayForCheck[0] = volume[5];
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f993 3013 	ldrsb.w	r3, [r3, #19]
 80057b8:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[6];
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80057c0:	727b      	strb	r3, [r7, #9]
 80057c2:	e007      	b.n	80057d4 <_ZN17DspCommandReciver8getLevelEhh+0xa4>
		} else {
			valuesArrayForCheck[0] = volume[10];
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80057ca:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[11];
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80057d2:	727b      	strb	r3, [r7, #9]
		}

		height = VOLUME_ATTV2_H;
 80057d4:	2304      	movs	r3, #4
 80057d6:	74fb      	strb	r3, [r7, #19]
		width = VOLUME_ATTV2_W;
 80057d8:	2303      	movs	r3, #3
 80057da:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)volumeATTV2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3398      	adds	r3, #152	; 0x98
 80057e0:	617b      	str	r3, [r7, #20]
		break;
 80057e2:	e048      	b.n	8005876 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case FADER_FRONT_ATTV1:
		if(channel == CH1) {
 80057e4:	78bb      	ldrb	r3, [r7, #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d110      	bne.n	800580c <_ZN17DspCommandReciver8getLevelEhh+0xdc>
			valuesArrayForCheck[0] = faderCh1[2];
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80057f0:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh1[3];
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80057f8:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = faderCh1[4];
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f993 3023 	ldrsb.w	r3, [r3, #35]	; 0x23
 8005800:	72bb      	strb	r3, [r7, #10]
			valuesArrayForCheck[3] = faderCh1[5];
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8005808:	72fb      	strb	r3, [r7, #11]
 800580a:	e00f      	b.n	800582c <_ZN17DspCommandReciver8getLevelEhh+0xfc>
		} else {
			valuesArrayForCheck[0] = faderCh2[2];
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8005812:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh2[3];
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f993 3033 	ldrsb.w	r3, [r3, #51]	; 0x33
 800581a:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = faderCh2[4];
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8005822:	72bb      	strb	r3, [r7, #10]
			valuesArrayForCheck[3] = faderCh2[5];
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 800582a:	72fb      	strb	r3, [r7, #11]
		}

		height = FADER_ATTV1_H;
 800582c:	230f      	movs	r3, #15
 800582e:	74fb      	strb	r3, [r7, #19]
		width = FADER_ATTV1_W;
 8005830:	2305      	movs	r3, #5
 8005832:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)faderATTV1;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	33a4      	adds	r3, #164	; 0xa4
 8005838:	617b      	str	r3, [r7, #20]
		break;
 800583a:	e01c      	b.n	8005876 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case FADER_FRONT_ATTV2:
		if(channel == CH1) {
 800583c:	78bb      	ldrb	r3, [r7, #2]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d108      	bne.n	8005854 <_ZN17DspCommandReciver8getLevelEhh+0x124>
			valuesArrayForCheck[0] = faderCh1[6];
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8005848:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh1[7];
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8005850:	727b      	strb	r3, [r7, #9]
 8005852:	e007      	b.n	8005864 <_ZN17DspCommandReciver8getLevelEhh+0x134>
		} else {
			valuesArrayForCheck[0] = faderCh2[6];
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 800585a:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh2[7];
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f993 3037 	ldrsb.w	r3, [r3, #55]	; 0x37
 8005862:	727b      	strb	r3, [r7, #9]
		}

		height = FADER_ATTV2_H;
 8005864:	2304      	movs	r3, #4
 8005866:	74fb      	strb	r3, [r7, #19]
		width = FADER_ATTV2_W;
 8005868:	2303      	movs	r3, #3
 800586a:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)faderATTV2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	33ef      	adds	r3, #239	; 0xef
 8005870:	617b      	str	r3, [r7, #20]
		break;
 8005872:	e000      	b.n	8005876 <_ZN17DspCommandReciver8getLevelEhh+0x146>
	default: break;
 8005874:	bf00      	nop
	}


	int8_t result = -1;
 8005876:	23ff      	movs	r3, #255	; 0xff
 8005878:	747b      	strb	r3, [r7, #17]
	//Будем идти по строчно в целевом массиве на каждой итерации
	//отдавая данные в функцию сверки текщих данных с iтой строкой массива
	for(int i = 0; i < height; i++) {
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	7cfb      	ldrb	r3, [r7, #19]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	429a      	cmp	r2, r3
 8005884:	da26      	bge.n	80058d4 <_ZN17DspCommandReciver8getLevelEhh+0x1a4>
		if(checkElement(valuesArrayForCheck, &target[i * width], i, 0)) {
 8005886:	7cbb      	ldrb	r3, [r7, #18]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	461a      	mov	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	441a      	add	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	b258      	sxtb	r0, r3
 8005898:	f107 0108 	add.w	r1, r7, #8
 800589c:	2300      	movs	r3, #0
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	4603      	mov	r3, r0
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f853 	bl	800594e <_ZN17DspCommandReciver12checkElementEPaS0_aa>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <_ZN17DspCommandReciver8getLevelEhh+0x19c>
			result = target[i * width];
 80058b8:	7cbb      	ldrb	r3, [r7, #18]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4413      	add	r3, r2
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	747b      	strb	r3, [r7, #17]
			break;
 80058ca:	e003      	b.n	80058d4 <_ZN17DspCommandReciver8getLevelEhh+0x1a4>
	for(int i = 0; i < height; i++) {
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e7d4      	b.n	800587e <_ZN17DspCommandReciver8getLevelEhh+0x14e>
	//		char a[] = "res0 ";
	//		HAL_UART_Transmit(_uart, (uint8_t *)a, sizeof(a), 10);
	//
	//	}

	return result;
 80058d4:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	0800aef4 	.word	0x0800aef4

080058e4 <_ZN17DspCommandReciver16getAbsoluteLevelEh>:

int8_t DspCommandReciver::getAbsoluteLevel(uint8_t channel) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
	int8_t vol_attv1 = getLevel(VOLUME_ATTV1, channel);
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	461a      	mov	r2, r3
 80058f4:	2100      	movs	r1, #0
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff1a 	bl	8005730 <_ZN17DspCommandReciver8getLevelEhh>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
	int8_t vol_attv2 = getLevel(VOLUME_ATTV2, channel);
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	461a      	mov	r2, r3
 8005904:	2101      	movs	r1, #1
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff ff12 	bl	8005730 <_ZN17DspCommandReciver8getLevelEhh>
 800590c:	4603      	mov	r3, r0
 800590e:	73bb      	strb	r3, [r7, #14]
	int8_t fader_attv1 = getLevel(FADER_FRONT_ATTV1, channel);
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	461a      	mov	r2, r3
 8005914:	2102      	movs	r1, #2
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff ff0a 	bl	8005730 <_ZN17DspCommandReciver8getLevelEhh>
 800591c:	4603      	mov	r3, r0
 800591e:	737b      	strb	r3, [r7, #13]
	int8_t fader_attv2 = getLevel(FADER_FRONT_ATTV2, channel);
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	461a      	mov	r2, r3
 8005924:	2103      	movs	r1, #3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff02 	bl	8005730 <_ZN17DspCommandReciver8getLevelEhh>
 800592c:	4603      	mov	r3, r0
 800592e:	733b      	strb	r3, [r7, #12]

	return vol_attv1 + vol_attv2 + fader_attv1 + fader_attv2;
 8005930:	7bfa      	ldrb	r2, [r7, #15]
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	4413      	add	r3, r2
 8005936:	b2da      	uxtb	r2, r3
 8005938:	7b7b      	ldrb	r3, [r7, #13]
 800593a:	4413      	add	r3, r2
 800593c:	b2da      	uxtb	r2, r3
 800593e:	7b3b      	ldrb	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	b2db      	uxtb	r3, r3
 8005944:	b25b      	sxtb	r3, r3

	//	int8_t absoluteLevel = vol_attv1 + vol_attv2 + fader_attv1 + fader_attv2;
	//	return getCorrectedLevel(absoluteLevel);
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <_ZN17DspCommandReciver12checkElementEPaS0_aa>:

//функция сверки прешедших данных состокой массива
//Параметры: массив с данными для сверки, ссылка на строку из эталонного массива, индекс текущей обрабатываемой позиции в массивах
int8_t DspCommandReciver::checkElement(int8_t *valuesArrayForCheck, int8_t *targetArray, int8_t targetArrayWidth, int8_t wIdx) {
 800594e:	b580      	push	{r7, lr}
 8005950:	b086      	sub	sp, #24
 8005952:	af02      	add	r7, sp, #8
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	70fb      	strb	r3, [r7, #3]
	//если wIdx равен 4, то уже рекурсивно пройдены все элементы и стоит вернуть успех
	if(wIdx == 4) {
 800595c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8005960:	2b04      	cmp	r3, #4
 8005962:	d101      	bne.n	8005968 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x1a>
		return 1;
 8005964:	2301      	movs	r3, #1
 8005966:	e029      	b.n	80059bc <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	}

	//если встретили -1 в массиве для сверки, значит его значения уже пройдены и совпали с эталном, возвращаем успех
	if(valuesArrayForCheck[wIdx] == -1) {
 8005968:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	4413      	add	r3, r2
 8005970:	f993 3000 	ldrsb.w	r3, [r3]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d101      	bne.n	800597e <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x30>
		return 1;
 800597a:	2301      	movs	r3, #1
 800597c:	e01e      	b.n	80059bc <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	}

	//сравниваем текщий элемент из массива для сверки с эталоным (у эталоннного индекс + 1 тк первым идет значение громкости)
	if(valuesArrayForCheck[wIdx] == targetArray[wIdx + 1]) {
 800597e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4413      	add	r3, r2
 8005986:	f993 2000 	ldrsb.w	r2, [r3]
 800598a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800598e:	3301      	adds	r3, #1
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	440b      	add	r3, r1
 8005994:	f993 3000 	ldrsb.w	r3, [r3]
 8005998:	429a      	cmp	r2, r3
 800599a:	d10e      	bne.n	80059ba <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6c>
		//если совпали, то проваливаемся в рекурсию для сравнения следующей позиции в массиве
		return checkElement(valuesArrayForCheck, targetArray, targetArrayWidth, wIdx+1);
 800599c:	7e3b      	ldrb	r3, [r7, #24]
 800599e:	3301      	adds	r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff ffcc 	bl	800594e <_ZN17DspCommandReciver12checkElementEPaS0_aa>
 80059b6:	4603      	mov	r3, r0
 80059b8:	e000      	b.n	80059bc <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	} else {
		return 0;
 80059ba:	2300      	movs	r3, #0
	}
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <_ZN17DspCommandReciver9isChangedEv>:

bool DspCommandReciver::isChanged() {
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
	return changed;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
	//	if(changed) {
	//		changed = false;
	//		return true;
	//	}
	//	return false;
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <_ZN17DspCommandReciver16resetChangedFlagEv>:

bool DspCommandReciver::resetChangedFlag() {
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	changed = false;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
}
 80059ec:	bf00      	nop
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <_ZN17DspCommandReciver14setChangedFlagEv>:

void DspCommandReciver::setChangedFlag() {
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	changed = true;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <_ZN23ExtDeviceCommandReciver5toIntEc>:
	inline void updateStop();
	inline void updateDiskNumber();
	inline void updateTrackNumber();
	inline void updatePlayFlag(bool play);

	inline int toInt(char ch) {
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	70fb      	strb	r3, [r7, #3]
		return ch - 48;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	3b30      	subs	r3, #48	; 0x30
	}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <_ZN23ExtDeviceCommandReciver5toHexEc>:

	inline unsigned char toHex(char ch) {
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
		if (ch >= 'A') {
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d906      	bls.n	8005a4c <_ZN23ExtDeviceCommandReciver5toHexEc+0x20>
			return ch - 'A' + 0xA & 0x0F;
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	3b37      	subs	r3, #55	; 0x37
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e003      	b.n	8005a54 <_ZN23ExtDeviceCommandReciver5toHexEc+0x28>
		} else {
			return ch - '0' & 0x0F;
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	b2db      	uxtb	r3, r3
		}
	}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <_ZN23ExtDeviceCommandReciverC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefP20__UART_HandleTypeDefPFvvES7_S7_S7_>:
#include "ExtDeviceCommandReciver.h"
#include <string.h>
#include "ExtDeviceCommandReciverCommands.h"

ExtDeviceCommandReciver::ExtDeviceCommandReciver(
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
		timer(_timer),
		uart(_uart),
		playCallback(_playCallback),
		stopCallback(_stopCallback),
		nextCallback(_nextCallback),
		prevCallback(_prevCallback) {
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	88fa      	ldrh	r2, [r7, #6]
 8005a78:	809a      	strh	r2, [r3, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8b3a      	ldrh	r2, [r7, #24]
 8005a84:	819a      	strh	r2, [r3, #12]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a3a      	ldr	r2, [r7, #32]
 8005a8a:	611a      	str	r2, [r3, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	615a      	str	r2, [r3, #20]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	761a      	strb	r2, [r3, #24]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	765a      	strb	r2, [r3, #25]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	769a      	strb	r2, [r3, #26]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	76da      	strb	r2, [r3, #27]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	621a      	str	r2, [r3, #32]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <_ZN23ExtDeviceCommandReciver11readCommandEv>:

//Вход с rxPin == 0
uint32_t ExtDeviceCommandReciver::readCommand() {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	return readCommand(0);
 8005adc:	2100      	movs	r1, #0
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f818 	bl	8005b14 <_ZN23ExtDeviceCommandReciver11readCommandEm>
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>:

void ExtDeviceCommandReciver::convertToHex(uint64_t value, char *str){
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	e9c7 2300 	strd	r2, r3, [r7]
	sprintf(str, "%X", value);
 8005afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc+0x20>)
 8005b02:	69b8      	ldr	r0, [r7, #24]
 8005b04:	f002 f952 	bl	8007dac <siprintf>
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	0800aef8 	.word	0x0800aef8

08005b14 <_ZN23ExtDeviceCommandReciver11readCommandEm>:

//Вход с rxPin == 0
uint32_t ExtDeviceCommandReciver::readCommand(uint32_t result) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	//ждем пока сигнал поднимается
	resetMicros();
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fc65 	bl	80063ee <_ZN23ExtDeviceCommandReciver11resetMicrosEv>
	while(!HAL_GPIO_ReadPin(rxGPIO, rxPin)) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	889b      	ldrh	r3, [r3, #4]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f7fd fc70 	bl	8003414 <HAL_GPIO_ReadPin>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d000      	beq.n	8005b46 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x32>
 8005b44:	e7ee      	b.n	8005b24 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x10>
	}

	//проверяем за какое время поднялся
	uint16_t time =  getMicros() < 1000 ? 0 : 1;
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fc43 	bl	80063d2 <_ZN23ExtDeviceCommandReciver9getMicrosEv>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005b54:	429a      	cmp	r2, r3
 8005b56:	bf8c      	ite	hi
 8005b58:	2301      	movhi	r3, #1
 8005b5a:	2300      	movls	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	81bb      	strh	r3, [r7, #12]
	uint8_t currentBit = time;
 8005b60:	89bb      	ldrh	r3, [r7, #12]
 8005b62:	72fb      	strb	r3, [r7, #11]
	result = result << 1 | currentBit;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	005a      	lsls	r2, r3, #1
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	603b      	str	r3, [r7, #0]
	//ждем пока сигнал опустится или пройдет время больше ожидаемого времени между командами
	bool nonExitFromTimer = true;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	73fb      	strb	r3, [r7, #15]
	resetMicros();
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fc3b 	bl	80063ee <_ZN23ExtDeviceCommandReciver11resetMicrosEv>
	while(HAL_GPIO_ReadPin(rxGPIO, rxPin) && nonExitFromTimer) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	889b      	ldrh	r3, [r3, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f7fd fc46 	bl	8003414 <HAL_GPIO_ReadPin>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x84>
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x84>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <_ZN23ExtDeviceCommandReciver11readCommandEm+0x86>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <_ZN23ExtDeviceCommandReciver11readCommandEm+0xa4>
		nonExitFromTimer = getMicros() < 3100;
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fc17 	bl	80063d2 <_ZN23ExtDeviceCommandReciver9getMicrosEv>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f640 431b 	movw	r3, #3099	; 0xc1b
 8005bac:	429a      	cmp	r2, r3
 8005bae:	bf94      	ite	ls
 8005bb0:	2301      	movls	r3, #1
 8005bb2:	2300      	movhi	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
	while(HAL_GPIO_ReadPin(rxGPIO, rxPin) && nonExitFromTimer) {
 8005bb6:	e7df      	b.n	8005b78 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x64>
	}
	//если время меньше, то значит данные еще идут иначе данных больше нет
	if(nonExitFromTimer) {
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <_ZN23ExtDeviceCommandReciver11readCommandEm+0xb4>
		result = readCommand(result);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ffa7 	bl	8005b14 <_ZN23ExtDeviceCommandReciver11readCommandEm>
 8005bc6:	6038      	str	r0, [r7, #0]
	}
	return result;
 8005bc8:	683b      	ldr	r3, [r7, #0]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <_ZN23ExtDeviceCommandReciver9writeZeroEv>:

void ExtDeviceCommandReciver::writeZero()
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_SET);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6898      	ldr	r0, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	899b      	ldrh	r3, [r3, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	4619      	mov	r1, r3
 8005be6:	f7fd fc2c 	bl	8003442 <HAL_GPIO_WritePin>
	delayMicros(600);
 8005bea:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fc0b 	bl	800640a <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_RESET);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6898      	ldr	r0, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	899b      	ldrh	r3, [r3, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f7fd fc1f 	bl	8003442 <HAL_GPIO_WritePin>
	delayMicros(2400);
 8005c04:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fbfe 	bl	800640a <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_ZN23ExtDeviceCommandReciver8writeOneEv>:

void ExtDeviceCommandReciver::writeOne()
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_SET);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6898      	ldr	r0, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	899b      	ldrh	r3, [r3, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f7fd fc0a 	bl	8003442 <HAL_GPIO_WritePin>
	delayMicros(1800);
 8005c2e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fbe9 	bl	800640a <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_RESET);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6898      	ldr	r0, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	899b      	ldrh	r3, [r3, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fd fbfd 	bl	8003442 <HAL_GPIO_WritePin>
	delayMicros(1200);
 8005c48:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fbdc 	bl	800640a <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>:

void ExtDeviceCommandReciver::writeCommand(char *command, int size) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t*)"[mbus] S: ", 10, 2);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6918      	ldr	r0, [r3, #16]
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	220a      	movs	r2, #10
 8005c70:	4921      	ldr	r1, [pc, #132]	; (8005cf8 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x9c>)
 8005c72:	f7fe ff90 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)command, size, 2);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6918      	ldr	r0, [r3, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	2302      	movs	r3, #2
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	f7fe ff88 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)"\n", 1, 2);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6918      	ldr	r0, [r3, #16]
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	491b      	ldr	r1, [pc, #108]	; (8005cfc <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0xa0>)
 8005c90:	f7fe ff81 	bl	8004b96 <HAL_UART_Transmit>

	delayMicros(5000);
 8005c94:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fbb6 	bl	800640a <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	uint8_t controlSum = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < size - 1; i++) {
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	da16      	bge.n	8005cde <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x82>
		uint8_t output = toHex(command[i]);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff feb6 	bl	8005a2c <_ZN23ExtDeviceCommandReciver5toHexEc>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75fb      	strb	r3, [r7, #23]
		controlSum = controlSum ^ output;
 8005cc4:	7ffa      	ldrb	r2, [r7, #31]
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	4053      	eors	r3, r2
 8005cca:	77fb      	strb	r3, [r7, #31]
		writeHexBitWise(output);
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f815 	bl	8005d00 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>
	for (int i = 0; i < size - 1; i++) {
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e7e3      	b.n	8005ca6 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x4a>
	}
	controlSum += 1;
 8005cde:	7ffb      	ldrb	r3, [r7, #31]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	77fb      	strb	r3, [r7, #31]
	writeHexBitWise(controlSum);
 8005ce4:	7ffb      	ldrb	r3, [r7, #31]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f809 	bl	8005d00 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>
}
 8005cee:	bf00      	nop
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	0800aefc 	.word	0x0800aefc
 8005cfc:	0800af08 	.word	0x0800af08

08005d00 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>:

void ExtDeviceCommandReciver::writeHexBitWise(uint8_t command) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
	for (int8_t i = 3; i > -1; i--) {
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	73fb      	strb	r3, [r7, #15]
 8005d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	db1c      	blt.n	8005d52 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x52>
		uint8_t value = ((command & (1 << i) ) >> i);
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	2101      	movs	r1, #1
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	401a      	ands	r2, r3
 8005d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2a:	fa42 f303 	asr.w	r3, r2, r3
 8005d2e:	73bb      	strb	r3, [r7, #14]
		if (value == 1) {
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d103      	bne.n	8005d3e <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x3e>
			writeOne();
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ff6d 	bl	8005c16 <_ZN23ExtDeviceCommandReciver8writeOneEv>
 8005d3c:	e002      	b.n	8005d44 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x44>
		} else {
			writeZero();
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff ff47 	bl	8005bd2 <_ZN23ExtDeviceCommandReciver9writeZeroEv>
	for (int8_t i = 3; i > -1; i--) {
 8005d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	73fb      	strb	r3, [r7, #15]
 8005d50:	e7de      	b.n	8005d10 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x10>
		}
	}
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <_ZN23ExtDeviceCommandReciver17commandProcessingEv>:

//разбор комад
uint32_t ExtDeviceCommandReciver::commandProcessing() {
 8005d5c:	b590      	push	{r4, r7, lr}
 8005d5e:	b08f      	sub	sp, #60	; 0x3c
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	6078      	str	r0, [r7, #4]
	//перед чтением пакета проверяем, что clock поднят
	if(HAL_GPIO_ReadPin(rxGPIO, rxPin)) {
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	889b      	ldrh	r3, [r3, #4]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7fd fb50 	bl	8003414 <HAL_GPIO_ReadPin>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x3a>
		HAL_UART_Transmit(uart, (uint8_t *)"[mbus] R-ERROR: line not down\n", 30, 2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6918      	ldr	r0, [r3, #16]
 8005d88:	2302      	movs	r3, #2
 8005d8a:	221e      	movs	r2, #30
 8005d8c:	493d      	ldr	r1, [pc, #244]	; (8005e84 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x128>)
 8005d8e:	f7fe ff02 	bl	8004b96 <HAL_UART_Transmit>
		return 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e071      	b.n	8005e7a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>
	}

	uint32_t command = readCommand();
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fe9c 	bl	8005ad4 <_ZN23ExtDeviceCommandReciver11readCommandEv>
 8005d9c:	62f8      	str	r0, [r7, #44]	; 0x2c


	char tmp[20];
	convertToHex(command, tmp);
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	f04f 0400 	mov.w	r4, #0
 8005da4:	f107 0218 	add.w	r2, r7, #24
 8005da8:	9200      	str	r2, [sp, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	4623      	mov	r3, r4
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fe9e 	bl	8005af0 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>
	HAL_UART_Transmit(uart, (uint8_t*)"[mbus] R: ", 10, 2);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6918      	ldr	r0, [r3, #16]
 8005db8:	2302      	movs	r3, #2
 8005dba:	220a      	movs	r2, #10
 8005dbc:	4932      	ldr	r1, [pc, #200]	; (8005e88 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x12c>)
 8005dbe:	f7fe feea 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)tmp, strlen(tmp), 2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691c      	ldr	r4, [r3, #16]
 8005dc6:	f107 0318 	add.w	r3, r7, #24
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa f9c0 	bl	8000150 <strlen>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f107 0118 	add.w	r1, r7, #24
 8005dd8:	2302      	movs	r3, #2
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7fe fedb 	bl	8004b96 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)"\n", 1, 2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6918      	ldr	r0, [r3, #16]
 8005de4:	2302      	movs	r3, #2
 8005de6:	2201      	movs	r2, #1
 8005de8:	4928      	ldr	r1, [pc, #160]	; (8005e8c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x130>)
 8005dea:	f7fe fed4 	bl	8004b96 <HAL_UART_Transmit>


	switch (command) {
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	f240 528e 	movw	r2, #1422	; 0x58e
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xa6>
 8005df8:	f240 529d 	movw	r2, #1437	; 0x59d
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d005      	beq.n	8005e0c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xb0>
 8005e00:	e009      	b.n	8005e16 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xba>
	case 0x58E : {
		pong();
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f88e 	bl	8005f24 <_ZN23ExtDeviceCommandReciver4pongEv>
		return command;
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	e036      	b.n	8005e7a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>
	}
	case 0x59D : {
		wakeUp();
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f899 	bl	8005f44 <_ZN23ExtDeviceCommandReciver6wakeUpEv>
		return command;
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	e031      	b.n	8005e7a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>

	char commandBuf[10];
	//	for (int i = 0; i < bufSize; i++) {
	//		commandBuf[i] = 'X';
	//	}
	convertToHex(command, commandBuf);
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	f04f 0400 	mov.w	r4, #0
 8005e1c:	f107 020c 	add.w	r2, r7, #12
 8005e20:	9200      	str	r2, [sp, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	4623      	mov	r3, r4
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff fe62 	bl	8005af0 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>

	//если мы пришли не по адресу 5 или не по команде Control
	if (commandBuf[0] != '5' || commandBuf[1] != '1') { //0x5130021(5)
 8005e2c:	7b3b      	ldrb	r3, [r7, #12]
 8005e2e:	2b35      	cmp	r3, #53	; 0x35
 8005e30:	d102      	bne.n	8005e38 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xdc>
 8005e32:	7b7b      	ldrb	r3, [r7, #13]
 8005e34:	2b31      	cmp	r3, #49	; 0x31
 8005e36:	d001      	beq.n	8005e3c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xe0>
		return command;
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	e01e      	b.n	8005e7a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>
	}
	//анализ подкоманды
	switch (commandBuf[2]) {
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	2b31      	cmp	r3, #49	; 0x31
 8005e40:	d002      	beq.n	8005e48 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xec>
 8005e42:	2b33      	cmp	r3, #51	; 0x33
 8005e44:	d010      	beq.n	8005e68 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x10c>
 8005e46:	e017      	b.n	8005e78 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11c>
	case '1' : { // управление воспроизведением
		if (command == 0x5110127) { //команда играй
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x134>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xfc>
			play();
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f89b 	bl	8005f8c <_ZN23ExtDeviceCommandReciver4playEv>
		} else if (command == 0x5114024) { // команда стоп (возможно переход на другое устройство)
			stop();
		}
		break;
 8005e56:	e00e      	b.n	8005e76 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11a>
		} else if (command == 0x5114024) { // команда стоп (возможно переход на другое устройство)
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	4a0e      	ldr	r2, [pc, #56]	; (8005e94 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x138>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10a      	bne.n	8005e76 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11a>
			stop();
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8b5 	bl	8005fd0 <_ZN23ExtDeviceCommandReciver4stopEv>
		break;
 8005e66:	e006      	b.n	8005e76 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11a>
	}
	case '3' : { // переключение треков
		updateTrack(commandBuf);
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f8c4 	bl	8005ffc <_ZN23ExtDeviceCommandReciver11updateTrackEPc>
		break;
 8005e74:	e000      	b.n	8005e78 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11c>
		break;
 8005e76:	bf00      	nop
	}
	default:;
	}
	return command;
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3734      	adds	r7, #52	; 0x34
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd90      	pop	{r4, r7, pc}
 8005e82:	bf00      	nop
 8005e84:	0800af0c 	.word	0x0800af0c
 8005e88:	0800af2c 	.word	0x0800af2c
 8005e8c:	0800af08 	.word	0x0800af08
 8005e90:	05110127 	.word	0x05110127
 8005e94:	05114024 	.word	0x05114024

08005e98 <_ZN23ExtDeviceCommandReciver8sendTimeEhh>:

void ExtDeviceCommandReciver::sendTime(uint8_t _min, uint8_t _sec) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	70bb      	strb	r3, [r7, #2]
	min = _min;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	769a      	strb	r2, [r3, #26]
	sec = _sec;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	78ba      	ldrb	r2, [r7, #2]
 8005eb2:	76da      	strb	r2, [r3, #27]
	updateTrackTime();
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f98d 	bl	80061d4 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv>

	if(!playing) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7f1b      	ldrb	r3, [r3, #28]
 8005ebe:	f083 0301 	eor.w	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x4a>
		return;
	}

	HAL_UART_Transmit(uart, (uint8_t *)"[mbus] send time: ", 18, 2);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6918      	ldr	r0, [r3, #16]
 8005ecc:	2302      	movs	r3, #2
 8005ece:	2212      	movs	r2, #18
 8005ed0:	4906      	ldr	r1, [pc, #24]	; (8005eec <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x54>)
 8005ed2:	f7fe fe60 	bl	8004b96 <HAL_UART_Transmit>
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	4905      	ldr	r1, [pc, #20]	; (8005ef0 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x58>)
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff febe 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
 8005ee0:	e000      	b.n	8005ee4 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x4c>
		return;
 8005ee2:	bf00      	nop
}
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	0800af38 	.word	0x0800af38
 8005ef0:	20000044 	.word	0x20000044

08005ef4 <_ZN23ExtDeviceCommandReciver16resetPlayingFlagEv>:

void ExtDeviceCommandReciver::resetPlayingFlag() {
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	playing = false;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	771a      	strb	r2, [r3, #28]
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <_ZN23ExtDeviceCommandReciver9isPlayingEv>:

bool ExtDeviceCommandReciver::isPlaying() {
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	return playing;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7f1b      	ldrb	r3, [r3, #28]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr
	...

08005f24 <_ZN23ExtDeviceCommandReciver4pongEv>:

void ExtDeviceCommandReciver::pong() {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	writeCommand(PONG, sizeof(PONG));
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	4904      	ldr	r1, [pc, #16]	; (8005f40 <_ZN23ExtDeviceCommandReciver4pongEv+0x1c>)
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff fe93 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000001c 	.word	0x2000001c

08005f44 <_ZN23ExtDeviceCommandReciver6wakeUpEv>:

void ExtDeviceCommandReciver::wakeUp() {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	writeCommand(HARDWARE_STATUS, sizeof(HARDWARE_STATUS));
 8005f4c:	220c      	movs	r2, #12
 8005f4e:	490b      	ldr	r1, [pc, #44]	; (8005f7c <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x38>)
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fe83 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_COUNT, sizeof(DISC_COUNT));
 8005f56:	2212      	movs	r2, #18
 8005f58:	4909      	ldr	r1, [pc, #36]	; (8005f80 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x3c>)
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff fe7e 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_INFO_WITH_TRACK_WAKEUP, sizeof(DISC_INFO_WITH_TRACK_WAKEUP));
 8005f60:	220d      	movs	r2, #13
 8005f62:	4908      	ldr	r1, [pc, #32]	; (8005f84 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x40>)
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fe79 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(STATUS_STOP, sizeof(STATUS_STOP));
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	4906      	ldr	r1, [pc, #24]	; (8005f88 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x44>)
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fe74 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	//	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000020 	.word	0x20000020
 8005f80:	20000054 	.word	0x20000054
 8005f84:	20000068 	.word	0x20000068
 8005f88:	20000098 	.word	0x20000098

08005f8c <_ZN23ExtDeviceCommandReciver4playEv>:

void ExtDeviceCommandReciver::play() {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	writeCommand(STATUS_SEEKING, sizeof(STATUS_SEEKING));
 8005f94:	2210      	movs	r2, #16
 8005f96:	490b      	ldr	r1, [pc, #44]	; (8005fc4 <_ZN23ExtDeviceCommandReciver4playEv+0x38>)
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fe5f 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_INFO_WITH_TRACK_WAKEUP, sizeof(DISC_INFO_WITH_TRACK_WAKEUP));
 8005f9e:	220d      	movs	r2, #13
 8005fa0:	4909      	ldr	r1, [pc, #36]	; (8005fc8 <_ZN23ExtDeviceCommandReciver4playEv+0x3c>)
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff fe5a 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 8005fa8:	2210      	movs	r2, #16
 8005faa:	4908      	ldr	r1, [pc, #32]	; (8005fcc <_ZN23ExtDeviceCommandReciver4playEv+0x40>)
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff fe55 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(true);
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8dd 	bl	8006174 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000088 	.word	0x20000088
 8005fc8:	20000068 	.word	0x20000068
 8005fcc:	20000044 	.word	0x20000044

08005fd0 <_ZN23ExtDeviceCommandReciver4stopEv>:

void ExtDeviceCommandReciver::stop() {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	updateStop();
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f93f 	bl	800625c <_ZN23ExtDeviceCommandReciver10updateStopEv>
	writeCommand(STATUS_STOP, sizeof(STATUS_STOP));
 8005fde:	2210      	movs	r2, #16
 8005fe0:	4905      	ldr	r1, [pc, #20]	; (8005ff8 <_ZN23ExtDeviceCommandReciver4stopEv+0x28>)
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff fe3a 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(false);
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f8c2 	bl	8006174 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000098 	.word	0x20000098

08005ffc <_ZN23ExtDeviceCommandReciver11updateTrackEPc>:

void ExtDeviceCommandReciver::updateTrack(char *commandBuf) {
 8005ffc:	b590      	push	{r4, r7, lr}
 8005ffe:	b089      	sub	sp, #36	; 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	int oldTrack = track;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	7e1b      	ldrb	r3, [r3, #24]
 800600a:	61bb      	str	r3, [r7, #24]
	int oldDisk = disk;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	7e5b      	ldrb	r3, [r3, #25]
 8006010:	617b      	str	r3, [r7, #20]

	bool changed = false;
 8006012:	2300      	movs	r3, #0
 8006014:	77fb      	strb	r3, [r7, #31]
	bool next = false;
 8006016:	2300      	movs	r3, #0
 8006018:	77bb      	strb	r3, [r7, #30]

	//проверяем пришел ли новый номер трека
	int newTrack = toInt(commandBuf[4]) * 10 + toInt(commandBuf[5]);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	3304      	adds	r3, #4
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fcf5 	bl	8005a12 <_ZN23ExtDeviceCommandReciver5toIntEc>
 8006028:	4602      	mov	r2, r0
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	461c      	mov	r4, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	3305      	adds	r3, #5
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff fce8 	bl	8005a12 <_ZN23ExtDeviceCommandReciver5toIntEc>
 8006042:	4603      	mov	r3, r0
 8006044:	4423      	add	r3, r4
 8006046:	613b      	str	r3, [r7, #16]
	if(newTrack != 0 && track != newTrack) {
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d027      	beq.n	800609e <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	7e1b      	ldrb	r3, [r3, #24]
 8006052:	461a      	mov	r2, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4293      	cmp	r3, r2
 8006058:	d021      	beq.n	800609e <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		track = newTrack;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	761a      	strb	r2, [r3, #24]
		updateTrackNumber();
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f946 	bl	80062f4 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv>
		changed = true;
 8006068:	2301      	movs	r3, #1
 800606a:	77fb      	strb	r3, [r7, #31]

		if(oldTrack == 99 && newTrack == 1) {
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b63      	cmp	r3, #99	; 0x63
 8006070:	d105      	bne.n	800607e <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x82>
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d102      	bne.n	800607e <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x82>
			next = true;
 8006078:	2301      	movs	r3, #1
 800607a:	77bb      	strb	r3, [r7, #30]
 800607c:	e00f      	b.n	800609e <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		} else if(oldTrack == 1 && newTrack == 99) {
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d105      	bne.n	8006090 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x94>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b63      	cmp	r3, #99	; 0x63
 8006088:	d102      	bne.n	8006090 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x94>
			next = false;
 800608a:	2300      	movs	r3, #0
 800608c:	77bb      	strb	r3, [r7, #30]
 800608e:	e006      	b.n	800609e <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		} else {
			next = newTrack > oldTrack ? true : false;
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	429a      	cmp	r2, r3
 8006096:	bfcc      	ite	gt
 8006098:	2301      	movgt	r3, #1
 800609a:	2300      	movle	r3, #0
 800609c:	77bb      	strb	r3, [r7, #30]
		}
	}

	//проверяем пришел ли новый номер диска
	int newDisk = toInt(commandBuf[3]);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	3303      	adds	r3, #3
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fcb3 	bl	8005a12 <_ZN23ExtDeviceCommandReciver5toIntEc>
 80060ac:	60f8      	str	r0, [r7, #12]
	if(newDisk != 0 && disk != newDisk) {
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d03b      	beq.n	800612c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x130>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7e5b      	ldrb	r3, [r3, #25]
 80060b8:	461a      	mov	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4293      	cmp	r3, r2
 80060be:	d035      	beq.n	800612c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x130>
		disk = newDisk;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	765a      	strb	r2, [r3, #25]
		updateDiskNumber();
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8d9 	bl	8006280 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv>
		changed = true;
 80060ce:	2301      	movs	r3, #1
 80060d0:	77fb      	strb	r3, [r7, #31]

		if(oldDisk == 6 && newDisk == 1) {
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b06      	cmp	r3, #6
 80060d6:	d105      	bne.n	80060e4 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xe8>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d102      	bne.n	80060e4 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xe8>
			next = true;
 80060de:	2301      	movs	r3, #1
 80060e0:	77bb      	strb	r3, [r7, #30]
 80060e2:	e00f      	b.n	8006104 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x108>
		} else if(oldDisk == 1 && newDisk == 6) {
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d105      	bne.n	80060f6 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xfa>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b06      	cmp	r3, #6
 80060ee:	d102      	bne.n	80060f6 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xfa>
			next = false;
 80060f0:	2300      	movs	r3, #0
 80060f2:	77bb      	strb	r3, [r7, #30]
 80060f4:	e006      	b.n	8006104 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x108>
		} else {
			next = newDisk > oldDisk ? true : false;
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	bfcc      	ite	gt
 80060fe:	2301      	movgt	r3, #1
 8006100:	2300      	movle	r3, #0
 8006102:	77bb      	strb	r3, [r7, #30]
		}

		writeCommand(CHANGE_DISK1, sizeof(CHANGE_DISK1));
 8006104:	220c      	movs	r2, #12
 8006106:	4916      	ldr	r1, [pc, #88]	; (8006160 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x164>)
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fda7 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(CHANGE_DISK2, sizeof(CHANGE_DISK2));
 800610e:	220c      	movs	r2, #12
 8006110:	4914      	ldr	r1, [pc, #80]	; (8006164 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x168>)
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff fda2 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(STATUS_SEEKING, sizeof(STATUS_SEEKING));
 8006118:	2210      	movs	r2, #16
 800611a:	4913      	ldr	r1, [pc, #76]	; (8006168 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x16c>)
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff fd9d 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(DISC_INFO_WITH_TRACK, sizeof(DISC_INFO_WITH_TRACK));
 8006122:	220d      	movs	r2, #13
 8006124:	4911      	ldr	r1, [pc, #68]	; (800616c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x170>)
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fd98 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	}
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 800612c:	2210      	movs	r2, #16
 800612e:	4910      	ldr	r1, [pc, #64]	; (8006170 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x174>)
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fd93 	bl	8005c5c <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(true);
 8006136:	2101      	movs	r1, #1
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f81b 	bl	8006174 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>

	if(changed) {
 800613e:	7ffb      	ldrb	r3, [r7, #31]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x15c>
		if(next) {
 8006144:	7fbb      	ldrb	r3, [r7, #30]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x156>
			(*nextCallback)();
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	4798      	blx	r3
		} else {
			(*prevCallback)();
		}
	}
}
 8006150:	e002      	b.n	8006158 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x15c>
			(*prevCallback)();
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	4798      	blx	r3
}
 8006158:	bf00      	nop
 800615a:	3724      	adds	r7, #36	; 0x24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd90      	pop	{r4, r7, pc}
 8006160:	2000002c 	.word	0x2000002c
 8006164:	20000038 	.word	0x20000038
 8006168:	20000088 	.word	0x20000088
 800616c:	20000078 	.word	0x20000078
 8006170:	20000044 	.word	0x20000044

08006174 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>:

inline void ExtDeviceCommandReciver::updatePlayFlag(bool play) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	70fb      	strb	r3, [r7, #3]
	if(play && playing || !play && !playing) {
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x1a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7f1b      	ldrb	r3, [r3, #28]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d11d      	bne.n	80061ca <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x56>
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	f083 0301 	eor.w	r3, r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d006      	beq.n	80061a8 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x34>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7f1b      	ldrb	r3, [r3, #28]
 800619e:	f083 0301 	eor.w	r3, r3, #1
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d110      	bne.n	80061ca <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x56>
		return;
	}

	if(play) {
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d006      	beq.n	80061bc <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x48>
		playing = true;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	771a      	strb	r2, [r3, #28]
		(*playCallback)();
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	4798      	blx	r3
 80061ba:	e007      	b.n	80061cc <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x58>
	} else {
		playing = false;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	771a      	strb	r2, [r3, #28]
		(*stopCallback)();
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	4798      	blx	r3
 80061c8:	e000      	b.n	80061cc <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x58>
		return;
 80061ca:	bf00      	nop
	}
}
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv>:

inline void ExtDeviceCommandReciver::updateTrackTime() {
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	STATUS_PLAY[MIN_POS_F] = min / 10 + '0';
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7e9b      	ldrb	r3, [r3, #26]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	08db      	lsrs	r3, r3, #3
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	3330      	adds	r3, #48	; 0x30
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 80061f0:	71da      	strb	r2, [r3, #7]
	STATUS_PLAY[MIN_POS_S] = min % 10 + '0';
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7e9a      	ldrb	r2, [r3, #26]
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 80061f8:	fba3 1302 	umull	r1, r3, r3, r2
 80061fc:	08d9      	lsrs	r1, r3, #3
 80061fe:	460b      	mov	r3, r1
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	b2db      	uxtb	r3, r3
 800620a:	3330      	adds	r3, #48	; 0x30
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b12      	ldr	r3, [pc, #72]	; (8006258 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 8006210:	721a      	strb	r2, [r3, #8]
	STATUS_PLAY[SEC_POS_F] = sec / 10 + '0';
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	7edb      	ldrb	r3, [r3, #27]
 8006216:	4a0f      	ldr	r2, [pc, #60]	; (8006254 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 8006218:	fba2 2303 	umull	r2, r3, r2, r3
 800621c:	08db      	lsrs	r3, r3, #3
 800621e:	b2db      	uxtb	r3, r3
 8006220:	3330      	adds	r3, #48	; 0x30
 8006222:	b2da      	uxtb	r2, r3
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 8006226:	725a      	strb	r2, [r3, #9]
	STATUS_PLAY[SEC_POS_S] = sec % 10 + '0';
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	7eda      	ldrb	r2, [r3, #27]
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 800622e:	fba3 1302 	umull	r1, r3, r3, r2
 8006232:	08d9      	lsrs	r1, r3, #3
 8006234:	460b      	mov	r3, r1
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	b2db      	uxtb	r3, r3
 8006240:	3330      	adds	r3, #48	; 0x30
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 8006246:	729a      	strb	r2, [r3, #10]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	cccccccd 	.word	0xcccccccd
 8006258:	20000044 	.word	0x20000044

0800625c <_ZN23ExtDeviceCommandReciver10updateStopEv>:

inline void ExtDeviceCommandReciver::updateStop() {
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	STATUS_STOP[DISK_POS] = disk + '0';
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	7e5b      	ldrb	r3, [r3, #25]
 8006268:	3330      	adds	r3, #48	; 0x30
 800626a:	b2da      	uxtb	r2, r3
 800626c:	4b03      	ldr	r3, [pc, #12]	; (800627c <_ZN23ExtDeviceCommandReciver10updateStopEv+0x20>)
 800626e:	719a      	strb	r2, [r3, #6]
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000098 	.word	0x20000098

08006280 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv>:

inline void ExtDeviceCommandReciver::updateDiskNumber() {
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	CHANGE_DISK2[3] = disk + '0';
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	7e5b      	ldrb	r3, [r3, #25]
 800628c:	3330      	adds	r3, #48	; 0x30
 800628e:	b2da      	uxtb	r2, r3
 8006290:	4b12      	ldr	r3, [pc, #72]	; (80062dc <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x5c>)
 8006292:	70da      	strb	r2, [r3, #3]
	STATUS_SEEKING[DISK_POS] = disk + '0';
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7e5b      	ldrb	r3, [r3, #25]
 8006298:	3330      	adds	r3, #48	; 0x30
 800629a:	b2da      	uxtb	r2, r3
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x60>)
 800629e:	719a      	strb	r2, [r3, #6]
	DISC_INFO_WITH_TRACK[2] = disk + '0';
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7e5b      	ldrb	r3, [r3, #25]
 80062a4:	3330      	adds	r3, #48	; 0x30
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x64>)
 80062aa:	709a      	strb	r2, [r3, #2]
	//	DISC_INFO[2] = disk + '0';
	STATUS_PLAY[DISK_POS] = disk + '0';
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7e5b      	ldrb	r3, [r3, #25]
 80062b0:	3330      	adds	r3, #48	; 0x30
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x68>)
 80062b6:	719a      	strb	r2, [r3, #6]
	STATUS_STOP[DISK_POS] = disk + '0';
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7e5b      	ldrb	r3, [r3, #25]
 80062bc:	3330      	adds	r3, #48	; 0x30
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x6c>)
 80062c2:	719a      	strb	r2, [r3, #6]
	HARDWARE_STATUS[3] = disk + '0';
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7e5b      	ldrb	r3, [r3, #25]
 80062c8:	3330      	adds	r3, #48	; 0x30
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x70>)
 80062ce:	70da      	strb	r2, [r3, #3]
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000038 	.word	0x20000038
 80062e0:	20000088 	.word	0x20000088
 80062e4:	20000078 	.word	0x20000078
 80062e8:	20000044 	.word	0x20000044
 80062ec:	20000098 	.word	0x20000098
 80062f0:	20000020 	.word	0x20000020

080062f4 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv>:

inline void ExtDeviceCommandReciver::updateTrackNumber() {
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	STATUS_SEEKING[TRACK_POS_F] = track / 10 + '0';
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	7e1b      	ldrb	r3, [r3, #24]
 8006300:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	08db      	lsrs	r3, r3, #3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	3330      	adds	r3, #48	; 0x30
 800630c:	b2da      	uxtb	r2, r3
 800630e:	4b27      	ldr	r3, [pc, #156]	; (80063ac <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb8>)
 8006310:	70da      	strb	r2, [r3, #3]
	STATUS_SEEKING[TRACK_POS_S] = track % 10 + '0';
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	7e1a      	ldrb	r2, [r3, #24]
 8006316:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006318:	fba3 1302 	umull	r1, r3, r3, r2
 800631c:	08d9      	lsrs	r1, r3, #3
 800631e:	460b      	mov	r3, r1
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	b2db      	uxtb	r3, r3
 800632a:	3330      	adds	r3, #48	; 0x30
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb8>)
 8006330:	711a      	strb	r2, [r3, #4]
	STATUS_PLAY[TRACK_POS_F] = track / 10 + '0';
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7e1b      	ldrb	r3, [r3, #24]
 8006336:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006338:	fba2 2303 	umull	r2, r3, r2, r3
 800633c:	08db      	lsrs	r3, r3, #3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	3330      	adds	r3, #48	; 0x30
 8006342:	b2da      	uxtb	r2, r3
 8006344:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xbc>)
 8006346:	70da      	strb	r2, [r3, #3]
	STATUS_PLAY[TRACK_POS_S] = track % 10 + '0';
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7e1a      	ldrb	r2, [r3, #24]
 800634c:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 800634e:	fba3 1302 	umull	r1, r3, r3, r2
 8006352:	08d9      	lsrs	r1, r3, #3
 8006354:	460b      	mov	r3, r1
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	b2db      	uxtb	r3, r3
 8006360:	3330      	adds	r3, #48	; 0x30
 8006362:	b2da      	uxtb	r2, r3
 8006364:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xbc>)
 8006366:	711a      	strb	r2, [r3, #4]
	DISC_INFO_WITH_TRACK[3] = track / 10 + '0';
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7e1b      	ldrb	r3, [r3, #24]
 800636c:	4a0e      	ldr	r2, [pc, #56]	; (80063a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	08db      	lsrs	r3, r3, #3
 8006374:	b2db      	uxtb	r3, r3
 8006376:	3330      	adds	r3, #48	; 0x30
 8006378:	b2da      	uxtb	r2, r3
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xc0>)
 800637c:	70da      	strb	r2, [r3, #3]
	DISC_INFO_WITH_TRACK[4] = track % 10 + '0';
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7e1a      	ldrb	r2, [r3, #24]
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006384:	fba3 1302 	umull	r1, r3, r3, r2
 8006388:	08d9      	lsrs	r1, r3, #3
 800638a:	460b      	mov	r3, r1
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	440b      	add	r3, r1
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3330      	adds	r3, #48	; 0x30
 8006398:	b2da      	uxtb	r2, r3
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xc0>)
 800639c:	711a      	strb	r2, [r3, #4]
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr
 80063a8:	cccccccd 	.word	0xcccccccd
 80063ac:	20000088 	.word	0x20000088
 80063b0:	20000044 	.word	0x20000044
 80063b4:	20000078 	.word	0x20000078

080063b8 <_ZN23ExtDeviceCommandReciver10startTimerEv>:




//TIMER FUNC
void ExtDeviceCommandReciver::startTimer() {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(timer); // запуск таймера
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe f939 	bl	800463c <HAL_TIM_Base_Start_IT>
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <_ZN23ExtDeviceCommandReciver9getMicrosEv>:

uint16_t ExtDeviceCommandReciver::getMicros() {
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(timer);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	b29b      	uxth	r3, r3
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <_ZN23ExtDeviceCommandReciver11resetMicrosEv>:

void ExtDeviceCommandReciver::resetMicros()
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(timer, 0 );  // устанавливаем значение счетчика на 0
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2200      	movs	r2, #0
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <_ZN23ExtDeviceCommandReciver11delayMicrosEt>:

void ExtDeviceCommandReciver::delayMicros(uint16_t us)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(timer,0);  // set the counter value a 0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2200      	movs	r2, #0
 800641e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < us);  // wait for the counter to reach the us input in the parameter
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006428:	887b      	ldrh	r3, [r7, #2]
 800642a:	429a      	cmp	r2, r3
 800642c:	bf34      	ite	cc
 800642e:	2301      	movcc	r3, #1
 8006430:	2300      	movcs	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d000      	beq.n	800643a <_ZN23ExtDeviceCommandReciver11delayMicrosEt+0x30>
 8006438:	e7f2      	b.n	8006420 <_ZN23ExtDeviceCommandReciver11delayMicrosEt+0x16>
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <_ZN6SerialC1EP20__UART_HandleTypeDef>:
#include "Serial.h"
#include <string.h>
#include <stdio.h>

Serial::Serial(UART_HandleTypeDef *uart):_uart(uart) {}
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <_ZN6Serial5printEPc>:

void Serial::print(char *str) {
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(_uart, (uint8_t*)str, strlen(str), 10);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681c      	ldr	r4, [r3, #0]
 800646e:	6838      	ldr	r0, [r7, #0]
 8006470:	f7f9 fe6e 	bl	8000150 <strlen>
 8006474:	4603      	mov	r3, r0
 8006476:	b29a      	uxth	r2, r3
 8006478:	230a      	movs	r3, #10
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	4620      	mov	r0, r4
 800647e:	f7fe fb8a 	bl	8004b96 <HAL_UART_Transmit>
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}

0800648a <_ZN6Serial7printlnEPc>:


void Serial::println(char *str) {
 800648a:	b5b0      	push	{r4, r5, r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
	char char_array[len + 1];
	for(int i = 0; i < len; i++) {
		char_array[i] = str[i];
	}
	char_array[len] = '\n';
	HAL_UART_Transmit(_uart, (uint8_t*)char_array, ++len, 10);
 8006494:	466b      	mov	r3, sp
 8006496:	461d      	mov	r5, r3
	int len = strlen(str);
 8006498:	6838      	ldr	r0, [r7, #0]
 800649a:	f7f9 fe59 	bl	8000150 <strlen>
 800649e:	4603      	mov	r3, r0
 80064a0:	613b      	str	r3, [r7, #16]
	char char_array[len + 1];
 80064a2:	6938      	ldr	r0, [r7, #16]
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	4603      	mov	r3, r0
 80064a8:	3301      	adds	r3, #1
 80064aa:	4619      	mov	r1, r3
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	f04f 0400 	mov.w	r4, #0
 80064b8:	00d4      	lsls	r4, r2, #3
 80064ba:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80064be:	00cb      	lsls	r3, r1, #3
 80064c0:	4603      	mov	r3, r0
 80064c2:	3301      	adds	r3, #1
 80064c4:	4619      	mov	r1, r3
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	f04f 0400 	mov.w	r4, #0
 80064d2:	00d4      	lsls	r4, r2, #3
 80064d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80064d8:	00cb      	lsls	r3, r1, #3
 80064da:	4603      	mov	r3, r0
 80064dc:	3301      	adds	r3, #1
 80064de:	3307      	adds	r3, #7
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	ebad 0d03 	sub.w	sp, sp, r3
 80064e8:	466b      	mov	r3, sp
 80064ea:	3300      	adds	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < len; i++) {
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	da0c      	bge.n	8006514 <_ZN6Serial7printlnEPc+0x8a>
		char_array[i] = str[i];
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	4413      	add	r3, r2
 8006500:	7819      	ldrb	r1, [r3, #0]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	460a      	mov	r2, r1
 800650a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++) {
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	3301      	adds	r3, #1
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	e7ee      	b.n	80064f2 <_ZN6Serial7printlnEPc+0x68>
	char_array[len] = '\n';
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4413      	add	r3, r2
 800651a:	220a      	movs	r2, #10
 800651c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(_uart, (uint8_t*)char_array, ++len, 10);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	b29a      	uxth	r2, r3
 800652e:	230a      	movs	r3, #10
 8006530:	f7fe fb31 	bl	8004b96 <HAL_UART_Transmit>
 8006534:	46ad      	mov	sp, r5
}
 8006536:	bf00      	nop
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006540 <_ZN6Serial5printEi>:
	sprintf(buffer, "%d", i);
	print(buffer);
	//	print(std::to_string(i));
}

void Serial::print(int i) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b092      	sub	sp, #72	; 0x48
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	char buffer[64];
	sprintf(buffer, "%d", i);
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4906      	ldr	r1, [pc, #24]	; (800656c <_ZN6Serial5printEi+0x2c>)
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fc2a 	bl	8007dac <siprintf>
	print(buffer);
 8006558:	f107 0308 	add.w	r3, r7, #8
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff ff7e 	bl	8006460 <_ZN6Serial5printEPc>
	//	print(std::to_string(i));
}
 8006564:	bf00      	nop
 8006566:	3748      	adds	r7, #72	; 0x48
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	0800af4c 	.word	0x0800af4c

08006570 <powf>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	b08d      	sub	sp, #52	; 0x34
 8006576:	4605      	mov	r5, r0
 8006578:	460c      	mov	r4, r1
 800657a:	f000 f959 	bl	8006830 <__ieee754_powf>
 800657e:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800682c <powf+0x2bc>
 8006582:	4606      	mov	r6, r0
 8006584:	f998 9000 	ldrsb.w	r9, [r8]
 8006588:	4647      	mov	r7, r8
 800658a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800658e:	d060      	beq.n	8006652 <powf+0xe2>
 8006590:	4621      	mov	r1, r4
 8006592:	4620      	mov	r0, r4
 8006594:	f7fa fdbc 	bl	8001110 <__aeabi_fcmpun>
 8006598:	4683      	mov	fp, r0
 800659a:	2800      	cmp	r0, #0
 800659c:	d159      	bne.n	8006652 <powf+0xe2>
 800659e:	4629      	mov	r1, r5
 80065a0:	4628      	mov	r0, r5
 80065a2:	f7fa fdb5 	bl	8001110 <__aeabi_fcmpun>
 80065a6:	2100      	movs	r1, #0
 80065a8:	4682      	mov	sl, r0
 80065aa:	b300      	cbz	r0, 80065ee <powf+0x7e>
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7fa fd7d 	bl	80010ac <__aeabi_fcmpeq>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d04d      	beq.n	8006652 <powf+0xe2>
 80065b6:	2301      	movs	r3, #1
 80065b8:	9302      	str	r3, [sp, #8]
 80065ba:	4b96      	ldr	r3, [pc, #600]	; (8006814 <powf+0x2a4>)
 80065bc:	4628      	mov	r0, r5
 80065be:	9303      	str	r3, [sp, #12]
 80065c0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80065c4:	f7f9 ff30 	bl	8000428 <__aeabi_f2d>
 80065c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7f9 ff2b 	bl	8000428 <__aeabi_f2d>
 80065d2:	2200      	movs	r2, #0
 80065d4:	4b90      	ldr	r3, [pc, #576]	; (8006818 <powf+0x2a8>)
 80065d6:	f1b9 0f02 	cmp.w	r9, #2
 80065da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065e2:	d031      	beq.n	8006648 <powf+0xd8>
 80065e4:	a802      	add	r0, sp, #8
 80065e6:	f000 fcc2 	bl	8006f6e <matherr>
 80065ea:	bb38      	cbnz	r0, 800663c <powf+0xcc>
 80065ec:	e05d      	b.n	80066aa <powf+0x13a>
 80065ee:	4628      	mov	r0, r5
 80065f0:	f7fa fd5c 	bl	80010ac <__aeabi_fcmpeq>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d05d      	beq.n	80066b4 <powf+0x144>
 80065f8:	2100      	movs	r1, #0
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7fa fd56 	bl	80010ac <__aeabi_fcmpeq>
 8006600:	4607      	mov	r7, r0
 8006602:	2800      	cmp	r0, #0
 8006604:	d029      	beq.n	800665a <powf+0xea>
 8006606:	2301      	movs	r3, #1
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	4b82      	ldr	r3, [pc, #520]	; (8006814 <powf+0x2a4>)
 800660c:	4628      	mov	r0, r5
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006614:	f7f9 ff08 	bl	8000428 <__aeabi_f2d>
 8006618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800661c:	4620      	mov	r0, r4
 800661e:	f7f9 ff03 	bl	8000428 <__aeabi_f2d>
 8006622:	2200      	movs	r2, #0
 8006624:	2300      	movs	r3, #0
 8006626:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800662a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800662e:	f1b9 0f00 	cmp.w	r9, #0
 8006632:	d0d7      	beq.n	80065e4 <powf+0x74>
 8006634:	2200      	movs	r2, #0
 8006636:	4b78      	ldr	r3, [pc, #480]	; (8006818 <powf+0x2a8>)
 8006638:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800663c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663e:	b11b      	cbz	r3, 8006648 <powf+0xd8>
 8006640:	f000 fd48 	bl	80070d4 <__errno>
 8006644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006646:	6003      	str	r3, [r0, #0]
 8006648:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800664c:	f7fa fa3c 	bl	8000ac8 <__aeabi_d2f>
 8006650:	4606      	mov	r6, r0
 8006652:	4630      	mov	r0, r6
 8006654:	b00d      	add	sp, #52	; 0x34
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665a:	4620      	mov	r0, r4
 800665c:	f000 fc8c 	bl	8006f78 <finitef>
 8006660:	2800      	cmp	r0, #0
 8006662:	d0f6      	beq.n	8006652 <powf+0xe2>
 8006664:	2100      	movs	r1, #0
 8006666:	4620      	mov	r0, r4
 8006668:	f7fa fd2a 	bl	80010c0 <__aeabi_fcmplt>
 800666c:	2800      	cmp	r0, #0
 800666e:	d0f0      	beq.n	8006652 <powf+0xe2>
 8006670:	2301      	movs	r3, #1
 8006672:	9302      	str	r3, [sp, #8]
 8006674:	4b67      	ldr	r3, [pc, #412]	; (8006814 <powf+0x2a4>)
 8006676:	4628      	mov	r0, r5
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	970a      	str	r7, [sp, #40]	; 0x28
 800667c:	f7f9 fed4 	bl	8000428 <__aeabi_f2d>
 8006680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006684:	4620      	mov	r0, r4
 8006686:	f7f9 fecf 	bl	8000428 <__aeabi_f2d>
 800668a:	f998 3000 	ldrsb.w	r3, [r8]
 800668e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006692:	b923      	cbnz	r3, 800669e <powf+0x12e>
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800669c:	e7a2      	b.n	80065e4 <powf+0x74>
 800669e:	2000      	movs	r0, #0
 80066a0:	495e      	ldr	r1, [pc, #376]	; (800681c <powf+0x2ac>)
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066a8:	d19c      	bne.n	80065e4 <powf+0x74>
 80066aa:	f000 fd13 	bl	80070d4 <__errno>
 80066ae:	2321      	movs	r3, #33	; 0x21
 80066b0:	6003      	str	r3, [r0, #0]
 80066b2:	e7c3      	b.n	800663c <powf+0xcc>
 80066b4:	4630      	mov	r0, r6
 80066b6:	f000 fc5f 	bl	8006f78 <finitef>
 80066ba:	4681      	mov	r9, r0
 80066bc:	2800      	cmp	r0, #0
 80066be:	d17b      	bne.n	80067b8 <powf+0x248>
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 fc59 	bl	8006f78 <finitef>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d076      	beq.n	80067b8 <powf+0x248>
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fc54 	bl	8006f78 <finitef>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d071      	beq.n	80067b8 <powf+0x248>
 80066d4:	4628      	mov	r0, r5
 80066d6:	f7f9 fea7 	bl	8000428 <__aeabi_f2d>
 80066da:	4682      	mov	sl, r0
 80066dc:	4620      	mov	r0, r4
 80066de:	468b      	mov	fp, r1
 80066e0:	f7f9 fea2 	bl	8000428 <__aeabi_f2d>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4631      	mov	r1, r6
 80066ec:	e9cd 2300 	strd	r2, r3, [sp]
 80066f0:	f7fa fd0e 	bl	8001110 <__aeabi_fcmpun>
 80066f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066f8:	f998 8000 	ldrsb.w	r8, [r8]
 80066fc:	4945      	ldr	r1, [pc, #276]	; (8006814 <powf+0x2a4>)
 80066fe:	b1b0      	cbz	r0, 800672e <powf+0x1be>
 8006700:	2001      	movs	r0, #1
 8006702:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800670e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006712:	f1b8 0f00 	cmp.w	r8, #0
 8006716:	d0bd      	beq.n	8006694 <powf+0x124>
 8006718:	2100      	movs	r1, #0
 800671a:	4608      	mov	r0, r1
 800671c:	f7fa fbe6 	bl	8000eec <__aeabi_fdiv>
 8006720:	f7f9 fe82 	bl	8000428 <__aeabi_f2d>
 8006724:	f1b8 0f02 	cmp.w	r8, #2
 8006728:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800672c:	e7bc      	b.n	80066a8 <powf+0x138>
 800672e:	2603      	movs	r6, #3
 8006730:	900a      	str	r0, [sp, #40]	; 0x28
 8006732:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8006736:	4620      	mov	r0, r4
 8006738:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800673c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006740:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006744:	f7fa fb1e 	bl	8000d84 <__aeabi_fmul>
 8006748:	4604      	mov	r4, r0
 800674a:	f1b8 0f00 	cmp.w	r8, #0
 800674e:	d11e      	bne.n	800678e <powf+0x21e>
 8006750:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006754:	4b32      	ldr	r3, [pc, #200]	; (8006820 <powf+0x2b0>)
 8006756:	2100      	movs	r1, #0
 8006758:	4628      	mov	r0, r5
 800675a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800675e:	f7fa fcaf 	bl	80010c0 <__aeabi_fcmplt>
 8006762:	2800      	cmp	r0, #0
 8006764:	d04e      	beq.n	8006804 <powf+0x294>
 8006766:	4620      	mov	r0, r4
 8006768:	f000 fc12 	bl	8006f90 <rintf>
 800676c:	4621      	mov	r1, r4
 800676e:	f7fa fc9d 	bl	80010ac <__aeabi_fcmpeq>
 8006772:	b920      	cbnz	r0, 800677e <powf+0x20e>
 8006774:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006778:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <powf+0x2b4>)
 800677a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800677e:	f997 3000 	ldrsb.w	r3, [r7]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d13e      	bne.n	8006804 <powf+0x294>
 8006786:	f000 fca5 	bl	80070d4 <__errno>
 800678a:	2322      	movs	r3, #34	; 0x22
 800678c:	e790      	b.n	80066b0 <powf+0x140>
 800678e:	2200      	movs	r2, #0
 8006790:	4b25      	ldr	r3, [pc, #148]	; (8006828 <powf+0x2b8>)
 8006792:	2100      	movs	r1, #0
 8006794:	4628      	mov	r0, r5
 8006796:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800679a:	f7fa fc91 	bl	80010c0 <__aeabi_fcmplt>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0ed      	beq.n	800677e <powf+0x20e>
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 fbf4 	bl	8006f90 <rintf>
 80067a8:	4621      	mov	r1, r4
 80067aa:	f7fa fc7f 	bl	80010ac <__aeabi_fcmpeq>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1e5      	bne.n	800677e <powf+0x20e>
 80067b2:	2200      	movs	r2, #0
 80067b4:	4b19      	ldr	r3, [pc, #100]	; (800681c <powf+0x2ac>)
 80067b6:	e7e0      	b.n	800677a <powf+0x20a>
 80067b8:	2100      	movs	r1, #0
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7fa fc76 	bl	80010ac <__aeabi_fcmpeq>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	f43f af46 	beq.w	8006652 <powf+0xe2>
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 fbd6 	bl	8006f78 <finitef>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	f43f af40 	beq.w	8006652 <powf+0xe2>
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fbd0 	bl	8006f78 <finitef>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f43f af3a 	beq.w	8006652 <powf+0xe2>
 80067de:	2304      	movs	r3, #4
 80067e0:	9302      	str	r3, [sp, #8]
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <powf+0x2a4>)
 80067e4:	4628      	mov	r0, r5
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	2300      	movs	r3, #0
 80067ea:	930a      	str	r3, [sp, #40]	; 0x28
 80067ec:	f7f9 fe1c 	bl	8000428 <__aeabi_f2d>
 80067f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7f9 fe17 	bl	8000428 <__aeabi_f2d>
 80067fa:	2200      	movs	r2, #0
 80067fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006800:	2300      	movs	r3, #0
 8006802:	e7ba      	b.n	800677a <powf+0x20a>
 8006804:	a802      	add	r0, sp, #8
 8006806:	f000 fbb2 	bl	8006f6e <matherr>
 800680a:	2800      	cmp	r0, #0
 800680c:	f47f af16 	bne.w	800663c <powf+0xcc>
 8006810:	e7b9      	b.n	8006786 <powf+0x216>
 8006812:	bf00      	nop
 8006814:	0800af68 	.word	0x0800af68
 8006818:	3ff00000 	.word	0x3ff00000
 800681c:	fff00000 	.word	0xfff00000
 8006820:	47efffff 	.word	0x47efffff
 8006824:	c7efffff 	.word	0xc7efffff
 8006828:	7ff00000 	.word	0x7ff00000
 800682c:	200000a8 	.word	0x200000a8

08006830 <__ieee754_powf>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	b087      	sub	sp, #28
 8006836:	9101      	str	r1, [sp, #4]
 8006838:	9c01      	ldr	r4, [sp, #4]
 800683a:	4681      	mov	r9, r0
 800683c:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 8006840:	f000 8324 	beq.w	8006e8c <__ieee754_powf+0x65c>
 8006844:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006848:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800684c:	4680      	mov	r8, r0
 800684e:	dc06      	bgt.n	800685e <__ieee754_powf+0x2e>
 8006850:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006854:	dd09      	ble.n	800686a <__ieee754_powf+0x3a>
 8006856:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800685a:	f000 8317 	beq.w	8006e8c <__ieee754_powf+0x65c>
 800685e:	4885      	ldr	r0, [pc, #532]	; (8006a74 <__ieee754_powf+0x244>)
 8006860:	b007      	add	sp, #28
 8006862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006866:	f000 bb8f 	b.w	8006f88 <nanf>
 800686a:	2800      	cmp	r0, #0
 800686c:	da1d      	bge.n	80068aa <__ieee754_powf+0x7a>
 800686e:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006872:	da2b      	bge.n	80068cc <__ieee754_powf+0x9c>
 8006874:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006878:	db30      	blt.n	80068dc <__ieee754_powf+0xac>
 800687a:	15fb      	asrs	r3, r7, #23
 800687c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006880:	fa47 f503 	asr.w	r5, r7, r3
 8006884:	fa05 f303 	lsl.w	r3, r5, r3
 8006888:	42bb      	cmp	r3, r7
 800688a:	d127      	bne.n	80068dc <__ieee754_powf+0xac>
 800688c:	f005 0501 	and.w	r5, r5, #1
 8006890:	f1c5 0502 	rsb	r5, r5, #2
 8006894:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006898:	d122      	bne.n	80068e0 <__ieee754_powf+0xb0>
 800689a:	2c00      	cmp	r4, #0
 800689c:	4649      	mov	r1, r9
 800689e:	da11      	bge.n	80068c4 <__ieee754_powf+0x94>
 80068a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80068a4:	f7fa fb22 	bl	8000eec <__aeabi_fdiv>
 80068a8:	e021      	b.n	80068ee <__ieee754_powf+0xbe>
 80068aa:	2500      	movs	r5, #0
 80068ac:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80068b0:	d1f0      	bne.n	8006894 <__ieee754_powf+0x64>
 80068b2:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80068b6:	f000 82e9 	beq.w	8006e8c <__ieee754_powf+0x65c>
 80068ba:	dd09      	ble.n	80068d0 <__ieee754_powf+0xa0>
 80068bc:	2c00      	cmp	r4, #0
 80068be:	f280 82e8 	bge.w	8006e92 <__ieee754_powf+0x662>
 80068c2:	2100      	movs	r1, #0
 80068c4:	4608      	mov	r0, r1
 80068c6:	b007      	add	sp, #28
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	2502      	movs	r5, #2
 80068ce:	e7ed      	b.n	80068ac <__ieee754_powf+0x7c>
 80068d0:	2c00      	cmp	r4, #0
 80068d2:	daf6      	bge.n	80068c2 <__ieee754_powf+0x92>
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80068da:	e7f3      	b.n	80068c4 <__ieee754_powf+0x94>
 80068dc:	2500      	movs	r5, #0
 80068de:	e7d9      	b.n	8006894 <__ieee754_powf+0x64>
 80068e0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80068e4:	d105      	bne.n	80068f2 <__ieee754_powf+0xc2>
 80068e6:	4649      	mov	r1, r9
 80068e8:	4608      	mov	r0, r1
 80068ea:	f7fa fa4b 	bl	8000d84 <__aeabi_fmul>
 80068ee:	4601      	mov	r1, r0
 80068f0:	e7e8      	b.n	80068c4 <__ieee754_powf+0x94>
 80068f2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80068f6:	4648      	mov	r0, r9
 80068f8:	d107      	bne.n	800690a <__ieee754_powf+0xda>
 80068fa:	f1b8 0f00 	cmp.w	r8, #0
 80068fe:	db04      	blt.n	800690a <__ieee754_powf+0xda>
 8006900:	b007      	add	sp, #28
 8006902:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f000 badf 	b.w	8006ec8 <__ieee754_sqrtf>
 800690a:	f000 fb32 	bl	8006f72 <fabsf>
 800690e:	4601      	mov	r1, r0
 8006910:	b126      	cbz	r6, 800691c <__ieee754_powf+0xec>
 8006912:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006916:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800691a:	d118      	bne.n	800694e <__ieee754_powf+0x11e>
 800691c:	2c00      	cmp	r4, #0
 800691e:	da04      	bge.n	800692a <__ieee754_powf+0xfa>
 8006920:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006924:	f7fa fae2 	bl	8000eec <__aeabi_fdiv>
 8006928:	4601      	mov	r1, r0
 800692a:	f1b8 0f00 	cmp.w	r8, #0
 800692e:	dac9      	bge.n	80068c4 <__ieee754_powf+0x94>
 8006930:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8006934:	ea50 0305 	orrs.w	r3, r0, r5
 8006938:	d104      	bne.n	8006944 <__ieee754_powf+0x114>
 800693a:	4608      	mov	r0, r1
 800693c:	f7fa f918 	bl	8000b70 <__aeabi_fsub>
 8006940:	4601      	mov	r1, r0
 8006942:	e7af      	b.n	80068a4 <__ieee754_powf+0x74>
 8006944:	2d01      	cmp	r5, #1
 8006946:	d1bd      	bne.n	80068c4 <__ieee754_powf+0x94>
 8006948:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800694c:	e7ba      	b.n	80068c4 <__ieee754_powf+0x94>
 800694e:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8006952:	f108 33ff 	add.w	r3, r8, #4294967295
 8006956:	9303      	str	r3, [sp, #12]
 8006958:	432b      	orrs	r3, r5
 800695a:	d101      	bne.n	8006960 <__ieee754_powf+0x130>
 800695c:	4649      	mov	r1, r9
 800695e:	e7ec      	b.n	800693a <__ieee754_powf+0x10a>
 8006960:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006964:	f340 8098 	ble.w	8006a98 <__ieee754_powf+0x268>
 8006968:	4b43      	ldr	r3, [pc, #268]	; (8006a78 <__ieee754_powf+0x248>)
 800696a:	429e      	cmp	r6, r3
 800696c:	dc03      	bgt.n	8006976 <__ieee754_powf+0x146>
 800696e:	2c00      	cmp	r4, #0
 8006970:	daa7      	bge.n	80068c2 <__ieee754_powf+0x92>
 8006972:	4942      	ldr	r1, [pc, #264]	; (8006a7c <__ieee754_powf+0x24c>)
 8006974:	e7b8      	b.n	80068e8 <__ieee754_powf+0xb8>
 8006976:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <__ieee754_powf+0x250>)
 8006978:	429e      	cmp	r6, r3
 800697a:	dd02      	ble.n	8006982 <__ieee754_powf+0x152>
 800697c:	2c00      	cmp	r4, #0
 800697e:	dcf8      	bgt.n	8006972 <__ieee754_powf+0x142>
 8006980:	e79f      	b.n	80068c2 <__ieee754_powf+0x92>
 8006982:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006986:	f7fa f8f3 	bl	8000b70 <__aeabi_fsub>
 800698a:	493e      	ldr	r1, [pc, #248]	; (8006a84 <__ieee754_powf+0x254>)
 800698c:	4606      	mov	r6, r0
 800698e:	f7fa f9f9 	bl	8000d84 <__aeabi_fmul>
 8006992:	493d      	ldr	r1, [pc, #244]	; (8006a88 <__ieee754_powf+0x258>)
 8006994:	4607      	mov	r7, r0
 8006996:	4630      	mov	r0, r6
 8006998:	f7fa f9f4 	bl	8000d84 <__aeabi_fmul>
 800699c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80069a0:	4680      	mov	r8, r0
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7fa f9ee 	bl	8000d84 <__aeabi_fmul>
 80069a8:	4601      	mov	r1, r0
 80069aa:	4838      	ldr	r0, [pc, #224]	; (8006a8c <__ieee754_powf+0x25c>)
 80069ac:	f7fa f8e0 	bl	8000b70 <__aeabi_fsub>
 80069b0:	4631      	mov	r1, r6
 80069b2:	f7fa f9e7 	bl	8000d84 <__aeabi_fmul>
 80069b6:	4601      	mov	r1, r0
 80069b8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80069bc:	f7fa f8d8 	bl	8000b70 <__aeabi_fsub>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4681      	mov	r9, r0
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7fa f9dd 	bl	8000d84 <__aeabi_fmul>
 80069ca:	4601      	mov	r1, r0
 80069cc:	4648      	mov	r0, r9
 80069ce:	f7fa f9d9 	bl	8000d84 <__aeabi_fmul>
 80069d2:	492f      	ldr	r1, [pc, #188]	; (8006a90 <__ieee754_powf+0x260>)
 80069d4:	f7fa f9d6 	bl	8000d84 <__aeabi_fmul>
 80069d8:	4601      	mov	r1, r0
 80069da:	4640      	mov	r0, r8
 80069dc:	f7fa f8c8 	bl	8000b70 <__aeabi_fsub>
 80069e0:	4601      	mov	r1, r0
 80069e2:	4606      	mov	r6, r0
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7fa f8c5 	bl	8000b74 <__addsf3>
 80069ea:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 80069ee:	f02a 0a0f 	bic.w	sl, sl, #15
 80069f2:	4639      	mov	r1, r7
 80069f4:	4650      	mov	r0, sl
 80069f6:	f7fa f8bb 	bl	8000b70 <__aeabi_fsub>
 80069fa:	4601      	mov	r1, r0
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7fa f8b7 	bl	8000b70 <__aeabi_fsub>
 8006a02:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	3d01      	subs	r5, #1
 8006a0a:	f024 040f 	bic.w	r4, r4, #15
 8006a0e:	432b      	orrs	r3, r5
 8006a10:	4606      	mov	r6, r0
 8006a12:	4621      	mov	r1, r4
 8006a14:	9801      	ldr	r0, [sp, #4]
 8006a16:	bf0c      	ite	eq
 8006a18:	4d1e      	ldreq	r5, [pc, #120]	; (8006a94 <__ieee754_powf+0x264>)
 8006a1a:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8006a1e:	f7fa f8a7 	bl	8000b70 <__aeabi_fsub>
 8006a22:	4651      	mov	r1, sl
 8006a24:	f7fa f9ae 	bl	8000d84 <__aeabi_fmul>
 8006a28:	9901      	ldr	r1, [sp, #4]
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7fa f9a9 	bl	8000d84 <__aeabi_fmul>
 8006a32:	4601      	mov	r1, r0
 8006a34:	4638      	mov	r0, r7
 8006a36:	f7fa f89d 	bl	8000b74 <__addsf3>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	4650      	mov	r0, sl
 8006a40:	f7fa f9a0 	bl	8000d84 <__aeabi_fmul>
 8006a44:	4601      	mov	r1, r0
 8006a46:	4607      	mov	r7, r0
 8006a48:	4681      	mov	r9, r0
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7fa f892 	bl	8000b74 <__addsf3>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	4682      	mov	sl, r0
 8006a54:	4680      	mov	r8, r0
 8006a56:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006a5a:	f340 81fb 	ble.w	8006e54 <__ieee754_powf+0x624>
 8006a5e:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8006a62:	f340 8149 	ble.w	8006cf8 <__ieee754_powf+0x4c8>
 8006a66:	4905      	ldr	r1, [pc, #20]	; (8006a7c <__ieee754_powf+0x24c>)
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f7fa f98b 	bl	8000d84 <__aeabi_fmul>
 8006a6e:	4903      	ldr	r1, [pc, #12]	; (8006a7c <__ieee754_powf+0x24c>)
 8006a70:	e73b      	b.n	80068ea <__ieee754_powf+0xba>
 8006a72:	bf00      	nop
 8006a74:	0800b139 	.word	0x0800b139
 8006a78:	3f7ffff7 	.word	0x3f7ffff7
 8006a7c:	7149f2ca 	.word	0x7149f2ca
 8006a80:	3f800007 	.word	0x3f800007
 8006a84:	3fb8aa00 	.word	0x3fb8aa00
 8006a88:	36eca570 	.word	0x36eca570
 8006a8c:	3eaaaaab 	.word	0x3eaaaaab
 8006a90:	3fb8aa3b 	.word	0x3fb8aa3b
 8006a94:	bf800000 	.word	0xbf800000
 8006a98:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8006a9c:	f280 810a 	bge.w	8006cb4 <__ieee754_powf+0x484>
 8006aa0:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8006aa4:	f7fa f96e 	bl	8000d84 <__aeabi_fmul>
 8006aa8:	f06f 0217 	mvn.w	r2, #23
 8006aac:	4606      	mov	r6, r0
 8006aae:	15f3      	asrs	r3, r6, #23
 8006ab0:	3b7f      	subs	r3, #127	; 0x7f
 8006ab2:	441a      	add	r2, r3
 8006ab4:	4b81      	ldr	r3, [pc, #516]	; (8006cbc <__ieee754_powf+0x48c>)
 8006ab6:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8006aba:	4298      	cmp	r0, r3
 8006abc:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8006ac0:	dd06      	ble.n	8006ad0 <__ieee754_powf+0x2a0>
 8006ac2:	4b7f      	ldr	r3, [pc, #508]	; (8006cc0 <__ieee754_powf+0x490>)
 8006ac4:	4298      	cmp	r0, r3
 8006ac6:	f340 80f7 	ble.w	8006cb8 <__ieee754_powf+0x488>
 8006aca:	3201      	adds	r2, #1
 8006acc:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8006ad0:	2700      	movs	r7, #0
 8006ad2:	4b7c      	ldr	r3, [pc, #496]	; (8006cc4 <__ieee754_powf+0x494>)
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8006ada:	9205      	str	r2, [sp, #20]
 8006adc:	4619      	mov	r1, r3
 8006ade:	9302      	str	r3, [sp, #8]
 8006ae0:	f7fa f846 	bl	8000b70 <__aeabi_fsub>
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4683      	mov	fp, r0
 8006ae8:	9802      	ldr	r0, [sp, #8]
 8006aea:	f7fa f843 	bl	8000b74 <__addsf3>
 8006aee:	4601      	mov	r1, r0
 8006af0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006af4:	f7fa f9fa 	bl	8000eec <__aeabi_fdiv>
 8006af8:	4601      	mov	r1, r0
 8006afa:	9004      	str	r0, [sp, #16]
 8006afc:	4658      	mov	r0, fp
 8006afe:	f7fa f941 	bl	8000d84 <__aeabi_fmul>
 8006b02:	46b2      	mov	sl, r6
 8006b04:	1076      	asrs	r6, r6, #1
 8006b06:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8006b0a:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8006b0e:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8006b12:	f028 080f 	bic.w	r8, r8, #15
 8006b16:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 8006b1a:	4681      	mov	r9, r0
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4640      	mov	r0, r8
 8006b20:	f7fa f930 	bl	8000d84 <__aeabi_fmul>
 8006b24:	4601      	mov	r1, r0
 8006b26:	4658      	mov	r0, fp
 8006b28:	f7fa f822 	bl	8000b70 <__aeabi_fsub>
 8006b2c:	9902      	ldr	r1, [sp, #8]
 8006b2e:	4683      	mov	fp, r0
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7fa f81d 	bl	8000b70 <__aeabi_fsub>
 8006b36:	4601      	mov	r1, r0
 8006b38:	4650      	mov	r0, sl
 8006b3a:	f7fa f819 	bl	8000b70 <__aeabi_fsub>
 8006b3e:	4641      	mov	r1, r8
 8006b40:	f7fa f920 	bl	8000d84 <__aeabi_fmul>
 8006b44:	4601      	mov	r1, r0
 8006b46:	4658      	mov	r0, fp
 8006b48:	f7fa f812 	bl	8000b70 <__aeabi_fsub>
 8006b4c:	9b04      	ldr	r3, [sp, #16]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f7fa f918 	bl	8000d84 <__aeabi_fmul>
 8006b54:	4649      	mov	r1, r9
 8006b56:	4683      	mov	fp, r0
 8006b58:	4648      	mov	r0, r9
 8006b5a:	f7fa f913 	bl	8000d84 <__aeabi_fmul>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	4959      	ldr	r1, [pc, #356]	; (8006cc8 <__ieee754_powf+0x498>)
 8006b62:	f7fa f90f 	bl	8000d84 <__aeabi_fmul>
 8006b66:	4959      	ldr	r1, [pc, #356]	; (8006ccc <__ieee754_powf+0x49c>)
 8006b68:	f7fa f804 	bl	8000b74 <__addsf3>
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	f7fa f909 	bl	8000d84 <__aeabi_fmul>
 8006b72:	4957      	ldr	r1, [pc, #348]	; (8006cd0 <__ieee754_powf+0x4a0>)
 8006b74:	f7f9 fffe 	bl	8000b74 <__addsf3>
 8006b78:	4631      	mov	r1, r6
 8006b7a:	f7fa f903 	bl	8000d84 <__aeabi_fmul>
 8006b7e:	4955      	ldr	r1, [pc, #340]	; (8006cd4 <__ieee754_powf+0x4a4>)
 8006b80:	f7f9 fff8 	bl	8000b74 <__addsf3>
 8006b84:	4631      	mov	r1, r6
 8006b86:	f7fa f8fd 	bl	8000d84 <__aeabi_fmul>
 8006b8a:	4953      	ldr	r1, [pc, #332]	; (8006cd8 <__ieee754_powf+0x4a8>)
 8006b8c:	f7f9 fff2 	bl	8000b74 <__addsf3>
 8006b90:	4631      	mov	r1, r6
 8006b92:	f7fa f8f7 	bl	8000d84 <__aeabi_fmul>
 8006b96:	4951      	ldr	r1, [pc, #324]	; (8006cdc <__ieee754_powf+0x4ac>)
 8006b98:	f7f9 ffec 	bl	8000b74 <__addsf3>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7fa f8ef 	bl	8000d84 <__aeabi_fmul>
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	4650      	mov	r0, sl
 8006baa:	f7fa f8eb 	bl	8000d84 <__aeabi_fmul>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f7f9 ffde 	bl	8000b74 <__addsf3>
 8006bb8:	4659      	mov	r1, fp
 8006bba:	f7fa f8e3 	bl	8000d84 <__aeabi_fmul>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	f7f9 ffd8 	bl	8000b74 <__addsf3>
 8006bc4:	4641      	mov	r1, r8
 8006bc6:	4682      	mov	sl, r0
 8006bc8:	4640      	mov	r0, r8
 8006bca:	f7fa f8db 	bl	8000d84 <__aeabi_fmul>
 8006bce:	4944      	ldr	r1, [pc, #272]	; (8006ce0 <__ieee754_powf+0x4b0>)
 8006bd0:	9002      	str	r0, [sp, #8]
 8006bd2:	f7f9 ffcf 	bl	8000b74 <__addsf3>
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	f7f9 ffcc 	bl	8000b74 <__addsf3>
 8006bdc:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8006be0:	f026 060f 	bic.w	r6, r6, #15
 8006be4:	4631      	mov	r1, r6
 8006be6:	4640      	mov	r0, r8
 8006be8:	f7fa f8cc 	bl	8000d84 <__aeabi_fmul>
 8006bec:	493c      	ldr	r1, [pc, #240]	; (8006ce0 <__ieee754_powf+0x4b0>)
 8006bee:	4680      	mov	r8, r0
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7f9 ffbd 	bl	8000b70 <__aeabi_fsub>
 8006bf6:	9b02      	ldr	r3, [sp, #8]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f7f9 ffb9 	bl	8000b70 <__aeabi_fsub>
 8006bfe:	4601      	mov	r1, r0
 8006c00:	4650      	mov	r0, sl
 8006c02:	f7f9 ffb5 	bl	8000b70 <__aeabi_fsub>
 8006c06:	4649      	mov	r1, r9
 8006c08:	f7fa f8bc 	bl	8000d84 <__aeabi_fmul>
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	4681      	mov	r9, r0
 8006c10:	4630      	mov	r0, r6
 8006c12:	f7fa f8b7 	bl	8000d84 <__aeabi_fmul>
 8006c16:	4601      	mov	r1, r0
 8006c18:	4648      	mov	r0, r9
 8006c1a:	f7f9 ffab 	bl	8000b74 <__addsf3>
 8006c1e:	4682      	mov	sl, r0
 8006c20:	4601      	mov	r1, r0
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7f9 ffa6 	bl	8000b74 <__addsf3>
 8006c28:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006c2c:	f029 090f 	bic.w	r9, r9, #15
 8006c30:	492c      	ldr	r1, [pc, #176]	; (8006ce4 <__ieee754_powf+0x4b4>)
 8006c32:	4648      	mov	r0, r9
 8006c34:	f7fa f8a6 	bl	8000d84 <__aeabi_fmul>
 8006c38:	4641      	mov	r1, r8
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f7f9 ff97 	bl	8000b70 <__aeabi_fsub>
 8006c42:	4601      	mov	r1, r0
 8006c44:	4650      	mov	r0, sl
 8006c46:	f7f9 ff93 	bl	8000b70 <__aeabi_fsub>
 8006c4a:	4927      	ldr	r1, [pc, #156]	; (8006ce8 <__ieee754_powf+0x4b8>)
 8006c4c:	f7fa f89a 	bl	8000d84 <__aeabi_fmul>
 8006c50:	4926      	ldr	r1, [pc, #152]	; (8006cec <__ieee754_powf+0x4bc>)
 8006c52:	4680      	mov	r8, r0
 8006c54:	4648      	mov	r0, r9
 8006c56:	f7fa f895 	bl	8000d84 <__aeabi_fmul>
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	f7f9 ff89 	bl	8000b74 <__addsf3>
 8006c62:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <__ieee754_powf+0x4c0>)
 8006c64:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8006c68:	f7f9 ff84 	bl	8000b74 <__addsf3>
 8006c6c:	9a05      	ldr	r2, [sp, #20]
 8006c6e:	4680      	mov	r8, r0
 8006c70:	4610      	mov	r0, r2
 8006c72:	f7fa f833 	bl	8000cdc <__aeabi_i2f>
 8006c76:	4681      	mov	r9, r0
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <__ieee754_powf+0x4c4>)
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7f9 ff77 	bl	8000b74 <__addsf3>
 8006c86:	4639      	mov	r1, r7
 8006c88:	f7f9 ff74 	bl	8000b74 <__addsf3>
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	f7f9 ff71 	bl	8000b74 <__addsf3>
 8006c92:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8006c96:	f02a 0a0f 	bic.w	sl, sl, #15
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	f7f9 ff67 	bl	8000b70 <__aeabi_fsub>
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	f7f9 ff64 	bl	8000b70 <__aeabi_fsub>
 8006ca8:	4631      	mov	r1, r6
 8006caa:	f7f9 ff61 	bl	8000b70 <__aeabi_fsub>
 8006cae:	4601      	mov	r1, r0
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	e6a4      	b.n	80069fe <__ieee754_powf+0x1ce>
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	e6fa      	b.n	8006aae <__ieee754_powf+0x27e>
 8006cb8:	2701      	movs	r7, #1
 8006cba:	e70a      	b.n	8006ad2 <__ieee754_powf+0x2a2>
 8006cbc:	001cc471 	.word	0x001cc471
 8006cc0:	005db3d6 	.word	0x005db3d6
 8006cc4:	0800af70 	.word	0x0800af70
 8006cc8:	3e53f142 	.word	0x3e53f142
 8006ccc:	3e6c3255 	.word	0x3e6c3255
 8006cd0:	3e8ba305 	.word	0x3e8ba305
 8006cd4:	3eaaaaab 	.word	0x3eaaaaab
 8006cd8:	3edb6db7 	.word	0x3edb6db7
 8006cdc:	3f19999a 	.word	0x3f19999a
 8006ce0:	40400000 	.word	0x40400000
 8006ce4:	3f763800 	.word	0x3f763800
 8006ce8:	3f76384f 	.word	0x3f76384f
 8006cec:	369dc3a0 	.word	0x369dc3a0
 8006cf0:	0800af80 	.word	0x0800af80
 8006cf4:	0800af78 	.word	0x0800af78
 8006cf8:	f040 80c0 	bne.w	8006e7c <__ieee754_powf+0x64c>
 8006cfc:	4966      	ldr	r1, [pc, #408]	; (8006e98 <__ieee754_powf+0x668>)
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f7f9 ff38 	bl	8000b74 <__addsf3>
 8006d04:	4639      	mov	r1, r7
 8006d06:	4681      	mov	r9, r0
 8006d08:	4650      	mov	r0, sl
 8006d0a:	f7f9 ff31 	bl	8000b70 <__aeabi_fsub>
 8006d0e:	4601      	mov	r1, r0
 8006d10:	4648      	mov	r0, r9
 8006d12:	f7fa f9f3 	bl	80010fc <__aeabi_fcmpgt>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f47f aea5 	bne.w	8006a66 <__ieee754_powf+0x236>
 8006d1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d20:	15e4      	asrs	r4, r4, #23
 8006d22:	3c7e      	subs	r4, #126	; 0x7e
 8006d24:	4123      	asrs	r3, r4
 8006d26:	4443      	add	r3, r8
 8006d28:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006d2c:	495b      	ldr	r1, [pc, #364]	; (8006e9c <__ieee754_powf+0x66c>)
 8006d2e:	3a7f      	subs	r2, #127	; 0x7f
 8006d30:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8006d34:	4111      	asrs	r1, r2
 8006d36:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8006d3a:	f1c2 0217 	rsb	r2, r2, #23
 8006d3e:	4114      	asrs	r4, r2
 8006d40:	f1b8 0f00 	cmp.w	r8, #0
 8006d44:	ea23 0101 	bic.w	r1, r3, r1
 8006d48:	4638      	mov	r0, r7
 8006d4a:	bfb8      	it	lt
 8006d4c:	4264      	neglt	r4, r4
 8006d4e:	f7f9 ff0f 	bl	8000b70 <__aeabi_fsub>
 8006d52:	4681      	mov	r9, r0
 8006d54:	4631      	mov	r1, r6
 8006d56:	4648      	mov	r0, r9
 8006d58:	f7f9 ff0c 	bl	8000b74 <__addsf3>
 8006d5c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8006d60:	f027 070f 	bic.w	r7, r7, #15
 8006d64:	494e      	ldr	r1, [pc, #312]	; (8006ea0 <__ieee754_powf+0x670>)
 8006d66:	4638      	mov	r0, r7
 8006d68:	f7fa f80c 	bl	8000d84 <__aeabi_fmul>
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	4680      	mov	r8, r0
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7f9 fefd 	bl	8000b70 <__aeabi_fsub>
 8006d76:	4601      	mov	r1, r0
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7f9 fef9 	bl	8000b70 <__aeabi_fsub>
 8006d7e:	4949      	ldr	r1, [pc, #292]	; (8006ea4 <__ieee754_powf+0x674>)
 8006d80:	f7fa f800 	bl	8000d84 <__aeabi_fmul>
 8006d84:	4948      	ldr	r1, [pc, #288]	; (8006ea8 <__ieee754_powf+0x678>)
 8006d86:	4606      	mov	r6, r0
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7f9 fffb 	bl	8000d84 <__aeabi_fmul>
 8006d8e:	4601      	mov	r1, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7f9 feef 	bl	8000b74 <__addsf3>
 8006d96:	4607      	mov	r7, r0
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	f7f9 feea 	bl	8000b74 <__addsf3>
 8006da0:	4641      	mov	r1, r8
 8006da2:	4606      	mov	r6, r0
 8006da4:	f7f9 fee4 	bl	8000b70 <__aeabi_fsub>
 8006da8:	4601      	mov	r1, r0
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7f9 fee0 	bl	8000b70 <__aeabi_fsub>
 8006db0:	4631      	mov	r1, r6
 8006db2:	4680      	mov	r8, r0
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7f9 ffe5 	bl	8000d84 <__aeabi_fmul>
 8006dba:	4607      	mov	r7, r0
 8006dbc:	493b      	ldr	r1, [pc, #236]	; (8006eac <__ieee754_powf+0x67c>)
 8006dbe:	f7f9 ffe1 	bl	8000d84 <__aeabi_fmul>
 8006dc2:	493b      	ldr	r1, [pc, #236]	; (8006eb0 <__ieee754_powf+0x680>)
 8006dc4:	f7f9 fed4 	bl	8000b70 <__aeabi_fsub>
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f7f9 ffdb 	bl	8000d84 <__aeabi_fmul>
 8006dce:	4939      	ldr	r1, [pc, #228]	; (8006eb4 <__ieee754_powf+0x684>)
 8006dd0:	f7f9 fed0 	bl	8000b74 <__addsf3>
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	f7f9 ffd5 	bl	8000d84 <__aeabi_fmul>
 8006dda:	4937      	ldr	r1, [pc, #220]	; (8006eb8 <__ieee754_powf+0x688>)
 8006ddc:	f7f9 fec8 	bl	8000b70 <__aeabi_fsub>
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 ffcf 	bl	8000d84 <__aeabi_fmul>
 8006de6:	4935      	ldr	r1, [pc, #212]	; (8006ebc <__ieee754_powf+0x68c>)
 8006de8:	f7f9 fec4 	bl	8000b74 <__addsf3>
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 ffc9 	bl	8000d84 <__aeabi_fmul>
 8006df2:	4601      	mov	r1, r0
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7f9 febb 	bl	8000b70 <__aeabi_fsub>
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7f9 ffc0 	bl	8000d84 <__aeabi_fmul>
 8006e04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e08:	4681      	mov	r9, r0
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f7f9 feb0 	bl	8000b70 <__aeabi_fsub>
 8006e10:	4601      	mov	r1, r0
 8006e12:	4648      	mov	r0, r9
 8006e14:	f7fa f86a 	bl	8000eec <__aeabi_fdiv>
 8006e18:	4641      	mov	r1, r8
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f7f9 ffb1 	bl	8000d84 <__aeabi_fmul>
 8006e22:	4641      	mov	r1, r8
 8006e24:	f7f9 fea6 	bl	8000b74 <__addsf3>
 8006e28:	4601      	mov	r1, r0
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f7f9 fea0 	bl	8000b70 <__aeabi_fsub>
 8006e30:	4631      	mov	r1, r6
 8006e32:	f7f9 fe9d 	bl	8000b70 <__aeabi_fsub>
 8006e36:	4601      	mov	r1, r0
 8006e38:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006e3c:	f7f9 fe98 	bl	8000b70 <__aeabi_fsub>
 8006e40:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006e44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e48:	da1e      	bge.n	8006e88 <__ieee754_powf+0x658>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	f000 f8f0 	bl	8007030 <scalbnf>
 8006e50:	4629      	mov	r1, r5
 8006e52:	e54a      	b.n	80068ea <__ieee754_powf+0xba>
 8006e54:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <__ieee754_powf+0x690>)
 8006e56:	429c      	cmp	r4, r3
 8006e58:	dd05      	ble.n	8006e66 <__ieee754_powf+0x636>
 8006e5a:	491a      	ldr	r1, [pc, #104]	; (8006ec4 <__ieee754_powf+0x694>)
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f7f9 ff91 	bl	8000d84 <__aeabi_fmul>
 8006e62:	4918      	ldr	r1, [pc, #96]	; (8006ec4 <__ieee754_powf+0x694>)
 8006e64:	e541      	b.n	80068ea <__ieee754_powf+0xba>
 8006e66:	d109      	bne.n	8006e7c <__ieee754_powf+0x64c>
 8006e68:	4639      	mov	r1, r7
 8006e6a:	f7f9 fe81 	bl	8000b70 <__aeabi_fsub>
 8006e6e:	4631      	mov	r1, r6
 8006e70:	f7fa f93a 	bl	80010e8 <__aeabi_fcmpge>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f43f af51 	beq.w	8006d1c <__ieee754_powf+0x4ec>
 8006e7a:	e7ee      	b.n	8006e5a <__ieee754_powf+0x62a>
 8006e7c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006e80:	f73f af4c 	bgt.w	8006d1c <__ieee754_powf+0x4ec>
 8006e84:	2400      	movs	r4, #0
 8006e86:	e765      	b.n	8006d54 <__ieee754_powf+0x524>
 8006e88:	4618      	mov	r0, r3
 8006e8a:	e7e1      	b.n	8006e50 <__ieee754_powf+0x620>
 8006e8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006e90:	e518      	b.n	80068c4 <__ieee754_powf+0x94>
 8006e92:	9901      	ldr	r1, [sp, #4]
 8006e94:	e516      	b.n	80068c4 <__ieee754_powf+0x94>
 8006e96:	bf00      	nop
 8006e98:	3338aa3c 	.word	0x3338aa3c
 8006e9c:	007fffff 	.word	0x007fffff
 8006ea0:	3f317200 	.word	0x3f317200
 8006ea4:	3f317218 	.word	0x3f317218
 8006ea8:	35bfbe8c 	.word	0x35bfbe8c
 8006eac:	3331bb4c 	.word	0x3331bb4c
 8006eb0:	35ddea0e 	.word	0x35ddea0e
 8006eb4:	388ab355 	.word	0x388ab355
 8006eb8:	3b360b61 	.word	0x3b360b61
 8006ebc:	3e2aaaab 	.word	0x3e2aaaab
 8006ec0:	43160000 	.word	0x43160000
 8006ec4:	0da24260 	.word	0x0da24260

08006ec8 <__ieee754_sqrtf>:
 8006ec8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006ecc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	d309      	bcc.n	8006eec <__ieee754_sqrtf+0x24>
 8006ed8:	4601      	mov	r1, r0
 8006eda:	f7f9 ff53 	bl	8000d84 <__aeabi_fmul>
 8006ede:	4601      	mov	r1, r0
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f7f9 fe47 	bl	8000b74 <__addsf3>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4620      	mov	r0, r4
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d0fb      	beq.n	8006ee8 <__ieee754_sqrtf+0x20>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	da06      	bge.n	8006f02 <__ieee754_sqrtf+0x3a>
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	f7f9 fe3b 	bl	8000b70 <__aeabi_fsub>
 8006efa:	4601      	mov	r1, r0
 8006efc:	f7f9 fff6 	bl	8000eec <__aeabi_fdiv>
 8006f00:	e7f1      	b.n	8006ee6 <__ieee754_sqrtf+0x1e>
 8006f02:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006f06:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8006f0a:	d32e      	bcc.n	8006f6a <__ieee754_sqrtf+0xa2>
 8006f0c:	3c7f      	subs	r4, #127	; 0x7f
 8006f0e:	07e2      	lsls	r2, r4, #31
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	ea4f 0164 	mov.w	r1, r4, asr #1
 8006f18:	4616      	mov	r6, r2
 8006f1a:	f04f 0419 	mov.w	r4, #25
 8006f1e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006f22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f2a:	bf48      	it	mi
 8006f2c:	005b      	lslmi	r3, r3, #1
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	1835      	adds	r5, r6, r0
 8006f32:	429d      	cmp	r5, r3
 8006f34:	bfde      	ittt	le
 8006f36:	182e      	addle	r6, r5, r0
 8006f38:	1b5b      	suble	r3, r3, r5
 8006f3a:	1812      	addle	r2, r2, r0
 8006f3c:	3c01      	subs	r4, #1
 8006f3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f42:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006f46:	d1f3      	bne.n	8006f30 <__ieee754_sqrtf+0x68>
 8006f48:	b113      	cbz	r3, 8006f50 <__ieee754_sqrtf+0x88>
 8006f4a:	3201      	adds	r2, #1
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	1054      	asrs	r4, r2, #1
 8006f52:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006f56:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8006f5a:	e7c5      	b.n	8006ee8 <__ieee754_sqrtf+0x20>
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	3201      	adds	r2, #1
 8006f60:	0219      	lsls	r1, r3, #8
 8006f62:	d5fb      	bpl.n	8006f5c <__ieee754_sqrtf+0x94>
 8006f64:	3a01      	subs	r2, #1
 8006f66:	1aa4      	subs	r4, r4, r2
 8006f68:	e7d0      	b.n	8006f0c <__ieee754_sqrtf+0x44>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	e7f8      	b.n	8006f60 <__ieee754_sqrtf+0x98>

08006f6e <matherr>:
 8006f6e:	2000      	movs	r0, #0
 8006f70:	4770      	bx	lr

08006f72 <fabsf>:
 8006f72:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006f76:	4770      	bx	lr

08006f78 <finitef>:
 8006f78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006f7c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006f80:	bfac      	ite	ge
 8006f82:	2000      	movge	r0, #0
 8006f84:	2001      	movlt	r0, #1
 8006f86:	4770      	bx	lr

08006f88 <nanf>:
 8006f88:	4800      	ldr	r0, [pc, #0]	; (8006f8c <nanf+0x4>)
 8006f8a:	4770      	bx	lr
 8006f8c:	7fc00000 	.word	0x7fc00000

08006f90 <rintf>:
 8006f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f92:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006f96:	0dd5      	lsrs	r5, r2, #23
 8006f98:	3d7f      	subs	r5, #127	; 0x7f
 8006f9a:	2d16      	cmp	r5, #22
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	dc3b      	bgt.n	8007018 <rintf+0x88>
 8006fa0:	b1e2      	cbz	r2, 8006fdc <rintf+0x4c>
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8006faa:	da1a      	bge.n	8006fe2 <rintf+0x52>
 8006fac:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <rintf+0x98>)
 8006fae:	f3c0 0116 	ubfx	r1, r0, #0, #23
 8006fb2:	4249      	negs	r1, r1
 8006fb4:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8006fb8:	0d03      	lsrs	r3, r0, #20
 8006fba:	0a49      	lsrs	r1, r1, #9
 8006fbc:	051b      	lsls	r3, r3, #20
 8006fbe:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006fc2:	4319      	orrs	r1, r3
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f7f9 fdd5 	bl	8000b74 <__addsf3>
 8006fca:	9001      	str	r0, [sp, #4]
 8006fcc:	4629      	mov	r1, r5
 8006fce:	9801      	ldr	r0, [sp, #4]
 8006fd0:	f7f9 fdce 	bl	8000b70 <__aeabi_fsub>
 8006fd4:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8006fd8:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 8006fdc:	4608      	mov	r0, r1
 8006fde:	b003      	add	sp, #12
 8006fe0:	bd30      	pop	{r4, r5, pc}
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <rintf+0x9c>)
 8006fe4:	412b      	asrs	r3, r5
 8006fe6:	4218      	tst	r0, r3
 8006fe8:	d0f8      	beq.n	8006fdc <rintf+0x4c>
 8006fea:	0859      	lsrs	r1, r3, #1
 8006fec:	4208      	tst	r0, r1
 8006fee:	d006      	beq.n	8006ffe <rintf+0x6e>
 8006ff0:	ea20 0201 	bic.w	r2, r0, r1
 8006ff4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ff8:	fa41 f505 	asr.w	r5, r1, r5
 8006ffc:	432a      	orrs	r2, r5
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <rintf+0x98>)
 8007000:	4611      	mov	r1, r2
 8007002:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8007006:	4620      	mov	r0, r4
 8007008:	f7f9 fdb4 	bl	8000b74 <__addsf3>
 800700c:	9001      	str	r0, [sp, #4]
 800700e:	9801      	ldr	r0, [sp, #4]
 8007010:	4621      	mov	r1, r4
 8007012:	f7f9 fdad 	bl	8000b70 <__aeabi_fsub>
 8007016:	e004      	b.n	8007022 <rintf+0x92>
 8007018:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800701c:	d3de      	bcc.n	8006fdc <rintf+0x4c>
 800701e:	f7f9 fda9 	bl	8000b74 <__addsf3>
 8007022:	4601      	mov	r1, r0
 8007024:	e7da      	b.n	8006fdc <rintf+0x4c>
 8007026:	bf00      	nop
 8007028:	0800af88 	.word	0x0800af88
 800702c:	007fffff 	.word	0x007fffff

08007030 <scalbnf>:
 8007030:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8007034:	b510      	push	{r4, lr}
 8007036:	4602      	mov	r2, r0
 8007038:	460c      	mov	r4, r1
 800703a:	4601      	mov	r1, r0
 800703c:	d027      	beq.n	800708e <scalbnf+0x5e>
 800703e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007042:	d303      	bcc.n	800704c <scalbnf+0x1c>
 8007044:	f7f9 fd96 	bl	8000b74 <__addsf3>
 8007048:	4602      	mov	r2, r0
 800704a:	e020      	b.n	800708e <scalbnf+0x5e>
 800704c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007050:	d215      	bcs.n	800707e <scalbnf+0x4e>
 8007052:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8007056:	f7f9 fe95 	bl	8000d84 <__aeabi_fmul>
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <scalbnf+0x8c>)
 800705c:	4602      	mov	r2, r0
 800705e:	429c      	cmp	r4, r3
 8007060:	db22      	blt.n	80070a8 <scalbnf+0x78>
 8007062:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007066:	3b19      	subs	r3, #25
 8007068:	4423      	add	r3, r4
 800706a:	2bfe      	cmp	r3, #254	; 0xfe
 800706c:	dd09      	ble.n	8007082 <scalbnf+0x52>
 800706e:	4611      	mov	r1, r2
 8007070:	4813      	ldr	r0, [pc, #76]	; (80070c0 <scalbnf+0x90>)
 8007072:	f000 f829 	bl	80070c8 <copysignf>
 8007076:	4912      	ldr	r1, [pc, #72]	; (80070c0 <scalbnf+0x90>)
 8007078:	f7f9 fe84 	bl	8000d84 <__aeabi_fmul>
 800707c:	e7e4      	b.n	8007048 <scalbnf+0x18>
 800707e:	0ddb      	lsrs	r3, r3, #23
 8007080:	e7f2      	b.n	8007068 <scalbnf+0x38>
 8007082:	2b00      	cmp	r3, #0
 8007084:	dd05      	ble.n	8007092 <scalbnf+0x62>
 8007086:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800708a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800708e:	4610      	mov	r0, r2
 8007090:	bd10      	pop	{r4, pc}
 8007092:	f113 0f16 	cmn.w	r3, #22
 8007096:	da09      	bge.n	80070ac <scalbnf+0x7c>
 8007098:	f24c 3350 	movw	r3, #50000	; 0xc350
 800709c:	429c      	cmp	r4, r3
 800709e:	4611      	mov	r1, r2
 80070a0:	dce6      	bgt.n	8007070 <scalbnf+0x40>
 80070a2:	4808      	ldr	r0, [pc, #32]	; (80070c4 <scalbnf+0x94>)
 80070a4:	f000 f810 	bl	80070c8 <copysignf>
 80070a8:	4906      	ldr	r1, [pc, #24]	; (80070c4 <scalbnf+0x94>)
 80070aa:	e7e5      	b.n	8007078 <scalbnf+0x48>
 80070ac:	3319      	adds	r3, #25
 80070ae:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80070b2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80070b6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80070ba:	e7dd      	b.n	8007078 <scalbnf+0x48>
 80070bc:	ffff3cb0 	.word	0xffff3cb0
 80070c0:	7149f2ca 	.word	0x7149f2ca
 80070c4:	0da24260 	.word	0x0da24260

080070c8 <copysignf>:
 80070c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80070cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070d0:	4308      	orrs	r0, r1
 80070d2:	4770      	bx	lr

080070d4 <__errno>:
 80070d4:	4b01      	ldr	r3, [pc, #4]	; (80070dc <__errno+0x8>)
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	200000ac 	.word	0x200000ac

080070e0 <__libc_init_array>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	2500      	movs	r5, #0
 80070e4:	4e0c      	ldr	r6, [pc, #48]	; (8007118 <__libc_init_array+0x38>)
 80070e6:	4c0d      	ldr	r4, [pc, #52]	; (800711c <__libc_init_array+0x3c>)
 80070e8:	1ba4      	subs	r4, r4, r6
 80070ea:	10a4      	asrs	r4, r4, #2
 80070ec:	42a5      	cmp	r5, r4
 80070ee:	d109      	bne.n	8007104 <__libc_init_array+0x24>
 80070f0:	f003 fd74 	bl	800abdc <_init>
 80070f4:	2500      	movs	r5, #0
 80070f6:	4e0a      	ldr	r6, [pc, #40]	; (8007120 <__libc_init_array+0x40>)
 80070f8:	4c0a      	ldr	r4, [pc, #40]	; (8007124 <__libc_init_array+0x44>)
 80070fa:	1ba4      	subs	r4, r4, r6
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	42a5      	cmp	r5, r4
 8007100:	d105      	bne.n	800710e <__libc_init_array+0x2e>
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007108:	4798      	blx	r3
 800710a:	3501      	adds	r5, #1
 800710c:	e7ee      	b.n	80070ec <__libc_init_array+0xc>
 800710e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007112:	4798      	blx	r3
 8007114:	3501      	adds	r5, #1
 8007116:	e7f2      	b.n	80070fe <__libc_init_array+0x1e>
 8007118:	0800b248 	.word	0x0800b248
 800711c:	0800b248 	.word	0x0800b248
 8007120:	0800b248 	.word	0x0800b248
 8007124:	0800b250 	.word	0x0800b250

08007128 <memcpy>:
 8007128:	b510      	push	{r4, lr}
 800712a:	1e43      	subs	r3, r0, #1
 800712c:	440a      	add	r2, r1
 800712e:	4291      	cmp	r1, r2
 8007130:	d100      	bne.n	8007134 <memcpy+0xc>
 8007132:	bd10      	pop	{r4, pc}
 8007134:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800713c:	e7f7      	b.n	800712e <memcpy+0x6>

0800713e <memset>:
 800713e:	4603      	mov	r3, r0
 8007140:	4402      	add	r2, r0
 8007142:	4293      	cmp	r3, r2
 8007144:	d100      	bne.n	8007148 <memset+0xa>
 8007146:	4770      	bx	lr
 8007148:	f803 1b01 	strb.w	r1, [r3], #1
 800714c:	e7f9      	b.n	8007142 <memset+0x4>

0800714e <__cvt>:
 800714e:	2b00      	cmp	r3, #0
 8007150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	461e      	mov	r6, r3
 8007156:	bfbb      	ittet	lt
 8007158:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800715c:	461e      	movlt	r6, r3
 800715e:	2300      	movge	r3, #0
 8007160:	232d      	movlt	r3, #45	; 0x2d
 8007162:	b088      	sub	sp, #32
 8007164:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007166:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800716a:	f027 0720 	bic.w	r7, r7, #32
 800716e:	2f46      	cmp	r7, #70	; 0x46
 8007170:	4614      	mov	r4, r2
 8007172:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007174:	700b      	strb	r3, [r1, #0]
 8007176:	d004      	beq.n	8007182 <__cvt+0x34>
 8007178:	2f45      	cmp	r7, #69	; 0x45
 800717a:	d100      	bne.n	800717e <__cvt+0x30>
 800717c:	3501      	adds	r5, #1
 800717e:	2302      	movs	r3, #2
 8007180:	e000      	b.n	8007184 <__cvt+0x36>
 8007182:	2303      	movs	r3, #3
 8007184:	aa07      	add	r2, sp, #28
 8007186:	9204      	str	r2, [sp, #16]
 8007188:	aa06      	add	r2, sp, #24
 800718a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800718e:	e9cd 3500 	strd	r3, r5, [sp]
 8007192:	4622      	mov	r2, r4
 8007194:	4633      	mov	r3, r6
 8007196:	f001 fd93 	bl	8008cc0 <_dtoa_r>
 800719a:	2f47      	cmp	r7, #71	; 0x47
 800719c:	4680      	mov	r8, r0
 800719e:	d102      	bne.n	80071a6 <__cvt+0x58>
 80071a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071a2:	07db      	lsls	r3, r3, #31
 80071a4:	d526      	bpl.n	80071f4 <__cvt+0xa6>
 80071a6:	2f46      	cmp	r7, #70	; 0x46
 80071a8:	eb08 0905 	add.w	r9, r8, r5
 80071ac:	d111      	bne.n	80071d2 <__cvt+0x84>
 80071ae:	f898 3000 	ldrb.w	r3, [r8]
 80071b2:	2b30      	cmp	r3, #48	; 0x30
 80071b4:	d10a      	bne.n	80071cc <__cvt+0x7e>
 80071b6:	2200      	movs	r2, #0
 80071b8:	2300      	movs	r3, #0
 80071ba:	4620      	mov	r0, r4
 80071bc:	4631      	mov	r1, r6
 80071be:	f7f9 fbf3 	bl	80009a8 <__aeabi_dcmpeq>
 80071c2:	b918      	cbnz	r0, 80071cc <__cvt+0x7e>
 80071c4:	f1c5 0501 	rsb	r5, r5, #1
 80071c8:	f8ca 5000 	str.w	r5, [sl]
 80071cc:	f8da 3000 	ldr.w	r3, [sl]
 80071d0:	4499      	add	r9, r3
 80071d2:	2200      	movs	r2, #0
 80071d4:	2300      	movs	r3, #0
 80071d6:	4620      	mov	r0, r4
 80071d8:	4631      	mov	r1, r6
 80071da:	f7f9 fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80071de:	b938      	cbnz	r0, 80071f0 <__cvt+0xa2>
 80071e0:	2230      	movs	r2, #48	; 0x30
 80071e2:	9b07      	ldr	r3, [sp, #28]
 80071e4:	454b      	cmp	r3, r9
 80071e6:	d205      	bcs.n	80071f4 <__cvt+0xa6>
 80071e8:	1c59      	adds	r1, r3, #1
 80071ea:	9107      	str	r1, [sp, #28]
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	e7f8      	b.n	80071e2 <__cvt+0x94>
 80071f0:	f8cd 901c 	str.w	r9, [sp, #28]
 80071f4:	4640      	mov	r0, r8
 80071f6:	9b07      	ldr	r3, [sp, #28]
 80071f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071fa:	eba3 0308 	sub.w	r3, r3, r8
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	b008      	add	sp, #32
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007206 <__exponent>:
 8007206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007208:	2900      	cmp	r1, #0
 800720a:	bfb4      	ite	lt
 800720c:	232d      	movlt	r3, #45	; 0x2d
 800720e:	232b      	movge	r3, #43	; 0x2b
 8007210:	4604      	mov	r4, r0
 8007212:	bfb8      	it	lt
 8007214:	4249      	neglt	r1, r1
 8007216:	2909      	cmp	r1, #9
 8007218:	f804 2b02 	strb.w	r2, [r4], #2
 800721c:	7043      	strb	r3, [r0, #1]
 800721e:	dd21      	ble.n	8007264 <__exponent+0x5e>
 8007220:	f10d 0307 	add.w	r3, sp, #7
 8007224:	461f      	mov	r7, r3
 8007226:	260a      	movs	r6, #10
 8007228:	fb91 f5f6 	sdiv	r5, r1, r6
 800722c:	fb06 1115 	mls	r1, r6, r5, r1
 8007230:	2d09      	cmp	r5, #9
 8007232:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007236:	f803 1c01 	strb.w	r1, [r3, #-1]
 800723a:	f103 32ff 	add.w	r2, r3, #4294967295
 800723e:	4629      	mov	r1, r5
 8007240:	dc09      	bgt.n	8007256 <__exponent+0x50>
 8007242:	3130      	adds	r1, #48	; 0x30
 8007244:	3b02      	subs	r3, #2
 8007246:	f802 1c01 	strb.w	r1, [r2, #-1]
 800724a:	42bb      	cmp	r3, r7
 800724c:	4622      	mov	r2, r4
 800724e:	d304      	bcc.n	800725a <__exponent+0x54>
 8007250:	1a10      	subs	r0, r2, r0
 8007252:	b003      	add	sp, #12
 8007254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007256:	4613      	mov	r3, r2
 8007258:	e7e6      	b.n	8007228 <__exponent+0x22>
 800725a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800725e:	f804 2b01 	strb.w	r2, [r4], #1
 8007262:	e7f2      	b.n	800724a <__exponent+0x44>
 8007264:	2330      	movs	r3, #48	; 0x30
 8007266:	4419      	add	r1, r3
 8007268:	7083      	strb	r3, [r0, #2]
 800726a:	1d02      	adds	r2, r0, #4
 800726c:	70c1      	strb	r1, [r0, #3]
 800726e:	e7ef      	b.n	8007250 <__exponent+0x4a>

08007270 <_printf_float>:
 8007270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	b091      	sub	sp, #68	; 0x44
 8007276:	460c      	mov	r4, r1
 8007278:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800727a:	4693      	mov	fp, r2
 800727c:	461e      	mov	r6, r3
 800727e:	4605      	mov	r5, r0
 8007280:	f002 fe00 	bl	8009e84 <_localeconv_r>
 8007284:	6803      	ldr	r3, [r0, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	9309      	str	r3, [sp, #36]	; 0x24
 800728a:	f7f8 ff61 	bl	8000150 <strlen>
 800728e:	2300      	movs	r3, #0
 8007290:	930e      	str	r3, [sp, #56]	; 0x38
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	900a      	str	r0, [sp, #40]	; 0x28
 8007296:	3307      	adds	r3, #7
 8007298:	f023 0307 	bic.w	r3, r3, #7
 800729c:	f103 0208 	add.w	r2, r3, #8
 80072a0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80072a4:	f8d4 a000 	ldr.w	sl, [r4]
 80072a8:	603a      	str	r2, [r7, #0]
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072b2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80072b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	4ba6      	ldr	r3, [pc, #664]	; (800755c <_printf_float+0x2ec>)
 80072c2:	4638      	mov	r0, r7
 80072c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072c6:	f7f9 fba1 	bl	8000a0c <__aeabi_dcmpun>
 80072ca:	bb68      	cbnz	r0, 8007328 <_printf_float+0xb8>
 80072cc:	f04f 32ff 	mov.w	r2, #4294967295
 80072d0:	4ba2      	ldr	r3, [pc, #648]	; (800755c <_printf_float+0x2ec>)
 80072d2:	4638      	mov	r0, r7
 80072d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072d6:	f7f9 fb7b 	bl	80009d0 <__aeabi_dcmple>
 80072da:	bb28      	cbnz	r0, 8007328 <_printf_float+0xb8>
 80072dc:	2200      	movs	r2, #0
 80072de:	2300      	movs	r3, #0
 80072e0:	4638      	mov	r0, r7
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f9 fb6a 	bl	80009bc <__aeabi_dcmplt>
 80072e8:	b110      	cbz	r0, 80072f0 <_printf_float+0x80>
 80072ea:	232d      	movs	r3, #45	; 0x2d
 80072ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072f0:	4f9b      	ldr	r7, [pc, #620]	; (8007560 <_printf_float+0x2f0>)
 80072f2:	4b9c      	ldr	r3, [pc, #624]	; (8007564 <_printf_float+0x2f4>)
 80072f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072f8:	bf98      	it	ls
 80072fa:	461f      	movls	r7, r3
 80072fc:	2303      	movs	r3, #3
 80072fe:	f04f 0900 	mov.w	r9, #0
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	f02a 0304 	bic.w	r3, sl, #4
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	9600      	str	r6, [sp, #0]
 800730c:	465b      	mov	r3, fp
 800730e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f000 f9e2 	bl	80076dc <_printf_common>
 8007318:	3001      	adds	r0, #1
 800731a:	f040 8090 	bne.w	800743e <_printf_float+0x1ce>
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	b011      	add	sp, #68	; 0x44
 8007324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	463a      	mov	r2, r7
 800732a:	464b      	mov	r3, r9
 800732c:	4638      	mov	r0, r7
 800732e:	4649      	mov	r1, r9
 8007330:	f7f9 fb6c 	bl	8000a0c <__aeabi_dcmpun>
 8007334:	b110      	cbz	r0, 800733c <_printf_float+0xcc>
 8007336:	4f8c      	ldr	r7, [pc, #560]	; (8007568 <_printf_float+0x2f8>)
 8007338:	4b8c      	ldr	r3, [pc, #560]	; (800756c <_printf_float+0x2fc>)
 800733a:	e7db      	b.n	80072f4 <_printf_float+0x84>
 800733c:	6863      	ldr	r3, [r4, #4]
 800733e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007342:	1c59      	adds	r1, r3, #1
 8007344:	a80d      	add	r0, sp, #52	; 0x34
 8007346:	a90e      	add	r1, sp, #56	; 0x38
 8007348:	d140      	bne.n	80073cc <_printf_float+0x15c>
 800734a:	2306      	movs	r3, #6
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	f04f 0c00 	mov.w	ip, #0
 8007352:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007356:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800735a:	6863      	ldr	r3, [r4, #4]
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	463a      	mov	r2, r7
 8007366:	464b      	mov	r3, r9
 8007368:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800736c:	4628      	mov	r0, r5
 800736e:	f7ff feee 	bl	800714e <__cvt>
 8007372:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007376:	2b47      	cmp	r3, #71	; 0x47
 8007378:	4607      	mov	r7, r0
 800737a:	d109      	bne.n	8007390 <_printf_float+0x120>
 800737c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800737e:	1cd8      	adds	r0, r3, #3
 8007380:	db02      	blt.n	8007388 <_printf_float+0x118>
 8007382:	6862      	ldr	r2, [r4, #4]
 8007384:	4293      	cmp	r3, r2
 8007386:	dd47      	ble.n	8007418 <_printf_float+0x1a8>
 8007388:	f1a8 0802 	sub.w	r8, r8, #2
 800738c:	fa5f f888 	uxtb.w	r8, r8
 8007390:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007394:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007396:	d824      	bhi.n	80073e2 <_printf_float+0x172>
 8007398:	3901      	subs	r1, #1
 800739a:	4642      	mov	r2, r8
 800739c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073a0:	910d      	str	r1, [sp, #52]	; 0x34
 80073a2:	f7ff ff30 	bl	8007206 <__exponent>
 80073a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073a8:	4681      	mov	r9, r0
 80073aa:	1813      	adds	r3, r2, r0
 80073ac:	2a01      	cmp	r2, #1
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	dc02      	bgt.n	80073b8 <_printf_float+0x148>
 80073b2:	6822      	ldr	r2, [r4, #0]
 80073b4:	07d1      	lsls	r1, r2, #31
 80073b6:	d501      	bpl.n	80073bc <_printf_float+0x14c>
 80073b8:	3301      	adds	r3, #1
 80073ba:	6123      	str	r3, [r4, #16]
 80073bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0a2      	beq.n	800730a <_printf_float+0x9a>
 80073c4:	232d      	movs	r3, #45	; 0x2d
 80073c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ca:	e79e      	b.n	800730a <_printf_float+0x9a>
 80073cc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80073d0:	f000 816e 	beq.w	80076b0 <_printf_float+0x440>
 80073d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073d8:	d1b9      	bne.n	800734e <_printf_float+0xde>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1b7      	bne.n	800734e <_printf_float+0xde>
 80073de:	2301      	movs	r3, #1
 80073e0:	e7b4      	b.n	800734c <_printf_float+0xdc>
 80073e2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80073e6:	d119      	bne.n	800741c <_printf_float+0x1ac>
 80073e8:	2900      	cmp	r1, #0
 80073ea:	6863      	ldr	r3, [r4, #4]
 80073ec:	dd0c      	ble.n	8007408 <_printf_float+0x198>
 80073ee:	6121      	str	r1, [r4, #16]
 80073f0:	b913      	cbnz	r3, 80073f8 <_printf_float+0x188>
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	07d2      	lsls	r2, r2, #31
 80073f6:	d502      	bpl.n	80073fe <_printf_float+0x18e>
 80073f8:	3301      	adds	r3, #1
 80073fa:	440b      	add	r3, r1
 80073fc:	6123      	str	r3, [r4, #16]
 80073fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007400:	f04f 0900 	mov.w	r9, #0
 8007404:	65a3      	str	r3, [r4, #88]	; 0x58
 8007406:	e7d9      	b.n	80073bc <_printf_float+0x14c>
 8007408:	b913      	cbnz	r3, 8007410 <_printf_float+0x1a0>
 800740a:	6822      	ldr	r2, [r4, #0]
 800740c:	07d0      	lsls	r0, r2, #31
 800740e:	d501      	bpl.n	8007414 <_printf_float+0x1a4>
 8007410:	3302      	adds	r3, #2
 8007412:	e7f3      	b.n	80073fc <_printf_float+0x18c>
 8007414:	2301      	movs	r3, #1
 8007416:	e7f1      	b.n	80073fc <_printf_float+0x18c>
 8007418:	f04f 0867 	mov.w	r8, #103	; 0x67
 800741c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007420:	4293      	cmp	r3, r2
 8007422:	db05      	blt.n	8007430 <_printf_float+0x1c0>
 8007424:	6822      	ldr	r2, [r4, #0]
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	07d1      	lsls	r1, r2, #31
 800742a:	d5e8      	bpl.n	80073fe <_printf_float+0x18e>
 800742c:	3301      	adds	r3, #1
 800742e:	e7e5      	b.n	80073fc <_printf_float+0x18c>
 8007430:	2b00      	cmp	r3, #0
 8007432:	bfcc      	ite	gt
 8007434:	2301      	movgt	r3, #1
 8007436:	f1c3 0302 	rsble	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	e7de      	b.n	80073fc <_printf_float+0x18c>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	055a      	lsls	r2, r3, #21
 8007442:	d407      	bmi.n	8007454 <_printf_float+0x1e4>
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	463a      	mov	r2, r7
 8007448:	4659      	mov	r1, fp
 800744a:	4628      	mov	r0, r5
 800744c:	47b0      	blx	r6
 800744e:	3001      	adds	r0, #1
 8007450:	d129      	bne.n	80074a6 <_printf_float+0x236>
 8007452:	e764      	b.n	800731e <_printf_float+0xae>
 8007454:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007458:	f240 80d7 	bls.w	800760a <_printf_float+0x39a>
 800745c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007460:	2200      	movs	r2, #0
 8007462:	2300      	movs	r3, #0
 8007464:	f7f9 faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8007468:	b388      	cbz	r0, 80074ce <_printf_float+0x25e>
 800746a:	2301      	movs	r3, #1
 800746c:	4a40      	ldr	r2, [pc, #256]	; (8007570 <_printf_float+0x300>)
 800746e:	4659      	mov	r1, fp
 8007470:	4628      	mov	r0, r5
 8007472:	47b0      	blx	r6
 8007474:	3001      	adds	r0, #1
 8007476:	f43f af52 	beq.w	800731e <_printf_float+0xae>
 800747a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800747e:	429a      	cmp	r2, r3
 8007480:	db02      	blt.n	8007488 <_printf_float+0x218>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	07d8      	lsls	r0, r3, #31
 8007486:	d50e      	bpl.n	80074a6 <_printf_float+0x236>
 8007488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800748c:	4659      	mov	r1, fp
 800748e:	4628      	mov	r0, r5
 8007490:	47b0      	blx	r6
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af43 	beq.w	800731e <_printf_float+0xae>
 8007498:	2700      	movs	r7, #0
 800749a:	f104 081a 	add.w	r8, r4, #26
 800749e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a0:	3b01      	subs	r3, #1
 80074a2:	42bb      	cmp	r3, r7
 80074a4:	dc09      	bgt.n	80074ba <_printf_float+0x24a>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	079f      	lsls	r7, r3, #30
 80074aa:	f100 80fd 	bmi.w	80076a8 <_printf_float+0x438>
 80074ae:	68e0      	ldr	r0, [r4, #12]
 80074b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b2:	4298      	cmp	r0, r3
 80074b4:	bfb8      	it	lt
 80074b6:	4618      	movlt	r0, r3
 80074b8:	e733      	b.n	8007322 <_printf_float+0xb2>
 80074ba:	2301      	movs	r3, #1
 80074bc:	4642      	mov	r2, r8
 80074be:	4659      	mov	r1, fp
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b0      	blx	r6
 80074c4:	3001      	adds	r0, #1
 80074c6:	f43f af2a 	beq.w	800731e <_printf_float+0xae>
 80074ca:	3701      	adds	r7, #1
 80074cc:	e7e7      	b.n	800749e <_printf_float+0x22e>
 80074ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc2b      	bgt.n	800752c <_printf_float+0x2bc>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4a26      	ldr	r2, [pc, #152]	; (8007570 <_printf_float+0x300>)
 80074d8:	4659      	mov	r1, fp
 80074da:	4628      	mov	r0, r5
 80074dc:	47b0      	blx	r6
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f af1d 	beq.w	800731e <_printf_float+0xae>
 80074e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e6:	b923      	cbnz	r3, 80074f2 <_printf_float+0x282>
 80074e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ea:	b913      	cbnz	r3, 80074f2 <_printf_float+0x282>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	07d9      	lsls	r1, r3, #31
 80074f0:	d5d9      	bpl.n	80074a6 <_printf_float+0x236>
 80074f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074f6:	4659      	mov	r1, fp
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b0      	blx	r6
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f af0e 	beq.w	800731e <_printf_float+0xae>
 8007502:	f04f 0800 	mov.w	r8, #0
 8007506:	f104 091a 	add.w	r9, r4, #26
 800750a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750c:	425b      	negs	r3, r3
 800750e:	4543      	cmp	r3, r8
 8007510:	dc01      	bgt.n	8007516 <_printf_float+0x2a6>
 8007512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007514:	e797      	b.n	8007446 <_printf_float+0x1d6>
 8007516:	2301      	movs	r3, #1
 8007518:	464a      	mov	r2, r9
 800751a:	4659      	mov	r1, fp
 800751c:	4628      	mov	r0, r5
 800751e:	47b0      	blx	r6
 8007520:	3001      	adds	r0, #1
 8007522:	f43f aefc 	beq.w	800731e <_printf_float+0xae>
 8007526:	f108 0801 	add.w	r8, r8, #1
 800752a:	e7ee      	b.n	800750a <_printf_float+0x29a>
 800752c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800752e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007530:	429a      	cmp	r2, r3
 8007532:	bfa8      	it	ge
 8007534:	461a      	movge	r2, r3
 8007536:	2a00      	cmp	r2, #0
 8007538:	4690      	mov	r8, r2
 800753a:	dd07      	ble.n	800754c <_printf_float+0x2dc>
 800753c:	4613      	mov	r3, r2
 800753e:	4659      	mov	r1, fp
 8007540:	463a      	mov	r2, r7
 8007542:	4628      	mov	r0, r5
 8007544:	47b0      	blx	r6
 8007546:	3001      	adds	r0, #1
 8007548:	f43f aee9 	beq.w	800731e <_printf_float+0xae>
 800754c:	f104 031a 	add.w	r3, r4, #26
 8007550:	f04f 0a00 	mov.w	sl, #0
 8007554:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007558:	930b      	str	r3, [sp, #44]	; 0x2c
 800755a:	e015      	b.n	8007588 <_printf_float+0x318>
 800755c:	7fefffff 	.word	0x7fefffff
 8007560:	0800af94 	.word	0x0800af94
 8007564:	0800af90 	.word	0x0800af90
 8007568:	0800af9c 	.word	0x0800af9c
 800756c:	0800af98 	.word	0x0800af98
 8007570:	0800afa0 	.word	0x0800afa0
 8007574:	2301      	movs	r3, #1
 8007576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007578:	4659      	mov	r1, fp
 800757a:	4628      	mov	r0, r5
 800757c:	47b0      	blx	r6
 800757e:	3001      	adds	r0, #1
 8007580:	f43f aecd 	beq.w	800731e <_printf_float+0xae>
 8007584:	f10a 0a01 	add.w	sl, sl, #1
 8007588:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800758c:	eba9 0308 	sub.w	r3, r9, r8
 8007590:	4553      	cmp	r3, sl
 8007592:	dcef      	bgt.n	8007574 <_printf_float+0x304>
 8007594:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007598:	429a      	cmp	r2, r3
 800759a:	444f      	add	r7, r9
 800759c:	db14      	blt.n	80075c8 <_printf_float+0x358>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	07da      	lsls	r2, r3, #31
 80075a2:	d411      	bmi.n	80075c8 <_printf_float+0x358>
 80075a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075a8:	eba3 0209 	sub.w	r2, r3, r9
 80075ac:	eba3 0901 	sub.w	r9, r3, r1
 80075b0:	4591      	cmp	r9, r2
 80075b2:	bfa8      	it	ge
 80075b4:	4691      	movge	r9, r2
 80075b6:	f1b9 0f00 	cmp.w	r9, #0
 80075ba:	dc0d      	bgt.n	80075d8 <_printf_float+0x368>
 80075bc:	2700      	movs	r7, #0
 80075be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075c2:	f104 081a 	add.w	r8, r4, #26
 80075c6:	e018      	b.n	80075fa <_printf_float+0x38a>
 80075c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075cc:	4659      	mov	r1, fp
 80075ce:	4628      	mov	r0, r5
 80075d0:	47b0      	blx	r6
 80075d2:	3001      	adds	r0, #1
 80075d4:	d1e6      	bne.n	80075a4 <_printf_float+0x334>
 80075d6:	e6a2      	b.n	800731e <_printf_float+0xae>
 80075d8:	464b      	mov	r3, r9
 80075da:	463a      	mov	r2, r7
 80075dc:	4659      	mov	r1, fp
 80075de:	4628      	mov	r0, r5
 80075e0:	47b0      	blx	r6
 80075e2:	3001      	adds	r0, #1
 80075e4:	d1ea      	bne.n	80075bc <_printf_float+0x34c>
 80075e6:	e69a      	b.n	800731e <_printf_float+0xae>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4642      	mov	r2, r8
 80075ec:	4659      	mov	r1, fp
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b0      	blx	r6
 80075f2:	3001      	adds	r0, #1
 80075f4:	f43f ae93 	beq.w	800731e <_printf_float+0xae>
 80075f8:	3701      	adds	r7, #1
 80075fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	eba3 0309 	sub.w	r3, r3, r9
 8007604:	42bb      	cmp	r3, r7
 8007606:	dcef      	bgt.n	80075e8 <_printf_float+0x378>
 8007608:	e74d      	b.n	80074a6 <_printf_float+0x236>
 800760a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800760c:	2a01      	cmp	r2, #1
 800760e:	dc01      	bgt.n	8007614 <_printf_float+0x3a4>
 8007610:	07db      	lsls	r3, r3, #31
 8007612:	d538      	bpl.n	8007686 <_printf_float+0x416>
 8007614:	2301      	movs	r3, #1
 8007616:	463a      	mov	r2, r7
 8007618:	4659      	mov	r1, fp
 800761a:	4628      	mov	r0, r5
 800761c:	47b0      	blx	r6
 800761e:	3001      	adds	r0, #1
 8007620:	f43f ae7d 	beq.w	800731e <_printf_float+0xae>
 8007624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007628:	4659      	mov	r1, fp
 800762a:	4628      	mov	r0, r5
 800762c:	47b0      	blx	r6
 800762e:	3001      	adds	r0, #1
 8007630:	f107 0701 	add.w	r7, r7, #1
 8007634:	f43f ae73 	beq.w	800731e <_printf_float+0xae>
 8007638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800763c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800763e:	2200      	movs	r2, #0
 8007640:	f103 38ff 	add.w	r8, r3, #4294967295
 8007644:	2300      	movs	r3, #0
 8007646:	f7f9 f9af 	bl	80009a8 <__aeabi_dcmpeq>
 800764a:	b9c0      	cbnz	r0, 800767e <_printf_float+0x40e>
 800764c:	4643      	mov	r3, r8
 800764e:	463a      	mov	r2, r7
 8007650:	4659      	mov	r1, fp
 8007652:	4628      	mov	r0, r5
 8007654:	47b0      	blx	r6
 8007656:	3001      	adds	r0, #1
 8007658:	d10d      	bne.n	8007676 <_printf_float+0x406>
 800765a:	e660      	b.n	800731e <_printf_float+0xae>
 800765c:	2301      	movs	r3, #1
 800765e:	4642      	mov	r2, r8
 8007660:	4659      	mov	r1, fp
 8007662:	4628      	mov	r0, r5
 8007664:	47b0      	blx	r6
 8007666:	3001      	adds	r0, #1
 8007668:	f43f ae59 	beq.w	800731e <_printf_float+0xae>
 800766c:	3701      	adds	r7, #1
 800766e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007670:	3b01      	subs	r3, #1
 8007672:	42bb      	cmp	r3, r7
 8007674:	dcf2      	bgt.n	800765c <_printf_float+0x3ec>
 8007676:	464b      	mov	r3, r9
 8007678:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800767c:	e6e4      	b.n	8007448 <_printf_float+0x1d8>
 800767e:	2700      	movs	r7, #0
 8007680:	f104 081a 	add.w	r8, r4, #26
 8007684:	e7f3      	b.n	800766e <_printf_float+0x3fe>
 8007686:	2301      	movs	r3, #1
 8007688:	e7e1      	b.n	800764e <_printf_float+0x3de>
 800768a:	2301      	movs	r3, #1
 800768c:	4642      	mov	r2, r8
 800768e:	4659      	mov	r1, fp
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	3001      	adds	r0, #1
 8007696:	f43f ae42 	beq.w	800731e <_printf_float+0xae>
 800769a:	3701      	adds	r7, #1
 800769c:	68e3      	ldr	r3, [r4, #12]
 800769e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	42bb      	cmp	r3, r7
 80076a4:	dcf1      	bgt.n	800768a <_printf_float+0x41a>
 80076a6:	e702      	b.n	80074ae <_printf_float+0x23e>
 80076a8:	2700      	movs	r7, #0
 80076aa:	f104 0819 	add.w	r8, r4, #25
 80076ae:	e7f5      	b.n	800769c <_printf_float+0x42c>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f43f ae94 	beq.w	80073de <_printf_float+0x16e>
 80076b6:	f04f 0c00 	mov.w	ip, #0
 80076ba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80076be:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80076c2:	6022      	str	r2, [r4, #0]
 80076c4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80076c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	463a      	mov	r2, r7
 80076d0:	464b      	mov	r3, r9
 80076d2:	4628      	mov	r0, r5
 80076d4:	f7ff fd3b 	bl	800714e <__cvt>
 80076d8:	4607      	mov	r7, r0
 80076da:	e64f      	b.n	800737c <_printf_float+0x10c>

080076dc <_printf_common>:
 80076dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	4691      	mov	r9, r2
 80076e2:	461f      	mov	r7, r3
 80076e4:	688a      	ldr	r2, [r1, #8]
 80076e6:	690b      	ldr	r3, [r1, #16]
 80076e8:	4606      	mov	r6, r0
 80076ea:	4293      	cmp	r3, r2
 80076ec:	bfb8      	it	lt
 80076ee:	4613      	movlt	r3, r2
 80076f0:	f8c9 3000 	str.w	r3, [r9]
 80076f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076f8:	460c      	mov	r4, r1
 80076fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076fe:	b112      	cbz	r2, 8007706 <_printf_common+0x2a>
 8007700:	3301      	adds	r3, #1
 8007702:	f8c9 3000 	str.w	r3, [r9]
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	0699      	lsls	r1, r3, #26
 800770a:	bf42      	ittt	mi
 800770c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007710:	3302      	addmi	r3, #2
 8007712:	f8c9 3000 	strmi.w	r3, [r9]
 8007716:	6825      	ldr	r5, [r4, #0]
 8007718:	f015 0506 	ands.w	r5, r5, #6
 800771c:	d107      	bne.n	800772e <_printf_common+0x52>
 800771e:	f104 0a19 	add.w	sl, r4, #25
 8007722:	68e3      	ldr	r3, [r4, #12]
 8007724:	f8d9 2000 	ldr.w	r2, [r9]
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	42ab      	cmp	r3, r5
 800772c:	dc29      	bgt.n	8007782 <_printf_common+0xa6>
 800772e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	3300      	adds	r3, #0
 8007736:	bf18      	it	ne
 8007738:	2301      	movne	r3, #1
 800773a:	0692      	lsls	r2, r2, #26
 800773c:	d42e      	bmi.n	800779c <_printf_common+0xc0>
 800773e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007742:	4639      	mov	r1, r7
 8007744:	4630      	mov	r0, r6
 8007746:	47c0      	blx	r8
 8007748:	3001      	adds	r0, #1
 800774a:	d021      	beq.n	8007790 <_printf_common+0xb4>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	68e5      	ldr	r5, [r4, #12]
 8007750:	f003 0306 	and.w	r3, r3, #6
 8007754:	2b04      	cmp	r3, #4
 8007756:	bf18      	it	ne
 8007758:	2500      	movne	r5, #0
 800775a:	f8d9 2000 	ldr.w	r2, [r9]
 800775e:	f04f 0900 	mov.w	r9, #0
 8007762:	bf08      	it	eq
 8007764:	1aad      	subeq	r5, r5, r2
 8007766:	68a3      	ldr	r3, [r4, #8]
 8007768:	6922      	ldr	r2, [r4, #16]
 800776a:	bf08      	it	eq
 800776c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007770:	4293      	cmp	r3, r2
 8007772:	bfc4      	itt	gt
 8007774:	1a9b      	subgt	r3, r3, r2
 8007776:	18ed      	addgt	r5, r5, r3
 8007778:	341a      	adds	r4, #26
 800777a:	454d      	cmp	r5, r9
 800777c:	d11a      	bne.n	80077b4 <_printf_common+0xd8>
 800777e:	2000      	movs	r0, #0
 8007780:	e008      	b.n	8007794 <_printf_common+0xb8>
 8007782:	2301      	movs	r3, #1
 8007784:	4652      	mov	r2, sl
 8007786:	4639      	mov	r1, r7
 8007788:	4630      	mov	r0, r6
 800778a:	47c0      	blx	r8
 800778c:	3001      	adds	r0, #1
 800778e:	d103      	bne.n	8007798 <_printf_common+0xbc>
 8007790:	f04f 30ff 	mov.w	r0, #4294967295
 8007794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007798:	3501      	adds	r5, #1
 800779a:	e7c2      	b.n	8007722 <_printf_common+0x46>
 800779c:	2030      	movs	r0, #48	; 0x30
 800779e:	18e1      	adds	r1, r4, r3
 80077a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077aa:	4422      	add	r2, r4
 80077ac:	3302      	adds	r3, #2
 80077ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077b2:	e7c4      	b.n	800773e <_printf_common+0x62>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4622      	mov	r2, r4
 80077b8:	4639      	mov	r1, r7
 80077ba:	4630      	mov	r0, r6
 80077bc:	47c0      	blx	r8
 80077be:	3001      	adds	r0, #1
 80077c0:	d0e6      	beq.n	8007790 <_printf_common+0xb4>
 80077c2:	f109 0901 	add.w	r9, r9, #1
 80077c6:	e7d8      	b.n	800777a <_printf_common+0x9e>

080077c8 <_printf_i>:
 80077c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077d0:	460c      	mov	r4, r1
 80077d2:	7e09      	ldrb	r1, [r1, #24]
 80077d4:	b085      	sub	sp, #20
 80077d6:	296e      	cmp	r1, #110	; 0x6e
 80077d8:	4617      	mov	r7, r2
 80077da:	4606      	mov	r6, r0
 80077dc:	4698      	mov	r8, r3
 80077de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077e0:	f000 80b3 	beq.w	800794a <_printf_i+0x182>
 80077e4:	d822      	bhi.n	800782c <_printf_i+0x64>
 80077e6:	2963      	cmp	r1, #99	; 0x63
 80077e8:	d036      	beq.n	8007858 <_printf_i+0x90>
 80077ea:	d80a      	bhi.n	8007802 <_printf_i+0x3a>
 80077ec:	2900      	cmp	r1, #0
 80077ee:	f000 80b9 	beq.w	8007964 <_printf_i+0x19c>
 80077f2:	2958      	cmp	r1, #88	; 0x58
 80077f4:	f000 8083 	beq.w	80078fe <_printf_i+0x136>
 80077f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007800:	e032      	b.n	8007868 <_printf_i+0xa0>
 8007802:	2964      	cmp	r1, #100	; 0x64
 8007804:	d001      	beq.n	800780a <_printf_i+0x42>
 8007806:	2969      	cmp	r1, #105	; 0x69
 8007808:	d1f6      	bne.n	80077f8 <_printf_i+0x30>
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	6813      	ldr	r3, [r2, #0]
 800780e:	0605      	lsls	r5, r0, #24
 8007810:	f103 0104 	add.w	r1, r3, #4
 8007814:	d52a      	bpl.n	800786c <_printf_i+0xa4>
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6011      	str	r1, [r2, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da03      	bge.n	8007826 <_printf_i+0x5e>
 800781e:	222d      	movs	r2, #45	; 0x2d
 8007820:	425b      	negs	r3, r3
 8007822:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007826:	486f      	ldr	r0, [pc, #444]	; (80079e4 <_printf_i+0x21c>)
 8007828:	220a      	movs	r2, #10
 800782a:	e039      	b.n	80078a0 <_printf_i+0xd8>
 800782c:	2973      	cmp	r1, #115	; 0x73
 800782e:	f000 809d 	beq.w	800796c <_printf_i+0x1a4>
 8007832:	d808      	bhi.n	8007846 <_printf_i+0x7e>
 8007834:	296f      	cmp	r1, #111	; 0x6f
 8007836:	d020      	beq.n	800787a <_printf_i+0xb2>
 8007838:	2970      	cmp	r1, #112	; 0x70
 800783a:	d1dd      	bne.n	80077f8 <_printf_i+0x30>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	f043 0320 	orr.w	r3, r3, #32
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	e003      	b.n	800784e <_printf_i+0x86>
 8007846:	2975      	cmp	r1, #117	; 0x75
 8007848:	d017      	beq.n	800787a <_printf_i+0xb2>
 800784a:	2978      	cmp	r1, #120	; 0x78
 800784c:	d1d4      	bne.n	80077f8 <_printf_i+0x30>
 800784e:	2378      	movs	r3, #120	; 0x78
 8007850:	4865      	ldr	r0, [pc, #404]	; (80079e8 <_printf_i+0x220>)
 8007852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007856:	e055      	b.n	8007904 <_printf_i+0x13c>
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800785e:	1d19      	adds	r1, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6011      	str	r1, [r2, #0]
 8007864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007868:	2301      	movs	r3, #1
 800786a:	e08c      	b.n	8007986 <_printf_i+0x1be>
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007872:	6011      	str	r1, [r2, #0]
 8007874:	bf18      	it	ne
 8007876:	b21b      	sxthne	r3, r3
 8007878:	e7cf      	b.n	800781a <_printf_i+0x52>
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	6825      	ldr	r5, [r4, #0]
 800787e:	1d18      	adds	r0, r3, #4
 8007880:	6010      	str	r0, [r2, #0]
 8007882:	0628      	lsls	r0, r5, #24
 8007884:	d501      	bpl.n	800788a <_printf_i+0xc2>
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	e002      	b.n	8007890 <_printf_i+0xc8>
 800788a:	0668      	lsls	r0, r5, #25
 800788c:	d5fb      	bpl.n	8007886 <_printf_i+0xbe>
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	296f      	cmp	r1, #111	; 0x6f
 8007892:	bf14      	ite	ne
 8007894:	220a      	movne	r2, #10
 8007896:	2208      	moveq	r2, #8
 8007898:	4852      	ldr	r0, [pc, #328]	; (80079e4 <_printf_i+0x21c>)
 800789a:	2100      	movs	r1, #0
 800789c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078a0:	6865      	ldr	r5, [r4, #4]
 80078a2:	2d00      	cmp	r5, #0
 80078a4:	60a5      	str	r5, [r4, #8]
 80078a6:	f2c0 8095 	blt.w	80079d4 <_printf_i+0x20c>
 80078aa:	6821      	ldr	r1, [r4, #0]
 80078ac:	f021 0104 	bic.w	r1, r1, #4
 80078b0:	6021      	str	r1, [r4, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d13d      	bne.n	8007932 <_printf_i+0x16a>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	f040 808e 	bne.w	80079d8 <_printf_i+0x210>
 80078bc:	4665      	mov	r5, ip
 80078be:	2a08      	cmp	r2, #8
 80078c0:	d10b      	bne.n	80078da <_printf_i+0x112>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	07db      	lsls	r3, r3, #31
 80078c6:	d508      	bpl.n	80078da <_printf_i+0x112>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	bfde      	ittt	le
 80078d0:	2330      	movle	r3, #48	; 0x30
 80078d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078da:	ebac 0305 	sub.w	r3, ip, r5
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	f8cd 8000 	str.w	r8, [sp]
 80078e4:	463b      	mov	r3, r7
 80078e6:	aa03      	add	r2, sp, #12
 80078e8:	4621      	mov	r1, r4
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff fef6 	bl	80076dc <_printf_common>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d14d      	bne.n	8007990 <_printf_i+0x1c8>
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	b005      	add	sp, #20
 80078fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078fe:	4839      	ldr	r0, [pc, #228]	; (80079e4 <_printf_i+0x21c>)
 8007900:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007904:	6813      	ldr	r3, [r2, #0]
 8007906:	6821      	ldr	r1, [r4, #0]
 8007908:	1d1d      	adds	r5, r3, #4
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6015      	str	r5, [r2, #0]
 800790e:	060a      	lsls	r2, r1, #24
 8007910:	d50b      	bpl.n	800792a <_printf_i+0x162>
 8007912:	07ca      	lsls	r2, r1, #31
 8007914:	bf44      	itt	mi
 8007916:	f041 0120 	orrmi.w	r1, r1, #32
 800791a:	6021      	strmi	r1, [r4, #0]
 800791c:	b91b      	cbnz	r3, 8007926 <_printf_i+0x15e>
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	f022 0220 	bic.w	r2, r2, #32
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	2210      	movs	r2, #16
 8007928:	e7b7      	b.n	800789a <_printf_i+0xd2>
 800792a:	064d      	lsls	r5, r1, #25
 800792c:	bf48      	it	mi
 800792e:	b29b      	uxthmi	r3, r3
 8007930:	e7ef      	b.n	8007912 <_printf_i+0x14a>
 8007932:	4665      	mov	r5, ip
 8007934:	fbb3 f1f2 	udiv	r1, r3, r2
 8007938:	fb02 3311 	mls	r3, r2, r1, r3
 800793c:	5cc3      	ldrb	r3, [r0, r3]
 800793e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007942:	460b      	mov	r3, r1
 8007944:	2900      	cmp	r1, #0
 8007946:	d1f5      	bne.n	8007934 <_printf_i+0x16c>
 8007948:	e7b9      	b.n	80078be <_printf_i+0xf6>
 800794a:	6813      	ldr	r3, [r2, #0]
 800794c:	6825      	ldr	r5, [r4, #0]
 800794e:	1d18      	adds	r0, r3, #4
 8007950:	6961      	ldr	r1, [r4, #20]
 8007952:	6010      	str	r0, [r2, #0]
 8007954:	0628      	lsls	r0, r5, #24
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	d501      	bpl.n	800795e <_printf_i+0x196>
 800795a:	6019      	str	r1, [r3, #0]
 800795c:	e002      	b.n	8007964 <_printf_i+0x19c>
 800795e:	066a      	lsls	r2, r5, #25
 8007960:	d5fb      	bpl.n	800795a <_printf_i+0x192>
 8007962:	8019      	strh	r1, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	4665      	mov	r5, ip
 8007968:	6123      	str	r3, [r4, #16]
 800796a:	e7b9      	b.n	80078e0 <_printf_i+0x118>
 800796c:	6813      	ldr	r3, [r2, #0]
 800796e:	1d19      	adds	r1, r3, #4
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	681d      	ldr	r5, [r3, #0]
 8007974:	6862      	ldr	r2, [r4, #4]
 8007976:	2100      	movs	r1, #0
 8007978:	4628      	mov	r0, r5
 800797a:	f002 faab 	bl	8009ed4 <memchr>
 800797e:	b108      	cbz	r0, 8007984 <_printf_i+0x1bc>
 8007980:	1b40      	subs	r0, r0, r5
 8007982:	6060      	str	r0, [r4, #4]
 8007984:	6863      	ldr	r3, [r4, #4]
 8007986:	6123      	str	r3, [r4, #16]
 8007988:	2300      	movs	r3, #0
 800798a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798e:	e7a7      	b.n	80078e0 <_printf_i+0x118>
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	462a      	mov	r2, r5
 8007994:	4639      	mov	r1, r7
 8007996:	4630      	mov	r0, r6
 8007998:	47c0      	blx	r8
 800799a:	3001      	adds	r0, #1
 800799c:	d0aa      	beq.n	80078f4 <_printf_i+0x12c>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	079b      	lsls	r3, r3, #30
 80079a2:	d413      	bmi.n	80079cc <_printf_i+0x204>
 80079a4:	68e0      	ldr	r0, [r4, #12]
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	4298      	cmp	r0, r3
 80079aa:	bfb8      	it	lt
 80079ac:	4618      	movlt	r0, r3
 80079ae:	e7a3      	b.n	80078f8 <_printf_i+0x130>
 80079b0:	2301      	movs	r3, #1
 80079b2:	464a      	mov	r2, r9
 80079b4:	4639      	mov	r1, r7
 80079b6:	4630      	mov	r0, r6
 80079b8:	47c0      	blx	r8
 80079ba:	3001      	adds	r0, #1
 80079bc:	d09a      	beq.n	80078f4 <_printf_i+0x12c>
 80079be:	3501      	adds	r5, #1
 80079c0:	68e3      	ldr	r3, [r4, #12]
 80079c2:	9a03      	ldr	r2, [sp, #12]
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	42ab      	cmp	r3, r5
 80079c8:	dcf2      	bgt.n	80079b0 <_printf_i+0x1e8>
 80079ca:	e7eb      	b.n	80079a4 <_printf_i+0x1dc>
 80079cc:	2500      	movs	r5, #0
 80079ce:	f104 0919 	add.w	r9, r4, #25
 80079d2:	e7f5      	b.n	80079c0 <_printf_i+0x1f8>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1ac      	bne.n	8007932 <_printf_i+0x16a>
 80079d8:	7803      	ldrb	r3, [r0, #0]
 80079da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e2:	e76c      	b.n	80078be <_printf_i+0xf6>
 80079e4:	0800afa2 	.word	0x0800afa2
 80079e8:	0800afb3 	.word	0x0800afb3

080079ec <_scanf_float>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	469a      	mov	sl, r3
 80079f2:	688b      	ldr	r3, [r1, #8]
 80079f4:	4616      	mov	r6, r2
 80079f6:	1e5a      	subs	r2, r3, #1
 80079f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079fc:	bf88      	it	hi
 80079fe:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007a02:	b087      	sub	sp, #28
 8007a04:	bf85      	ittet	hi
 8007a06:	189b      	addhi	r3, r3, r2
 8007a08:	9301      	strhi	r3, [sp, #4]
 8007a0a:	2300      	movls	r3, #0
 8007a0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a10:	4688      	mov	r8, r1
 8007a12:	f04f 0b00 	mov.w	fp, #0
 8007a16:	bf8c      	ite	hi
 8007a18:	608b      	strhi	r3, [r1, #8]
 8007a1a:	9301      	strls	r3, [sp, #4]
 8007a1c:	680b      	ldr	r3, [r1, #0]
 8007a1e:	4607      	mov	r7, r0
 8007a20:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007a24:	f848 3b1c 	str.w	r3, [r8], #28
 8007a28:	460c      	mov	r4, r1
 8007a2a:	4645      	mov	r5, r8
 8007a2c:	465a      	mov	r2, fp
 8007a2e:	46d9      	mov	r9, fp
 8007a30:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007a34:	f8cd b008 	str.w	fp, [sp, #8]
 8007a38:	68a1      	ldr	r1, [r4, #8]
 8007a3a:	b181      	cbz	r1, 8007a5e <_scanf_float+0x72>
 8007a3c:	6833      	ldr	r3, [r6, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b49      	cmp	r3, #73	; 0x49
 8007a42:	d071      	beq.n	8007b28 <_scanf_float+0x13c>
 8007a44:	d84d      	bhi.n	8007ae2 <_scanf_float+0xf6>
 8007a46:	2b39      	cmp	r3, #57	; 0x39
 8007a48:	d840      	bhi.n	8007acc <_scanf_float+0xe0>
 8007a4a:	2b31      	cmp	r3, #49	; 0x31
 8007a4c:	f080 8088 	bcs.w	8007b60 <_scanf_float+0x174>
 8007a50:	2b2d      	cmp	r3, #45	; 0x2d
 8007a52:	f000 8090 	beq.w	8007b76 <_scanf_float+0x18a>
 8007a56:	d815      	bhi.n	8007a84 <_scanf_float+0x98>
 8007a58:	2b2b      	cmp	r3, #43	; 0x2b
 8007a5a:	f000 808c 	beq.w	8007b76 <_scanf_float+0x18a>
 8007a5e:	f1b9 0f00 	cmp.w	r9, #0
 8007a62:	d003      	beq.n	8007a6c <_scanf_float+0x80>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6a:	6023      	str	r3, [r4, #0]
 8007a6c:	3a01      	subs	r2, #1
 8007a6e:	2a01      	cmp	r2, #1
 8007a70:	f200 80ea 	bhi.w	8007c48 <_scanf_float+0x25c>
 8007a74:	4545      	cmp	r5, r8
 8007a76:	f200 80dc 	bhi.w	8007c32 <_scanf_float+0x246>
 8007a7a:	2601      	movs	r6, #1
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	b007      	add	sp, #28
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	2b2e      	cmp	r3, #46	; 0x2e
 8007a86:	f000 809f 	beq.w	8007bc8 <_scanf_float+0x1dc>
 8007a8a:	2b30      	cmp	r3, #48	; 0x30
 8007a8c:	d1e7      	bne.n	8007a5e <_scanf_float+0x72>
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007a94:	d064      	beq.n	8007b60 <_scanf_float+0x174>
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007a9c:	6020      	str	r0, [r4, #0]
 8007a9e:	f109 0901 	add.w	r9, r9, #1
 8007aa2:	b11b      	cbz	r3, 8007aac <_scanf_float+0xc0>
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	3101      	adds	r1, #1
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	60a1      	str	r1, [r4, #8]
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	6873      	ldr	r3, [r6, #4]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	6073      	str	r3, [r6, #4]
 8007ac0:	f340 80ac 	ble.w	8007c1c <_scanf_float+0x230>
 8007ac4:	6833      	ldr	r3, [r6, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	e7b5      	b.n	8007a38 <_scanf_float+0x4c>
 8007acc:	2b45      	cmp	r3, #69	; 0x45
 8007ace:	f000 8085 	beq.w	8007bdc <_scanf_float+0x1f0>
 8007ad2:	2b46      	cmp	r3, #70	; 0x46
 8007ad4:	d06a      	beq.n	8007bac <_scanf_float+0x1c0>
 8007ad6:	2b41      	cmp	r3, #65	; 0x41
 8007ad8:	d1c1      	bne.n	8007a5e <_scanf_float+0x72>
 8007ada:	2a01      	cmp	r2, #1
 8007adc:	d1bf      	bne.n	8007a5e <_scanf_float+0x72>
 8007ade:	2202      	movs	r2, #2
 8007ae0:	e046      	b.n	8007b70 <_scanf_float+0x184>
 8007ae2:	2b65      	cmp	r3, #101	; 0x65
 8007ae4:	d07a      	beq.n	8007bdc <_scanf_float+0x1f0>
 8007ae6:	d818      	bhi.n	8007b1a <_scanf_float+0x12e>
 8007ae8:	2b54      	cmp	r3, #84	; 0x54
 8007aea:	d066      	beq.n	8007bba <_scanf_float+0x1ce>
 8007aec:	d811      	bhi.n	8007b12 <_scanf_float+0x126>
 8007aee:	2b4e      	cmp	r3, #78	; 0x4e
 8007af0:	d1b5      	bne.n	8007a5e <_scanf_float+0x72>
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d146      	bne.n	8007b84 <_scanf_float+0x198>
 8007af6:	f1b9 0f00 	cmp.w	r9, #0
 8007afa:	d145      	bne.n	8007b88 <_scanf_float+0x19c>
 8007afc:	6821      	ldr	r1, [r4, #0]
 8007afe:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007b02:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007b06:	d13f      	bne.n	8007b88 <_scanf_float+0x19c>
 8007b08:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007b0c:	6021      	str	r1, [r4, #0]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	e02e      	b.n	8007b70 <_scanf_float+0x184>
 8007b12:	2b59      	cmp	r3, #89	; 0x59
 8007b14:	d01e      	beq.n	8007b54 <_scanf_float+0x168>
 8007b16:	2b61      	cmp	r3, #97	; 0x61
 8007b18:	e7de      	b.n	8007ad8 <_scanf_float+0xec>
 8007b1a:	2b6e      	cmp	r3, #110	; 0x6e
 8007b1c:	d0e9      	beq.n	8007af2 <_scanf_float+0x106>
 8007b1e:	d815      	bhi.n	8007b4c <_scanf_float+0x160>
 8007b20:	2b66      	cmp	r3, #102	; 0x66
 8007b22:	d043      	beq.n	8007bac <_scanf_float+0x1c0>
 8007b24:	2b69      	cmp	r3, #105	; 0x69
 8007b26:	d19a      	bne.n	8007a5e <_scanf_float+0x72>
 8007b28:	f1bb 0f00 	cmp.w	fp, #0
 8007b2c:	d138      	bne.n	8007ba0 <_scanf_float+0x1b4>
 8007b2e:	f1b9 0f00 	cmp.w	r9, #0
 8007b32:	d197      	bne.n	8007a64 <_scanf_float+0x78>
 8007b34:	6821      	ldr	r1, [r4, #0]
 8007b36:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007b3a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007b3e:	d195      	bne.n	8007a6c <_scanf_float+0x80>
 8007b40:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007b44:	6021      	str	r1, [r4, #0]
 8007b46:	f04f 0b01 	mov.w	fp, #1
 8007b4a:	e011      	b.n	8007b70 <_scanf_float+0x184>
 8007b4c:	2b74      	cmp	r3, #116	; 0x74
 8007b4e:	d034      	beq.n	8007bba <_scanf_float+0x1ce>
 8007b50:	2b79      	cmp	r3, #121	; 0x79
 8007b52:	d184      	bne.n	8007a5e <_scanf_float+0x72>
 8007b54:	f1bb 0f07 	cmp.w	fp, #7
 8007b58:	d181      	bne.n	8007a5e <_scanf_float+0x72>
 8007b5a:	f04f 0b08 	mov.w	fp, #8
 8007b5e:	e007      	b.n	8007b70 <_scanf_float+0x184>
 8007b60:	eb12 0f0b 	cmn.w	r2, fp
 8007b64:	f47f af7b 	bne.w	8007a5e <_scanf_float+0x72>
 8007b68:	6821      	ldr	r1, [r4, #0]
 8007b6a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007b6e:	6021      	str	r1, [r4, #0]
 8007b70:	702b      	strb	r3, [r5, #0]
 8007b72:	3501      	adds	r5, #1
 8007b74:	e79a      	b.n	8007aac <_scanf_float+0xc0>
 8007b76:	6821      	ldr	r1, [r4, #0]
 8007b78:	0608      	lsls	r0, r1, #24
 8007b7a:	f57f af70 	bpl.w	8007a5e <_scanf_float+0x72>
 8007b7e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007b82:	e7f4      	b.n	8007b6e <_scanf_float+0x182>
 8007b84:	2a02      	cmp	r2, #2
 8007b86:	d047      	beq.n	8007c18 <_scanf_float+0x22c>
 8007b88:	f1bb 0f01 	cmp.w	fp, #1
 8007b8c:	d003      	beq.n	8007b96 <_scanf_float+0x1aa>
 8007b8e:	f1bb 0f04 	cmp.w	fp, #4
 8007b92:	f47f af64 	bne.w	8007a5e <_scanf_float+0x72>
 8007b96:	f10b 0b01 	add.w	fp, fp, #1
 8007b9a:	fa5f fb8b 	uxtb.w	fp, fp
 8007b9e:	e7e7      	b.n	8007b70 <_scanf_float+0x184>
 8007ba0:	f1bb 0f03 	cmp.w	fp, #3
 8007ba4:	d0f7      	beq.n	8007b96 <_scanf_float+0x1aa>
 8007ba6:	f1bb 0f05 	cmp.w	fp, #5
 8007baa:	e7f2      	b.n	8007b92 <_scanf_float+0x1a6>
 8007bac:	f1bb 0f02 	cmp.w	fp, #2
 8007bb0:	f47f af55 	bne.w	8007a5e <_scanf_float+0x72>
 8007bb4:	f04f 0b03 	mov.w	fp, #3
 8007bb8:	e7da      	b.n	8007b70 <_scanf_float+0x184>
 8007bba:	f1bb 0f06 	cmp.w	fp, #6
 8007bbe:	f47f af4e 	bne.w	8007a5e <_scanf_float+0x72>
 8007bc2:	f04f 0b07 	mov.w	fp, #7
 8007bc6:	e7d3      	b.n	8007b70 <_scanf_float+0x184>
 8007bc8:	6821      	ldr	r1, [r4, #0]
 8007bca:	0588      	lsls	r0, r1, #22
 8007bcc:	f57f af47 	bpl.w	8007a5e <_scanf_float+0x72>
 8007bd0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007bd4:	6021      	str	r1, [r4, #0]
 8007bd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8007bda:	e7c9      	b.n	8007b70 <_scanf_float+0x184>
 8007bdc:	6821      	ldr	r1, [r4, #0]
 8007bde:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007be2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007be6:	d006      	beq.n	8007bf6 <_scanf_float+0x20a>
 8007be8:	0548      	lsls	r0, r1, #21
 8007bea:	f57f af38 	bpl.w	8007a5e <_scanf_float+0x72>
 8007bee:	f1b9 0f00 	cmp.w	r9, #0
 8007bf2:	f43f af3b 	beq.w	8007a6c <_scanf_float+0x80>
 8007bf6:	0588      	lsls	r0, r1, #22
 8007bf8:	bf58      	it	pl
 8007bfa:	9802      	ldrpl	r0, [sp, #8]
 8007bfc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007c00:	bf58      	it	pl
 8007c02:	eba9 0000 	subpl.w	r0, r9, r0
 8007c06:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007c0a:	bf58      	it	pl
 8007c0c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007c10:	6021      	str	r1, [r4, #0]
 8007c12:	f04f 0900 	mov.w	r9, #0
 8007c16:	e7ab      	b.n	8007b70 <_scanf_float+0x184>
 8007c18:	2203      	movs	r2, #3
 8007c1a:	e7a9      	b.n	8007b70 <_scanf_float+0x184>
 8007c1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c20:	4631      	mov	r1, r6
 8007c22:	4638      	mov	r0, r7
 8007c24:	9205      	str	r2, [sp, #20]
 8007c26:	4798      	blx	r3
 8007c28:	9a05      	ldr	r2, [sp, #20]
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f43f af04 	beq.w	8007a38 <_scanf_float+0x4c>
 8007c30:	e715      	b.n	8007a5e <_scanf_float+0x72>
 8007c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c36:	4632      	mov	r2, r6
 8007c38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	4798      	blx	r3
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	e715      	b.n	8007a74 <_scanf_float+0x88>
 8007c48:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	d80a      	bhi.n	8007c66 <_scanf_float+0x27a>
 8007c50:	f1bb 0f02 	cmp.w	fp, #2
 8007c54:	d967      	bls.n	8007d26 <_scanf_float+0x33a>
 8007c56:	f1ab 0b03 	sub.w	fp, fp, #3
 8007c5a:	fa5f fb8b 	uxtb.w	fp, fp
 8007c5e:	eba5 0b0b 	sub.w	fp, r5, fp
 8007c62:	455d      	cmp	r5, fp
 8007c64:	d14a      	bne.n	8007cfc <_scanf_float+0x310>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	05da      	lsls	r2, r3, #23
 8007c6a:	d51f      	bpl.n	8007cac <_scanf_float+0x2c0>
 8007c6c:	055b      	lsls	r3, r3, #21
 8007c6e:	d467      	bmi.n	8007d40 <_scanf_float+0x354>
 8007c70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	2965      	cmp	r1, #101	; 0x65
 8007c78:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c7c:	f105 3bff 	add.w	fp, r5, #4294967295
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	d00d      	beq.n	8007ca0 <_scanf_float+0x2b4>
 8007c84:	2945      	cmp	r1, #69	; 0x45
 8007c86:	d00b      	beq.n	8007ca0 <_scanf_float+0x2b4>
 8007c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	4638      	mov	r0, r7
 8007c90:	4798      	blx	r3
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	f1a5 0b02 	sub.w	fp, r5, #2
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ca4:	4632      	mov	r2, r6
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	4798      	blx	r3
 8007caa:	465d      	mov	r5, fp
 8007cac:	6826      	ldr	r6, [r4, #0]
 8007cae:	f016 0610 	ands.w	r6, r6, #16
 8007cb2:	d176      	bne.n	8007da2 <_scanf_float+0x3b6>
 8007cb4:	702e      	strb	r6, [r5, #0]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc0:	d141      	bne.n	8007d46 <_scanf_float+0x35a>
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	eba9 0303 	sub.w	r3, r9, r3
 8007cc8:	425a      	negs	r2, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d148      	bne.n	8007d60 <_scanf_float+0x374>
 8007cce:	4641      	mov	r1, r8
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f000 fec8 	bl	8008a68 <_strtod_r>
 8007cd8:	6825      	ldr	r5, [r4, #0]
 8007cda:	4680      	mov	r8, r0
 8007cdc:	f015 0f02 	tst.w	r5, #2
 8007ce0:	4689      	mov	r9, r1
 8007ce2:	f8da 3000 	ldr.w	r3, [sl]
 8007ce6:	d046      	beq.n	8007d76 <_scanf_float+0x38a>
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	f8ca 2000 	str.w	r2, [sl]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	e9c3 8900 	strd	r8, r9, [r3]
 8007cf4:	68e3      	ldr	r3, [r4, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60e3      	str	r3, [r4, #12]
 8007cfa:	e6bf      	b.n	8007a7c <_scanf_float+0x90>
 8007cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d00:	4632      	mov	r2, r6
 8007d02:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007d06:	4638      	mov	r0, r7
 8007d08:	4798      	blx	r3
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	6123      	str	r3, [r4, #16]
 8007d10:	e7a7      	b.n	8007c62 <_scanf_float+0x276>
 8007d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d16:	4632      	mov	r2, r6
 8007d18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	4798      	blx	r3
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	4545      	cmp	r5, r8
 8007d28:	d8f3      	bhi.n	8007d12 <_scanf_float+0x326>
 8007d2a:	e6a6      	b.n	8007a7a <_scanf_float+0x8e>
 8007d2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d30:	4632      	mov	r2, r6
 8007d32:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007d36:	4638      	mov	r0, r7
 8007d38:	4798      	blx	r3
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	4545      	cmp	r5, r8
 8007d42:	d8f3      	bhi.n	8007d2c <_scanf_float+0x340>
 8007d44:	e699      	b.n	8007a7a <_scanf_float+0x8e>
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0c0      	beq.n	8007cce <_scanf_float+0x2e2>
 8007d4c:	9904      	ldr	r1, [sp, #16]
 8007d4e:	230a      	movs	r3, #10
 8007d50:	4632      	mov	r2, r6
 8007d52:	3101      	adds	r1, #1
 8007d54:	4638      	mov	r0, r7
 8007d56:	f000 ff13 	bl	8008b80 <_strtol_r>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	9d04      	ldr	r5, [sp, #16]
 8007d5e:	1ac2      	subs	r2, r0, r3
 8007d60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007d64:	429d      	cmp	r5, r3
 8007d66:	bf28      	it	cs
 8007d68:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007d6c:	490e      	ldr	r1, [pc, #56]	; (8007da8 <_scanf_float+0x3bc>)
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f81c 	bl	8007dac <siprintf>
 8007d74:	e7ab      	b.n	8007cce <_scanf_float+0x2e2>
 8007d76:	1d1f      	adds	r7, r3, #4
 8007d78:	f015 0504 	ands.w	r5, r5, #4
 8007d7c:	f8ca 7000 	str.w	r7, [sl]
 8007d80:	d1b5      	bne.n	8007cee <_scanf_float+0x302>
 8007d82:	681f      	ldr	r7, [r3, #0]
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	f7f8 fe40 	bl	8000a0c <__aeabi_dcmpun>
 8007d8c:	b120      	cbz	r0, 8007d98 <_scanf_float+0x3ac>
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f7ff f8fa 	bl	8006f88 <nanf>
 8007d94:	6038      	str	r0, [r7, #0]
 8007d96:	e7ad      	b.n	8007cf4 <_scanf_float+0x308>
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	f7f8 fe94 	bl	8000ac8 <__aeabi_d2f>
 8007da0:	e7f8      	b.n	8007d94 <_scanf_float+0x3a8>
 8007da2:	2600      	movs	r6, #0
 8007da4:	e66a      	b.n	8007a7c <_scanf_float+0x90>
 8007da6:	bf00      	nop
 8007da8:	0800afc4 	.word	0x0800afc4

08007dac <siprintf>:
 8007dac:	b40e      	push	{r1, r2, r3}
 8007dae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007db2:	b500      	push	{lr}
 8007db4:	b09c      	sub	sp, #112	; 0x70
 8007db6:	ab1d      	add	r3, sp, #116	; 0x74
 8007db8:	9002      	str	r0, [sp, #8]
 8007dba:	9006      	str	r0, [sp, #24]
 8007dbc:	9107      	str	r1, [sp, #28]
 8007dbe:	9104      	str	r1, [sp, #16]
 8007dc0:	4808      	ldr	r0, [pc, #32]	; (8007de4 <siprintf+0x38>)
 8007dc2:	4909      	ldr	r1, [pc, #36]	; (8007de8 <siprintf+0x3c>)
 8007dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc8:	9105      	str	r1, [sp, #20]
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	a902      	add	r1, sp, #8
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	f002 fd94 	bl	800a8fc <_svfiprintf_r>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	9b02      	ldr	r3, [sp, #8]
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	b01c      	add	sp, #112	; 0x70
 8007ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de0:	b003      	add	sp, #12
 8007de2:	4770      	bx	lr
 8007de4:	200000ac 	.word	0x200000ac
 8007de8:	ffff0208 	.word	0xffff0208

08007dec <strstr>:
 8007dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dee:	7803      	ldrb	r3, [r0, #0]
 8007df0:	b17b      	cbz	r3, 8007e12 <strstr+0x26>
 8007df2:	4604      	mov	r4, r0
 8007df4:	7823      	ldrb	r3, [r4, #0]
 8007df6:	4620      	mov	r0, r4
 8007df8:	1c66      	adds	r6, r4, #1
 8007dfa:	b17b      	cbz	r3, 8007e1c <strstr+0x30>
 8007dfc:	1e4a      	subs	r2, r1, #1
 8007dfe:	1e63      	subs	r3, r4, #1
 8007e00:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007e04:	b14d      	cbz	r5, 8007e1a <strstr+0x2e>
 8007e06:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007e0a:	4634      	mov	r4, r6
 8007e0c:	42af      	cmp	r7, r5
 8007e0e:	d0f7      	beq.n	8007e00 <strstr+0x14>
 8007e10:	e7f0      	b.n	8007df4 <strstr+0x8>
 8007e12:	780b      	ldrb	r3, [r1, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bf18      	it	ne
 8007e18:	2000      	movne	r0, #0
 8007e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	e7fc      	b.n	8007e1a <strstr+0x2e>

08007e20 <sulp>:
 8007e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e24:	460f      	mov	r7, r1
 8007e26:	4690      	mov	r8, r2
 8007e28:	f002 fb2c 	bl	800a484 <__ulp>
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	460d      	mov	r5, r1
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	d011      	beq.n	8007e5a <sulp+0x3a>
 8007e36:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007e3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	dd0b      	ble.n	8007e5a <sulp+0x3a>
 8007e42:	2400      	movs	r4, #0
 8007e44:	051b      	lsls	r3, r3, #20
 8007e46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	f7f8 fb41 	bl	80004d8 <__aeabi_dmul>
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e62:	0000      	movs	r0, r0
 8007e64:	0000      	movs	r0, r0
	...

08007e68 <_strtod_l>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	461f      	mov	r7, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	b0a1      	sub	sp, #132	; 0x84
 8007e72:	4683      	mov	fp, r0
 8007e74:	4638      	mov	r0, r7
 8007e76:	460e      	mov	r6, r1
 8007e78:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e7a:	931c      	str	r3, [sp, #112]	; 0x70
 8007e7c:	f001 ffff 	bl	8009e7e <__localeconv_l>
 8007e80:	4680      	mov	r8, r0
 8007e82:	6800      	ldr	r0, [r0, #0]
 8007e84:	f7f8 f964 	bl	8000150 <strlen>
 8007e88:	f04f 0900 	mov.w	r9, #0
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	f04f 0a00 	mov.w	sl, #0
 8007e92:	961b      	str	r6, [sp, #108]	; 0x6c
 8007e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	2a0d      	cmp	r2, #13
 8007e9a:	d832      	bhi.n	8007f02 <_strtod_l+0x9a>
 8007e9c:	2a09      	cmp	r2, #9
 8007e9e:	d236      	bcs.n	8007f0e <_strtod_l+0xa6>
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	d03e      	beq.n	8007f22 <_strtod_l+0xba>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ea8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007eaa:	782b      	ldrb	r3, [r5, #0]
 8007eac:	2b30      	cmp	r3, #48	; 0x30
 8007eae:	f040 80ac 	bne.w	800800a <_strtod_l+0x1a2>
 8007eb2:	786b      	ldrb	r3, [r5, #1]
 8007eb4:	2b58      	cmp	r3, #88	; 0x58
 8007eb6:	d001      	beq.n	8007ebc <_strtod_l+0x54>
 8007eb8:	2b78      	cmp	r3, #120	; 0x78
 8007eba:	d167      	bne.n	8007f8c <_strtod_l+0x124>
 8007ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ebe:	9702      	str	r7, [sp, #8]
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	ab1c      	add	r3, sp, #112	; 0x70
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4a89      	ldr	r2, [pc, #548]	; (80080ec <_strtod_l+0x284>)
 8007ec8:	ab1d      	add	r3, sp, #116	; 0x74
 8007eca:	a91b      	add	r1, sp, #108	; 0x6c
 8007ecc:	4658      	mov	r0, fp
 8007ece:	f001 fcfb 	bl	80098c8 <__gethex>
 8007ed2:	f010 0407 	ands.w	r4, r0, #7
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	d005      	beq.n	8007ee6 <_strtod_l+0x7e>
 8007eda:	2c06      	cmp	r4, #6
 8007edc:	d12b      	bne.n	8007f36 <_strtod_l+0xce>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	951b      	str	r5, [sp, #108]	; 0x6c
 8007ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ee6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 85a6 	bne.w	8008a3a <_strtod_l+0xbd2>
 8007eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef0:	b1e3      	cbz	r3, 8007f2c <_strtod_l+0xc4>
 8007ef2:	464a      	mov	r2, r9
 8007ef4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4619      	mov	r1, r3
 8007efc:	b021      	add	sp, #132	; 0x84
 8007efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f02:	2a2b      	cmp	r2, #43	; 0x2b
 8007f04:	d015      	beq.n	8007f32 <_strtod_l+0xca>
 8007f06:	2a2d      	cmp	r2, #45	; 0x2d
 8007f08:	d004      	beq.n	8007f14 <_strtod_l+0xac>
 8007f0a:	2a20      	cmp	r2, #32
 8007f0c:	d1ca      	bne.n	8007ea4 <_strtod_l+0x3c>
 8007f0e:	3301      	adds	r3, #1
 8007f10:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f12:	e7bf      	b.n	8007e94 <_strtod_l+0x2c>
 8007f14:	2201      	movs	r2, #1
 8007f16:	920d      	str	r2, [sp, #52]	; 0x34
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1c2      	bne.n	8007ea8 <_strtod_l+0x40>
 8007f22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f24:	961b      	str	r6, [sp, #108]	; 0x6c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f040 8585 	bne.w	8008a36 <_strtod_l+0xbce>
 8007f2c:	464a      	mov	r2, r9
 8007f2e:	4653      	mov	r3, sl
 8007f30:	e7e2      	b.n	8007ef8 <_strtod_l+0x90>
 8007f32:	2200      	movs	r2, #0
 8007f34:	e7ef      	b.n	8007f16 <_strtod_l+0xae>
 8007f36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f38:	b13a      	cbz	r2, 8007f4a <_strtod_l+0xe2>
 8007f3a:	2135      	movs	r1, #53	; 0x35
 8007f3c:	a81e      	add	r0, sp, #120	; 0x78
 8007f3e:	f002 fb94 	bl	800a66a <__copybits>
 8007f42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f44:	4658      	mov	r0, fp
 8007f46:	f002 f807 	bl	8009f58 <_Bfree>
 8007f4a:	3c01      	subs	r4, #1
 8007f4c:	2c04      	cmp	r4, #4
 8007f4e:	d806      	bhi.n	8007f5e <_strtod_l+0xf6>
 8007f50:	e8df f004 	tbb	[pc, r4]
 8007f54:	1714030a 	.word	0x1714030a
 8007f58:	0a          	.byte	0x0a
 8007f59:	00          	.byte	0x00
 8007f5a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8007f5e:	0731      	lsls	r1, r6, #28
 8007f60:	d5c1      	bpl.n	8007ee6 <_strtod_l+0x7e>
 8007f62:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8007f66:	e7be      	b.n	8007ee6 <_strtod_l+0x7e>
 8007f68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007f6a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8007f6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f76:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8007f7a:	e7f0      	b.n	8007f5e <_strtod_l+0xf6>
 8007f7c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80080f0 <_strtod_l+0x288>
 8007f80:	e7ed      	b.n	8007f5e <_strtod_l+0xf6>
 8007f82:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007f86:	f04f 39ff 	mov.w	r9, #4294967295
 8007f8a:	e7e8      	b.n	8007f5e <_strtod_l+0xf6>
 8007f8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b30      	cmp	r3, #48	; 0x30
 8007f96:	d0f9      	beq.n	8007f8c <_strtod_l+0x124>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0a4      	beq.n	8007ee6 <_strtod_l+0x7e>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	2500      	movs	r5, #0
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	9307      	str	r3, [sp, #28]
 8007fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fa6:	9506      	str	r5, [sp, #24]
 8007fa8:	9308      	str	r3, [sp, #32]
 8007faa:	9504      	str	r5, [sp, #16]
 8007fac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007fae:	7807      	ldrb	r7, [r0, #0]
 8007fb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007fb4:	b2d9      	uxtb	r1, r3
 8007fb6:	2909      	cmp	r1, #9
 8007fb8:	d929      	bls.n	800800e <_strtod_l+0x1a6>
 8007fba:	4622      	mov	r2, r4
 8007fbc:	f8d8 1000 	ldr.w	r1, [r8]
 8007fc0:	f002 fda4 	bl	800ab0c <strncmp>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d031      	beq.n	800802c <_strtod_l+0x1c4>
 8007fc8:	2000      	movs	r0, #0
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4602      	mov	r2, r0
 8007fce:	9c04      	ldr	r4, [sp, #16]
 8007fd0:	9005      	str	r0, [sp, #20]
 8007fd2:	2b65      	cmp	r3, #101	; 0x65
 8007fd4:	d001      	beq.n	8007fda <_strtod_l+0x172>
 8007fd6:	2b45      	cmp	r3, #69	; 0x45
 8007fd8:	d114      	bne.n	8008004 <_strtod_l+0x19c>
 8007fda:	b924      	cbnz	r4, 8007fe6 <_strtod_l+0x17e>
 8007fdc:	b910      	cbnz	r0, 8007fe4 <_strtod_l+0x17c>
 8007fde:	9b07      	ldr	r3, [sp, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d09e      	beq.n	8007f22 <_strtod_l+0xba>
 8007fe4:	2400      	movs	r4, #0
 8007fe6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007fe8:	1c73      	adds	r3, r6, #1
 8007fea:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fec:	7873      	ldrb	r3, [r6, #1]
 8007fee:	2b2b      	cmp	r3, #43	; 0x2b
 8007ff0:	d078      	beq.n	80080e4 <_strtod_l+0x27c>
 8007ff2:	2b2d      	cmp	r3, #45	; 0x2d
 8007ff4:	d070      	beq.n	80080d8 <_strtod_l+0x270>
 8007ff6:	f04f 0c00 	mov.w	ip, #0
 8007ffa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007ffe:	2f09      	cmp	r7, #9
 8008000:	d97c      	bls.n	80080fc <_strtod_l+0x294>
 8008002:	961b      	str	r6, [sp, #108]	; 0x6c
 8008004:	f04f 0e00 	mov.w	lr, #0
 8008008:	e09a      	b.n	8008140 <_strtod_l+0x2d8>
 800800a:	2300      	movs	r3, #0
 800800c:	e7c7      	b.n	8007f9e <_strtod_l+0x136>
 800800e:	9904      	ldr	r1, [sp, #16]
 8008010:	3001      	adds	r0, #1
 8008012:	2908      	cmp	r1, #8
 8008014:	bfd7      	itett	le
 8008016:	9906      	ldrle	r1, [sp, #24]
 8008018:	fb02 3505 	mlagt	r5, r2, r5, r3
 800801c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008020:	9306      	strle	r3, [sp, #24]
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	901b      	str	r0, [sp, #108]	; 0x6c
 8008026:	3301      	adds	r3, #1
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	e7bf      	b.n	8007fac <_strtod_l+0x144>
 800802c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800802e:	191a      	adds	r2, r3, r4
 8008030:	921b      	str	r2, [sp, #108]	; 0x6c
 8008032:	9a04      	ldr	r2, [sp, #16]
 8008034:	5d1b      	ldrb	r3, [r3, r4]
 8008036:	2a00      	cmp	r2, #0
 8008038:	d037      	beq.n	80080aa <_strtod_l+0x242>
 800803a:	4602      	mov	r2, r0
 800803c:	9c04      	ldr	r4, [sp, #16]
 800803e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008042:	2909      	cmp	r1, #9
 8008044:	d913      	bls.n	800806e <_strtod_l+0x206>
 8008046:	2101      	movs	r1, #1
 8008048:	9105      	str	r1, [sp, #20]
 800804a:	e7c2      	b.n	8007fd2 <_strtod_l+0x16a>
 800804c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800804e:	3001      	adds	r0, #1
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	921b      	str	r2, [sp, #108]	; 0x6c
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b30      	cmp	r3, #48	; 0x30
 8008058:	d0f8      	beq.n	800804c <_strtod_l+0x1e4>
 800805a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800805e:	2a08      	cmp	r2, #8
 8008060:	f200 84f0 	bhi.w	8008a44 <_strtod_l+0xbdc>
 8008064:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008066:	9208      	str	r2, [sp, #32]
 8008068:	4602      	mov	r2, r0
 800806a:	2000      	movs	r0, #0
 800806c:	4604      	mov	r4, r0
 800806e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008072:	f100 0101 	add.w	r1, r0, #1
 8008076:	d012      	beq.n	800809e <_strtod_l+0x236>
 8008078:	440a      	add	r2, r1
 800807a:	270a      	movs	r7, #10
 800807c:	4621      	mov	r1, r4
 800807e:	eb00 0c04 	add.w	ip, r0, r4
 8008082:	458c      	cmp	ip, r1
 8008084:	d113      	bne.n	80080ae <_strtod_l+0x246>
 8008086:	1821      	adds	r1, r4, r0
 8008088:	2908      	cmp	r1, #8
 800808a:	f104 0401 	add.w	r4, r4, #1
 800808e:	4404      	add	r4, r0
 8008090:	dc19      	bgt.n	80080c6 <_strtod_l+0x25e>
 8008092:	210a      	movs	r1, #10
 8008094:	9b06      	ldr	r3, [sp, #24]
 8008096:	fb01 e303 	mla	r3, r1, r3, lr
 800809a:	9306      	str	r3, [sp, #24]
 800809c:	2100      	movs	r1, #0
 800809e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080a0:	1c58      	adds	r0, r3, #1
 80080a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	4608      	mov	r0, r1
 80080a8:	e7c9      	b.n	800803e <_strtod_l+0x1d6>
 80080aa:	9804      	ldr	r0, [sp, #16]
 80080ac:	e7d3      	b.n	8008056 <_strtod_l+0x1ee>
 80080ae:	2908      	cmp	r1, #8
 80080b0:	f101 0101 	add.w	r1, r1, #1
 80080b4:	dc03      	bgt.n	80080be <_strtod_l+0x256>
 80080b6:	9b06      	ldr	r3, [sp, #24]
 80080b8:	437b      	muls	r3, r7
 80080ba:	9306      	str	r3, [sp, #24]
 80080bc:	e7e1      	b.n	8008082 <_strtod_l+0x21a>
 80080be:	2910      	cmp	r1, #16
 80080c0:	bfd8      	it	le
 80080c2:	437d      	mulle	r5, r7
 80080c4:	e7dd      	b.n	8008082 <_strtod_l+0x21a>
 80080c6:	2c10      	cmp	r4, #16
 80080c8:	bfdc      	itt	le
 80080ca:	210a      	movle	r1, #10
 80080cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80080d0:	e7e4      	b.n	800809c <_strtod_l+0x234>
 80080d2:	2301      	movs	r3, #1
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	e781      	b.n	8007fdc <_strtod_l+0x174>
 80080d8:	f04f 0c01 	mov.w	ip, #1
 80080dc:	1cb3      	adds	r3, r6, #2
 80080de:	931b      	str	r3, [sp, #108]	; 0x6c
 80080e0:	78b3      	ldrb	r3, [r6, #2]
 80080e2:	e78a      	b.n	8007ffa <_strtod_l+0x192>
 80080e4:	f04f 0c00 	mov.w	ip, #0
 80080e8:	e7f8      	b.n	80080dc <_strtod_l+0x274>
 80080ea:	bf00      	nop
 80080ec:	0800afcc 	.word	0x0800afcc
 80080f0:	7ff00000 	.word	0x7ff00000
 80080f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080f6:	1c5f      	adds	r7, r3, #1
 80080f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	d0f9      	beq.n	80080f4 <_strtod_l+0x28c>
 8008100:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008104:	2f08      	cmp	r7, #8
 8008106:	f63f af7d 	bhi.w	8008004 <_strtod_l+0x19c>
 800810a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800810e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008110:	9309      	str	r3, [sp, #36]	; 0x24
 8008112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008114:	1c5f      	adds	r7, r3, #1
 8008116:	971b      	str	r7, [sp, #108]	; 0x6c
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800811e:	f1b8 0f09 	cmp.w	r8, #9
 8008122:	d937      	bls.n	8008194 <_strtod_l+0x32c>
 8008124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008126:	1a7f      	subs	r7, r7, r1
 8008128:	2f08      	cmp	r7, #8
 800812a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800812e:	dc37      	bgt.n	80081a0 <_strtod_l+0x338>
 8008130:	45be      	cmp	lr, r7
 8008132:	bfa8      	it	ge
 8008134:	46be      	movge	lr, r7
 8008136:	f1bc 0f00 	cmp.w	ip, #0
 800813a:	d001      	beq.n	8008140 <_strtod_l+0x2d8>
 800813c:	f1ce 0e00 	rsb	lr, lr, #0
 8008140:	2c00      	cmp	r4, #0
 8008142:	d151      	bne.n	80081e8 <_strtod_l+0x380>
 8008144:	2800      	cmp	r0, #0
 8008146:	f47f aece 	bne.w	8007ee6 <_strtod_l+0x7e>
 800814a:	9a07      	ldr	r2, [sp, #28]
 800814c:	2a00      	cmp	r2, #0
 800814e:	f47f aeca 	bne.w	8007ee6 <_strtod_l+0x7e>
 8008152:	9a05      	ldr	r2, [sp, #20]
 8008154:	2a00      	cmp	r2, #0
 8008156:	f47f aee4 	bne.w	8007f22 <_strtod_l+0xba>
 800815a:	2b4e      	cmp	r3, #78	; 0x4e
 800815c:	d027      	beq.n	80081ae <_strtod_l+0x346>
 800815e:	dc21      	bgt.n	80081a4 <_strtod_l+0x33c>
 8008160:	2b49      	cmp	r3, #73	; 0x49
 8008162:	f47f aede 	bne.w	8007f22 <_strtod_l+0xba>
 8008166:	49a4      	ldr	r1, [pc, #656]	; (80083f8 <_strtod_l+0x590>)
 8008168:	a81b      	add	r0, sp, #108	; 0x6c
 800816a:	f001 fde1 	bl	8009d30 <__match>
 800816e:	2800      	cmp	r0, #0
 8008170:	f43f aed7 	beq.w	8007f22 <_strtod_l+0xba>
 8008174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008176:	49a1      	ldr	r1, [pc, #644]	; (80083fc <_strtod_l+0x594>)
 8008178:	3b01      	subs	r3, #1
 800817a:	a81b      	add	r0, sp, #108	; 0x6c
 800817c:	931b      	str	r3, [sp, #108]	; 0x6c
 800817e:	f001 fdd7 	bl	8009d30 <__match>
 8008182:	b910      	cbnz	r0, 800818a <_strtod_l+0x322>
 8008184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008186:	3301      	adds	r3, #1
 8008188:	931b      	str	r3, [sp, #108]	; 0x6c
 800818a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008410 <_strtod_l+0x5a8>
 800818e:	f04f 0900 	mov.w	r9, #0
 8008192:	e6a8      	b.n	8007ee6 <_strtod_l+0x7e>
 8008194:	210a      	movs	r1, #10
 8008196:	fb01 3e0e 	mla	lr, r1, lr, r3
 800819a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800819e:	e7b8      	b.n	8008112 <_strtod_l+0x2aa>
 80081a0:	46be      	mov	lr, r7
 80081a2:	e7c8      	b.n	8008136 <_strtod_l+0x2ce>
 80081a4:	2b69      	cmp	r3, #105	; 0x69
 80081a6:	d0de      	beq.n	8008166 <_strtod_l+0x2fe>
 80081a8:	2b6e      	cmp	r3, #110	; 0x6e
 80081aa:	f47f aeba 	bne.w	8007f22 <_strtod_l+0xba>
 80081ae:	4994      	ldr	r1, [pc, #592]	; (8008400 <_strtod_l+0x598>)
 80081b0:	a81b      	add	r0, sp, #108	; 0x6c
 80081b2:	f001 fdbd 	bl	8009d30 <__match>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f43f aeb3 	beq.w	8007f22 <_strtod_l+0xba>
 80081bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b28      	cmp	r3, #40	; 0x28
 80081c2:	d10e      	bne.n	80081e2 <_strtod_l+0x37a>
 80081c4:	aa1e      	add	r2, sp, #120	; 0x78
 80081c6:	498f      	ldr	r1, [pc, #572]	; (8008404 <_strtod_l+0x59c>)
 80081c8:	a81b      	add	r0, sp, #108	; 0x6c
 80081ca:	f001 fdc5 	bl	8009d58 <__hexnan>
 80081ce:	2805      	cmp	r0, #5
 80081d0:	d107      	bne.n	80081e2 <_strtod_l+0x37a>
 80081d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081d4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80081d8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80081dc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80081e0:	e681      	b.n	8007ee6 <_strtod_l+0x7e>
 80081e2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008418 <_strtod_l+0x5b0>
 80081e6:	e7d2      	b.n	800818e <_strtod_l+0x326>
 80081e8:	ebae 0302 	sub.w	r3, lr, r2
 80081ec:	9307      	str	r3, [sp, #28]
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	9806      	ldr	r0, [sp, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bf08      	it	eq
 80081f6:	4623      	moveq	r3, r4
 80081f8:	2c10      	cmp	r4, #16
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	46a0      	mov	r8, r4
 80081fe:	bfa8      	it	ge
 8008200:	f04f 0810 	movge.w	r8, #16
 8008204:	f7f8 f8ee 	bl	80003e4 <__aeabi_ui2d>
 8008208:	2c09      	cmp	r4, #9
 800820a:	4681      	mov	r9, r0
 800820c:	468a      	mov	sl, r1
 800820e:	dc13      	bgt.n	8008238 <_strtod_l+0x3d0>
 8008210:	9b07      	ldr	r3, [sp, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f43f ae67 	beq.w	8007ee6 <_strtod_l+0x7e>
 8008218:	9b07      	ldr	r3, [sp, #28]
 800821a:	dd7e      	ble.n	800831a <_strtod_l+0x4b2>
 800821c:	2b16      	cmp	r3, #22
 800821e:	dc65      	bgt.n	80082ec <_strtod_l+0x484>
 8008220:	4a79      	ldr	r2, [pc, #484]	; (8008408 <_strtod_l+0x5a0>)
 8008222:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008226:	464a      	mov	r2, r9
 8008228:	e9de 0100 	ldrd	r0, r1, [lr]
 800822c:	4653      	mov	r3, sl
 800822e:	f7f8 f953 	bl	80004d8 <__aeabi_dmul>
 8008232:	4681      	mov	r9, r0
 8008234:	468a      	mov	sl, r1
 8008236:	e656      	b.n	8007ee6 <_strtod_l+0x7e>
 8008238:	4b73      	ldr	r3, [pc, #460]	; (8008408 <_strtod_l+0x5a0>)
 800823a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800823e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008242:	f7f8 f949 	bl	80004d8 <__aeabi_dmul>
 8008246:	4606      	mov	r6, r0
 8008248:	4628      	mov	r0, r5
 800824a:	460f      	mov	r7, r1
 800824c:	f7f8 f8ca 	bl	80003e4 <__aeabi_ui2d>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4630      	mov	r0, r6
 8008256:	4639      	mov	r1, r7
 8008258:	f7f7 ff88 	bl	800016c <__adddf3>
 800825c:	2c0f      	cmp	r4, #15
 800825e:	4681      	mov	r9, r0
 8008260:	468a      	mov	sl, r1
 8008262:	ddd5      	ble.n	8008210 <_strtod_l+0x3a8>
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	eba4 0808 	sub.w	r8, r4, r8
 800826a:	4498      	add	r8, r3
 800826c:	f1b8 0f00 	cmp.w	r8, #0
 8008270:	f340 809a 	ble.w	80083a8 <_strtod_l+0x540>
 8008274:	f018 030f 	ands.w	r3, r8, #15
 8008278:	d00a      	beq.n	8008290 <_strtod_l+0x428>
 800827a:	4963      	ldr	r1, [pc, #396]	; (8008408 <_strtod_l+0x5a0>)
 800827c:	464a      	mov	r2, r9
 800827e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008286:	4653      	mov	r3, sl
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4681      	mov	r9, r0
 800828e:	468a      	mov	sl, r1
 8008290:	f038 080f 	bics.w	r8, r8, #15
 8008294:	d077      	beq.n	8008386 <_strtod_l+0x51e>
 8008296:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800829a:	dd4b      	ble.n	8008334 <_strtod_l+0x4cc>
 800829c:	f04f 0800 	mov.w	r8, #0
 80082a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80082a4:	f8cd 8020 	str.w	r8, [sp, #32]
 80082a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80082ac:	2322      	movs	r3, #34	; 0x22
 80082ae:	f04f 0900 	mov.w	r9, #0
 80082b2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008410 <_strtod_l+0x5a8>
 80082b6:	f8cb 3000 	str.w	r3, [fp]
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f43f ae12 	beq.w	8007ee6 <_strtod_l+0x7e>
 80082c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082c4:	4658      	mov	r0, fp
 80082c6:	f001 fe47 	bl	8009f58 <_Bfree>
 80082ca:	9906      	ldr	r1, [sp, #24]
 80082cc:	4658      	mov	r0, fp
 80082ce:	f001 fe43 	bl	8009f58 <_Bfree>
 80082d2:	9904      	ldr	r1, [sp, #16]
 80082d4:	4658      	mov	r0, fp
 80082d6:	f001 fe3f 	bl	8009f58 <_Bfree>
 80082da:	9908      	ldr	r1, [sp, #32]
 80082dc:	4658      	mov	r0, fp
 80082de:	f001 fe3b 	bl	8009f58 <_Bfree>
 80082e2:	4641      	mov	r1, r8
 80082e4:	4658      	mov	r0, fp
 80082e6:	f001 fe37 	bl	8009f58 <_Bfree>
 80082ea:	e5fc      	b.n	8007ee6 <_strtod_l+0x7e>
 80082ec:	9a07      	ldr	r2, [sp, #28]
 80082ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80082f2:	4293      	cmp	r3, r2
 80082f4:	dbb6      	blt.n	8008264 <_strtod_l+0x3fc>
 80082f6:	4d44      	ldr	r5, [pc, #272]	; (8008408 <_strtod_l+0x5a0>)
 80082f8:	f1c4 040f 	rsb	r4, r4, #15
 80082fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008300:	464a      	mov	r2, r9
 8008302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008306:	4653      	mov	r3, sl
 8008308:	f7f8 f8e6 	bl	80004d8 <__aeabi_dmul>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	1b1c      	subs	r4, r3, r4
 8008310:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008314:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008318:	e789      	b.n	800822e <_strtod_l+0x3c6>
 800831a:	f113 0f16 	cmn.w	r3, #22
 800831e:	dba1      	blt.n	8008264 <_strtod_l+0x3fc>
 8008320:	4a39      	ldr	r2, [pc, #228]	; (8008408 <_strtod_l+0x5a0>)
 8008322:	4648      	mov	r0, r9
 8008324:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008328:	e9d2 2300 	ldrd	r2, r3, [r2]
 800832c:	4651      	mov	r1, sl
 800832e:	f7f8 f9fd 	bl	800072c <__aeabi_ddiv>
 8008332:	e77e      	b.n	8008232 <_strtod_l+0x3ca>
 8008334:	2300      	movs	r3, #0
 8008336:	4648      	mov	r0, r9
 8008338:	4651      	mov	r1, sl
 800833a:	461d      	mov	r5, r3
 800833c:	4e33      	ldr	r6, [pc, #204]	; (800840c <_strtod_l+0x5a4>)
 800833e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008342:	f1b8 0f01 	cmp.w	r8, #1
 8008346:	dc21      	bgt.n	800838c <_strtod_l+0x524>
 8008348:	b10b      	cbz	r3, 800834e <_strtod_l+0x4e6>
 800834a:	4681      	mov	r9, r0
 800834c:	468a      	mov	sl, r1
 800834e:	4b2f      	ldr	r3, [pc, #188]	; (800840c <_strtod_l+0x5a4>)
 8008350:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8008354:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008358:	464a      	mov	r2, r9
 800835a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800835e:	4653      	mov	r3, sl
 8008360:	f7f8 f8ba 	bl	80004d8 <__aeabi_dmul>
 8008364:	4b2a      	ldr	r3, [pc, #168]	; (8008410 <_strtod_l+0x5a8>)
 8008366:	460a      	mov	r2, r1
 8008368:	400b      	ands	r3, r1
 800836a:	492a      	ldr	r1, [pc, #168]	; (8008414 <_strtod_l+0x5ac>)
 800836c:	4681      	mov	r9, r0
 800836e:	428b      	cmp	r3, r1
 8008370:	d894      	bhi.n	800829c <_strtod_l+0x434>
 8008372:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008376:	428b      	cmp	r3, r1
 8008378:	bf86      	itte	hi
 800837a:	f04f 39ff 	movhi.w	r9, #4294967295
 800837e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800841c <_strtod_l+0x5b4>
 8008382:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8008386:	2300      	movs	r3, #0
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	e07b      	b.n	8008484 <_strtod_l+0x61c>
 800838c:	f018 0f01 	tst.w	r8, #1
 8008390:	d006      	beq.n	80083a0 <_strtod_l+0x538>
 8008392:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f7f8 f89d 	bl	80004d8 <__aeabi_dmul>
 800839e:	2301      	movs	r3, #1
 80083a0:	3501      	adds	r5, #1
 80083a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80083a6:	e7cc      	b.n	8008342 <_strtod_l+0x4da>
 80083a8:	d0ed      	beq.n	8008386 <_strtod_l+0x51e>
 80083aa:	f1c8 0800 	rsb	r8, r8, #0
 80083ae:	f018 020f 	ands.w	r2, r8, #15
 80083b2:	d00a      	beq.n	80083ca <_strtod_l+0x562>
 80083b4:	4b14      	ldr	r3, [pc, #80]	; (8008408 <_strtod_l+0x5a0>)
 80083b6:	4648      	mov	r0, r9
 80083b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083bc:	4651      	mov	r1, sl
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f7f8 f9b3 	bl	800072c <__aeabi_ddiv>
 80083c6:	4681      	mov	r9, r0
 80083c8:	468a      	mov	sl, r1
 80083ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80083ce:	d0da      	beq.n	8008386 <_strtod_l+0x51e>
 80083d0:	f1b8 0f1f 	cmp.w	r8, #31
 80083d4:	dd24      	ble.n	8008420 <_strtod_l+0x5b8>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	f8cd 8010 	str.w	r8, [sp, #16]
 80083de:	f8cd 8020 	str.w	r8, [sp, #32]
 80083e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80083e6:	2322      	movs	r3, #34	; 0x22
 80083e8:	f04f 0900 	mov.w	r9, #0
 80083ec:	f04f 0a00 	mov.w	sl, #0
 80083f0:	f8cb 3000 	str.w	r3, [fp]
 80083f4:	e761      	b.n	80082ba <_strtod_l+0x452>
 80083f6:	bf00      	nop
 80083f8:	0800af95 	.word	0x0800af95
 80083fc:	0800b023 	.word	0x0800b023
 8008400:	0800af9d 	.word	0x0800af9d
 8008404:	0800afe0 	.word	0x0800afe0
 8008408:	0800b060 	.word	0x0800b060
 800840c:	0800b038 	.word	0x0800b038
 8008410:	7ff00000 	.word	0x7ff00000
 8008414:	7ca00000 	.word	0x7ca00000
 8008418:	fff80000 	.word	0xfff80000
 800841c:	7fefffff 	.word	0x7fefffff
 8008420:	f018 0310 	ands.w	r3, r8, #16
 8008424:	bf18      	it	ne
 8008426:	236a      	movne	r3, #106	; 0x6a
 8008428:	4648      	mov	r0, r9
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	4651      	mov	r1, sl
 800842e:	2300      	movs	r3, #0
 8008430:	4da1      	ldr	r5, [pc, #644]	; (80086b8 <_strtod_l+0x850>)
 8008432:	f1b8 0f00 	cmp.w	r8, #0
 8008436:	f300 8113 	bgt.w	8008660 <_strtod_l+0x7f8>
 800843a:	b10b      	cbz	r3, 8008440 <_strtod_l+0x5d8>
 800843c:	4681      	mov	r9, r0
 800843e:	468a      	mov	sl, r1
 8008440:	9b05      	ldr	r3, [sp, #20]
 8008442:	b1bb      	cbz	r3, 8008474 <_strtod_l+0x60c>
 8008444:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800844c:	2b00      	cmp	r3, #0
 800844e:	4651      	mov	r1, sl
 8008450:	dd10      	ble.n	8008474 <_strtod_l+0x60c>
 8008452:	2b1f      	cmp	r3, #31
 8008454:	f340 8110 	ble.w	8008678 <_strtod_l+0x810>
 8008458:	2b34      	cmp	r3, #52	; 0x34
 800845a:	bfd8      	it	le
 800845c:	f04f 32ff 	movle.w	r2, #4294967295
 8008460:	f04f 0900 	mov.w	r9, #0
 8008464:	bfcf      	iteee	gt
 8008466:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800846a:	3b20      	suble	r3, #32
 800846c:	fa02 f303 	lslle.w	r3, r2, r3
 8008470:	ea03 0a01 	andle.w	sl, r3, r1
 8008474:	2200      	movs	r2, #0
 8008476:	2300      	movs	r3, #0
 8008478:	4648      	mov	r0, r9
 800847a:	4651      	mov	r1, sl
 800847c:	f7f8 fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8008480:	2800      	cmp	r0, #0
 8008482:	d1a8      	bne.n	80083d6 <_strtod_l+0x56e>
 8008484:	9b06      	ldr	r3, [sp, #24]
 8008486:	9a04      	ldr	r2, [sp, #16]
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	9908      	ldr	r1, [sp, #32]
 800848c:	4623      	mov	r3, r4
 800848e:	4658      	mov	r0, fp
 8008490:	f001 fdb4 	bl	8009ffc <__s2b>
 8008494:	9008      	str	r0, [sp, #32]
 8008496:	2800      	cmp	r0, #0
 8008498:	f43f af00 	beq.w	800829c <_strtod_l+0x434>
 800849c:	9a07      	ldr	r2, [sp, #28]
 800849e:	9b07      	ldr	r3, [sp, #28]
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	f1c3 0300 	rsb	r3, r3, #0
 80084a6:	bfa8      	it	ge
 80084a8:	2300      	movge	r3, #0
 80084aa:	f04f 0800 	mov.w	r8, #0
 80084ae:	930e      	str	r3, [sp, #56]	; 0x38
 80084b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084b4:	9316      	str	r3, [sp, #88]	; 0x58
 80084b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	4658      	mov	r0, fp
 80084be:	6859      	ldr	r1, [r3, #4]
 80084c0:	f001 fd16 	bl	8009ef0 <_Balloc>
 80084c4:	9006      	str	r0, [sp, #24]
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f43f aef0 	beq.w	80082ac <_strtod_l+0x444>
 80084cc:	9b08      	ldr	r3, [sp, #32]
 80084ce:	300c      	adds	r0, #12
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	f103 010c 	add.w	r1, r3, #12
 80084d6:	3202      	adds	r2, #2
 80084d8:	0092      	lsls	r2, r2, #2
 80084da:	f7fe fe25 	bl	8007128 <memcpy>
 80084de:	ab1e      	add	r3, sp, #120	; 0x78
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	ab1d      	add	r3, sp, #116	; 0x74
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	464a      	mov	r2, r9
 80084e8:	4653      	mov	r3, sl
 80084ea:	4658      	mov	r0, fp
 80084ec:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80084f0:	f002 f83e 	bl	800a570 <__d2b>
 80084f4:	901c      	str	r0, [sp, #112]	; 0x70
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f43f aed8 	beq.w	80082ac <_strtod_l+0x444>
 80084fc:	2101      	movs	r1, #1
 80084fe:	4658      	mov	r0, fp
 8008500:	f001 fe08 	bl	800a114 <__i2b>
 8008504:	9004      	str	r0, [sp, #16]
 8008506:	4603      	mov	r3, r0
 8008508:	2800      	cmp	r0, #0
 800850a:	f43f aecf 	beq.w	80082ac <_strtod_l+0x444>
 800850e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008510:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008512:	2d00      	cmp	r5, #0
 8008514:	bfab      	itete	ge
 8008516:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008518:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800851a:	18ee      	addge	r6, r5, r3
 800851c:	1b5c      	sublt	r4, r3, r5
 800851e:	9b05      	ldr	r3, [sp, #20]
 8008520:	bfa8      	it	ge
 8008522:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008524:	eba5 0503 	sub.w	r5, r5, r3
 8008528:	4415      	add	r5, r2
 800852a:	4b64      	ldr	r3, [pc, #400]	; (80086bc <_strtod_l+0x854>)
 800852c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008530:	bfb8      	it	lt
 8008532:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008534:	429d      	cmp	r5, r3
 8008536:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800853a:	f280 80af 	bge.w	800869c <_strtod_l+0x834>
 800853e:	1b5b      	subs	r3, r3, r5
 8008540:	2b1f      	cmp	r3, #31
 8008542:	eba2 0203 	sub.w	r2, r2, r3
 8008546:	f04f 0701 	mov.w	r7, #1
 800854a:	f300 809c 	bgt.w	8008686 <_strtod_l+0x81e>
 800854e:	2500      	movs	r5, #0
 8008550:	fa07 f303 	lsl.w	r3, r7, r3
 8008554:	930f      	str	r3, [sp, #60]	; 0x3c
 8008556:	18b7      	adds	r7, r6, r2
 8008558:	9b05      	ldr	r3, [sp, #20]
 800855a:	42be      	cmp	r6, r7
 800855c:	4414      	add	r4, r2
 800855e:	441c      	add	r4, r3
 8008560:	4633      	mov	r3, r6
 8008562:	bfa8      	it	ge
 8008564:	463b      	movge	r3, r7
 8008566:	42a3      	cmp	r3, r4
 8008568:	bfa8      	it	ge
 800856a:	4623      	movge	r3, r4
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfc2      	ittt	gt
 8008570:	1aff      	subgt	r7, r7, r3
 8008572:	1ae4      	subgt	r4, r4, r3
 8008574:	1af6      	subgt	r6, r6, r3
 8008576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008578:	b1bb      	cbz	r3, 80085aa <_strtod_l+0x742>
 800857a:	461a      	mov	r2, r3
 800857c:	9904      	ldr	r1, [sp, #16]
 800857e:	4658      	mov	r0, fp
 8008580:	f001 fe66 	bl	800a250 <__pow5mult>
 8008584:	9004      	str	r0, [sp, #16]
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f ae90 	beq.w	80082ac <_strtod_l+0x444>
 800858c:	4601      	mov	r1, r0
 800858e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008590:	4658      	mov	r0, fp
 8008592:	f001 fdc8 	bl	800a126 <__multiply>
 8008596:	9009      	str	r0, [sp, #36]	; 0x24
 8008598:	2800      	cmp	r0, #0
 800859a:	f43f ae87 	beq.w	80082ac <_strtod_l+0x444>
 800859e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80085a0:	4658      	mov	r0, fp
 80085a2:	f001 fcd9 	bl	8009f58 <_Bfree>
 80085a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a8:	931c      	str	r3, [sp, #112]	; 0x70
 80085aa:	2f00      	cmp	r7, #0
 80085ac:	dc7a      	bgt.n	80086a4 <_strtod_l+0x83c>
 80085ae:	9b07      	ldr	r3, [sp, #28]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dd08      	ble.n	80085c6 <_strtod_l+0x75e>
 80085b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80085b6:	9906      	ldr	r1, [sp, #24]
 80085b8:	4658      	mov	r0, fp
 80085ba:	f001 fe49 	bl	800a250 <__pow5mult>
 80085be:	9006      	str	r0, [sp, #24]
 80085c0:	2800      	cmp	r0, #0
 80085c2:	f43f ae73 	beq.w	80082ac <_strtod_l+0x444>
 80085c6:	2c00      	cmp	r4, #0
 80085c8:	dd08      	ble.n	80085dc <_strtod_l+0x774>
 80085ca:	4622      	mov	r2, r4
 80085cc:	9906      	ldr	r1, [sp, #24]
 80085ce:	4658      	mov	r0, fp
 80085d0:	f001 fe8c 	bl	800a2ec <__lshift>
 80085d4:	9006      	str	r0, [sp, #24]
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f43f ae68 	beq.w	80082ac <_strtod_l+0x444>
 80085dc:	2e00      	cmp	r6, #0
 80085de:	dd08      	ble.n	80085f2 <_strtod_l+0x78a>
 80085e0:	4632      	mov	r2, r6
 80085e2:	9904      	ldr	r1, [sp, #16]
 80085e4:	4658      	mov	r0, fp
 80085e6:	f001 fe81 	bl	800a2ec <__lshift>
 80085ea:	9004      	str	r0, [sp, #16]
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f43f ae5d 	beq.w	80082ac <_strtod_l+0x444>
 80085f2:	9a06      	ldr	r2, [sp, #24]
 80085f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80085f6:	4658      	mov	r0, fp
 80085f8:	f001 fee6 	bl	800a3c8 <__mdiff>
 80085fc:	4680      	mov	r8, r0
 80085fe:	2800      	cmp	r0, #0
 8008600:	f43f ae54 	beq.w	80082ac <_strtod_l+0x444>
 8008604:	2400      	movs	r4, #0
 8008606:	68c3      	ldr	r3, [r0, #12]
 8008608:	9904      	ldr	r1, [sp, #16]
 800860a:	60c4      	str	r4, [r0, #12]
 800860c:	930c      	str	r3, [sp, #48]	; 0x30
 800860e:	f001 fec1 	bl	800a394 <__mcmp>
 8008612:	42a0      	cmp	r0, r4
 8008614:	da54      	bge.n	80086c0 <_strtod_l+0x858>
 8008616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008618:	b9f3      	cbnz	r3, 8008658 <_strtod_l+0x7f0>
 800861a:	f1b9 0f00 	cmp.w	r9, #0
 800861e:	d11b      	bne.n	8008658 <_strtod_l+0x7f0>
 8008620:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008624:	b9c3      	cbnz	r3, 8008658 <_strtod_l+0x7f0>
 8008626:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800862a:	0d1b      	lsrs	r3, r3, #20
 800862c:	051b      	lsls	r3, r3, #20
 800862e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008632:	d911      	bls.n	8008658 <_strtod_l+0x7f0>
 8008634:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008638:	b91b      	cbnz	r3, 8008642 <_strtod_l+0x7da>
 800863a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800863e:	2b01      	cmp	r3, #1
 8008640:	dd0a      	ble.n	8008658 <_strtod_l+0x7f0>
 8008642:	4641      	mov	r1, r8
 8008644:	2201      	movs	r2, #1
 8008646:	4658      	mov	r0, fp
 8008648:	f001 fe50 	bl	800a2ec <__lshift>
 800864c:	9904      	ldr	r1, [sp, #16]
 800864e:	4680      	mov	r8, r0
 8008650:	f001 fea0 	bl	800a394 <__mcmp>
 8008654:	2800      	cmp	r0, #0
 8008656:	dc68      	bgt.n	800872a <_strtod_l+0x8c2>
 8008658:	9b05      	ldr	r3, [sp, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d172      	bne.n	8008744 <_strtod_l+0x8dc>
 800865e:	e630      	b.n	80082c2 <_strtod_l+0x45a>
 8008660:	f018 0f01 	tst.w	r8, #1
 8008664:	d004      	beq.n	8008670 <_strtod_l+0x808>
 8008666:	e9d5 2300 	ldrd	r2, r3, [r5]
 800866a:	f7f7 ff35 	bl	80004d8 <__aeabi_dmul>
 800866e:	2301      	movs	r3, #1
 8008670:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008674:	3508      	adds	r5, #8
 8008676:	e6dc      	b.n	8008432 <_strtod_l+0x5ca>
 8008678:	f04f 32ff 	mov.w	r2, #4294967295
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	ea03 0909 	and.w	r9, r3, r9
 8008684:	e6f6      	b.n	8008474 <_strtod_l+0x60c>
 8008686:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800868a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800868e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008692:	35e2      	adds	r5, #226	; 0xe2
 8008694:	fa07 f505 	lsl.w	r5, r7, r5
 8008698:	970f      	str	r7, [sp, #60]	; 0x3c
 800869a:	e75c      	b.n	8008556 <_strtod_l+0x6ee>
 800869c:	2301      	movs	r3, #1
 800869e:	2500      	movs	r5, #0
 80086a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a2:	e758      	b.n	8008556 <_strtod_l+0x6ee>
 80086a4:	463a      	mov	r2, r7
 80086a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086a8:	4658      	mov	r0, fp
 80086aa:	f001 fe1f 	bl	800a2ec <__lshift>
 80086ae:	901c      	str	r0, [sp, #112]	; 0x70
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f47f af7c 	bne.w	80085ae <_strtod_l+0x746>
 80086b6:	e5f9      	b.n	80082ac <_strtod_l+0x444>
 80086b8:	0800aff8 	.word	0x0800aff8
 80086bc:	fffffc02 	.word	0xfffffc02
 80086c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80086c4:	f040 8089 	bne.w	80087da <_strtod_l+0x972>
 80086c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80086ce:	b342      	cbz	r2, 8008722 <_strtod_l+0x8ba>
 80086d0:	4aaf      	ldr	r2, [pc, #700]	; (8008990 <_strtod_l+0xb28>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d156      	bne.n	8008784 <_strtod_l+0x91c>
 80086d6:	9b05      	ldr	r3, [sp, #20]
 80086d8:	4648      	mov	r0, r9
 80086da:	b1eb      	cbz	r3, 8008718 <_strtod_l+0x8b0>
 80086dc:	4653      	mov	r3, sl
 80086de:	4aad      	ldr	r2, [pc, #692]	; (8008994 <_strtod_l+0xb2c>)
 80086e0:	f04f 31ff 	mov.w	r1, #4294967295
 80086e4:	401a      	ands	r2, r3
 80086e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80086ea:	d818      	bhi.n	800871e <_strtod_l+0x8b6>
 80086ec:	0d12      	lsrs	r2, r2, #20
 80086ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80086f2:	fa01 f303 	lsl.w	r3, r1, r3
 80086f6:	4298      	cmp	r0, r3
 80086f8:	d144      	bne.n	8008784 <_strtod_l+0x91c>
 80086fa:	4ba7      	ldr	r3, [pc, #668]	; (8008998 <_strtod_l+0xb30>)
 80086fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086fe:	429a      	cmp	r2, r3
 8008700:	d102      	bne.n	8008708 <_strtod_l+0x8a0>
 8008702:	3001      	adds	r0, #1
 8008704:	f43f add2 	beq.w	80082ac <_strtod_l+0x444>
 8008708:	4ba2      	ldr	r3, [pc, #648]	; (8008994 <_strtod_l+0xb2c>)
 800870a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800870c:	f04f 0900 	mov.w	r9, #0
 8008710:	401a      	ands	r2, r3
 8008712:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008716:	e79f      	b.n	8008658 <_strtod_l+0x7f0>
 8008718:	f04f 33ff 	mov.w	r3, #4294967295
 800871c:	e7eb      	b.n	80086f6 <_strtod_l+0x88e>
 800871e:	460b      	mov	r3, r1
 8008720:	e7e9      	b.n	80086f6 <_strtod_l+0x88e>
 8008722:	bb7b      	cbnz	r3, 8008784 <_strtod_l+0x91c>
 8008724:	f1b9 0f00 	cmp.w	r9, #0
 8008728:	d12c      	bne.n	8008784 <_strtod_l+0x91c>
 800872a:	9905      	ldr	r1, [sp, #20]
 800872c:	4653      	mov	r3, sl
 800872e:	4a99      	ldr	r2, [pc, #612]	; (8008994 <_strtod_l+0xb2c>)
 8008730:	b1f1      	cbz	r1, 8008770 <_strtod_l+0x908>
 8008732:	ea02 010a 	and.w	r1, r2, sl
 8008736:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800873a:	dc19      	bgt.n	8008770 <_strtod_l+0x908>
 800873c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008740:	f77f ae51 	ble.w	80083e6 <_strtod_l+0x57e>
 8008744:	2300      	movs	r3, #0
 8008746:	4a95      	ldr	r2, [pc, #596]	; (800899c <_strtod_l+0xb34>)
 8008748:	4648      	mov	r0, r9
 800874a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800874e:	4651      	mov	r1, sl
 8008750:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008754:	f7f7 fec0 	bl	80004d8 <__aeabi_dmul>
 8008758:	4681      	mov	r9, r0
 800875a:	468a      	mov	sl, r1
 800875c:	2900      	cmp	r1, #0
 800875e:	f47f adb0 	bne.w	80082c2 <_strtod_l+0x45a>
 8008762:	2800      	cmp	r0, #0
 8008764:	f47f adad 	bne.w	80082c2 <_strtod_l+0x45a>
 8008768:	2322      	movs	r3, #34	; 0x22
 800876a:	f8cb 3000 	str.w	r3, [fp]
 800876e:	e5a8      	b.n	80082c2 <_strtod_l+0x45a>
 8008770:	4013      	ands	r3, r2
 8008772:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008776:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800877a:	f04f 39ff 	mov.w	r9, #4294967295
 800877e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008782:	e769      	b.n	8008658 <_strtod_l+0x7f0>
 8008784:	b19d      	cbz	r5, 80087ae <_strtod_l+0x946>
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	421d      	tst	r5, r3
 800878a:	f43f af65 	beq.w	8008658 <_strtod_l+0x7f0>
 800878e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008790:	9a05      	ldr	r2, [sp, #20]
 8008792:	4648      	mov	r0, r9
 8008794:	4651      	mov	r1, sl
 8008796:	b173      	cbz	r3, 80087b6 <_strtod_l+0x94e>
 8008798:	f7ff fb42 	bl	8007e20 <sulp>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087a4:	f7f7 fce2 	bl	800016c <__adddf3>
 80087a8:	4681      	mov	r9, r0
 80087aa:	468a      	mov	sl, r1
 80087ac:	e754      	b.n	8008658 <_strtod_l+0x7f0>
 80087ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087b0:	ea13 0f09 	tst.w	r3, r9
 80087b4:	e7e9      	b.n	800878a <_strtod_l+0x922>
 80087b6:	f7ff fb33 	bl	8007e20 <sulp>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087c2:	f7f7 fcd1 	bl	8000168 <__aeabi_dsub>
 80087c6:	2200      	movs	r2, #0
 80087c8:	2300      	movs	r3, #0
 80087ca:	4681      	mov	r9, r0
 80087cc:	468a      	mov	sl, r1
 80087ce:	f7f8 f8eb 	bl	80009a8 <__aeabi_dcmpeq>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	f47f ae07 	bne.w	80083e6 <_strtod_l+0x57e>
 80087d8:	e73e      	b.n	8008658 <_strtod_l+0x7f0>
 80087da:	9904      	ldr	r1, [sp, #16]
 80087dc:	4640      	mov	r0, r8
 80087de:	f001 ff16 	bl	800a60e <__ratio>
 80087e2:	2200      	movs	r2, #0
 80087e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087e8:	4606      	mov	r6, r0
 80087ea:	460f      	mov	r7, r1
 80087ec:	f7f8 f8f0 	bl	80009d0 <__aeabi_dcmple>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d075      	beq.n	80088e0 <_strtod_l+0xa78>
 80087f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d047      	beq.n	800888a <_strtod_l+0xa22>
 80087fa:	2600      	movs	r6, #0
 80087fc:	4f68      	ldr	r7, [pc, #416]	; (80089a0 <_strtod_l+0xb38>)
 80087fe:	4d68      	ldr	r5, [pc, #416]	; (80089a0 <_strtod_l+0xb38>)
 8008800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008802:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008806:	0d1b      	lsrs	r3, r3, #20
 8008808:	051b      	lsls	r3, r3, #20
 800880a:	930f      	str	r3, [sp, #60]	; 0x3c
 800880c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800880e:	4b65      	ldr	r3, [pc, #404]	; (80089a4 <_strtod_l+0xb3c>)
 8008810:	429a      	cmp	r2, r3
 8008812:	f040 80cf 	bne.w	80089b4 <_strtod_l+0xb4c>
 8008816:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800881a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	4648      	mov	r0, r9
 8008822:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008826:	4651      	mov	r1, sl
 8008828:	f001 fe2c 	bl	800a484 <__ulp>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f7 fe50 	bl	80004d8 <__aeabi_dmul>
 8008838:	464a      	mov	r2, r9
 800883a:	4653      	mov	r3, sl
 800883c:	f7f7 fc96 	bl	800016c <__adddf3>
 8008840:	460b      	mov	r3, r1
 8008842:	4954      	ldr	r1, [pc, #336]	; (8008994 <_strtod_l+0xb2c>)
 8008844:	4a58      	ldr	r2, [pc, #352]	; (80089a8 <_strtod_l+0xb40>)
 8008846:	4019      	ands	r1, r3
 8008848:	4291      	cmp	r1, r2
 800884a:	4681      	mov	r9, r0
 800884c:	d95e      	bls.n	800890c <_strtod_l+0xaa4>
 800884e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008850:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008854:	4293      	cmp	r3, r2
 8008856:	d103      	bne.n	8008860 <_strtod_l+0x9f8>
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	3301      	adds	r3, #1
 800885c:	f43f ad26 	beq.w	80082ac <_strtod_l+0x444>
 8008860:	f04f 39ff 	mov.w	r9, #4294967295
 8008864:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008998 <_strtod_l+0xb30>
 8008868:	991c      	ldr	r1, [sp, #112]	; 0x70
 800886a:	4658      	mov	r0, fp
 800886c:	f001 fb74 	bl	8009f58 <_Bfree>
 8008870:	9906      	ldr	r1, [sp, #24]
 8008872:	4658      	mov	r0, fp
 8008874:	f001 fb70 	bl	8009f58 <_Bfree>
 8008878:	9904      	ldr	r1, [sp, #16]
 800887a:	4658      	mov	r0, fp
 800887c:	f001 fb6c 	bl	8009f58 <_Bfree>
 8008880:	4641      	mov	r1, r8
 8008882:	4658      	mov	r0, fp
 8008884:	f001 fb68 	bl	8009f58 <_Bfree>
 8008888:	e617      	b.n	80084ba <_strtod_l+0x652>
 800888a:	f1b9 0f00 	cmp.w	r9, #0
 800888e:	d119      	bne.n	80088c4 <_strtod_l+0xa5c>
 8008890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008896:	b9e3      	cbnz	r3, 80088d2 <_strtod_l+0xa6a>
 8008898:	2200      	movs	r2, #0
 800889a:	4b41      	ldr	r3, [pc, #260]	; (80089a0 <_strtod_l+0xb38>)
 800889c:	4630      	mov	r0, r6
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f8 f88c 	bl	80009bc <__aeabi_dcmplt>
 80088a4:	b9c8      	cbnz	r0, 80088da <_strtod_l+0xa72>
 80088a6:	2200      	movs	r2, #0
 80088a8:	4b40      	ldr	r3, [pc, #256]	; (80089ac <_strtod_l+0xb44>)
 80088aa:	4630      	mov	r0, r6
 80088ac:	4639      	mov	r1, r7
 80088ae:	f7f7 fe13 	bl	80004d8 <__aeabi_dmul>
 80088b2:	4604      	mov	r4, r0
 80088b4:	460d      	mov	r5, r1
 80088b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80088ba:	9418      	str	r4, [sp, #96]	; 0x60
 80088bc:	9319      	str	r3, [sp, #100]	; 0x64
 80088be:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80088c2:	e79d      	b.n	8008800 <_strtod_l+0x998>
 80088c4:	f1b9 0f01 	cmp.w	r9, #1
 80088c8:	d103      	bne.n	80088d2 <_strtod_l+0xa6a>
 80088ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f43f ad8a 	beq.w	80083e6 <_strtod_l+0x57e>
 80088d2:	2600      	movs	r6, #0
 80088d4:	4f36      	ldr	r7, [pc, #216]	; (80089b0 <_strtod_l+0xb48>)
 80088d6:	2400      	movs	r4, #0
 80088d8:	e791      	b.n	80087fe <_strtod_l+0x996>
 80088da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80088dc:	4d33      	ldr	r5, [pc, #204]	; (80089ac <_strtod_l+0xb44>)
 80088de:	e7ea      	b.n	80088b6 <_strtod_l+0xa4e>
 80088e0:	4b32      	ldr	r3, [pc, #200]	; (80089ac <_strtod_l+0xb44>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f7 fdf6 	bl	80004d8 <__aeabi_dmul>
 80088ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	b933      	cbnz	r3, 8008902 <_strtod_l+0xa9a>
 80088f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088f8:	9010      	str	r0, [sp, #64]	; 0x40
 80088fa:	9311      	str	r3, [sp, #68]	; 0x44
 80088fc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008900:	e77e      	b.n	8008800 <_strtod_l+0x998>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800890a:	e7f7      	b.n	80088fc <_strtod_l+0xa94>
 800890c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1a8      	bne.n	8008868 <_strtod_l+0xa00>
 8008916:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800891a:	0d1b      	lsrs	r3, r3, #20
 800891c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800891e:	051b      	lsls	r3, r3, #20
 8008920:	429a      	cmp	r2, r3
 8008922:	4656      	mov	r6, sl
 8008924:	d1a0      	bne.n	8008868 <_strtod_l+0xa00>
 8008926:	4629      	mov	r1, r5
 8008928:	4620      	mov	r0, r4
 800892a:	f7f8 f885 	bl	8000a38 <__aeabi_d2iz>
 800892e:	f7f7 fd69 	bl	8000404 <__aeabi_i2d>
 8008932:	460b      	mov	r3, r1
 8008934:	4602      	mov	r2, r0
 8008936:	4629      	mov	r1, r5
 8008938:	4620      	mov	r0, r4
 800893a:	f7f7 fc15 	bl	8000168 <__aeabi_dsub>
 800893e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	b933      	cbnz	r3, 8008954 <_strtod_l+0xaec>
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	d103      	bne.n	8008954 <_strtod_l+0xaec>
 800894c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008950:	2e00      	cmp	r6, #0
 8008952:	d06a      	beq.n	8008a2a <_strtod_l+0xbc2>
 8008954:	a30a      	add	r3, pc, #40	; (adr r3, 8008980 <_strtod_l+0xb18>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	4620      	mov	r0, r4
 800895c:	4629      	mov	r1, r5
 800895e:	f7f8 f82d 	bl	80009bc <__aeabi_dcmplt>
 8008962:	2800      	cmp	r0, #0
 8008964:	f47f acad 	bne.w	80082c2 <_strtod_l+0x45a>
 8008968:	a307      	add	r3, pc, #28	; (adr r3, 8008988 <_strtod_l+0xb20>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	f7f8 f841 	bl	80009f8 <__aeabi_dcmpgt>
 8008976:	2800      	cmp	r0, #0
 8008978:	f43f af76 	beq.w	8008868 <_strtod_l+0xa00>
 800897c:	e4a1      	b.n	80082c2 <_strtod_l+0x45a>
 800897e:	bf00      	nop
 8008980:	94a03595 	.word	0x94a03595
 8008984:	3fdfffff 	.word	0x3fdfffff
 8008988:	35afe535 	.word	0x35afe535
 800898c:	3fe00000 	.word	0x3fe00000
 8008990:	000fffff 	.word	0x000fffff
 8008994:	7ff00000 	.word	0x7ff00000
 8008998:	7fefffff 	.word	0x7fefffff
 800899c:	39500000 	.word	0x39500000
 80089a0:	3ff00000 	.word	0x3ff00000
 80089a4:	7fe00000 	.word	0x7fe00000
 80089a8:	7c9fffff 	.word	0x7c9fffff
 80089ac:	3fe00000 	.word	0x3fe00000
 80089b0:	bff00000 	.word	0xbff00000
 80089b4:	9b05      	ldr	r3, [sp, #20]
 80089b6:	b313      	cbz	r3, 80089fe <_strtod_l+0xb96>
 80089b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089be:	d81e      	bhi.n	80089fe <_strtod_l+0xb96>
 80089c0:	a325      	add	r3, pc, #148	; (adr r3, 8008a58 <_strtod_l+0xbf0>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f8 f801 	bl	80009d0 <__aeabi_dcmple>
 80089ce:	b190      	cbz	r0, 80089f6 <_strtod_l+0xb8e>
 80089d0:	4629      	mov	r1, r5
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7f8 f858 	bl	8000a88 <__aeabi_d2uiz>
 80089d8:	2800      	cmp	r0, #0
 80089da:	bf08      	it	eq
 80089dc:	2001      	moveq	r0, #1
 80089de:	f7f7 fd01 	bl	80003e4 <__aeabi_ui2d>
 80089e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	b9d3      	cbnz	r3, 8008a20 <_strtod_l+0xbb8>
 80089ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089ee:	9012      	str	r0, [sp, #72]	; 0x48
 80089f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80089f2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80089f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089f8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80089fc:	1a9f      	subs	r7, r3, r2
 80089fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a02:	f001 fd3f 	bl	800a484 <__ulp>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	f7f7 fd63 	bl	80004d8 <__aeabi_dmul>
 8008a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a16:	f7f7 fba9 	bl	800016c <__adddf3>
 8008a1a:	4681      	mov	r9, r0
 8008a1c:	468a      	mov	sl, r1
 8008a1e:	e777      	b.n	8008910 <_strtod_l+0xaa8>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008a28:	e7e3      	b.n	80089f2 <_strtod_l+0xb8a>
 8008a2a:	a30d      	add	r3, pc, #52	; (adr r3, 8008a60 <_strtod_l+0xbf8>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 ffc4 	bl	80009bc <__aeabi_dcmplt>
 8008a34:	e79f      	b.n	8008976 <_strtod_l+0xb0e>
 8008a36:	2300      	movs	r3, #0
 8008a38:	930d      	str	r3, [sp, #52]	; 0x34
 8008a3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	f7ff ba55 	b.w	8007eee <_strtod_l+0x86>
 8008a44:	2b65      	cmp	r3, #101	; 0x65
 8008a46:	f04f 0200 	mov.w	r2, #0
 8008a4a:	f43f ab42 	beq.w	80080d2 <_strtod_l+0x26a>
 8008a4e:	2101      	movs	r1, #1
 8008a50:	4614      	mov	r4, r2
 8008a52:	9105      	str	r1, [sp, #20]
 8008a54:	f7ff babf 	b.w	8007fd6 <_strtod_l+0x16e>
 8008a58:	ffc00000 	.word	0xffc00000
 8008a5c:	41dfffff 	.word	0x41dfffff
 8008a60:	94a03595 	.word	0x94a03595
 8008a64:	3fcfffff 	.word	0x3fcfffff

08008a68 <_strtod_r>:
 8008a68:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <_strtod_r+0x18>)
 8008a6a:	b410      	push	{r4}
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4c05      	ldr	r4, [pc, #20]	; (8008a84 <_strtod_r+0x1c>)
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	bf08      	it	eq
 8008a76:	4623      	moveq	r3, r4
 8008a78:	bc10      	pop	{r4}
 8008a7a:	f7ff b9f5 	b.w	8007e68 <_strtod_l>
 8008a7e:	bf00      	nop
 8008a80:	200000ac 	.word	0x200000ac
 8008a84:	20000110 	.word	0x20000110

08008a88 <_strtol_l.isra.0>:
 8008a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	4689      	mov	r9, r1
 8008a90:	4692      	mov	sl, r2
 8008a92:	461e      	mov	r6, r3
 8008a94:	460f      	mov	r7, r1
 8008a96:	463d      	mov	r5, r7
 8008a98:	9808      	ldr	r0, [sp, #32]
 8008a9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a9e:	f001 f9eb 	bl	8009e78 <__locale_ctype_ptr_l>
 8008aa2:	4420      	add	r0, r4
 8008aa4:	7843      	ldrb	r3, [r0, #1]
 8008aa6:	f013 0308 	ands.w	r3, r3, #8
 8008aaa:	d132      	bne.n	8008b12 <_strtol_l.isra.0+0x8a>
 8008aac:	2c2d      	cmp	r4, #45	; 0x2d
 8008aae:	d132      	bne.n	8008b16 <_strtol_l.isra.0+0x8e>
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	787c      	ldrb	r4, [r7, #1]
 8008ab4:	1cbd      	adds	r5, r7, #2
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	d05d      	beq.n	8008b76 <_strtol_l.isra.0+0xee>
 8008aba:	2e10      	cmp	r6, #16
 8008abc:	d109      	bne.n	8008ad2 <_strtol_l.isra.0+0x4a>
 8008abe:	2c30      	cmp	r4, #48	; 0x30
 8008ac0:	d107      	bne.n	8008ad2 <_strtol_l.isra.0+0x4a>
 8008ac2:	782b      	ldrb	r3, [r5, #0]
 8008ac4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ac8:	2b58      	cmp	r3, #88	; 0x58
 8008aca:	d14f      	bne.n	8008b6c <_strtol_l.isra.0+0xe4>
 8008acc:	2610      	movs	r6, #16
 8008ace:	786c      	ldrb	r4, [r5, #1]
 8008ad0:	3502      	adds	r5, #2
 8008ad2:	2a00      	cmp	r2, #0
 8008ad4:	bf14      	ite	ne
 8008ad6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008ada:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008ade:	2700      	movs	r7, #0
 8008ae0:	fbb1 fcf6 	udiv	ip, r1, r6
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008aea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008aee:	2b09      	cmp	r3, #9
 8008af0:	d817      	bhi.n	8008b22 <_strtol_l.isra.0+0x9a>
 8008af2:	461c      	mov	r4, r3
 8008af4:	42a6      	cmp	r6, r4
 8008af6:	dd23      	ble.n	8008b40 <_strtol_l.isra.0+0xb8>
 8008af8:	1c7b      	adds	r3, r7, #1
 8008afa:	d007      	beq.n	8008b0c <_strtol_l.isra.0+0x84>
 8008afc:	4584      	cmp	ip, r0
 8008afe:	d31c      	bcc.n	8008b3a <_strtol_l.isra.0+0xb2>
 8008b00:	d101      	bne.n	8008b06 <_strtol_l.isra.0+0x7e>
 8008b02:	45a6      	cmp	lr, r4
 8008b04:	db19      	blt.n	8008b3a <_strtol_l.isra.0+0xb2>
 8008b06:	2701      	movs	r7, #1
 8008b08:	fb00 4006 	mla	r0, r0, r6, r4
 8008b0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b10:	e7eb      	b.n	8008aea <_strtol_l.isra.0+0x62>
 8008b12:	462f      	mov	r7, r5
 8008b14:	e7bf      	b.n	8008a96 <_strtol_l.isra.0+0xe>
 8008b16:	2c2b      	cmp	r4, #43	; 0x2b
 8008b18:	bf04      	itt	eq
 8008b1a:	1cbd      	addeq	r5, r7, #2
 8008b1c:	787c      	ldrbeq	r4, [r7, #1]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	e7c9      	b.n	8008ab6 <_strtol_l.isra.0+0x2e>
 8008b22:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008b26:	2b19      	cmp	r3, #25
 8008b28:	d801      	bhi.n	8008b2e <_strtol_l.isra.0+0xa6>
 8008b2a:	3c37      	subs	r4, #55	; 0x37
 8008b2c:	e7e2      	b.n	8008af4 <_strtol_l.isra.0+0x6c>
 8008b2e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008b32:	2b19      	cmp	r3, #25
 8008b34:	d804      	bhi.n	8008b40 <_strtol_l.isra.0+0xb8>
 8008b36:	3c57      	subs	r4, #87	; 0x57
 8008b38:	e7dc      	b.n	8008af4 <_strtol_l.isra.0+0x6c>
 8008b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b3e:	e7e5      	b.n	8008b0c <_strtol_l.isra.0+0x84>
 8008b40:	1c7b      	adds	r3, r7, #1
 8008b42:	d108      	bne.n	8008b56 <_strtol_l.isra.0+0xce>
 8008b44:	2322      	movs	r3, #34	; 0x22
 8008b46:	4608      	mov	r0, r1
 8008b48:	f8c8 3000 	str.w	r3, [r8]
 8008b4c:	f1ba 0f00 	cmp.w	sl, #0
 8008b50:	d107      	bne.n	8008b62 <_strtol_l.isra.0+0xda>
 8008b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b56:	b102      	cbz	r2, 8008b5a <_strtol_l.isra.0+0xd2>
 8008b58:	4240      	negs	r0, r0
 8008b5a:	f1ba 0f00 	cmp.w	sl, #0
 8008b5e:	d0f8      	beq.n	8008b52 <_strtol_l.isra.0+0xca>
 8008b60:	b10f      	cbz	r7, 8008b66 <_strtol_l.isra.0+0xde>
 8008b62:	f105 39ff 	add.w	r9, r5, #4294967295
 8008b66:	f8ca 9000 	str.w	r9, [sl]
 8008b6a:	e7f2      	b.n	8008b52 <_strtol_l.isra.0+0xca>
 8008b6c:	2430      	movs	r4, #48	; 0x30
 8008b6e:	2e00      	cmp	r6, #0
 8008b70:	d1af      	bne.n	8008ad2 <_strtol_l.isra.0+0x4a>
 8008b72:	2608      	movs	r6, #8
 8008b74:	e7ad      	b.n	8008ad2 <_strtol_l.isra.0+0x4a>
 8008b76:	2c30      	cmp	r4, #48	; 0x30
 8008b78:	d0a3      	beq.n	8008ac2 <_strtol_l.isra.0+0x3a>
 8008b7a:	260a      	movs	r6, #10
 8008b7c:	e7a9      	b.n	8008ad2 <_strtol_l.isra.0+0x4a>
	...

08008b80 <_strtol_r>:
 8008b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b82:	4c06      	ldr	r4, [pc, #24]	; (8008b9c <_strtol_r+0x1c>)
 8008b84:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_strtol_r+0x20>)
 8008b86:	6824      	ldr	r4, [r4, #0]
 8008b88:	6a24      	ldr	r4, [r4, #32]
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	bf08      	it	eq
 8008b8e:	462c      	moveq	r4, r5
 8008b90:	9400      	str	r4, [sp, #0]
 8008b92:	f7ff ff79 	bl	8008a88 <_strtol_l.isra.0>
 8008b96:	b003      	add	sp, #12
 8008b98:	bd30      	pop	{r4, r5, pc}
 8008b9a:	bf00      	nop
 8008b9c:	200000ac 	.word	0x200000ac
 8008ba0:	20000110 	.word	0x20000110

08008ba4 <quorem>:
 8008ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	6903      	ldr	r3, [r0, #16]
 8008baa:	690c      	ldr	r4, [r1, #16]
 8008bac:	4680      	mov	r8, r0
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	f2c0 8084 	blt.w	8008cbc <quorem+0x118>
 8008bb4:	3c01      	subs	r4, #1
 8008bb6:	f101 0714 	add.w	r7, r1, #20
 8008bba:	f100 0614 	add.w	r6, r0, #20
 8008bbe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008bc2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008bc6:	3501      	adds	r5, #1
 8008bc8:	fbb0 f5f5 	udiv	r5, r0, r5
 8008bcc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008bd0:	eb06 030c 	add.w	r3, r6, ip
 8008bd4:	eb07 090c 	add.w	r9, r7, ip
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	b39d      	cbz	r5, 8008c44 <quorem+0xa0>
 8008bdc:	f04f 0a00 	mov.w	sl, #0
 8008be0:	4638      	mov	r0, r7
 8008be2:	46b6      	mov	lr, r6
 8008be4:	46d3      	mov	fp, sl
 8008be6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bea:	b293      	uxth	r3, r2
 8008bec:	fb05 a303 	mla	r3, r5, r3, sl
 8008bf0:	0c12      	lsrs	r2, r2, #16
 8008bf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bf6:	fb05 a202 	mla	r2, r5, r2, sl
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	ebab 0303 	sub.w	r3, fp, r3
 8008c00:	f8de b000 	ldr.w	fp, [lr]
 8008c04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008c08:	fa1f fb8b 	uxth.w	fp, fp
 8008c0c:	445b      	add	r3, fp
 8008c0e:	fa1f fb82 	uxth.w	fp, r2
 8008c12:	f8de 2000 	ldr.w	r2, [lr]
 8008c16:	4581      	cmp	r9, r0
 8008c18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c26:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008c2a:	f84e 3b04 	str.w	r3, [lr], #4
 8008c2e:	d2da      	bcs.n	8008be6 <quorem+0x42>
 8008c30:	f856 300c 	ldr.w	r3, [r6, ip]
 8008c34:	b933      	cbnz	r3, 8008c44 <quorem+0xa0>
 8008c36:	9b01      	ldr	r3, [sp, #4]
 8008c38:	3b04      	subs	r3, #4
 8008c3a:	429e      	cmp	r6, r3
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	d331      	bcc.n	8008ca4 <quorem+0x100>
 8008c40:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c44:	4640      	mov	r0, r8
 8008c46:	f001 fba5 	bl	800a394 <__mcmp>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	db26      	blt.n	8008c9c <quorem+0xf8>
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f04f 0c00 	mov.w	ip, #0
 8008c54:	3501      	adds	r5, #1
 8008c56:	f857 1b04 	ldr.w	r1, [r7], #4
 8008c5a:	f8d0 e000 	ldr.w	lr, [r0]
 8008c5e:	b28b      	uxth	r3, r1
 8008c60:	ebac 0303 	sub.w	r3, ip, r3
 8008c64:	fa1f f28e 	uxth.w	r2, lr
 8008c68:	4413      	add	r3, r2
 8008c6a:	0c0a      	lsrs	r2, r1, #16
 8008c6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7a:	45b9      	cmp	r9, r7
 8008c7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c80:	f840 3b04 	str.w	r3, [r0], #4
 8008c84:	d2e7      	bcs.n	8008c56 <quorem+0xb2>
 8008c86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008c8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008c8e:	b92a      	cbnz	r2, 8008c9c <quorem+0xf8>
 8008c90:	3b04      	subs	r3, #4
 8008c92:	429e      	cmp	r6, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	d30b      	bcc.n	8008cb0 <quorem+0x10c>
 8008c98:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	b003      	add	sp, #12
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d1c9      	bne.n	8008c40 <quorem+0x9c>
 8008cac:	3c01      	subs	r4, #1
 8008cae:	e7c4      	b.n	8008c3a <quorem+0x96>
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	3b04      	subs	r3, #4
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d1ef      	bne.n	8008c98 <quorem+0xf4>
 8008cb8:	3c01      	subs	r4, #1
 8008cba:	e7ea      	b.n	8008c92 <quorem+0xee>
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e7ee      	b.n	8008c9e <quorem+0xfa>

08008cc0 <_dtoa_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008cca:	b095      	sub	sp, #84	; 0x54
 8008ccc:	4604      	mov	r4, r0
 8008cce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008cd2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008cd6:	b93d      	cbnz	r5, 8008ce8 <_dtoa_r+0x28>
 8008cd8:	2010      	movs	r0, #16
 8008cda:	f001 f8e1 	bl	8009ea0 <malloc>
 8008cde:	6260      	str	r0, [r4, #36]	; 0x24
 8008ce0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ce4:	6005      	str	r5, [r0, #0]
 8008ce6:	60c5      	str	r5, [r0, #12]
 8008ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cea:	6819      	ldr	r1, [r3, #0]
 8008cec:	b151      	cbz	r1, 8008d04 <_dtoa_r+0x44>
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4093      	lsls	r3, r2
 8008cf4:	604a      	str	r2, [r1, #4]
 8008cf6:	608b      	str	r3, [r1, #8]
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f001 f92d 	bl	8009f58 <_Bfree>
 8008cfe:	2200      	movs	r2, #0
 8008d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	1e3b      	subs	r3, r7, #0
 8008d06:	bfaf      	iteee	ge
 8008d08:	2300      	movge	r3, #0
 8008d0a:	2201      	movlt	r2, #1
 8008d0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d10:	9303      	strlt	r3, [sp, #12]
 8008d12:	bfac      	ite	ge
 8008d14:	f8c8 3000 	strge.w	r3, [r8]
 8008d18:	f8c8 2000 	strlt.w	r2, [r8]
 8008d1c:	4bae      	ldr	r3, [pc, #696]	; (8008fd8 <_dtoa_r+0x318>)
 8008d1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d22:	ea33 0308 	bics.w	r3, r3, r8
 8008d26:	d11b      	bne.n	8008d60 <_dtoa_r+0xa0>
 8008d28:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	b923      	cbnz	r3, 8008d3e <_dtoa_r+0x7e>
 8008d34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f000 8545 	beq.w	80097c8 <_dtoa_r+0xb08>
 8008d3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d40:	b953      	cbnz	r3, 8008d58 <_dtoa_r+0x98>
 8008d42:	4ba6      	ldr	r3, [pc, #664]	; (8008fdc <_dtoa_r+0x31c>)
 8008d44:	e021      	b.n	8008d8a <_dtoa_r+0xca>
 8008d46:	4ba6      	ldr	r3, [pc, #664]	; (8008fe0 <_dtoa_r+0x320>)
 8008d48:	9306      	str	r3, [sp, #24]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	9806      	ldr	r0, [sp, #24]
 8008d52:	b015      	add	sp, #84	; 0x54
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	4ba0      	ldr	r3, [pc, #640]	; (8008fdc <_dtoa_r+0x31c>)
 8008d5a:	9306      	str	r3, [sp, #24]
 8008d5c:	3303      	adds	r3, #3
 8008d5e:	e7f5      	b.n	8008d4c <_dtoa_r+0x8c>
 8008d60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d64:	2200      	movs	r2, #0
 8008d66:	2300      	movs	r3, #0
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fe1c 	bl	80009a8 <__aeabi_dcmpeq>
 8008d70:	4682      	mov	sl, r0
 8008d72:	b160      	cbz	r0, 8008d8e <_dtoa_r+0xce>
 8008d74:	2301      	movs	r3, #1
 8008d76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8520 	beq.w	80097c2 <_dtoa_r+0xb02>
 8008d82:	4b98      	ldr	r3, [pc, #608]	; (8008fe4 <_dtoa_r+0x324>)
 8008d84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	9306      	str	r3, [sp, #24]
 8008d8c:	e7e0      	b.n	8008d50 <_dtoa_r+0x90>
 8008d8e:	ab12      	add	r3, sp, #72	; 0x48
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	ab13      	add	r3, sp, #76	; 0x4c
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4632      	mov	r2, r6
 8008d98:	463b      	mov	r3, r7
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f001 fbe8 	bl	800a570 <__d2b>
 8008da0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008da4:	4683      	mov	fp, r0
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	d07d      	beq.n	8008ea6 <_dtoa_r+0x1e6>
 8008daa:	46b0      	mov	r8, r6
 8008dac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008db0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008db4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008db8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008dbc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b89      	ldr	r3, [pc, #548]	; (8008fe8 <_dtoa_r+0x328>)
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7f7 f9ce 	bl	8000168 <__aeabi_dsub>
 8008dcc:	a37c      	add	r3, pc, #496	; (adr r3, 8008fc0 <_dtoa_r+0x300>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fb81 	bl	80004d8 <__aeabi_dmul>
 8008dd6:	a37c      	add	r3, pc, #496	; (adr r3, 8008fc8 <_dtoa_r+0x308>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7f7 f9c6 	bl	800016c <__adddf3>
 8008de0:	4606      	mov	r6, r0
 8008de2:	4628      	mov	r0, r5
 8008de4:	460f      	mov	r7, r1
 8008de6:	f7f7 fb0d 	bl	8000404 <__aeabi_i2d>
 8008dea:	a379      	add	r3, pc, #484	; (adr r3, 8008fd0 <_dtoa_r+0x310>)
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	f7f7 fb72 	bl	80004d8 <__aeabi_dmul>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 f9b6 	bl	800016c <__adddf3>
 8008e00:	4606      	mov	r6, r0
 8008e02:	460f      	mov	r7, r1
 8008e04:	f7f7 fe18 	bl	8000a38 <__aeabi_d2iz>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4682      	mov	sl, r0
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4630      	mov	r0, r6
 8008e10:	4639      	mov	r1, r7
 8008e12:	f7f7 fdd3 	bl	80009bc <__aeabi_dcmplt>
 8008e16:	b148      	cbz	r0, 8008e2c <_dtoa_r+0x16c>
 8008e18:	4650      	mov	r0, sl
 8008e1a:	f7f7 faf3 	bl	8000404 <__aeabi_i2d>
 8008e1e:	4632      	mov	r2, r6
 8008e20:	463b      	mov	r3, r7
 8008e22:	f7f7 fdc1 	bl	80009a8 <__aeabi_dcmpeq>
 8008e26:	b908      	cbnz	r0, 8008e2c <_dtoa_r+0x16c>
 8008e28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e2c:	f1ba 0f16 	cmp.w	sl, #22
 8008e30:	d85a      	bhi.n	8008ee8 <_dtoa_r+0x228>
 8008e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e36:	496d      	ldr	r1, [pc, #436]	; (8008fec <_dtoa_r+0x32c>)
 8008e38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e40:	f7f7 fdda 	bl	80009f8 <__aeabi_dcmpgt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d051      	beq.n	8008eec <_dtoa_r+0x22c>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8008e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e52:	1b5d      	subs	r5, r3, r5
 8008e54:	1e6b      	subs	r3, r5, #1
 8008e56:	9307      	str	r3, [sp, #28]
 8008e58:	bf43      	ittte	mi
 8008e5a:	2300      	movmi	r3, #0
 8008e5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008e60:	9307      	strmi	r3, [sp, #28]
 8008e62:	f04f 0900 	movpl.w	r9, #0
 8008e66:	f1ba 0f00 	cmp.w	sl, #0
 8008e6a:	db41      	blt.n	8008ef0 <_dtoa_r+0x230>
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008e72:	4453      	add	r3, sl
 8008e74:	9307      	str	r3, [sp, #28]
 8008e76:	2300      	movs	r3, #0
 8008e78:	9308      	str	r3, [sp, #32]
 8008e7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e7c:	2b09      	cmp	r3, #9
 8008e7e:	f200 808f 	bhi.w	8008fa0 <_dtoa_r+0x2e0>
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	bfc4      	itt	gt
 8008e86:	3b04      	subgt	r3, #4
 8008e88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008e8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e8c:	bfc8      	it	gt
 8008e8e:	2500      	movgt	r5, #0
 8008e90:	f1a3 0302 	sub.w	r3, r3, #2
 8008e94:	bfd8      	it	le
 8008e96:	2501      	movle	r5, #1
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	f200 808d 	bhi.w	8008fb8 <_dtoa_r+0x2f8>
 8008e9e:	e8df f003 	tbb	[pc, r3]
 8008ea2:	7d7b      	.short	0x7d7b
 8008ea4:	6f2f      	.short	0x6f2f
 8008ea6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008eaa:	441d      	add	r5, r3
 8008eac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008eb0:	2820      	cmp	r0, #32
 8008eb2:	dd13      	ble.n	8008edc <_dtoa_r+0x21c>
 8008eb4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008eb8:	9b02      	ldr	r3, [sp, #8]
 8008eba:	fa08 f800 	lsl.w	r8, r8, r0
 8008ebe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008ec2:	fa23 f000 	lsr.w	r0, r3, r0
 8008ec6:	ea48 0000 	orr.w	r0, r8, r0
 8008eca:	f7f7 fa8b 	bl	80003e4 <__aeabi_ui2d>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008ed6:	3d01      	subs	r5, #1
 8008ed8:	9310      	str	r3, [sp, #64]	; 0x40
 8008eda:	e771      	b.n	8008dc0 <_dtoa_r+0x100>
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	f1c0 0020 	rsb	r0, r0, #32
 8008ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ee6:	e7f0      	b.n	8008eca <_dtoa_r+0x20a>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e7b0      	b.n	8008e4e <_dtoa_r+0x18e>
 8008eec:	900d      	str	r0, [sp, #52]	; 0x34
 8008eee:	e7af      	b.n	8008e50 <_dtoa_r+0x190>
 8008ef0:	f1ca 0300 	rsb	r3, sl, #0
 8008ef4:	9308      	str	r3, [sp, #32]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	eba9 090a 	sub.w	r9, r9, sl
 8008efc:	930c      	str	r3, [sp, #48]	; 0x30
 8008efe:	e7bc      	b.n	8008e7a <_dtoa_r+0x1ba>
 8008f00:	2301      	movs	r3, #1
 8008f02:	9309      	str	r3, [sp, #36]	; 0x24
 8008f04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd74      	ble.n	8008ff4 <_dtoa_r+0x334>
 8008f0a:	4698      	mov	r8, r3
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f12:	6072      	str	r2, [r6, #4]
 8008f14:	2204      	movs	r2, #4
 8008f16:	f102 0014 	add.w	r0, r2, #20
 8008f1a:	4298      	cmp	r0, r3
 8008f1c:	6871      	ldr	r1, [r6, #4]
 8008f1e:	d96e      	bls.n	8008ffe <_dtoa_r+0x33e>
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 ffe5 	bl	8009ef0 <_Balloc>
 8008f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f28:	6030      	str	r0, [r6, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f1b8 0f0e 	cmp.w	r8, #14
 8008f30:	9306      	str	r3, [sp, #24]
 8008f32:	f200 80ed 	bhi.w	8009110 <_dtoa_r+0x450>
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	f000 80ea 	beq.w	8009110 <_dtoa_r+0x450>
 8008f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f40:	f1ba 0f00 	cmp.w	sl, #0
 8008f44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008f48:	dd77      	ble.n	800903a <_dtoa_r+0x37a>
 8008f4a:	4a28      	ldr	r2, [pc, #160]	; (8008fec <_dtoa_r+0x32c>)
 8008f4c:	f00a 030f 	and.w	r3, sl, #15
 8008f50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008f54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f58:	06f0      	lsls	r0, r6, #27
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f62:	d568      	bpl.n	8009036 <_dtoa_r+0x376>
 8008f64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008f68:	4b21      	ldr	r3, [pc, #132]	; (8008ff0 <_dtoa_r+0x330>)
 8008f6a:	2503      	movs	r5, #3
 8008f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f70:	f7f7 fbdc 	bl	800072c <__aeabi_ddiv>
 8008f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f78:	f006 060f 	and.w	r6, r6, #15
 8008f7c:	4f1c      	ldr	r7, [pc, #112]	; (8008ff0 <_dtoa_r+0x330>)
 8008f7e:	e04f      	b.n	8009020 <_dtoa_r+0x360>
 8008f80:	2301      	movs	r3, #1
 8008f82:	9309      	str	r3, [sp, #36]	; 0x24
 8008f84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f86:	4453      	add	r3, sl
 8008f88:	f103 0801 	add.w	r8, r3, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	4643      	mov	r3, r8
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	bfb8      	it	lt
 8008f94:	2301      	movlt	r3, #1
 8008f96:	e7ba      	b.n	8008f0e <_dtoa_r+0x24e>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e7b2      	b.n	8008f02 <_dtoa_r+0x242>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e7f0      	b.n	8008f82 <_dtoa_r+0x2c2>
 8008fa0:	2501      	movs	r5, #1
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	9509      	str	r5, [sp, #36]	; 0x24
 8008fa6:	931e      	str	r3, [sp, #120]	; 0x78
 8008fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fac:	2200      	movs	r2, #0
 8008fae:	9304      	str	r3, [sp, #16]
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	2312      	movs	r3, #18
 8008fb4:	921f      	str	r2, [sp, #124]	; 0x7c
 8008fb6:	e7aa      	b.n	8008f0e <_dtoa_r+0x24e>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbc:	e7f4      	b.n	8008fa8 <_dtoa_r+0x2e8>
 8008fbe:	bf00      	nop
 8008fc0:	636f4361 	.word	0x636f4361
 8008fc4:	3fd287a7 	.word	0x3fd287a7
 8008fc8:	8b60c8b3 	.word	0x8b60c8b3
 8008fcc:	3fc68a28 	.word	0x3fc68a28
 8008fd0:	509f79fb 	.word	0x509f79fb
 8008fd4:	3fd34413 	.word	0x3fd34413
 8008fd8:	7ff00000 	.word	0x7ff00000
 8008fdc:	0800b029 	.word	0x0800b029
 8008fe0:	0800b020 	.word	0x0800b020
 8008fe4:	0800afa1 	.word	0x0800afa1
 8008fe8:	3ff80000 	.word	0x3ff80000
 8008fec:	0800b060 	.word	0x0800b060
 8008ff0:	0800b038 	.word	0x0800b038
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	9304      	str	r3, [sp, #16]
 8008ff8:	4698      	mov	r8, r3
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	e7da      	b.n	8008fb4 <_dtoa_r+0x2f4>
 8008ffe:	3101      	adds	r1, #1
 8009000:	6071      	str	r1, [r6, #4]
 8009002:	0052      	lsls	r2, r2, #1
 8009004:	e787      	b.n	8008f16 <_dtoa_r+0x256>
 8009006:	07f1      	lsls	r1, r6, #31
 8009008:	d508      	bpl.n	800901c <_dtoa_r+0x35c>
 800900a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800900e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009012:	f7f7 fa61 	bl	80004d8 <__aeabi_dmul>
 8009016:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800901a:	3501      	adds	r5, #1
 800901c:	1076      	asrs	r6, r6, #1
 800901e:	3708      	adds	r7, #8
 8009020:	2e00      	cmp	r6, #0
 8009022:	d1f0      	bne.n	8009006 <_dtoa_r+0x346>
 8009024:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800902c:	f7f7 fb7e 	bl	800072c <__aeabi_ddiv>
 8009030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009034:	e01b      	b.n	800906e <_dtoa_r+0x3ae>
 8009036:	2502      	movs	r5, #2
 8009038:	e7a0      	b.n	8008f7c <_dtoa_r+0x2bc>
 800903a:	f000 80a4 	beq.w	8009186 <_dtoa_r+0x4c6>
 800903e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009042:	f1ca 0600 	rsb	r6, sl, #0
 8009046:	4ba0      	ldr	r3, [pc, #640]	; (80092c8 <_dtoa_r+0x608>)
 8009048:	f006 020f 	and.w	r2, r6, #15
 800904c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	2502      	movs	r5, #2
 800905a:	2300      	movs	r3, #0
 800905c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009060:	4f9a      	ldr	r7, [pc, #616]	; (80092cc <_dtoa_r+0x60c>)
 8009062:	1136      	asrs	r6, r6, #4
 8009064:	2e00      	cmp	r6, #0
 8009066:	f040 8083 	bne.w	8009170 <_dtoa_r+0x4b0>
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e0      	bne.n	8009030 <_dtoa_r+0x370>
 800906e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 808a 	beq.w	800918a <_dtoa_r+0x4ca>
 8009076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800907a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800907e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009082:	2200      	movs	r2, #0
 8009084:	4b92      	ldr	r3, [pc, #584]	; (80092d0 <_dtoa_r+0x610>)
 8009086:	f7f7 fc99 	bl	80009bc <__aeabi_dcmplt>
 800908a:	2800      	cmp	r0, #0
 800908c:	d07d      	beq.n	800918a <_dtoa_r+0x4ca>
 800908e:	f1b8 0f00 	cmp.w	r8, #0
 8009092:	d07a      	beq.n	800918a <_dtoa_r+0x4ca>
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dd36      	ble.n	8009108 <_dtoa_r+0x448>
 800909a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800909e:	2200      	movs	r2, #0
 80090a0:	4b8c      	ldr	r3, [pc, #560]	; (80092d4 <_dtoa_r+0x614>)
 80090a2:	f7f7 fa19 	bl	80004d8 <__aeabi_dmul>
 80090a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090aa:	9e04      	ldr	r6, [sp, #16]
 80090ac:	f10a 37ff 	add.w	r7, sl, #4294967295
 80090b0:	3501      	adds	r5, #1
 80090b2:	4628      	mov	r0, r5
 80090b4:	f7f7 f9a6 	bl	8000404 <__aeabi_i2d>
 80090b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090bc:	f7f7 fa0c 	bl	80004d8 <__aeabi_dmul>
 80090c0:	2200      	movs	r2, #0
 80090c2:	4b85      	ldr	r3, [pc, #532]	; (80092d8 <_dtoa_r+0x618>)
 80090c4:	f7f7 f852 	bl	800016c <__adddf3>
 80090c8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80090cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80090d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80090d2:	2e00      	cmp	r6, #0
 80090d4:	d15c      	bne.n	8009190 <_dtoa_r+0x4d0>
 80090d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	4b7f      	ldr	r3, [pc, #508]	; (80092dc <_dtoa_r+0x61c>)
 80090de:	f7f7 f843 	bl	8000168 <__aeabi_dsub>
 80090e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090e4:	462b      	mov	r3, r5
 80090e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ea:	f7f7 fc85 	bl	80009f8 <__aeabi_dcmpgt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f040 8281 	bne.w	80095f6 <_dtoa_r+0x936>
 80090f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090fa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80090fe:	f7f7 fc5d 	bl	80009bc <__aeabi_dcmplt>
 8009102:	2800      	cmp	r0, #0
 8009104:	f040 8275 	bne.w	80095f2 <_dtoa_r+0x932>
 8009108:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800910c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009110:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009112:	2b00      	cmp	r3, #0
 8009114:	f2c0 814b 	blt.w	80093ae <_dtoa_r+0x6ee>
 8009118:	f1ba 0f0e 	cmp.w	sl, #14
 800911c:	f300 8147 	bgt.w	80093ae <_dtoa_r+0x6ee>
 8009120:	4b69      	ldr	r3, [pc, #420]	; (80092c8 <_dtoa_r+0x608>)
 8009122:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800912e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009130:	2b00      	cmp	r3, #0
 8009132:	f280 80d7 	bge.w	80092e4 <_dtoa_r+0x624>
 8009136:	f1b8 0f00 	cmp.w	r8, #0
 800913a:	f300 80d3 	bgt.w	80092e4 <_dtoa_r+0x624>
 800913e:	f040 8257 	bne.w	80095f0 <_dtoa_r+0x930>
 8009142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009146:	2200      	movs	r2, #0
 8009148:	4b64      	ldr	r3, [pc, #400]	; (80092dc <_dtoa_r+0x61c>)
 800914a:	f7f7 f9c5 	bl	80004d8 <__aeabi_dmul>
 800914e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009152:	f7f7 fc47 	bl	80009e4 <__aeabi_dcmpge>
 8009156:	4646      	mov	r6, r8
 8009158:	4647      	mov	r7, r8
 800915a:	2800      	cmp	r0, #0
 800915c:	f040 822d 	bne.w	80095ba <_dtoa_r+0x8fa>
 8009160:	9b06      	ldr	r3, [sp, #24]
 8009162:	9a06      	ldr	r2, [sp, #24]
 8009164:	1c5d      	adds	r5, r3, #1
 8009166:	2331      	movs	r3, #49	; 0x31
 8009168:	f10a 0a01 	add.w	sl, sl, #1
 800916c:	7013      	strb	r3, [r2, #0]
 800916e:	e228      	b.n	80095c2 <_dtoa_r+0x902>
 8009170:	07f2      	lsls	r2, r6, #31
 8009172:	d505      	bpl.n	8009180 <_dtoa_r+0x4c0>
 8009174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009178:	f7f7 f9ae 	bl	80004d8 <__aeabi_dmul>
 800917c:	2301      	movs	r3, #1
 800917e:	3501      	adds	r5, #1
 8009180:	1076      	asrs	r6, r6, #1
 8009182:	3708      	adds	r7, #8
 8009184:	e76e      	b.n	8009064 <_dtoa_r+0x3a4>
 8009186:	2502      	movs	r5, #2
 8009188:	e771      	b.n	800906e <_dtoa_r+0x3ae>
 800918a:	4657      	mov	r7, sl
 800918c:	4646      	mov	r6, r8
 800918e:	e790      	b.n	80090b2 <_dtoa_r+0x3f2>
 8009190:	4b4d      	ldr	r3, [pc, #308]	; (80092c8 <_dtoa_r+0x608>)
 8009192:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009196:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800919a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	d048      	beq.n	8009232 <_dtoa_r+0x572>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	2000      	movs	r0, #0
 80091a6:	494e      	ldr	r1, [pc, #312]	; (80092e0 <_dtoa_r+0x620>)
 80091a8:	f7f7 fac0 	bl	800072c <__aeabi_ddiv>
 80091ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091b0:	f7f6 ffda 	bl	8000168 <__aeabi_dsub>
 80091b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80091b8:	9d06      	ldr	r5, [sp, #24]
 80091ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091be:	f7f7 fc3b 	bl	8000a38 <__aeabi_d2iz>
 80091c2:	9011      	str	r0, [sp, #68]	; 0x44
 80091c4:	f7f7 f91e 	bl	8000404 <__aeabi_i2d>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091d0:	f7f6 ffca 	bl	8000168 <__aeabi_dsub>
 80091d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091da:	3330      	adds	r3, #48	; 0x30
 80091dc:	f805 3b01 	strb.w	r3, [r5], #1
 80091e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091e4:	f7f7 fbea 	bl	80009bc <__aeabi_dcmplt>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d163      	bne.n	80092b4 <_dtoa_r+0x5f4>
 80091ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091f0:	2000      	movs	r0, #0
 80091f2:	4937      	ldr	r1, [pc, #220]	; (80092d0 <_dtoa_r+0x610>)
 80091f4:	f7f6 ffb8 	bl	8000168 <__aeabi_dsub>
 80091f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091fc:	f7f7 fbde 	bl	80009bc <__aeabi_dcmplt>
 8009200:	2800      	cmp	r0, #0
 8009202:	f040 80b5 	bne.w	8009370 <_dtoa_r+0x6b0>
 8009206:	9b06      	ldr	r3, [sp, #24]
 8009208:	1aeb      	subs	r3, r5, r3
 800920a:	429e      	cmp	r6, r3
 800920c:	f77f af7c 	ble.w	8009108 <_dtoa_r+0x448>
 8009210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009214:	2200      	movs	r2, #0
 8009216:	4b2f      	ldr	r3, [pc, #188]	; (80092d4 <_dtoa_r+0x614>)
 8009218:	f7f7 f95e 	bl	80004d8 <__aeabi_dmul>
 800921c:	2200      	movs	r2, #0
 800921e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009226:	4b2b      	ldr	r3, [pc, #172]	; (80092d4 <_dtoa_r+0x614>)
 8009228:	f7f7 f956 	bl	80004d8 <__aeabi_dmul>
 800922c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009230:	e7c3      	b.n	80091ba <_dtoa_r+0x4fa>
 8009232:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009236:	f7f7 f94f 	bl	80004d8 <__aeabi_dmul>
 800923a:	9b06      	ldr	r3, [sp, #24]
 800923c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009240:	199d      	adds	r5, r3, r6
 8009242:	461e      	mov	r6, r3
 8009244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009248:	f7f7 fbf6 	bl	8000a38 <__aeabi_d2iz>
 800924c:	9011      	str	r0, [sp, #68]	; 0x44
 800924e:	f7f7 f8d9 	bl	8000404 <__aeabi_i2d>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	f7f6 ff85 	bl	8000168 <__aeabi_dsub>
 800925e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009264:	3330      	adds	r3, #48	; 0x30
 8009266:	f806 3b01 	strb.w	r3, [r6], #1
 800926a:	42ae      	cmp	r6, r5
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	d124      	bne.n	80092bc <_dtoa_r+0x5fc>
 8009272:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009276:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <_dtoa_r+0x620>)
 8009278:	f7f6 ff78 	bl	800016c <__adddf3>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009284:	f7f7 fbb8 	bl	80009f8 <__aeabi_dcmpgt>
 8009288:	2800      	cmp	r0, #0
 800928a:	d171      	bne.n	8009370 <_dtoa_r+0x6b0>
 800928c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009290:	2000      	movs	r0, #0
 8009292:	4913      	ldr	r1, [pc, #76]	; (80092e0 <_dtoa_r+0x620>)
 8009294:	f7f6 ff68 	bl	8000168 <__aeabi_dsub>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a0:	f7f7 fb8c 	bl	80009bc <__aeabi_dcmplt>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	f43f af2f 	beq.w	8009108 <_dtoa_r+0x448>
 80092aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092ae:	1e6a      	subs	r2, r5, #1
 80092b0:	2b30      	cmp	r3, #48	; 0x30
 80092b2:	d001      	beq.n	80092b8 <_dtoa_r+0x5f8>
 80092b4:	46ba      	mov	sl, r7
 80092b6:	e04a      	b.n	800934e <_dtoa_r+0x68e>
 80092b8:	4615      	mov	r5, r2
 80092ba:	e7f6      	b.n	80092aa <_dtoa_r+0x5ea>
 80092bc:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <_dtoa_r+0x614>)
 80092be:	f7f7 f90b 	bl	80004d8 <__aeabi_dmul>
 80092c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092c6:	e7bd      	b.n	8009244 <_dtoa_r+0x584>
 80092c8:	0800b060 	.word	0x0800b060
 80092cc:	0800b038 	.word	0x0800b038
 80092d0:	3ff00000 	.word	0x3ff00000
 80092d4:	40240000 	.word	0x40240000
 80092d8:	401c0000 	.word	0x401c0000
 80092dc:	40140000 	.word	0x40140000
 80092e0:	3fe00000 	.word	0x3fe00000
 80092e4:	9d06      	ldr	r5, [sp, #24]
 80092e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092ee:	4630      	mov	r0, r6
 80092f0:	4639      	mov	r1, r7
 80092f2:	f7f7 fa1b 	bl	800072c <__aeabi_ddiv>
 80092f6:	f7f7 fb9f 	bl	8000a38 <__aeabi_d2iz>
 80092fa:	4681      	mov	r9, r0
 80092fc:	f7f7 f882 	bl	8000404 <__aeabi_i2d>
 8009300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009304:	f7f7 f8e8 	bl	80004d8 <__aeabi_dmul>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f6 ff2a 	bl	8000168 <__aeabi_dsub>
 8009314:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009318:	f805 6b01 	strb.w	r6, [r5], #1
 800931c:	9e06      	ldr	r6, [sp, #24]
 800931e:	4602      	mov	r2, r0
 8009320:	1bae      	subs	r6, r5, r6
 8009322:	45b0      	cmp	r8, r6
 8009324:	460b      	mov	r3, r1
 8009326:	d135      	bne.n	8009394 <_dtoa_r+0x6d4>
 8009328:	f7f6 ff20 	bl	800016c <__adddf3>
 800932c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009330:	4606      	mov	r6, r0
 8009332:	460f      	mov	r7, r1
 8009334:	f7f7 fb60 	bl	80009f8 <__aeabi_dcmpgt>
 8009338:	b9c8      	cbnz	r0, 800936e <_dtoa_r+0x6ae>
 800933a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f7 fb31 	bl	80009a8 <__aeabi_dcmpeq>
 8009346:	b110      	cbz	r0, 800934e <_dtoa_r+0x68e>
 8009348:	f019 0f01 	tst.w	r9, #1
 800934c:	d10f      	bne.n	800936e <_dtoa_r+0x6ae>
 800934e:	4659      	mov	r1, fp
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fe01 	bl	8009f58 <_Bfree>
 8009356:	2300      	movs	r3, #0
 8009358:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800935a:	702b      	strb	r3, [r5, #0]
 800935c:	f10a 0301 	add.w	r3, sl, #1
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009364:	2b00      	cmp	r3, #0
 8009366:	f43f acf3 	beq.w	8008d50 <_dtoa_r+0x90>
 800936a:	601d      	str	r5, [r3, #0]
 800936c:	e4f0      	b.n	8008d50 <_dtoa_r+0x90>
 800936e:	4657      	mov	r7, sl
 8009370:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009374:	1e6b      	subs	r3, r5, #1
 8009376:	2a39      	cmp	r2, #57	; 0x39
 8009378:	d106      	bne.n	8009388 <_dtoa_r+0x6c8>
 800937a:	9a06      	ldr	r2, [sp, #24]
 800937c:	429a      	cmp	r2, r3
 800937e:	d107      	bne.n	8009390 <_dtoa_r+0x6d0>
 8009380:	2330      	movs	r3, #48	; 0x30
 8009382:	7013      	strb	r3, [r2, #0]
 8009384:	4613      	mov	r3, r2
 8009386:	3701      	adds	r7, #1
 8009388:	781a      	ldrb	r2, [r3, #0]
 800938a:	3201      	adds	r2, #1
 800938c:	701a      	strb	r2, [r3, #0]
 800938e:	e791      	b.n	80092b4 <_dtoa_r+0x5f4>
 8009390:	461d      	mov	r5, r3
 8009392:	e7ed      	b.n	8009370 <_dtoa_r+0x6b0>
 8009394:	2200      	movs	r2, #0
 8009396:	4b99      	ldr	r3, [pc, #612]	; (80095fc <_dtoa_r+0x93c>)
 8009398:	f7f7 f89e 	bl	80004d8 <__aeabi_dmul>
 800939c:	2200      	movs	r2, #0
 800939e:	2300      	movs	r3, #0
 80093a0:	4606      	mov	r6, r0
 80093a2:	460f      	mov	r7, r1
 80093a4:	f7f7 fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d09e      	beq.n	80092ea <_dtoa_r+0x62a>
 80093ac:	e7cf      	b.n	800934e <_dtoa_r+0x68e>
 80093ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b0:	2a00      	cmp	r2, #0
 80093b2:	f000 8088 	beq.w	80094c6 <_dtoa_r+0x806>
 80093b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80093b8:	2a01      	cmp	r2, #1
 80093ba:	dc6d      	bgt.n	8009498 <_dtoa_r+0x7d8>
 80093bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093be:	2a00      	cmp	r2, #0
 80093c0:	d066      	beq.n	8009490 <_dtoa_r+0x7d0>
 80093c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093c6:	464d      	mov	r5, r9
 80093c8:	9e08      	ldr	r6, [sp, #32]
 80093ca:	9a07      	ldr	r2, [sp, #28]
 80093cc:	2101      	movs	r1, #1
 80093ce:	441a      	add	r2, r3
 80093d0:	4620      	mov	r0, r4
 80093d2:	4499      	add	r9, r3
 80093d4:	9207      	str	r2, [sp, #28]
 80093d6:	f000 fe9d 	bl	800a114 <__i2b>
 80093da:	4607      	mov	r7, r0
 80093dc:	2d00      	cmp	r5, #0
 80093de:	dd0b      	ble.n	80093f8 <_dtoa_r+0x738>
 80093e0:	9b07      	ldr	r3, [sp, #28]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dd08      	ble.n	80093f8 <_dtoa_r+0x738>
 80093e6:	42ab      	cmp	r3, r5
 80093e8:	bfa8      	it	ge
 80093ea:	462b      	movge	r3, r5
 80093ec:	9a07      	ldr	r2, [sp, #28]
 80093ee:	eba9 0903 	sub.w	r9, r9, r3
 80093f2:	1aed      	subs	r5, r5, r3
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	9307      	str	r3, [sp, #28]
 80093f8:	9b08      	ldr	r3, [sp, #32]
 80093fa:	b1eb      	cbz	r3, 8009438 <_dtoa_r+0x778>
 80093fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d065      	beq.n	80094ce <_dtoa_r+0x80e>
 8009402:	b18e      	cbz	r6, 8009428 <_dtoa_r+0x768>
 8009404:	4639      	mov	r1, r7
 8009406:	4632      	mov	r2, r6
 8009408:	4620      	mov	r0, r4
 800940a:	f000 ff21 	bl	800a250 <__pow5mult>
 800940e:	465a      	mov	r2, fp
 8009410:	4601      	mov	r1, r0
 8009412:	4607      	mov	r7, r0
 8009414:	4620      	mov	r0, r4
 8009416:	f000 fe86 	bl	800a126 <__multiply>
 800941a:	4659      	mov	r1, fp
 800941c:	900a      	str	r0, [sp, #40]	; 0x28
 800941e:	4620      	mov	r0, r4
 8009420:	f000 fd9a 	bl	8009f58 <_Bfree>
 8009424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009426:	469b      	mov	fp, r3
 8009428:	9b08      	ldr	r3, [sp, #32]
 800942a:	1b9a      	subs	r2, r3, r6
 800942c:	d004      	beq.n	8009438 <_dtoa_r+0x778>
 800942e:	4659      	mov	r1, fp
 8009430:	4620      	mov	r0, r4
 8009432:	f000 ff0d 	bl	800a250 <__pow5mult>
 8009436:	4683      	mov	fp, r0
 8009438:	2101      	movs	r1, #1
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fe6a 	bl	800a114 <__i2b>
 8009440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009442:	4606      	mov	r6, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 81c6 	beq.w	80097d6 <_dtoa_r+0xb16>
 800944a:	461a      	mov	r2, r3
 800944c:	4601      	mov	r1, r0
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fefe 	bl	800a250 <__pow5mult>
 8009454:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009456:	4606      	mov	r6, r0
 8009458:	2b01      	cmp	r3, #1
 800945a:	dc3e      	bgt.n	80094da <_dtoa_r+0x81a>
 800945c:	9b02      	ldr	r3, [sp, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d137      	bne.n	80094d2 <_dtoa_r+0x812>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009468:	2b00      	cmp	r3, #0
 800946a:	d134      	bne.n	80094d6 <_dtoa_r+0x816>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009472:	0d1b      	lsrs	r3, r3, #20
 8009474:	051b      	lsls	r3, r3, #20
 8009476:	b12b      	cbz	r3, 8009484 <_dtoa_r+0x7c4>
 8009478:	9b07      	ldr	r3, [sp, #28]
 800947a:	f109 0901 	add.w	r9, r9, #1
 800947e:	3301      	adds	r3, #1
 8009480:	9307      	str	r3, [sp, #28]
 8009482:	2301      	movs	r3, #1
 8009484:	9308      	str	r3, [sp, #32]
 8009486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d128      	bne.n	80094de <_dtoa_r+0x81e>
 800948c:	2001      	movs	r0, #1
 800948e:	e02e      	b.n	80094ee <_dtoa_r+0x82e>
 8009490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009492:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009496:	e796      	b.n	80093c6 <_dtoa_r+0x706>
 8009498:	9b08      	ldr	r3, [sp, #32]
 800949a:	f108 36ff 	add.w	r6, r8, #4294967295
 800949e:	42b3      	cmp	r3, r6
 80094a0:	bfb7      	itett	lt
 80094a2:	9b08      	ldrlt	r3, [sp, #32]
 80094a4:	1b9e      	subge	r6, r3, r6
 80094a6:	1af2      	sublt	r2, r6, r3
 80094a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80094aa:	bfbf      	itttt	lt
 80094ac:	9608      	strlt	r6, [sp, #32]
 80094ae:	189b      	addlt	r3, r3, r2
 80094b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80094b2:	2600      	movlt	r6, #0
 80094b4:	f1b8 0f00 	cmp.w	r8, #0
 80094b8:	bfb9      	ittee	lt
 80094ba:	eba9 0508 	sublt.w	r5, r9, r8
 80094be:	2300      	movlt	r3, #0
 80094c0:	464d      	movge	r5, r9
 80094c2:	4643      	movge	r3, r8
 80094c4:	e781      	b.n	80093ca <_dtoa_r+0x70a>
 80094c6:	9e08      	ldr	r6, [sp, #32]
 80094c8:	464d      	mov	r5, r9
 80094ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80094cc:	e786      	b.n	80093dc <_dtoa_r+0x71c>
 80094ce:	9a08      	ldr	r2, [sp, #32]
 80094d0:	e7ad      	b.n	800942e <_dtoa_r+0x76e>
 80094d2:	2300      	movs	r3, #0
 80094d4:	e7d6      	b.n	8009484 <_dtoa_r+0x7c4>
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	e7d4      	b.n	8009484 <_dtoa_r+0x7c4>
 80094da:	2300      	movs	r3, #0
 80094dc:	9308      	str	r3, [sp, #32]
 80094de:	6933      	ldr	r3, [r6, #16]
 80094e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094e4:	6918      	ldr	r0, [r3, #16]
 80094e6:	f000 fdc7 	bl	800a078 <__hi0bits>
 80094ea:	f1c0 0020 	rsb	r0, r0, #32
 80094ee:	9b07      	ldr	r3, [sp, #28]
 80094f0:	4418      	add	r0, r3
 80094f2:	f010 001f 	ands.w	r0, r0, #31
 80094f6:	d047      	beq.n	8009588 <_dtoa_r+0x8c8>
 80094f8:	f1c0 0320 	rsb	r3, r0, #32
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	dd3b      	ble.n	8009578 <_dtoa_r+0x8b8>
 8009500:	9b07      	ldr	r3, [sp, #28]
 8009502:	f1c0 001c 	rsb	r0, r0, #28
 8009506:	4481      	add	r9, r0
 8009508:	4405      	add	r5, r0
 800950a:	4403      	add	r3, r0
 800950c:	9307      	str	r3, [sp, #28]
 800950e:	f1b9 0f00 	cmp.w	r9, #0
 8009512:	dd05      	ble.n	8009520 <_dtoa_r+0x860>
 8009514:	4659      	mov	r1, fp
 8009516:	464a      	mov	r2, r9
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fee7 	bl	800a2ec <__lshift>
 800951e:	4683      	mov	fp, r0
 8009520:	9b07      	ldr	r3, [sp, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dd05      	ble.n	8009532 <_dtoa_r+0x872>
 8009526:	4631      	mov	r1, r6
 8009528:	461a      	mov	r2, r3
 800952a:	4620      	mov	r0, r4
 800952c:	f000 fede 	bl	800a2ec <__lshift>
 8009530:	4606      	mov	r6, r0
 8009532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009534:	b353      	cbz	r3, 800958c <_dtoa_r+0x8cc>
 8009536:	4631      	mov	r1, r6
 8009538:	4658      	mov	r0, fp
 800953a:	f000 ff2b 	bl	800a394 <__mcmp>
 800953e:	2800      	cmp	r0, #0
 8009540:	da24      	bge.n	800958c <_dtoa_r+0x8cc>
 8009542:	2300      	movs	r3, #0
 8009544:	4659      	mov	r1, fp
 8009546:	220a      	movs	r2, #10
 8009548:	4620      	mov	r0, r4
 800954a:	f000 fd1c 	bl	8009f86 <__multadd>
 800954e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009550:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009554:	4683      	mov	fp, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8144 	beq.w	80097e4 <_dtoa_r+0xb24>
 800955c:	2300      	movs	r3, #0
 800955e:	4639      	mov	r1, r7
 8009560:	220a      	movs	r2, #10
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fd0f 	bl	8009f86 <__multadd>
 8009568:	9b04      	ldr	r3, [sp, #16]
 800956a:	4607      	mov	r7, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	dc4d      	bgt.n	800960c <_dtoa_r+0x94c>
 8009570:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009572:	2b02      	cmp	r3, #2
 8009574:	dd4a      	ble.n	800960c <_dtoa_r+0x94c>
 8009576:	e011      	b.n	800959c <_dtoa_r+0x8dc>
 8009578:	d0c9      	beq.n	800950e <_dtoa_r+0x84e>
 800957a:	9a07      	ldr	r2, [sp, #28]
 800957c:	331c      	adds	r3, #28
 800957e:	441a      	add	r2, r3
 8009580:	4499      	add	r9, r3
 8009582:	441d      	add	r5, r3
 8009584:	4613      	mov	r3, r2
 8009586:	e7c1      	b.n	800950c <_dtoa_r+0x84c>
 8009588:	4603      	mov	r3, r0
 800958a:	e7f6      	b.n	800957a <_dtoa_r+0x8ba>
 800958c:	f1b8 0f00 	cmp.w	r8, #0
 8009590:	dc36      	bgt.n	8009600 <_dtoa_r+0x940>
 8009592:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009594:	2b02      	cmp	r3, #2
 8009596:	dd33      	ble.n	8009600 <_dtoa_r+0x940>
 8009598:	f8cd 8010 	str.w	r8, [sp, #16]
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	b963      	cbnz	r3, 80095ba <_dtoa_r+0x8fa>
 80095a0:	4631      	mov	r1, r6
 80095a2:	2205      	movs	r2, #5
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 fcee 	bl	8009f86 <__multadd>
 80095aa:	4601      	mov	r1, r0
 80095ac:	4606      	mov	r6, r0
 80095ae:	4658      	mov	r0, fp
 80095b0:	f000 fef0 	bl	800a394 <__mcmp>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	f73f add3 	bgt.w	8009160 <_dtoa_r+0x4a0>
 80095ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095bc:	9d06      	ldr	r5, [sp, #24]
 80095be:	ea6f 0a03 	mvn.w	sl, r3
 80095c2:	f04f 0900 	mov.w	r9, #0
 80095c6:	4631      	mov	r1, r6
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fcc5 	bl	8009f58 <_Bfree>
 80095ce:	2f00      	cmp	r7, #0
 80095d0:	f43f aebd 	beq.w	800934e <_dtoa_r+0x68e>
 80095d4:	f1b9 0f00 	cmp.w	r9, #0
 80095d8:	d005      	beq.n	80095e6 <_dtoa_r+0x926>
 80095da:	45b9      	cmp	r9, r7
 80095dc:	d003      	beq.n	80095e6 <_dtoa_r+0x926>
 80095de:	4649      	mov	r1, r9
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fcb9 	bl	8009f58 <_Bfree>
 80095e6:	4639      	mov	r1, r7
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fcb5 	bl	8009f58 <_Bfree>
 80095ee:	e6ae      	b.n	800934e <_dtoa_r+0x68e>
 80095f0:	2600      	movs	r6, #0
 80095f2:	4637      	mov	r7, r6
 80095f4:	e7e1      	b.n	80095ba <_dtoa_r+0x8fa>
 80095f6:	46ba      	mov	sl, r7
 80095f8:	4637      	mov	r7, r6
 80095fa:	e5b1      	b.n	8009160 <_dtoa_r+0x4a0>
 80095fc:	40240000 	.word	0x40240000
 8009600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009602:	f8cd 8010 	str.w	r8, [sp, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 80f3 	beq.w	80097f2 <_dtoa_r+0xb32>
 800960c:	2d00      	cmp	r5, #0
 800960e:	dd05      	ble.n	800961c <_dtoa_r+0x95c>
 8009610:	4639      	mov	r1, r7
 8009612:	462a      	mov	r2, r5
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fe69 	bl	800a2ec <__lshift>
 800961a:	4607      	mov	r7, r0
 800961c:	9b08      	ldr	r3, [sp, #32]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d04c      	beq.n	80096bc <_dtoa_r+0x9fc>
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fc63 	bl	8009ef0 <_Balloc>
 800962a:	4605      	mov	r5, r0
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	f107 010c 	add.w	r1, r7, #12
 8009632:	3202      	adds	r2, #2
 8009634:	0092      	lsls	r2, r2, #2
 8009636:	300c      	adds	r0, #12
 8009638:	f7fd fd76 	bl	8007128 <memcpy>
 800963c:	2201      	movs	r2, #1
 800963e:	4629      	mov	r1, r5
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fe53 	bl	800a2ec <__lshift>
 8009646:	46b9      	mov	r9, r7
 8009648:	4607      	mov	r7, r0
 800964a:	9b06      	ldr	r3, [sp, #24]
 800964c:	9307      	str	r3, [sp, #28]
 800964e:	9b02      	ldr	r3, [sp, #8]
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	9308      	str	r3, [sp, #32]
 8009656:	4631      	mov	r1, r6
 8009658:	4658      	mov	r0, fp
 800965a:	f7ff faa3 	bl	8008ba4 <quorem>
 800965e:	4649      	mov	r1, r9
 8009660:	4605      	mov	r5, r0
 8009662:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009666:	4658      	mov	r0, fp
 8009668:	f000 fe94 	bl	800a394 <__mcmp>
 800966c:	463a      	mov	r2, r7
 800966e:	9002      	str	r0, [sp, #8]
 8009670:	4631      	mov	r1, r6
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fea8 	bl	800a3c8 <__mdiff>
 8009678:	68c3      	ldr	r3, [r0, #12]
 800967a:	4602      	mov	r2, r0
 800967c:	bb03      	cbnz	r3, 80096c0 <_dtoa_r+0xa00>
 800967e:	4601      	mov	r1, r0
 8009680:	9009      	str	r0, [sp, #36]	; 0x24
 8009682:	4658      	mov	r0, fp
 8009684:	f000 fe86 	bl	800a394 <__mcmp>
 8009688:	4603      	mov	r3, r0
 800968a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968c:	4611      	mov	r1, r2
 800968e:	4620      	mov	r0, r4
 8009690:	9309      	str	r3, [sp, #36]	; 0x24
 8009692:	f000 fc61 	bl	8009f58 <_Bfree>
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	b9a3      	cbnz	r3, 80096c4 <_dtoa_r+0xa04>
 800969a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800969c:	b992      	cbnz	r2, 80096c4 <_dtoa_r+0xa04>
 800969e:	9a08      	ldr	r2, [sp, #32]
 80096a0:	b982      	cbnz	r2, 80096c4 <_dtoa_r+0xa04>
 80096a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096a6:	d029      	beq.n	80096fc <_dtoa_r+0xa3c>
 80096a8:	9b02      	ldr	r3, [sp, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dd01      	ble.n	80096b2 <_dtoa_r+0x9f2>
 80096ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80096b2:	9b07      	ldr	r3, [sp, #28]
 80096b4:	1c5d      	adds	r5, r3, #1
 80096b6:	f883 8000 	strb.w	r8, [r3]
 80096ba:	e784      	b.n	80095c6 <_dtoa_r+0x906>
 80096bc:	4638      	mov	r0, r7
 80096be:	e7c2      	b.n	8009646 <_dtoa_r+0x986>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e7e3      	b.n	800968c <_dtoa_r+0x9cc>
 80096c4:	9a02      	ldr	r2, [sp, #8]
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	db04      	blt.n	80096d4 <_dtoa_r+0xa14>
 80096ca:	d123      	bne.n	8009714 <_dtoa_r+0xa54>
 80096cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80096ce:	bb0a      	cbnz	r2, 8009714 <_dtoa_r+0xa54>
 80096d0:	9a08      	ldr	r2, [sp, #32]
 80096d2:	b9fa      	cbnz	r2, 8009714 <_dtoa_r+0xa54>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	ddec      	ble.n	80096b2 <_dtoa_r+0x9f2>
 80096d8:	4659      	mov	r1, fp
 80096da:	2201      	movs	r2, #1
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 fe05 	bl	800a2ec <__lshift>
 80096e2:	4631      	mov	r1, r6
 80096e4:	4683      	mov	fp, r0
 80096e6:	f000 fe55 	bl	800a394 <__mcmp>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	dc03      	bgt.n	80096f6 <_dtoa_r+0xa36>
 80096ee:	d1e0      	bne.n	80096b2 <_dtoa_r+0x9f2>
 80096f0:	f018 0f01 	tst.w	r8, #1
 80096f4:	d0dd      	beq.n	80096b2 <_dtoa_r+0x9f2>
 80096f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096fa:	d1d8      	bne.n	80096ae <_dtoa_r+0x9ee>
 80096fc:	9b07      	ldr	r3, [sp, #28]
 80096fe:	9a07      	ldr	r2, [sp, #28]
 8009700:	1c5d      	adds	r5, r3, #1
 8009702:	2339      	movs	r3, #57	; 0x39
 8009704:	7013      	strb	r3, [r2, #0]
 8009706:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800970a:	1e6a      	subs	r2, r5, #1
 800970c:	2b39      	cmp	r3, #57	; 0x39
 800970e:	d04d      	beq.n	80097ac <_dtoa_r+0xaec>
 8009710:	3301      	adds	r3, #1
 8009712:	e052      	b.n	80097ba <_dtoa_r+0xafa>
 8009714:	9a07      	ldr	r2, [sp, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f102 0501 	add.w	r5, r2, #1
 800971c:	dd06      	ble.n	800972c <_dtoa_r+0xa6c>
 800971e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009722:	d0eb      	beq.n	80096fc <_dtoa_r+0xa3c>
 8009724:	f108 0801 	add.w	r8, r8, #1
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	e7c4      	b.n	80096b6 <_dtoa_r+0x9f6>
 800972c:	9b06      	ldr	r3, [sp, #24]
 800972e:	9a04      	ldr	r2, [sp, #16]
 8009730:	1aeb      	subs	r3, r5, r3
 8009732:	4293      	cmp	r3, r2
 8009734:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009738:	d021      	beq.n	800977e <_dtoa_r+0xabe>
 800973a:	4659      	mov	r1, fp
 800973c:	2300      	movs	r3, #0
 800973e:	220a      	movs	r2, #10
 8009740:	4620      	mov	r0, r4
 8009742:	f000 fc20 	bl	8009f86 <__multadd>
 8009746:	45b9      	cmp	r9, r7
 8009748:	4683      	mov	fp, r0
 800974a:	f04f 0300 	mov.w	r3, #0
 800974e:	f04f 020a 	mov.w	r2, #10
 8009752:	4649      	mov	r1, r9
 8009754:	4620      	mov	r0, r4
 8009756:	d105      	bne.n	8009764 <_dtoa_r+0xaa4>
 8009758:	f000 fc15 	bl	8009f86 <__multadd>
 800975c:	4681      	mov	r9, r0
 800975e:	4607      	mov	r7, r0
 8009760:	9507      	str	r5, [sp, #28]
 8009762:	e778      	b.n	8009656 <_dtoa_r+0x996>
 8009764:	f000 fc0f 	bl	8009f86 <__multadd>
 8009768:	4639      	mov	r1, r7
 800976a:	4681      	mov	r9, r0
 800976c:	2300      	movs	r3, #0
 800976e:	220a      	movs	r2, #10
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fc08 	bl	8009f86 <__multadd>
 8009776:	4607      	mov	r7, r0
 8009778:	e7f2      	b.n	8009760 <_dtoa_r+0xaa0>
 800977a:	f04f 0900 	mov.w	r9, #0
 800977e:	4659      	mov	r1, fp
 8009780:	2201      	movs	r2, #1
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fdb2 	bl	800a2ec <__lshift>
 8009788:	4631      	mov	r1, r6
 800978a:	4683      	mov	fp, r0
 800978c:	f000 fe02 	bl	800a394 <__mcmp>
 8009790:	2800      	cmp	r0, #0
 8009792:	dcb8      	bgt.n	8009706 <_dtoa_r+0xa46>
 8009794:	d102      	bne.n	800979c <_dtoa_r+0xadc>
 8009796:	f018 0f01 	tst.w	r8, #1
 800979a:	d1b4      	bne.n	8009706 <_dtoa_r+0xa46>
 800979c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097a0:	1e6a      	subs	r2, r5, #1
 80097a2:	2b30      	cmp	r3, #48	; 0x30
 80097a4:	f47f af0f 	bne.w	80095c6 <_dtoa_r+0x906>
 80097a8:	4615      	mov	r5, r2
 80097aa:	e7f7      	b.n	800979c <_dtoa_r+0xadc>
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d105      	bne.n	80097be <_dtoa_r+0xafe>
 80097b2:	2331      	movs	r3, #49	; 0x31
 80097b4:	9a06      	ldr	r2, [sp, #24]
 80097b6:	f10a 0a01 	add.w	sl, sl, #1
 80097ba:	7013      	strb	r3, [r2, #0]
 80097bc:	e703      	b.n	80095c6 <_dtoa_r+0x906>
 80097be:	4615      	mov	r5, r2
 80097c0:	e7a1      	b.n	8009706 <_dtoa_r+0xa46>
 80097c2:	4b17      	ldr	r3, [pc, #92]	; (8009820 <_dtoa_r+0xb60>)
 80097c4:	f7ff bae1 	b.w	8008d8a <_dtoa_r+0xca>
 80097c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f47f aabb 	bne.w	8008d46 <_dtoa_r+0x86>
 80097d0:	4b14      	ldr	r3, [pc, #80]	; (8009824 <_dtoa_r+0xb64>)
 80097d2:	f7ff bada 	b.w	8008d8a <_dtoa_r+0xca>
 80097d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80097d8:	2b01      	cmp	r3, #1
 80097da:	f77f ae3f 	ble.w	800945c <_dtoa_r+0x79c>
 80097de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097e0:	9308      	str	r3, [sp, #32]
 80097e2:	e653      	b.n	800948c <_dtoa_r+0x7cc>
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dc03      	bgt.n	80097f2 <_dtoa_r+0xb32>
 80097ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	f73f aed5 	bgt.w	800959c <_dtoa_r+0x8dc>
 80097f2:	9d06      	ldr	r5, [sp, #24]
 80097f4:	4631      	mov	r1, r6
 80097f6:	4658      	mov	r0, fp
 80097f8:	f7ff f9d4 	bl	8008ba4 <quorem>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009802:	f805 8b01 	strb.w	r8, [r5], #1
 8009806:	9a04      	ldr	r2, [sp, #16]
 8009808:	1aeb      	subs	r3, r5, r3
 800980a:	429a      	cmp	r2, r3
 800980c:	ddb5      	ble.n	800977a <_dtoa_r+0xaba>
 800980e:	4659      	mov	r1, fp
 8009810:	2300      	movs	r3, #0
 8009812:	220a      	movs	r2, #10
 8009814:	4620      	mov	r0, r4
 8009816:	f000 fbb6 	bl	8009f86 <__multadd>
 800981a:	4683      	mov	fp, r0
 800981c:	e7ea      	b.n	80097f4 <_dtoa_r+0xb34>
 800981e:	bf00      	nop
 8009820:	0800afa0 	.word	0x0800afa0
 8009824:	0800b020 	.word	0x0800b020

08009828 <rshift>:
 8009828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982a:	6906      	ldr	r6, [r0, #16]
 800982c:	114b      	asrs	r3, r1, #5
 800982e:	429e      	cmp	r6, r3
 8009830:	f100 0414 	add.w	r4, r0, #20
 8009834:	dd31      	ble.n	800989a <rshift+0x72>
 8009836:	f011 011f 	ands.w	r1, r1, #31
 800983a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800983e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009842:	d108      	bne.n	8009856 <rshift+0x2e>
 8009844:	4621      	mov	r1, r4
 8009846:	42b2      	cmp	r2, r6
 8009848:	460b      	mov	r3, r1
 800984a:	d211      	bcs.n	8009870 <rshift+0x48>
 800984c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009850:	f841 3b04 	str.w	r3, [r1], #4
 8009854:	e7f7      	b.n	8009846 <rshift+0x1e>
 8009856:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800985a:	4623      	mov	r3, r4
 800985c:	f1c1 0c20 	rsb	ip, r1, #32
 8009860:	40cd      	lsrs	r5, r1
 8009862:	3204      	adds	r2, #4
 8009864:	42b2      	cmp	r2, r6
 8009866:	4617      	mov	r7, r2
 8009868:	d30d      	bcc.n	8009886 <rshift+0x5e>
 800986a:	601d      	str	r5, [r3, #0]
 800986c:	b105      	cbz	r5, 8009870 <rshift+0x48>
 800986e:	3304      	adds	r3, #4
 8009870:	42a3      	cmp	r3, r4
 8009872:	eba3 0204 	sub.w	r2, r3, r4
 8009876:	bf08      	it	eq
 8009878:	2300      	moveq	r3, #0
 800987a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800987e:	6102      	str	r2, [r0, #16]
 8009880:	bf08      	it	eq
 8009882:	6143      	streq	r3, [r0, #20]
 8009884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009886:	683f      	ldr	r7, [r7, #0]
 8009888:	fa07 f70c 	lsl.w	r7, r7, ip
 800988c:	433d      	orrs	r5, r7
 800988e:	f843 5b04 	str.w	r5, [r3], #4
 8009892:	f852 5b04 	ldr.w	r5, [r2], #4
 8009896:	40cd      	lsrs	r5, r1
 8009898:	e7e4      	b.n	8009864 <rshift+0x3c>
 800989a:	4623      	mov	r3, r4
 800989c:	e7e8      	b.n	8009870 <rshift+0x48>

0800989e <__hexdig_fun>:
 800989e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098a2:	2b09      	cmp	r3, #9
 80098a4:	d802      	bhi.n	80098ac <__hexdig_fun+0xe>
 80098a6:	3820      	subs	r0, #32
 80098a8:	b2c0      	uxtb	r0, r0
 80098aa:	4770      	bx	lr
 80098ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098b0:	2b05      	cmp	r3, #5
 80098b2:	d801      	bhi.n	80098b8 <__hexdig_fun+0x1a>
 80098b4:	3847      	subs	r0, #71	; 0x47
 80098b6:	e7f7      	b.n	80098a8 <__hexdig_fun+0xa>
 80098b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098bc:	2b05      	cmp	r3, #5
 80098be:	d801      	bhi.n	80098c4 <__hexdig_fun+0x26>
 80098c0:	3827      	subs	r0, #39	; 0x27
 80098c2:	e7f1      	b.n	80098a8 <__hexdig_fun+0xa>
 80098c4:	2000      	movs	r0, #0
 80098c6:	4770      	bx	lr

080098c8 <__gethex>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	b08b      	sub	sp, #44	; 0x2c
 80098ce:	9002      	str	r0, [sp, #8]
 80098d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80098d2:	468a      	mov	sl, r1
 80098d4:	4690      	mov	r8, r2
 80098d6:	9306      	str	r3, [sp, #24]
 80098d8:	f000 fad1 	bl	8009e7e <__localeconv_l>
 80098dc:	6803      	ldr	r3, [r0, #0]
 80098de:	f04f 0b00 	mov.w	fp, #0
 80098e2:	4618      	mov	r0, r3
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	f7f6 fc33 	bl	8000150 <strlen>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	9001      	str	r0, [sp, #4]
 80098ee:	4403      	add	r3, r0
 80098f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80098f4:	9307      	str	r3, [sp, #28]
 80098f6:	f8da 3000 	ldr.w	r3, [sl]
 80098fa:	3302      	adds	r3, #2
 80098fc:	461f      	mov	r7, r3
 80098fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009902:	2830      	cmp	r0, #48	; 0x30
 8009904:	d06c      	beq.n	80099e0 <__gethex+0x118>
 8009906:	f7ff ffca 	bl	800989e <__hexdig_fun>
 800990a:	4604      	mov	r4, r0
 800990c:	2800      	cmp	r0, #0
 800990e:	d16a      	bne.n	80099e6 <__gethex+0x11e>
 8009910:	9a01      	ldr	r2, [sp, #4]
 8009912:	9903      	ldr	r1, [sp, #12]
 8009914:	4638      	mov	r0, r7
 8009916:	f001 f8f9 	bl	800ab0c <strncmp>
 800991a:	2800      	cmp	r0, #0
 800991c:	d166      	bne.n	80099ec <__gethex+0x124>
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	5cf8      	ldrb	r0, [r7, r3]
 8009922:	18fe      	adds	r6, r7, r3
 8009924:	f7ff ffbb 	bl	800989e <__hexdig_fun>
 8009928:	2800      	cmp	r0, #0
 800992a:	d062      	beq.n	80099f2 <__gethex+0x12a>
 800992c:	4633      	mov	r3, r6
 800992e:	7818      	ldrb	r0, [r3, #0]
 8009930:	461f      	mov	r7, r3
 8009932:	2830      	cmp	r0, #48	; 0x30
 8009934:	f103 0301 	add.w	r3, r3, #1
 8009938:	d0f9      	beq.n	800992e <__gethex+0x66>
 800993a:	f7ff ffb0 	bl	800989e <__hexdig_fun>
 800993e:	fab0 f580 	clz	r5, r0
 8009942:	4634      	mov	r4, r6
 8009944:	f04f 0b01 	mov.w	fp, #1
 8009948:	096d      	lsrs	r5, r5, #5
 800994a:	463a      	mov	r2, r7
 800994c:	4616      	mov	r6, r2
 800994e:	7830      	ldrb	r0, [r6, #0]
 8009950:	3201      	adds	r2, #1
 8009952:	f7ff ffa4 	bl	800989e <__hexdig_fun>
 8009956:	2800      	cmp	r0, #0
 8009958:	d1f8      	bne.n	800994c <__gethex+0x84>
 800995a:	9a01      	ldr	r2, [sp, #4]
 800995c:	9903      	ldr	r1, [sp, #12]
 800995e:	4630      	mov	r0, r6
 8009960:	f001 f8d4 	bl	800ab0c <strncmp>
 8009964:	b950      	cbnz	r0, 800997c <__gethex+0xb4>
 8009966:	b954      	cbnz	r4, 800997e <__gethex+0xb6>
 8009968:	9b01      	ldr	r3, [sp, #4]
 800996a:	18f4      	adds	r4, r6, r3
 800996c:	4622      	mov	r2, r4
 800996e:	4616      	mov	r6, r2
 8009970:	7830      	ldrb	r0, [r6, #0]
 8009972:	3201      	adds	r2, #1
 8009974:	f7ff ff93 	bl	800989e <__hexdig_fun>
 8009978:	2800      	cmp	r0, #0
 800997a:	d1f8      	bne.n	800996e <__gethex+0xa6>
 800997c:	b10c      	cbz	r4, 8009982 <__gethex+0xba>
 800997e:	1ba4      	subs	r4, r4, r6
 8009980:	00a4      	lsls	r4, r4, #2
 8009982:	7833      	ldrb	r3, [r6, #0]
 8009984:	2b50      	cmp	r3, #80	; 0x50
 8009986:	d001      	beq.n	800998c <__gethex+0xc4>
 8009988:	2b70      	cmp	r3, #112	; 0x70
 800998a:	d140      	bne.n	8009a0e <__gethex+0x146>
 800998c:	7873      	ldrb	r3, [r6, #1]
 800998e:	2b2b      	cmp	r3, #43	; 0x2b
 8009990:	d031      	beq.n	80099f6 <__gethex+0x12e>
 8009992:	2b2d      	cmp	r3, #45	; 0x2d
 8009994:	d033      	beq.n	80099fe <__gethex+0x136>
 8009996:	f04f 0900 	mov.w	r9, #0
 800999a:	1c71      	adds	r1, r6, #1
 800999c:	7808      	ldrb	r0, [r1, #0]
 800999e:	f7ff ff7e 	bl	800989e <__hexdig_fun>
 80099a2:	1e43      	subs	r3, r0, #1
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b18      	cmp	r3, #24
 80099a8:	d831      	bhi.n	8009a0e <__gethex+0x146>
 80099aa:	f1a0 0210 	sub.w	r2, r0, #16
 80099ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099b2:	f7ff ff74 	bl	800989e <__hexdig_fun>
 80099b6:	1e43      	subs	r3, r0, #1
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b18      	cmp	r3, #24
 80099bc:	d922      	bls.n	8009a04 <__gethex+0x13c>
 80099be:	f1b9 0f00 	cmp.w	r9, #0
 80099c2:	d000      	beq.n	80099c6 <__gethex+0xfe>
 80099c4:	4252      	negs	r2, r2
 80099c6:	4414      	add	r4, r2
 80099c8:	f8ca 1000 	str.w	r1, [sl]
 80099cc:	b30d      	cbz	r5, 8009a12 <__gethex+0x14a>
 80099ce:	f1bb 0f00 	cmp.w	fp, #0
 80099d2:	bf0c      	ite	eq
 80099d4:	2706      	moveq	r7, #6
 80099d6:	2700      	movne	r7, #0
 80099d8:	4638      	mov	r0, r7
 80099da:	b00b      	add	sp, #44	; 0x2c
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	f10b 0b01 	add.w	fp, fp, #1
 80099e4:	e78a      	b.n	80098fc <__gethex+0x34>
 80099e6:	2500      	movs	r5, #0
 80099e8:	462c      	mov	r4, r5
 80099ea:	e7ae      	b.n	800994a <__gethex+0x82>
 80099ec:	463e      	mov	r6, r7
 80099ee:	2501      	movs	r5, #1
 80099f0:	e7c7      	b.n	8009982 <__gethex+0xba>
 80099f2:	4604      	mov	r4, r0
 80099f4:	e7fb      	b.n	80099ee <__gethex+0x126>
 80099f6:	f04f 0900 	mov.w	r9, #0
 80099fa:	1cb1      	adds	r1, r6, #2
 80099fc:	e7ce      	b.n	800999c <__gethex+0xd4>
 80099fe:	f04f 0901 	mov.w	r9, #1
 8009a02:	e7fa      	b.n	80099fa <__gethex+0x132>
 8009a04:	230a      	movs	r3, #10
 8009a06:	fb03 0202 	mla	r2, r3, r2, r0
 8009a0a:	3a10      	subs	r2, #16
 8009a0c:	e7cf      	b.n	80099ae <__gethex+0xe6>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	e7da      	b.n	80099c8 <__gethex+0x100>
 8009a12:	4629      	mov	r1, r5
 8009a14:	1bf3      	subs	r3, r6, r7
 8009a16:	3b01      	subs	r3, #1
 8009a18:	2b07      	cmp	r3, #7
 8009a1a:	dc49      	bgt.n	8009ab0 <__gethex+0x1e8>
 8009a1c:	9802      	ldr	r0, [sp, #8]
 8009a1e:	f000 fa67 	bl	8009ef0 <_Balloc>
 8009a22:	f04f 0b00 	mov.w	fp, #0
 8009a26:	4605      	mov	r5, r0
 8009a28:	46da      	mov	sl, fp
 8009a2a:	9b01      	ldr	r3, [sp, #4]
 8009a2c:	f100 0914 	add.w	r9, r0, #20
 8009a30:	f1c3 0301 	rsb	r3, r3, #1
 8009a34:	f8cd 9010 	str.w	r9, [sp, #16]
 8009a38:	9308      	str	r3, [sp, #32]
 8009a3a:	42b7      	cmp	r7, r6
 8009a3c:	d33b      	bcc.n	8009ab6 <__gethex+0x1ee>
 8009a3e:	9804      	ldr	r0, [sp, #16]
 8009a40:	f840 ab04 	str.w	sl, [r0], #4
 8009a44:	eba0 0009 	sub.w	r0, r0, r9
 8009a48:	1080      	asrs	r0, r0, #2
 8009a4a:	6128      	str	r0, [r5, #16]
 8009a4c:	0147      	lsls	r7, r0, #5
 8009a4e:	4650      	mov	r0, sl
 8009a50:	f000 fb12 	bl	800a078 <__hi0bits>
 8009a54:	f8d8 6000 	ldr.w	r6, [r8]
 8009a58:	1a3f      	subs	r7, r7, r0
 8009a5a:	42b7      	cmp	r7, r6
 8009a5c:	dd64      	ble.n	8009b28 <__gethex+0x260>
 8009a5e:	1bbf      	subs	r7, r7, r6
 8009a60:	4639      	mov	r1, r7
 8009a62:	4628      	mov	r0, r5
 8009a64:	f000 fe1b 	bl	800a69e <__any_on>
 8009a68:	4682      	mov	sl, r0
 8009a6a:	b178      	cbz	r0, 8009a8c <__gethex+0x1c4>
 8009a6c:	f04f 0a01 	mov.w	sl, #1
 8009a70:	1e7b      	subs	r3, r7, #1
 8009a72:	1159      	asrs	r1, r3, #5
 8009a74:	f003 021f 	and.w	r2, r3, #31
 8009a78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a7c:	fa0a f202 	lsl.w	r2, sl, r2
 8009a80:	420a      	tst	r2, r1
 8009a82:	d003      	beq.n	8009a8c <__gethex+0x1c4>
 8009a84:	4553      	cmp	r3, sl
 8009a86:	dc46      	bgt.n	8009b16 <__gethex+0x24e>
 8009a88:	f04f 0a02 	mov.w	sl, #2
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f7ff feca 	bl	8009828 <rshift>
 8009a94:	443c      	add	r4, r7
 8009a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a9a:	42a3      	cmp	r3, r4
 8009a9c:	da52      	bge.n	8009b44 <__gethex+0x27c>
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	9802      	ldr	r0, [sp, #8]
 8009aa2:	f000 fa59 	bl	8009f58 <_Bfree>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009aaa:	27a3      	movs	r7, #163	; 0xa3
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	e793      	b.n	80099d8 <__gethex+0x110>
 8009ab0:	3101      	adds	r1, #1
 8009ab2:	105b      	asrs	r3, r3, #1
 8009ab4:	e7b0      	b.n	8009a18 <__gethex+0x150>
 8009ab6:	1e73      	subs	r3, r6, #1
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	9a07      	ldr	r2, [sp, #28]
 8009abc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d018      	beq.n	8009af6 <__gethex+0x22e>
 8009ac4:	f1bb 0f20 	cmp.w	fp, #32
 8009ac8:	d107      	bne.n	8009ada <__gethex+0x212>
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	f8c3 a000 	str.w	sl, [r3]
 8009ad0:	f04f 0a00 	mov.w	sl, #0
 8009ad4:	46d3      	mov	fp, sl
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ade:	f7ff fede 	bl	800989e <__hexdig_fun>
 8009ae2:	f000 000f 	and.w	r0, r0, #15
 8009ae6:	fa00 f00b 	lsl.w	r0, r0, fp
 8009aea:	ea4a 0a00 	orr.w	sl, sl, r0
 8009aee:	f10b 0b04 	add.w	fp, fp, #4
 8009af2:	9b05      	ldr	r3, [sp, #20]
 8009af4:	e00d      	b.n	8009b12 <__gethex+0x24a>
 8009af6:	9b05      	ldr	r3, [sp, #20]
 8009af8:	9a08      	ldr	r2, [sp, #32]
 8009afa:	4413      	add	r3, r2
 8009afc:	42bb      	cmp	r3, r7
 8009afe:	d3e1      	bcc.n	8009ac4 <__gethex+0x1fc>
 8009b00:	4618      	mov	r0, r3
 8009b02:	9a01      	ldr	r2, [sp, #4]
 8009b04:	9903      	ldr	r1, [sp, #12]
 8009b06:	9309      	str	r3, [sp, #36]	; 0x24
 8009b08:	f001 f800 	bl	800ab0c <strncmp>
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d1d8      	bne.n	8009ac4 <__gethex+0x1fc>
 8009b12:	461e      	mov	r6, r3
 8009b14:	e791      	b.n	8009a3a <__gethex+0x172>
 8009b16:	1eb9      	subs	r1, r7, #2
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f000 fdc0 	bl	800a69e <__any_on>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d0b2      	beq.n	8009a88 <__gethex+0x1c0>
 8009b22:	f04f 0a03 	mov.w	sl, #3
 8009b26:	e7b1      	b.n	8009a8c <__gethex+0x1c4>
 8009b28:	da09      	bge.n	8009b3e <__gethex+0x276>
 8009b2a:	1bf7      	subs	r7, r6, r7
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	463a      	mov	r2, r7
 8009b30:	9802      	ldr	r0, [sp, #8]
 8009b32:	f000 fbdb 	bl	800a2ec <__lshift>
 8009b36:	4605      	mov	r5, r0
 8009b38:	1be4      	subs	r4, r4, r7
 8009b3a:	f100 0914 	add.w	r9, r0, #20
 8009b3e:	f04f 0a00 	mov.w	sl, #0
 8009b42:	e7a8      	b.n	8009a96 <__gethex+0x1ce>
 8009b44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b48:	42a0      	cmp	r0, r4
 8009b4a:	dd6b      	ble.n	8009c24 <__gethex+0x35c>
 8009b4c:	1b04      	subs	r4, r0, r4
 8009b4e:	42a6      	cmp	r6, r4
 8009b50:	dc2e      	bgt.n	8009bb0 <__gethex+0x2e8>
 8009b52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d022      	beq.n	8009ba0 <__gethex+0x2d8>
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d024      	beq.n	8009ba8 <__gethex+0x2e0>
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d115      	bne.n	8009b8e <__gethex+0x2c6>
 8009b62:	42a6      	cmp	r6, r4
 8009b64:	d113      	bne.n	8009b8e <__gethex+0x2c6>
 8009b66:	2e01      	cmp	r6, #1
 8009b68:	dc0b      	bgt.n	8009b82 <__gethex+0x2ba>
 8009b6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b6e:	9a06      	ldr	r2, [sp, #24]
 8009b70:	2762      	movs	r7, #98	; 0x62
 8009b72:	6013      	str	r3, [r2, #0]
 8009b74:	2301      	movs	r3, #1
 8009b76:	612b      	str	r3, [r5, #16]
 8009b78:	f8c9 3000 	str.w	r3, [r9]
 8009b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b7e:	601d      	str	r5, [r3, #0]
 8009b80:	e72a      	b.n	80099d8 <__gethex+0x110>
 8009b82:	1e71      	subs	r1, r6, #1
 8009b84:	4628      	mov	r0, r5
 8009b86:	f000 fd8a 	bl	800a69e <__any_on>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d1ed      	bne.n	8009b6a <__gethex+0x2a2>
 8009b8e:	4629      	mov	r1, r5
 8009b90:	9802      	ldr	r0, [sp, #8]
 8009b92:	f000 f9e1 	bl	8009f58 <_Bfree>
 8009b96:	2300      	movs	r3, #0
 8009b98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b9a:	2750      	movs	r7, #80	; 0x50
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e71b      	b.n	80099d8 <__gethex+0x110>
 8009ba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0e1      	beq.n	8009b6a <__gethex+0x2a2>
 8009ba6:	e7f2      	b.n	8009b8e <__gethex+0x2c6>
 8009ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1dd      	bne.n	8009b6a <__gethex+0x2a2>
 8009bae:	e7ee      	b.n	8009b8e <__gethex+0x2c6>
 8009bb0:	1e67      	subs	r7, r4, #1
 8009bb2:	f1ba 0f00 	cmp.w	sl, #0
 8009bb6:	d132      	bne.n	8009c1e <__gethex+0x356>
 8009bb8:	b127      	cbz	r7, 8009bc4 <__gethex+0x2fc>
 8009bba:	4639      	mov	r1, r7
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f000 fd6e 	bl	800a69e <__any_on>
 8009bc2:	4682      	mov	sl, r0
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	117a      	asrs	r2, r7, #5
 8009bc8:	f007 071f 	and.w	r7, r7, #31
 8009bcc:	fa03 f707 	lsl.w	r7, r3, r7
 8009bd0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	421f      	tst	r7, r3
 8009bd8:	f04f 0702 	mov.w	r7, #2
 8009bdc:	4628      	mov	r0, r5
 8009bde:	bf18      	it	ne
 8009be0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009be4:	1b36      	subs	r6, r6, r4
 8009be6:	f7ff fe1f 	bl	8009828 <rshift>
 8009bea:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009bee:	f1ba 0f00 	cmp.w	sl, #0
 8009bf2:	d048      	beq.n	8009c86 <__gethex+0x3be>
 8009bf4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d015      	beq.n	8009c28 <__gethex+0x360>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d017      	beq.n	8009c30 <__gethex+0x368>
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d109      	bne.n	8009c18 <__gethex+0x350>
 8009c04:	f01a 0f02 	tst.w	sl, #2
 8009c08:	d006      	beq.n	8009c18 <__gethex+0x350>
 8009c0a:	f8d9 3000 	ldr.w	r3, [r9]
 8009c0e:	ea4a 0a03 	orr.w	sl, sl, r3
 8009c12:	f01a 0f01 	tst.w	sl, #1
 8009c16:	d10e      	bne.n	8009c36 <__gethex+0x36e>
 8009c18:	f047 0710 	orr.w	r7, r7, #16
 8009c1c:	e033      	b.n	8009c86 <__gethex+0x3be>
 8009c1e:	f04f 0a01 	mov.w	sl, #1
 8009c22:	e7cf      	b.n	8009bc4 <__gethex+0x2fc>
 8009c24:	2701      	movs	r7, #1
 8009c26:	e7e2      	b.n	8009bee <__gethex+0x326>
 8009c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2a:	f1c3 0301 	rsb	r3, r3, #1
 8009c2e:	9315      	str	r3, [sp, #84]	; 0x54
 8009c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0f0      	beq.n	8009c18 <__gethex+0x350>
 8009c36:	f04f 0c00 	mov.w	ip, #0
 8009c3a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009c3e:	f105 0314 	add.w	r3, r5, #20
 8009c42:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009c46:	eb03 010a 	add.w	r1, r3, sl
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c50:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c54:	d01c      	beq.n	8009c90 <__gethex+0x3c8>
 8009c56:	3201      	adds	r2, #1
 8009c58:	6002      	str	r2, [r0, #0]
 8009c5a:	2f02      	cmp	r7, #2
 8009c5c:	f105 0314 	add.w	r3, r5, #20
 8009c60:	d138      	bne.n	8009cd4 <__gethex+0x40c>
 8009c62:	f8d8 2000 	ldr.w	r2, [r8]
 8009c66:	3a01      	subs	r2, #1
 8009c68:	42b2      	cmp	r2, r6
 8009c6a:	d10a      	bne.n	8009c82 <__gethex+0x3ba>
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	1171      	asrs	r1, r6, #5
 8009c70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c74:	f006 061f 	and.w	r6, r6, #31
 8009c78:	fa02 f606 	lsl.w	r6, r2, r6
 8009c7c:	421e      	tst	r6, r3
 8009c7e:	bf18      	it	ne
 8009c80:	4617      	movne	r7, r2
 8009c82:	f047 0720 	orr.w	r7, r7, #32
 8009c86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c88:	601d      	str	r5, [r3, #0]
 8009c8a:	9b06      	ldr	r3, [sp, #24]
 8009c8c:	601c      	str	r4, [r3, #0]
 8009c8e:	e6a3      	b.n	80099d8 <__gethex+0x110>
 8009c90:	4299      	cmp	r1, r3
 8009c92:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c96:	d8d8      	bhi.n	8009c4a <__gethex+0x382>
 8009c98:	68ab      	ldr	r3, [r5, #8]
 8009c9a:	4599      	cmp	r9, r3
 8009c9c:	db12      	blt.n	8009cc4 <__gethex+0x3fc>
 8009c9e:	6869      	ldr	r1, [r5, #4]
 8009ca0:	9802      	ldr	r0, [sp, #8]
 8009ca2:	3101      	adds	r1, #1
 8009ca4:	f000 f924 	bl	8009ef0 <_Balloc>
 8009ca8:	4683      	mov	fp, r0
 8009caa:	692a      	ldr	r2, [r5, #16]
 8009cac:	f105 010c 	add.w	r1, r5, #12
 8009cb0:	3202      	adds	r2, #2
 8009cb2:	0092      	lsls	r2, r2, #2
 8009cb4:	300c      	adds	r0, #12
 8009cb6:	f7fd fa37 	bl	8007128 <memcpy>
 8009cba:	4629      	mov	r1, r5
 8009cbc:	9802      	ldr	r0, [sp, #8]
 8009cbe:	f000 f94b 	bl	8009f58 <_Bfree>
 8009cc2:	465d      	mov	r5, fp
 8009cc4:	692b      	ldr	r3, [r5, #16]
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	612a      	str	r2, [r5, #16]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009cd0:	615a      	str	r2, [r3, #20]
 8009cd2:	e7c2      	b.n	8009c5a <__gethex+0x392>
 8009cd4:	692a      	ldr	r2, [r5, #16]
 8009cd6:	454a      	cmp	r2, r9
 8009cd8:	dd0b      	ble.n	8009cf2 <__gethex+0x42a>
 8009cda:	2101      	movs	r1, #1
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f7ff fda3 	bl	8009828 <rshift>
 8009ce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ce6:	3401      	adds	r4, #1
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	f6ff aed8 	blt.w	8009a9e <__gethex+0x1d6>
 8009cee:	2701      	movs	r7, #1
 8009cf0:	e7c7      	b.n	8009c82 <__gethex+0x3ba>
 8009cf2:	f016 061f 	ands.w	r6, r6, #31
 8009cf6:	d0fa      	beq.n	8009cee <__gethex+0x426>
 8009cf8:	449a      	add	sl, r3
 8009cfa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009cfe:	f000 f9bb 	bl	800a078 <__hi0bits>
 8009d02:	f1c6 0620 	rsb	r6, r6, #32
 8009d06:	42b0      	cmp	r0, r6
 8009d08:	dbe7      	blt.n	8009cda <__gethex+0x412>
 8009d0a:	e7f0      	b.n	8009cee <__gethex+0x426>

08009d0c <L_shift>:
 8009d0c:	f1c2 0208 	rsb	r2, r2, #8
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	b570      	push	{r4, r5, r6, lr}
 8009d14:	f1c2 0620 	rsb	r6, r2, #32
 8009d18:	6843      	ldr	r3, [r0, #4]
 8009d1a:	6804      	ldr	r4, [r0, #0]
 8009d1c:	fa03 f506 	lsl.w	r5, r3, r6
 8009d20:	432c      	orrs	r4, r5
 8009d22:	40d3      	lsrs	r3, r2
 8009d24:	6004      	str	r4, [r0, #0]
 8009d26:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d2a:	4288      	cmp	r0, r1
 8009d2c:	d3f4      	bcc.n	8009d18 <L_shift+0xc>
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}

08009d30 <__match>:
 8009d30:	b530      	push	{r4, r5, lr}
 8009d32:	6803      	ldr	r3, [r0, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d3a:	b914      	cbnz	r4, 8009d42 <__match+0x12>
 8009d3c:	6003      	str	r3, [r0, #0]
 8009d3e:	2001      	movs	r0, #1
 8009d40:	bd30      	pop	{r4, r5, pc}
 8009d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d4a:	2d19      	cmp	r5, #25
 8009d4c:	bf98      	it	ls
 8009d4e:	3220      	addls	r2, #32
 8009d50:	42a2      	cmp	r2, r4
 8009d52:	d0f0      	beq.n	8009d36 <__match+0x6>
 8009d54:	2000      	movs	r0, #0
 8009d56:	e7f3      	b.n	8009d40 <__match+0x10>

08009d58 <__hexnan>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	680b      	ldr	r3, [r1, #0]
 8009d60:	4682      	mov	sl, r0
 8009d62:	115f      	asrs	r7, r3, #5
 8009d64:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009d68:	f013 031f 	ands.w	r3, r3, #31
 8009d6c:	bf18      	it	ne
 8009d6e:	3704      	addne	r7, #4
 8009d70:	1f3e      	subs	r6, r7, #4
 8009d72:	4690      	mov	r8, r2
 8009d74:	46b1      	mov	r9, r6
 8009d76:	4634      	mov	r4, r6
 8009d78:	46ab      	mov	fp, r5
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	6801      	ldr	r1, [r0, #0]
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	f847 5c04 	str.w	r5, [r7, #-4]
 8009d84:	9502      	str	r5, [sp, #8]
 8009d86:	784a      	ldrb	r2, [r1, #1]
 8009d88:	1c4b      	adds	r3, r1, #1
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	b342      	cbz	r2, 8009de0 <__hexnan+0x88>
 8009d8e:	4610      	mov	r0, r2
 8009d90:	9105      	str	r1, [sp, #20]
 8009d92:	9204      	str	r2, [sp, #16]
 8009d94:	f7ff fd83 	bl	800989e <__hexdig_fun>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d143      	bne.n	8009e24 <__hexnan+0xcc>
 8009d9c:	9a04      	ldr	r2, [sp, #16]
 8009d9e:	9905      	ldr	r1, [sp, #20]
 8009da0:	2a20      	cmp	r2, #32
 8009da2:	d818      	bhi.n	8009dd6 <__hexnan+0x7e>
 8009da4:	9b02      	ldr	r3, [sp, #8]
 8009da6:	459b      	cmp	fp, r3
 8009da8:	dd13      	ble.n	8009dd2 <__hexnan+0x7a>
 8009daa:	454c      	cmp	r4, r9
 8009dac:	d206      	bcs.n	8009dbc <__hexnan+0x64>
 8009dae:	2d07      	cmp	r5, #7
 8009db0:	dc04      	bgt.n	8009dbc <__hexnan+0x64>
 8009db2:	462a      	mov	r2, r5
 8009db4:	4649      	mov	r1, r9
 8009db6:	4620      	mov	r0, r4
 8009db8:	f7ff ffa8 	bl	8009d0c <L_shift>
 8009dbc:	4544      	cmp	r4, r8
 8009dbe:	d944      	bls.n	8009e4a <__hexnan+0xf2>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f1a4 0904 	sub.w	r9, r4, #4
 8009dc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dca:	461d      	mov	r5, r3
 8009dcc:	464c      	mov	r4, r9
 8009dce:	f8cd b008 	str.w	fp, [sp, #8]
 8009dd2:	9903      	ldr	r1, [sp, #12]
 8009dd4:	e7d7      	b.n	8009d86 <__hexnan+0x2e>
 8009dd6:	2a29      	cmp	r2, #41	; 0x29
 8009dd8:	d14a      	bne.n	8009e70 <__hexnan+0x118>
 8009dda:	3102      	adds	r1, #2
 8009ddc:	f8ca 1000 	str.w	r1, [sl]
 8009de0:	f1bb 0f00 	cmp.w	fp, #0
 8009de4:	d044      	beq.n	8009e70 <__hexnan+0x118>
 8009de6:	454c      	cmp	r4, r9
 8009de8:	d206      	bcs.n	8009df8 <__hexnan+0xa0>
 8009dea:	2d07      	cmp	r5, #7
 8009dec:	dc04      	bgt.n	8009df8 <__hexnan+0xa0>
 8009dee:	462a      	mov	r2, r5
 8009df0:	4649      	mov	r1, r9
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7ff ff8a 	bl	8009d0c <L_shift>
 8009df8:	4544      	cmp	r4, r8
 8009dfa:	d928      	bls.n	8009e4e <__hexnan+0xf6>
 8009dfc:	4643      	mov	r3, r8
 8009dfe:	f854 2b04 	ldr.w	r2, [r4], #4
 8009e02:	42a6      	cmp	r6, r4
 8009e04:	f843 2b04 	str.w	r2, [r3], #4
 8009e08:	d2f9      	bcs.n	8009dfe <__hexnan+0xa6>
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f843 2b04 	str.w	r2, [r3], #4
 8009e10:	429e      	cmp	r6, r3
 8009e12:	d2fb      	bcs.n	8009e0c <__hexnan+0xb4>
 8009e14:	6833      	ldr	r3, [r6, #0]
 8009e16:	b91b      	cbnz	r3, 8009e20 <__hexnan+0xc8>
 8009e18:	4546      	cmp	r6, r8
 8009e1a:	d127      	bne.n	8009e6c <__hexnan+0x114>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	6033      	str	r3, [r6, #0]
 8009e20:	2005      	movs	r0, #5
 8009e22:	e026      	b.n	8009e72 <__hexnan+0x11a>
 8009e24:	3501      	adds	r5, #1
 8009e26:	2d08      	cmp	r5, #8
 8009e28:	f10b 0b01 	add.w	fp, fp, #1
 8009e2c:	dd06      	ble.n	8009e3c <__hexnan+0xe4>
 8009e2e:	4544      	cmp	r4, r8
 8009e30:	d9cf      	bls.n	8009dd2 <__hexnan+0x7a>
 8009e32:	2300      	movs	r3, #0
 8009e34:	2501      	movs	r5, #1
 8009e36:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e3a:	3c04      	subs	r4, #4
 8009e3c:	6822      	ldr	r2, [r4, #0]
 8009e3e:	f000 000f 	and.w	r0, r0, #15
 8009e42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e46:	6020      	str	r0, [r4, #0]
 8009e48:	e7c3      	b.n	8009dd2 <__hexnan+0x7a>
 8009e4a:	2508      	movs	r5, #8
 8009e4c:	e7c1      	b.n	8009dd2 <__hexnan+0x7a>
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0df      	beq.n	8009e14 <__hexnan+0xbc>
 8009e54:	f04f 32ff 	mov.w	r2, #4294967295
 8009e58:	f1c3 0320 	rsb	r3, r3, #32
 8009e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e60:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009e64:	401a      	ands	r2, r3
 8009e66:	f847 2c04 	str.w	r2, [r7, #-4]
 8009e6a:	e7d3      	b.n	8009e14 <__hexnan+0xbc>
 8009e6c:	3e04      	subs	r6, #4
 8009e6e:	e7d1      	b.n	8009e14 <__hexnan+0xbc>
 8009e70:	2004      	movs	r0, #4
 8009e72:	b007      	add	sp, #28
 8009e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e78 <__locale_ctype_ptr_l>:
 8009e78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009e7c:	4770      	bx	lr

08009e7e <__localeconv_l>:
 8009e7e:	30f0      	adds	r0, #240	; 0xf0
 8009e80:	4770      	bx	lr
	...

08009e84 <_localeconv_r>:
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <_localeconv_r+0x14>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6a18      	ldr	r0, [r3, #32]
 8009e8a:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <_localeconv_r+0x18>)
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	bf08      	it	eq
 8009e90:	4618      	moveq	r0, r3
 8009e92:	30f0      	adds	r0, #240	; 0xf0
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	200000ac 	.word	0x200000ac
 8009e9c:	20000110 	.word	0x20000110

08009ea0 <malloc>:
 8009ea0:	4b02      	ldr	r3, [pc, #8]	; (8009eac <malloc+0xc>)
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	f000 bc75 	b.w	800a794 <_malloc_r>
 8009eaa:	bf00      	nop
 8009eac:	200000ac 	.word	0x200000ac

08009eb0 <__ascii_mbtowc>:
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	b901      	cbnz	r1, 8009eb6 <__ascii_mbtowc+0x6>
 8009eb4:	a901      	add	r1, sp, #4
 8009eb6:	b142      	cbz	r2, 8009eca <__ascii_mbtowc+0x1a>
 8009eb8:	b14b      	cbz	r3, 8009ece <__ascii_mbtowc+0x1e>
 8009eba:	7813      	ldrb	r3, [r2, #0]
 8009ebc:	600b      	str	r3, [r1, #0]
 8009ebe:	7812      	ldrb	r2, [r2, #0]
 8009ec0:	1c10      	adds	r0, r2, #0
 8009ec2:	bf18      	it	ne
 8009ec4:	2001      	movne	r0, #1
 8009ec6:	b002      	add	sp, #8
 8009ec8:	4770      	bx	lr
 8009eca:	4610      	mov	r0, r2
 8009ecc:	e7fb      	b.n	8009ec6 <__ascii_mbtowc+0x16>
 8009ece:	f06f 0001 	mvn.w	r0, #1
 8009ed2:	e7f8      	b.n	8009ec6 <__ascii_mbtowc+0x16>

08009ed4 <memchr>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	b2c9      	uxtb	r1, r1
 8009ed8:	4402      	add	r2, r0
 8009eda:	4290      	cmp	r0, r2
 8009edc:	4603      	mov	r3, r0
 8009ede:	d101      	bne.n	8009ee4 <memchr+0x10>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e003      	b.n	8009eec <memchr+0x18>
 8009ee4:	781c      	ldrb	r4, [r3, #0]
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	428c      	cmp	r4, r1
 8009eea:	d1f6      	bne.n	8009eda <memchr+0x6>
 8009eec:	4618      	mov	r0, r3
 8009eee:	bd10      	pop	{r4, pc}

08009ef0 <_Balloc>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460e      	mov	r6, r1
 8009ef8:	b93d      	cbnz	r5, 8009f0a <_Balloc+0x1a>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f7ff ffd0 	bl	8009ea0 <malloc>
 8009f00:	6260      	str	r0, [r4, #36]	; 0x24
 8009f02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f06:	6005      	str	r5, [r0, #0]
 8009f08:	60c5      	str	r5, [r0, #12]
 8009f0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f0c:	68eb      	ldr	r3, [r5, #12]
 8009f0e:	b183      	cbz	r3, 8009f32 <_Balloc+0x42>
 8009f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f18:	b9b8      	cbnz	r0, 8009f4a <_Balloc+0x5a>
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	fa01 f506 	lsl.w	r5, r1, r6
 8009f20:	1d6a      	adds	r2, r5, #5
 8009f22:	0092      	lsls	r2, r2, #2
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 fbdb 	bl	800a6e0 <_calloc_r>
 8009f2a:	b160      	cbz	r0, 8009f46 <_Balloc+0x56>
 8009f2c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009f30:	e00e      	b.n	8009f50 <_Balloc+0x60>
 8009f32:	2221      	movs	r2, #33	; 0x21
 8009f34:	2104      	movs	r1, #4
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 fbd2 	bl	800a6e0 <_calloc_r>
 8009f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3e:	60e8      	str	r0, [r5, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e4      	bne.n	8009f10 <_Balloc+0x20>
 8009f46:	2000      	movs	r0, #0
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
 8009f4a:	6802      	ldr	r2, [r0, #0]
 8009f4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009f50:	2300      	movs	r3, #0
 8009f52:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f56:	e7f7      	b.n	8009f48 <_Balloc+0x58>

08009f58 <_Bfree>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460d      	mov	r5, r1
 8009f60:	b93c      	cbnz	r4, 8009f72 <_Bfree+0x1a>
 8009f62:	2010      	movs	r0, #16
 8009f64:	f7ff ff9c 	bl	8009ea0 <malloc>
 8009f68:	6270      	str	r0, [r6, #36]	; 0x24
 8009f6a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f6e:	6004      	str	r4, [r0, #0]
 8009f70:	60c4      	str	r4, [r0, #12]
 8009f72:	b13d      	cbz	r5, 8009f84 <_Bfree+0x2c>
 8009f74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f76:	686a      	ldr	r2, [r5, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f7e:	6029      	str	r1, [r5, #0]
 8009f80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009f84:	bd70      	pop	{r4, r5, r6, pc}

08009f86 <__multadd>:
 8009f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	2300      	movs	r3, #0
 8009f92:	690d      	ldr	r5, [r1, #16]
 8009f94:	f101 0c14 	add.w	ip, r1, #20
 8009f98:	f8dc 0000 	ldr.w	r0, [ip]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	b281      	uxth	r1, r0
 8009fa0:	fb02 7101 	mla	r1, r2, r1, r7
 8009fa4:	0c00      	lsrs	r0, r0, #16
 8009fa6:	0c0f      	lsrs	r7, r1, #16
 8009fa8:	fb02 7000 	mla	r0, r2, r0, r7
 8009fac:	b289      	uxth	r1, r1
 8009fae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009fb8:	f84c 1b04 	str.w	r1, [ip], #4
 8009fbc:	dcec      	bgt.n	8009f98 <__multadd+0x12>
 8009fbe:	b1d7      	cbz	r7, 8009ff6 <__multadd+0x70>
 8009fc0:	68a3      	ldr	r3, [r4, #8]
 8009fc2:	42ab      	cmp	r3, r5
 8009fc4:	dc12      	bgt.n	8009fec <__multadd+0x66>
 8009fc6:	6861      	ldr	r1, [r4, #4]
 8009fc8:	4630      	mov	r0, r6
 8009fca:	3101      	adds	r1, #1
 8009fcc:	f7ff ff90 	bl	8009ef0 <_Balloc>
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	6922      	ldr	r2, [r4, #16]
 8009fd4:	f104 010c 	add.w	r1, r4, #12
 8009fd8:	3202      	adds	r2, #2
 8009fda:	0092      	lsls	r2, r2, #2
 8009fdc:	300c      	adds	r0, #12
 8009fde:	f7fd f8a3 	bl	8007128 <memcpy>
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7ff ffb7 	bl	8009f58 <_Bfree>
 8009fea:	4644      	mov	r4, r8
 8009fec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ff0:	3501      	adds	r5, #1
 8009ff2:	615f      	str	r7, [r3, #20]
 8009ff4:	6125      	str	r5, [r4, #16]
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ffc <__s2b>:
 8009ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a000:	4615      	mov	r5, r2
 800a002:	2209      	movs	r2, #9
 800a004:	461f      	mov	r7, r3
 800a006:	3308      	adds	r3, #8
 800a008:	460c      	mov	r4, r1
 800a00a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a00e:	4606      	mov	r6, r0
 800a010:	2201      	movs	r2, #1
 800a012:	2100      	movs	r1, #0
 800a014:	429a      	cmp	r2, r3
 800a016:	db20      	blt.n	800a05a <__s2b+0x5e>
 800a018:	4630      	mov	r0, r6
 800a01a:	f7ff ff69 	bl	8009ef0 <_Balloc>
 800a01e:	9b08      	ldr	r3, [sp, #32]
 800a020:	2d09      	cmp	r5, #9
 800a022:	6143      	str	r3, [r0, #20]
 800a024:	f04f 0301 	mov.w	r3, #1
 800a028:	6103      	str	r3, [r0, #16]
 800a02a:	dd19      	ble.n	800a060 <__s2b+0x64>
 800a02c:	f104 0809 	add.w	r8, r4, #9
 800a030:	46c1      	mov	r9, r8
 800a032:	442c      	add	r4, r5
 800a034:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a038:	4601      	mov	r1, r0
 800a03a:	3b30      	subs	r3, #48	; 0x30
 800a03c:	220a      	movs	r2, #10
 800a03e:	4630      	mov	r0, r6
 800a040:	f7ff ffa1 	bl	8009f86 <__multadd>
 800a044:	45a1      	cmp	r9, r4
 800a046:	d1f5      	bne.n	800a034 <__s2b+0x38>
 800a048:	eb08 0405 	add.w	r4, r8, r5
 800a04c:	3c08      	subs	r4, #8
 800a04e:	1b2d      	subs	r5, r5, r4
 800a050:	1963      	adds	r3, r4, r5
 800a052:	42bb      	cmp	r3, r7
 800a054:	db07      	blt.n	800a066 <__s2b+0x6a>
 800a056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05a:	0052      	lsls	r2, r2, #1
 800a05c:	3101      	adds	r1, #1
 800a05e:	e7d9      	b.n	800a014 <__s2b+0x18>
 800a060:	340a      	adds	r4, #10
 800a062:	2509      	movs	r5, #9
 800a064:	e7f3      	b.n	800a04e <__s2b+0x52>
 800a066:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a06a:	4601      	mov	r1, r0
 800a06c:	3b30      	subs	r3, #48	; 0x30
 800a06e:	220a      	movs	r2, #10
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff ff88 	bl	8009f86 <__multadd>
 800a076:	e7eb      	b.n	800a050 <__s2b+0x54>

0800a078 <__hi0bits>:
 800a078:	0c02      	lsrs	r2, r0, #16
 800a07a:	0412      	lsls	r2, r2, #16
 800a07c:	4603      	mov	r3, r0
 800a07e:	b9b2      	cbnz	r2, 800a0ae <__hi0bits+0x36>
 800a080:	0403      	lsls	r3, r0, #16
 800a082:	2010      	movs	r0, #16
 800a084:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a088:	bf04      	itt	eq
 800a08a:	021b      	lsleq	r3, r3, #8
 800a08c:	3008      	addeq	r0, #8
 800a08e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a092:	bf04      	itt	eq
 800a094:	011b      	lsleq	r3, r3, #4
 800a096:	3004      	addeq	r0, #4
 800a098:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a09c:	bf04      	itt	eq
 800a09e:	009b      	lsleq	r3, r3, #2
 800a0a0:	3002      	addeq	r0, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	db06      	blt.n	800a0b4 <__hi0bits+0x3c>
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	d503      	bpl.n	800a0b2 <__hi0bits+0x3a>
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	4770      	bx	lr
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	e7e8      	b.n	800a084 <__hi0bits+0xc>
 800a0b2:	2020      	movs	r0, #32
 800a0b4:	4770      	bx	lr

0800a0b6 <__lo0bits>:
 800a0b6:	6803      	ldr	r3, [r0, #0]
 800a0b8:	4601      	mov	r1, r0
 800a0ba:	f013 0207 	ands.w	r2, r3, #7
 800a0be:	d00b      	beq.n	800a0d8 <__lo0bits+0x22>
 800a0c0:	07da      	lsls	r2, r3, #31
 800a0c2:	d423      	bmi.n	800a10c <__lo0bits+0x56>
 800a0c4:	0798      	lsls	r0, r3, #30
 800a0c6:	bf49      	itett	mi
 800a0c8:	085b      	lsrmi	r3, r3, #1
 800a0ca:	089b      	lsrpl	r3, r3, #2
 800a0cc:	2001      	movmi	r0, #1
 800a0ce:	600b      	strmi	r3, [r1, #0]
 800a0d0:	bf5c      	itt	pl
 800a0d2:	600b      	strpl	r3, [r1, #0]
 800a0d4:	2002      	movpl	r0, #2
 800a0d6:	4770      	bx	lr
 800a0d8:	b298      	uxth	r0, r3
 800a0da:	b9a8      	cbnz	r0, 800a108 <__lo0bits+0x52>
 800a0dc:	2010      	movs	r0, #16
 800a0de:	0c1b      	lsrs	r3, r3, #16
 800a0e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a0e4:	bf04      	itt	eq
 800a0e6:	0a1b      	lsreq	r3, r3, #8
 800a0e8:	3008      	addeq	r0, #8
 800a0ea:	071a      	lsls	r2, r3, #28
 800a0ec:	bf04      	itt	eq
 800a0ee:	091b      	lsreq	r3, r3, #4
 800a0f0:	3004      	addeq	r0, #4
 800a0f2:	079a      	lsls	r2, r3, #30
 800a0f4:	bf04      	itt	eq
 800a0f6:	089b      	lsreq	r3, r3, #2
 800a0f8:	3002      	addeq	r0, #2
 800a0fa:	07da      	lsls	r2, r3, #31
 800a0fc:	d402      	bmi.n	800a104 <__lo0bits+0x4e>
 800a0fe:	085b      	lsrs	r3, r3, #1
 800a100:	d006      	beq.n	800a110 <__lo0bits+0x5a>
 800a102:	3001      	adds	r0, #1
 800a104:	600b      	str	r3, [r1, #0]
 800a106:	4770      	bx	lr
 800a108:	4610      	mov	r0, r2
 800a10a:	e7e9      	b.n	800a0e0 <__lo0bits+0x2a>
 800a10c:	2000      	movs	r0, #0
 800a10e:	4770      	bx	lr
 800a110:	2020      	movs	r0, #32
 800a112:	4770      	bx	lr

0800a114 <__i2b>:
 800a114:	b510      	push	{r4, lr}
 800a116:	460c      	mov	r4, r1
 800a118:	2101      	movs	r1, #1
 800a11a:	f7ff fee9 	bl	8009ef0 <_Balloc>
 800a11e:	2201      	movs	r2, #1
 800a120:	6144      	str	r4, [r0, #20]
 800a122:	6102      	str	r2, [r0, #16]
 800a124:	bd10      	pop	{r4, pc}

0800a126 <__multiply>:
 800a126:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12a:	4614      	mov	r4, r2
 800a12c:	690a      	ldr	r2, [r1, #16]
 800a12e:	6923      	ldr	r3, [r4, #16]
 800a130:	4688      	mov	r8, r1
 800a132:	429a      	cmp	r2, r3
 800a134:	bfbe      	ittt	lt
 800a136:	460b      	movlt	r3, r1
 800a138:	46a0      	movlt	r8, r4
 800a13a:	461c      	movlt	r4, r3
 800a13c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a140:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a144:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a148:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a14c:	eb07 0609 	add.w	r6, r7, r9
 800a150:	42b3      	cmp	r3, r6
 800a152:	bfb8      	it	lt
 800a154:	3101      	addlt	r1, #1
 800a156:	f7ff fecb 	bl	8009ef0 <_Balloc>
 800a15a:	f100 0514 	add.w	r5, r0, #20
 800a15e:	462b      	mov	r3, r5
 800a160:	2200      	movs	r2, #0
 800a162:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a166:	4573      	cmp	r3, lr
 800a168:	d316      	bcc.n	800a198 <__multiply+0x72>
 800a16a:	f104 0214 	add.w	r2, r4, #20
 800a16e:	f108 0114 	add.w	r1, r8, #20
 800a172:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a176:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	9b00      	ldr	r3, [sp, #0]
 800a17e:	9201      	str	r2, [sp, #4]
 800a180:	4293      	cmp	r3, r2
 800a182:	d80c      	bhi.n	800a19e <__multiply+0x78>
 800a184:	2e00      	cmp	r6, #0
 800a186:	dd03      	ble.n	800a190 <__multiply+0x6a>
 800a188:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d05d      	beq.n	800a24c <__multiply+0x126>
 800a190:	6106      	str	r6, [r0, #16]
 800a192:	b003      	add	sp, #12
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	f843 2b04 	str.w	r2, [r3], #4
 800a19c:	e7e3      	b.n	800a166 <__multiply+0x40>
 800a19e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a1a2:	f1bb 0f00 	cmp.w	fp, #0
 800a1a6:	d023      	beq.n	800a1f0 <__multiply+0xca>
 800a1a8:	4689      	mov	r9, r1
 800a1aa:	46ac      	mov	ip, r5
 800a1ac:	f04f 0800 	mov.w	r8, #0
 800a1b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a1b4:	f8dc a000 	ldr.w	sl, [ip]
 800a1b8:	b2a3      	uxth	r3, r4
 800a1ba:	fa1f fa8a 	uxth.w	sl, sl
 800a1be:	fb0b a303 	mla	r3, fp, r3, sl
 800a1c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a1c6:	f8dc 4000 	ldr.w	r4, [ip]
 800a1ca:	4443      	add	r3, r8
 800a1cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a1d0:	fb0b 840a 	mla	r4, fp, sl, r8
 800a1d4:	46e2      	mov	sl, ip
 800a1d6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a1e0:	454f      	cmp	r7, r9
 800a1e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a1e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a1ea:	d82b      	bhi.n	800a244 <__multiply+0x11e>
 800a1ec:	f8cc 8004 	str.w	r8, [ip, #4]
 800a1f0:	9b01      	ldr	r3, [sp, #4]
 800a1f2:	3204      	adds	r2, #4
 800a1f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a1f8:	f1ba 0f00 	cmp.w	sl, #0
 800a1fc:	d020      	beq.n	800a240 <__multiply+0x11a>
 800a1fe:	4689      	mov	r9, r1
 800a200:	46a8      	mov	r8, r5
 800a202:	f04f 0b00 	mov.w	fp, #0
 800a206:	682b      	ldr	r3, [r5, #0]
 800a208:	f8b9 c000 	ldrh.w	ip, [r9]
 800a20c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a210:	b29b      	uxth	r3, r3
 800a212:	fb0a 440c 	mla	r4, sl, ip, r4
 800a216:	46c4      	mov	ip, r8
 800a218:	445c      	add	r4, fp
 800a21a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a21e:	f84c 3b04 	str.w	r3, [ip], #4
 800a222:	f859 3b04 	ldr.w	r3, [r9], #4
 800a226:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a22a:	0c1b      	lsrs	r3, r3, #16
 800a22c:	fb0a b303 	mla	r3, sl, r3, fp
 800a230:	454f      	cmp	r7, r9
 800a232:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a236:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a23a:	d805      	bhi.n	800a248 <__multiply+0x122>
 800a23c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a240:	3504      	adds	r5, #4
 800a242:	e79b      	b.n	800a17c <__multiply+0x56>
 800a244:	46d4      	mov	ip, sl
 800a246:	e7b3      	b.n	800a1b0 <__multiply+0x8a>
 800a248:	46e0      	mov	r8, ip
 800a24a:	e7dd      	b.n	800a208 <__multiply+0xe2>
 800a24c:	3e01      	subs	r6, #1
 800a24e:	e799      	b.n	800a184 <__multiply+0x5e>

0800a250 <__pow5mult>:
 800a250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a254:	4615      	mov	r5, r2
 800a256:	f012 0203 	ands.w	r2, r2, #3
 800a25a:	4606      	mov	r6, r0
 800a25c:	460f      	mov	r7, r1
 800a25e:	d007      	beq.n	800a270 <__pow5mult+0x20>
 800a260:	4c21      	ldr	r4, [pc, #132]	; (800a2e8 <__pow5mult+0x98>)
 800a262:	3a01      	subs	r2, #1
 800a264:	2300      	movs	r3, #0
 800a266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a26a:	f7ff fe8c 	bl	8009f86 <__multadd>
 800a26e:	4607      	mov	r7, r0
 800a270:	10ad      	asrs	r5, r5, #2
 800a272:	d035      	beq.n	800a2e0 <__pow5mult+0x90>
 800a274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a276:	b93c      	cbnz	r4, 800a288 <__pow5mult+0x38>
 800a278:	2010      	movs	r0, #16
 800a27a:	f7ff fe11 	bl	8009ea0 <malloc>
 800a27e:	6270      	str	r0, [r6, #36]	; 0x24
 800a280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a284:	6004      	str	r4, [r0, #0]
 800a286:	60c4      	str	r4, [r0, #12]
 800a288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a290:	b94c      	cbnz	r4, 800a2a6 <__pow5mult+0x56>
 800a292:	f240 2171 	movw	r1, #625	; 0x271
 800a296:	4630      	mov	r0, r6
 800a298:	f7ff ff3c 	bl	800a114 <__i2b>
 800a29c:	2300      	movs	r3, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2a4:	6003      	str	r3, [r0, #0]
 800a2a6:	f04f 0800 	mov.w	r8, #0
 800a2aa:	07eb      	lsls	r3, r5, #31
 800a2ac:	d50a      	bpl.n	800a2c4 <__pow5mult+0x74>
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7ff ff37 	bl	800a126 <__multiply>
 800a2b8:	4681      	mov	r9, r0
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff fe4b 	bl	8009f58 <_Bfree>
 800a2c2:	464f      	mov	r7, r9
 800a2c4:	106d      	asrs	r5, r5, #1
 800a2c6:	d00b      	beq.n	800a2e0 <__pow5mult+0x90>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	b938      	cbnz	r0, 800a2dc <__pow5mult+0x8c>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7ff ff28 	bl	800a126 <__multiply>
 800a2d6:	6020      	str	r0, [r4, #0]
 800a2d8:	f8c0 8000 	str.w	r8, [r0]
 800a2dc:	4604      	mov	r4, r0
 800a2de:	e7e4      	b.n	800a2aa <__pow5mult+0x5a>
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0800b128 	.word	0x0800b128

0800a2ec <__lshift>:
 800a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	4616      	mov	r6, r2
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2fc:	eb0a 0903 	add.w	r9, sl, r3
 800a300:	6849      	ldr	r1, [r1, #4]
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	f109 0501 	add.w	r5, r9, #1
 800a308:	42ab      	cmp	r3, r5
 800a30a:	db32      	blt.n	800a372 <__lshift+0x86>
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7ff fdef 	bl	8009ef0 <_Balloc>
 800a312:	2300      	movs	r3, #0
 800a314:	4680      	mov	r8, r0
 800a316:	461a      	mov	r2, r3
 800a318:	f100 0114 	add.w	r1, r0, #20
 800a31c:	4553      	cmp	r3, sl
 800a31e:	db2b      	blt.n	800a378 <__lshift+0x8c>
 800a320:	6920      	ldr	r0, [r4, #16]
 800a322:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a326:	f104 0314 	add.w	r3, r4, #20
 800a32a:	f016 021f 	ands.w	r2, r6, #31
 800a32e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a332:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a336:	d025      	beq.n	800a384 <__lshift+0x98>
 800a338:	2000      	movs	r0, #0
 800a33a:	f1c2 0e20 	rsb	lr, r2, #32
 800a33e:	468a      	mov	sl, r1
 800a340:	681e      	ldr	r6, [r3, #0]
 800a342:	4096      	lsls	r6, r2
 800a344:	4330      	orrs	r0, r6
 800a346:	f84a 0b04 	str.w	r0, [sl], #4
 800a34a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a34e:	459c      	cmp	ip, r3
 800a350:	fa20 f00e 	lsr.w	r0, r0, lr
 800a354:	d814      	bhi.n	800a380 <__lshift+0x94>
 800a356:	6048      	str	r0, [r1, #4]
 800a358:	b108      	cbz	r0, 800a35e <__lshift+0x72>
 800a35a:	f109 0502 	add.w	r5, r9, #2
 800a35e:	3d01      	subs	r5, #1
 800a360:	4638      	mov	r0, r7
 800a362:	f8c8 5010 	str.w	r5, [r8, #16]
 800a366:	4621      	mov	r1, r4
 800a368:	f7ff fdf6 	bl	8009f58 <_Bfree>
 800a36c:	4640      	mov	r0, r8
 800a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a372:	3101      	adds	r1, #1
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	e7c7      	b.n	800a308 <__lshift+0x1c>
 800a378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a37c:	3301      	adds	r3, #1
 800a37e:	e7cd      	b.n	800a31c <__lshift+0x30>
 800a380:	4651      	mov	r1, sl
 800a382:	e7dc      	b.n	800a33e <__lshift+0x52>
 800a384:	3904      	subs	r1, #4
 800a386:	f853 2b04 	ldr.w	r2, [r3], #4
 800a38a:	459c      	cmp	ip, r3
 800a38c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a390:	d8f9      	bhi.n	800a386 <__lshift+0x9a>
 800a392:	e7e4      	b.n	800a35e <__lshift+0x72>

0800a394 <__mcmp>:
 800a394:	6903      	ldr	r3, [r0, #16]
 800a396:	690a      	ldr	r2, [r1, #16]
 800a398:	b530      	push	{r4, r5, lr}
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	d10c      	bne.n	800a3b8 <__mcmp+0x24>
 800a39e:	0092      	lsls	r2, r2, #2
 800a3a0:	3014      	adds	r0, #20
 800a3a2:	3114      	adds	r1, #20
 800a3a4:	1884      	adds	r4, r0, r2
 800a3a6:	4411      	add	r1, r2
 800a3a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3b0:	4295      	cmp	r5, r2
 800a3b2:	d003      	beq.n	800a3bc <__mcmp+0x28>
 800a3b4:	d305      	bcc.n	800a3c2 <__mcmp+0x2e>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	bd30      	pop	{r4, r5, pc}
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d3f3      	bcc.n	800a3a8 <__mcmp+0x14>
 800a3c0:	e7fa      	b.n	800a3b8 <__mcmp+0x24>
 800a3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c6:	e7f7      	b.n	800a3b8 <__mcmp+0x24>

0800a3c8 <__mdiff>:
 800a3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	f7ff ffdd 	bl	800a394 <__mcmp>
 800a3da:	1e06      	subs	r6, r0, #0
 800a3dc:	d108      	bne.n	800a3f0 <__mdiff+0x28>
 800a3de:	4631      	mov	r1, r6
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	f7ff fd85 	bl	8009ef0 <_Balloc>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	bfa4      	itt	ge
 800a3f2:	4623      	movge	r3, r4
 800a3f4:	462c      	movge	r4, r5
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	6861      	ldr	r1, [r4, #4]
 800a3fa:	bfa6      	itte	ge
 800a3fc:	461d      	movge	r5, r3
 800a3fe:	2600      	movge	r6, #0
 800a400:	2601      	movlt	r6, #1
 800a402:	f7ff fd75 	bl	8009ef0 <_Balloc>
 800a406:	f04f 0e00 	mov.w	lr, #0
 800a40a:	60c6      	str	r6, [r0, #12]
 800a40c:	692b      	ldr	r3, [r5, #16]
 800a40e:	6926      	ldr	r6, [r4, #16]
 800a410:	f104 0214 	add.w	r2, r4, #20
 800a414:	f105 0914 	add.w	r9, r5, #20
 800a418:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a41c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a420:	f100 0114 	add.w	r1, r0, #20
 800a424:	f852 ab04 	ldr.w	sl, [r2], #4
 800a428:	f859 5b04 	ldr.w	r5, [r9], #4
 800a42c:	fa1f f38a 	uxth.w	r3, sl
 800a430:	4473      	add	r3, lr
 800a432:	b2ac      	uxth	r4, r5
 800a434:	1b1b      	subs	r3, r3, r4
 800a436:	0c2c      	lsrs	r4, r5, #16
 800a438:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a43c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a440:	b29b      	uxth	r3, r3
 800a442:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a446:	45c8      	cmp	r8, r9
 800a448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a44c:	4694      	mov	ip, r2
 800a44e:	f841 4b04 	str.w	r4, [r1], #4
 800a452:	d8e7      	bhi.n	800a424 <__mdiff+0x5c>
 800a454:	45bc      	cmp	ip, r7
 800a456:	d304      	bcc.n	800a462 <__mdiff+0x9a>
 800a458:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a45c:	b183      	cbz	r3, 800a480 <__mdiff+0xb8>
 800a45e:	6106      	str	r6, [r0, #16]
 800a460:	e7c4      	b.n	800a3ec <__mdiff+0x24>
 800a462:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a466:	b2a2      	uxth	r2, r4
 800a468:	4472      	add	r2, lr
 800a46a:	1413      	asrs	r3, r2, #16
 800a46c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a470:	b292      	uxth	r2, r2
 800a472:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a476:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a47a:	f841 2b04 	str.w	r2, [r1], #4
 800a47e:	e7e9      	b.n	800a454 <__mdiff+0x8c>
 800a480:	3e01      	subs	r6, #1
 800a482:	e7e9      	b.n	800a458 <__mdiff+0x90>

0800a484 <__ulp>:
 800a484:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <__ulp+0x44>)
 800a486:	400b      	ands	r3, r1
 800a488:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd02      	ble.n	800a496 <__ulp+0x12>
 800a490:	2000      	movs	r0, #0
 800a492:	4619      	mov	r1, r3
 800a494:	4770      	bx	lr
 800a496:	425b      	negs	r3, r3
 800a498:	151b      	asrs	r3, r3, #20
 800a49a:	2b13      	cmp	r3, #19
 800a49c:	f04f 0000 	mov.w	r0, #0
 800a4a0:	f04f 0100 	mov.w	r1, #0
 800a4a4:	dc04      	bgt.n	800a4b0 <__ulp+0x2c>
 800a4a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a4aa:	fa42 f103 	asr.w	r1, r2, r3
 800a4ae:	4770      	bx	lr
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	3b14      	subs	r3, #20
 800a4b4:	2b1e      	cmp	r3, #30
 800a4b6:	bfce      	itee	gt
 800a4b8:	4613      	movgt	r3, r2
 800a4ba:	f1c3 031f 	rsble	r3, r3, #31
 800a4be:	fa02 f303 	lslle.w	r3, r2, r3
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	7ff00000 	.word	0x7ff00000

0800a4cc <__b2d>:
 800a4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d0:	6907      	ldr	r7, [r0, #16]
 800a4d2:	f100 0914 	add.w	r9, r0, #20
 800a4d6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a4da:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a4de:	f1a7 0804 	sub.w	r8, r7, #4
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff fdc8 	bl	800a078 <__hi0bits>
 800a4e8:	f1c0 0320 	rsb	r3, r0, #32
 800a4ec:	280a      	cmp	r0, #10
 800a4ee:	600b      	str	r3, [r1, #0]
 800a4f0:	491e      	ldr	r1, [pc, #120]	; (800a56c <__b2d+0xa0>)
 800a4f2:	dc17      	bgt.n	800a524 <__b2d+0x58>
 800a4f4:	45c1      	cmp	r9, r8
 800a4f6:	bf28      	it	cs
 800a4f8:	2200      	movcs	r2, #0
 800a4fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800a4fe:	fa26 f30c 	lsr.w	r3, r6, ip
 800a502:	bf38      	it	cc
 800a504:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a508:	ea43 0501 	orr.w	r5, r3, r1
 800a50c:	f100 0315 	add.w	r3, r0, #21
 800a510:	fa06 f303 	lsl.w	r3, r6, r3
 800a514:	fa22 f20c 	lsr.w	r2, r2, ip
 800a518:	ea43 0402 	orr.w	r4, r3, r2
 800a51c:	4620      	mov	r0, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a524:	45c1      	cmp	r9, r8
 800a526:	bf3a      	itte	cc
 800a528:	f1a7 0808 	subcc.w	r8, r7, #8
 800a52c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a530:	2200      	movcs	r2, #0
 800a532:	f1b0 030b 	subs.w	r3, r0, #11
 800a536:	d015      	beq.n	800a564 <__b2d+0x98>
 800a538:	409e      	lsls	r6, r3
 800a53a:	f1c3 0720 	rsb	r7, r3, #32
 800a53e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800a542:	fa22 f107 	lsr.w	r1, r2, r7
 800a546:	45c8      	cmp	r8, r9
 800a548:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800a54c:	ea46 0501 	orr.w	r5, r6, r1
 800a550:	bf94      	ite	ls
 800a552:	2100      	movls	r1, #0
 800a554:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a558:	fa02 f003 	lsl.w	r0, r2, r3
 800a55c:	40f9      	lsrs	r1, r7
 800a55e:	ea40 0401 	orr.w	r4, r0, r1
 800a562:	e7db      	b.n	800a51c <__b2d+0x50>
 800a564:	ea46 0501 	orr.w	r5, r6, r1
 800a568:	4614      	mov	r4, r2
 800a56a:	e7d7      	b.n	800a51c <__b2d+0x50>
 800a56c:	3ff00000 	.word	0x3ff00000

0800a570 <__d2b>:
 800a570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a574:	461c      	mov	r4, r3
 800a576:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a57a:	2101      	movs	r1, #1
 800a57c:	4690      	mov	r8, r2
 800a57e:	f7ff fcb7 	bl	8009ef0 <_Balloc>
 800a582:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a586:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a58a:	4607      	mov	r7, r0
 800a58c:	bb34      	cbnz	r4, 800a5dc <__d2b+0x6c>
 800a58e:	9201      	str	r2, [sp, #4]
 800a590:	f1b8 0200 	subs.w	r2, r8, #0
 800a594:	d027      	beq.n	800a5e6 <__d2b+0x76>
 800a596:	a802      	add	r0, sp, #8
 800a598:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a59c:	f7ff fd8b 	bl	800a0b6 <__lo0bits>
 800a5a0:	9900      	ldr	r1, [sp, #0]
 800a5a2:	b1f0      	cbz	r0, 800a5e2 <__d2b+0x72>
 800a5a4:	9a01      	ldr	r2, [sp, #4]
 800a5a6:	f1c0 0320 	rsb	r3, r0, #32
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	430b      	orrs	r3, r1
 800a5b0:	40c2      	lsrs	r2, r0
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	9201      	str	r2, [sp, #4]
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bf14      	ite	ne
 800a5bc:	2102      	movne	r1, #2
 800a5be:	2101      	moveq	r1, #1
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	6139      	str	r1, [r7, #16]
 800a5c4:	b1c4      	cbz	r4, 800a5f8 <__d2b+0x88>
 800a5c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a5ca:	4404      	add	r4, r0
 800a5cc:	6034      	str	r4, [r6, #0]
 800a5ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5d2:	6028      	str	r0, [r5, #0]
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	b002      	add	sp, #8
 800a5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a5e0:	e7d5      	b.n	800a58e <__d2b+0x1e>
 800a5e2:	6179      	str	r1, [r7, #20]
 800a5e4:	e7e7      	b.n	800a5b6 <__d2b+0x46>
 800a5e6:	a801      	add	r0, sp, #4
 800a5e8:	f7ff fd65 	bl	800a0b6 <__lo0bits>
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	6139      	str	r1, [r7, #16]
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	3020      	adds	r0, #32
 800a5f6:	e7e5      	b.n	800a5c4 <__d2b+0x54>
 800a5f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5fc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a600:	6030      	str	r0, [r6, #0]
 800a602:	6918      	ldr	r0, [r3, #16]
 800a604:	f7ff fd38 	bl	800a078 <__hi0bits>
 800a608:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a60c:	e7e1      	b.n	800a5d2 <__d2b+0x62>

0800a60e <__ratio>:
 800a60e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a612:	4688      	mov	r8, r1
 800a614:	4669      	mov	r1, sp
 800a616:	4681      	mov	r9, r0
 800a618:	f7ff ff58 	bl	800a4cc <__b2d>
 800a61c:	468b      	mov	fp, r1
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	4640      	mov	r0, r8
 800a624:	a901      	add	r1, sp, #4
 800a626:	f7ff ff51 	bl	800a4cc <__b2d>
 800a62a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a62e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a632:	460d      	mov	r5, r1
 800a634:	eba3 0c02 	sub.w	ip, r3, r2
 800a638:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a63c:	1a9b      	subs	r3, r3, r2
 800a63e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a642:	2b00      	cmp	r3, #0
 800a644:	bfd5      	itete	le
 800a646:	460a      	movle	r2, r1
 800a648:	463a      	movgt	r2, r7
 800a64a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a64e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a652:	bfd8      	it	le
 800a654:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800a658:	462b      	mov	r3, r5
 800a65a:	4602      	mov	r2, r0
 800a65c:	4659      	mov	r1, fp
 800a65e:	4630      	mov	r0, r6
 800a660:	f7f6 f864 	bl	800072c <__aeabi_ddiv>
 800a664:	b003      	add	sp, #12
 800a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a66a <__copybits>:
 800a66a:	3901      	subs	r1, #1
 800a66c:	b510      	push	{r4, lr}
 800a66e:	1149      	asrs	r1, r1, #5
 800a670:	6914      	ldr	r4, [r2, #16]
 800a672:	3101      	adds	r1, #1
 800a674:	f102 0314 	add.w	r3, r2, #20
 800a678:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a67c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a680:	42a3      	cmp	r3, r4
 800a682:	4602      	mov	r2, r0
 800a684:	d303      	bcc.n	800a68e <__copybits+0x24>
 800a686:	2300      	movs	r3, #0
 800a688:	428a      	cmp	r2, r1
 800a68a:	d305      	bcc.n	800a698 <__copybits+0x2e>
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a692:	f840 2b04 	str.w	r2, [r0], #4
 800a696:	e7f3      	b.n	800a680 <__copybits+0x16>
 800a698:	f842 3b04 	str.w	r3, [r2], #4
 800a69c:	e7f4      	b.n	800a688 <__copybits+0x1e>

0800a69e <__any_on>:
 800a69e:	f100 0214 	add.w	r2, r0, #20
 800a6a2:	6900      	ldr	r0, [r0, #16]
 800a6a4:	114b      	asrs	r3, r1, #5
 800a6a6:	4298      	cmp	r0, r3
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	db11      	blt.n	800a6d0 <__any_on+0x32>
 800a6ac:	dd0a      	ble.n	800a6c4 <__any_on+0x26>
 800a6ae:	f011 011f 	ands.w	r1, r1, #31
 800a6b2:	d007      	beq.n	800a6c4 <__any_on+0x26>
 800a6b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6b8:	fa24 f001 	lsr.w	r0, r4, r1
 800a6bc:	fa00 f101 	lsl.w	r1, r0, r1
 800a6c0:	428c      	cmp	r4, r1
 800a6c2:	d10b      	bne.n	800a6dc <__any_on+0x3e>
 800a6c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d803      	bhi.n	800a6d4 <__any_on+0x36>
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	bd10      	pop	{r4, pc}
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	e7f7      	b.n	800a6c4 <__any_on+0x26>
 800a6d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d0f5      	beq.n	800a6c8 <__any_on+0x2a>
 800a6dc:	2001      	movs	r0, #1
 800a6de:	e7f6      	b.n	800a6ce <__any_on+0x30>

0800a6e0 <_calloc_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	fb02 f401 	mul.w	r4, r2, r1
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	f000 f854 	bl	800a794 <_malloc_r>
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	b118      	cbz	r0, 800a6f8 <_calloc_r+0x18>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	f7fc fd23 	bl	800713e <memset>
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}

0800a6fc <_free_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4605      	mov	r5, r0
 800a700:	2900      	cmp	r1, #0
 800a702:	d043      	beq.n	800a78c <_free_r+0x90>
 800a704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a708:	1f0c      	subs	r4, r1, #4
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	bfb8      	it	lt
 800a70e:	18e4      	addlt	r4, r4, r3
 800a710:	f000 fa34 	bl	800ab7c <__malloc_lock>
 800a714:	4a1e      	ldr	r2, [pc, #120]	; (800a790 <_free_r+0x94>)
 800a716:	6813      	ldr	r3, [r2, #0]
 800a718:	4610      	mov	r0, r2
 800a71a:	b933      	cbnz	r3, 800a72a <_free_r+0x2e>
 800a71c:	6063      	str	r3, [r4, #4]
 800a71e:	6014      	str	r4, [r2, #0]
 800a720:	4628      	mov	r0, r5
 800a722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a726:	f000 ba2a 	b.w	800ab7e <__malloc_unlock>
 800a72a:	42a3      	cmp	r3, r4
 800a72c:	d90b      	bls.n	800a746 <_free_r+0x4a>
 800a72e:	6821      	ldr	r1, [r4, #0]
 800a730:	1862      	adds	r2, r4, r1
 800a732:	4293      	cmp	r3, r2
 800a734:	bf01      	itttt	eq
 800a736:	681a      	ldreq	r2, [r3, #0]
 800a738:	685b      	ldreq	r3, [r3, #4]
 800a73a:	1852      	addeq	r2, r2, r1
 800a73c:	6022      	streq	r2, [r4, #0]
 800a73e:	6063      	str	r3, [r4, #4]
 800a740:	6004      	str	r4, [r0, #0]
 800a742:	e7ed      	b.n	800a720 <_free_r+0x24>
 800a744:	4613      	mov	r3, r2
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	b10a      	cbz	r2, 800a74e <_free_r+0x52>
 800a74a:	42a2      	cmp	r2, r4
 800a74c:	d9fa      	bls.n	800a744 <_free_r+0x48>
 800a74e:	6819      	ldr	r1, [r3, #0]
 800a750:	1858      	adds	r0, r3, r1
 800a752:	42a0      	cmp	r0, r4
 800a754:	d10b      	bne.n	800a76e <_free_r+0x72>
 800a756:	6820      	ldr	r0, [r4, #0]
 800a758:	4401      	add	r1, r0
 800a75a:	1858      	adds	r0, r3, r1
 800a75c:	4282      	cmp	r2, r0
 800a75e:	6019      	str	r1, [r3, #0]
 800a760:	d1de      	bne.n	800a720 <_free_r+0x24>
 800a762:	6810      	ldr	r0, [r2, #0]
 800a764:	6852      	ldr	r2, [r2, #4]
 800a766:	4401      	add	r1, r0
 800a768:	6019      	str	r1, [r3, #0]
 800a76a:	605a      	str	r2, [r3, #4]
 800a76c:	e7d8      	b.n	800a720 <_free_r+0x24>
 800a76e:	d902      	bls.n	800a776 <_free_r+0x7a>
 800a770:	230c      	movs	r3, #12
 800a772:	602b      	str	r3, [r5, #0]
 800a774:	e7d4      	b.n	800a720 <_free_r+0x24>
 800a776:	6820      	ldr	r0, [r4, #0]
 800a778:	1821      	adds	r1, r4, r0
 800a77a:	428a      	cmp	r2, r1
 800a77c:	bf01      	itttt	eq
 800a77e:	6811      	ldreq	r1, [r2, #0]
 800a780:	6852      	ldreq	r2, [r2, #4]
 800a782:	1809      	addeq	r1, r1, r0
 800a784:	6021      	streq	r1, [r4, #0]
 800a786:	6062      	str	r2, [r4, #4]
 800a788:	605c      	str	r4, [r3, #4]
 800a78a:	e7c9      	b.n	800a720 <_free_r+0x24>
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
 800a78e:	bf00      	nop
 800a790:	20000758 	.word	0x20000758

0800a794 <_malloc_r>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	1ccd      	adds	r5, r1, #3
 800a798:	f025 0503 	bic.w	r5, r5, #3
 800a79c:	3508      	adds	r5, #8
 800a79e:	2d0c      	cmp	r5, #12
 800a7a0:	bf38      	it	cc
 800a7a2:	250c      	movcc	r5, #12
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	db01      	blt.n	800a7ae <_malloc_r+0x1a>
 800a7aa:	42a9      	cmp	r1, r5
 800a7ac:	d903      	bls.n	800a7b6 <_malloc_r+0x22>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	6033      	str	r3, [r6, #0]
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	f000 f9e1 	bl	800ab7c <__malloc_lock>
 800a7ba:	4a21      	ldr	r2, [pc, #132]	; (800a840 <_malloc_r+0xac>)
 800a7bc:	6814      	ldr	r4, [r2, #0]
 800a7be:	4621      	mov	r1, r4
 800a7c0:	b991      	cbnz	r1, 800a7e8 <_malloc_r+0x54>
 800a7c2:	4c20      	ldr	r4, [pc, #128]	; (800a844 <_malloc_r+0xb0>)
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	b91b      	cbnz	r3, 800a7d0 <_malloc_r+0x3c>
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f000 f98f 	bl	800aaec <_sbrk_r>
 800a7ce:	6020      	str	r0, [r4, #0]
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f000 f98a 	bl	800aaec <_sbrk_r>
 800a7d8:	1c43      	adds	r3, r0, #1
 800a7da:	d124      	bne.n	800a826 <_malloc_r+0x92>
 800a7dc:	230c      	movs	r3, #12
 800a7de:	4630      	mov	r0, r6
 800a7e0:	6033      	str	r3, [r6, #0]
 800a7e2:	f000 f9cc 	bl	800ab7e <__malloc_unlock>
 800a7e6:	e7e4      	b.n	800a7b2 <_malloc_r+0x1e>
 800a7e8:	680b      	ldr	r3, [r1, #0]
 800a7ea:	1b5b      	subs	r3, r3, r5
 800a7ec:	d418      	bmi.n	800a820 <_malloc_r+0x8c>
 800a7ee:	2b0b      	cmp	r3, #11
 800a7f0:	d90f      	bls.n	800a812 <_malloc_r+0x7e>
 800a7f2:	600b      	str	r3, [r1, #0]
 800a7f4:	18cc      	adds	r4, r1, r3
 800a7f6:	50cd      	str	r5, [r1, r3]
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f000 f9c0 	bl	800ab7e <__malloc_unlock>
 800a7fe:	f104 000b 	add.w	r0, r4, #11
 800a802:	1d23      	adds	r3, r4, #4
 800a804:	f020 0007 	bic.w	r0, r0, #7
 800a808:	1ac3      	subs	r3, r0, r3
 800a80a:	d0d3      	beq.n	800a7b4 <_malloc_r+0x20>
 800a80c:	425a      	negs	r2, r3
 800a80e:	50e2      	str	r2, [r4, r3]
 800a810:	e7d0      	b.n	800a7b4 <_malloc_r+0x20>
 800a812:	684b      	ldr	r3, [r1, #4]
 800a814:	428c      	cmp	r4, r1
 800a816:	bf16      	itet	ne
 800a818:	6063      	strne	r3, [r4, #4]
 800a81a:	6013      	streq	r3, [r2, #0]
 800a81c:	460c      	movne	r4, r1
 800a81e:	e7eb      	b.n	800a7f8 <_malloc_r+0x64>
 800a820:	460c      	mov	r4, r1
 800a822:	6849      	ldr	r1, [r1, #4]
 800a824:	e7cc      	b.n	800a7c0 <_malloc_r+0x2c>
 800a826:	1cc4      	adds	r4, r0, #3
 800a828:	f024 0403 	bic.w	r4, r4, #3
 800a82c:	42a0      	cmp	r0, r4
 800a82e:	d005      	beq.n	800a83c <_malloc_r+0xa8>
 800a830:	1a21      	subs	r1, r4, r0
 800a832:	4630      	mov	r0, r6
 800a834:	f000 f95a 	bl	800aaec <_sbrk_r>
 800a838:	3001      	adds	r0, #1
 800a83a:	d0cf      	beq.n	800a7dc <_malloc_r+0x48>
 800a83c:	6025      	str	r5, [r4, #0]
 800a83e:	e7db      	b.n	800a7f8 <_malloc_r+0x64>
 800a840:	20000758 	.word	0x20000758
 800a844:	2000075c 	.word	0x2000075c

0800a848 <__ssputs_r>:
 800a848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a84c:	688e      	ldr	r6, [r1, #8]
 800a84e:	4682      	mov	sl, r0
 800a850:	429e      	cmp	r6, r3
 800a852:	460c      	mov	r4, r1
 800a854:	4690      	mov	r8, r2
 800a856:	4699      	mov	r9, r3
 800a858:	d837      	bhi.n	800a8ca <__ssputs_r+0x82>
 800a85a:	898a      	ldrh	r2, [r1, #12]
 800a85c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a860:	d031      	beq.n	800a8c6 <__ssputs_r+0x7e>
 800a862:	2302      	movs	r3, #2
 800a864:	6825      	ldr	r5, [r4, #0]
 800a866:	6909      	ldr	r1, [r1, #16]
 800a868:	1a6f      	subs	r7, r5, r1
 800a86a:	6965      	ldr	r5, [r4, #20]
 800a86c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a870:	fb95 f5f3 	sdiv	r5, r5, r3
 800a874:	f109 0301 	add.w	r3, r9, #1
 800a878:	443b      	add	r3, r7
 800a87a:	429d      	cmp	r5, r3
 800a87c:	bf38      	it	cc
 800a87e:	461d      	movcc	r5, r3
 800a880:	0553      	lsls	r3, r2, #21
 800a882:	d530      	bpl.n	800a8e6 <__ssputs_r+0x9e>
 800a884:	4629      	mov	r1, r5
 800a886:	f7ff ff85 	bl	800a794 <_malloc_r>
 800a88a:	4606      	mov	r6, r0
 800a88c:	b950      	cbnz	r0, 800a8a4 <__ssputs_r+0x5c>
 800a88e:	230c      	movs	r3, #12
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	f8ca 3000 	str.w	r3, [sl]
 800a898:	89a3      	ldrh	r3, [r4, #12]
 800a89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89e:	81a3      	strh	r3, [r4, #12]
 800a8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a4:	463a      	mov	r2, r7
 800a8a6:	6921      	ldr	r1, [r4, #16]
 800a8a8:	f7fc fc3e 	bl	8007128 <memcpy>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	6126      	str	r6, [r4, #16]
 800a8ba:	443e      	add	r6, r7
 800a8bc:	6026      	str	r6, [r4, #0]
 800a8be:	464e      	mov	r6, r9
 800a8c0:	6165      	str	r5, [r4, #20]
 800a8c2:	1bed      	subs	r5, r5, r7
 800a8c4:	60a5      	str	r5, [r4, #8]
 800a8c6:	454e      	cmp	r6, r9
 800a8c8:	d900      	bls.n	800a8cc <__ssputs_r+0x84>
 800a8ca:	464e      	mov	r6, r9
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	4641      	mov	r1, r8
 800a8d0:	6820      	ldr	r0, [r4, #0]
 800a8d2:	f000 f93a 	bl	800ab4a <memmove>
 800a8d6:	68a3      	ldr	r3, [r4, #8]
 800a8d8:	2000      	movs	r0, #0
 800a8da:	1b9b      	subs	r3, r3, r6
 800a8dc:	60a3      	str	r3, [r4, #8]
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	441e      	add	r6, r3
 800a8e2:	6026      	str	r6, [r4, #0]
 800a8e4:	e7dc      	b.n	800a8a0 <__ssputs_r+0x58>
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	f000 f94a 	bl	800ab80 <_realloc_r>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d1e2      	bne.n	800a8b8 <__ssputs_r+0x70>
 800a8f2:	6921      	ldr	r1, [r4, #16]
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	f7ff ff01 	bl	800a6fc <_free_r>
 800a8fa:	e7c8      	b.n	800a88e <__ssputs_r+0x46>

0800a8fc <_svfiprintf_r>:
 800a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	461d      	mov	r5, r3
 800a902:	898b      	ldrh	r3, [r1, #12]
 800a904:	b09d      	sub	sp, #116	; 0x74
 800a906:	061f      	lsls	r7, r3, #24
 800a908:	4680      	mov	r8, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	4616      	mov	r6, r2
 800a90e:	d50f      	bpl.n	800a930 <_svfiprintf_r+0x34>
 800a910:	690b      	ldr	r3, [r1, #16]
 800a912:	b96b      	cbnz	r3, 800a930 <_svfiprintf_r+0x34>
 800a914:	2140      	movs	r1, #64	; 0x40
 800a916:	f7ff ff3d 	bl	800a794 <_malloc_r>
 800a91a:	6020      	str	r0, [r4, #0]
 800a91c:	6120      	str	r0, [r4, #16]
 800a91e:	b928      	cbnz	r0, 800a92c <_svfiprintf_r+0x30>
 800a920:	230c      	movs	r3, #12
 800a922:	f8c8 3000 	str.w	r3, [r8]
 800a926:	f04f 30ff 	mov.w	r0, #4294967295
 800a92a:	e0c8      	b.n	800aabe <_svfiprintf_r+0x1c2>
 800a92c:	2340      	movs	r3, #64	; 0x40
 800a92e:	6163      	str	r3, [r4, #20]
 800a930:	2300      	movs	r3, #0
 800a932:	9309      	str	r3, [sp, #36]	; 0x24
 800a934:	2320      	movs	r3, #32
 800a936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a93a:	2330      	movs	r3, #48	; 0x30
 800a93c:	f04f 0b01 	mov.w	fp, #1
 800a940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a944:	9503      	str	r5, [sp, #12]
 800a946:	4637      	mov	r7, r6
 800a948:	463d      	mov	r5, r7
 800a94a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a94e:	b10b      	cbz	r3, 800a954 <_svfiprintf_r+0x58>
 800a950:	2b25      	cmp	r3, #37	; 0x25
 800a952:	d13e      	bne.n	800a9d2 <_svfiprintf_r+0xd6>
 800a954:	ebb7 0a06 	subs.w	sl, r7, r6
 800a958:	d00b      	beq.n	800a972 <_svfiprintf_r+0x76>
 800a95a:	4653      	mov	r3, sl
 800a95c:	4632      	mov	r2, r6
 800a95e:	4621      	mov	r1, r4
 800a960:	4640      	mov	r0, r8
 800a962:	f7ff ff71 	bl	800a848 <__ssputs_r>
 800a966:	3001      	adds	r0, #1
 800a968:	f000 80a4 	beq.w	800aab4 <_svfiprintf_r+0x1b8>
 800a96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96e:	4453      	add	r3, sl
 800a970:	9309      	str	r3, [sp, #36]	; 0x24
 800a972:	783b      	ldrb	r3, [r7, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 809d 	beq.w	800aab4 <_svfiprintf_r+0x1b8>
 800a97a:	2300      	movs	r3, #0
 800a97c:	f04f 32ff 	mov.w	r2, #4294967295
 800a980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a984:	9304      	str	r3, [sp, #16]
 800a986:	9307      	str	r3, [sp, #28]
 800a988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a98c:	931a      	str	r3, [sp, #104]	; 0x68
 800a98e:	462f      	mov	r7, r5
 800a990:	2205      	movs	r2, #5
 800a992:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a996:	4850      	ldr	r0, [pc, #320]	; (800aad8 <_svfiprintf_r+0x1dc>)
 800a998:	f7ff fa9c 	bl	8009ed4 <memchr>
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	b9d0      	cbnz	r0, 800a9d6 <_svfiprintf_r+0xda>
 800a9a0:	06d9      	lsls	r1, r3, #27
 800a9a2:	bf44      	itt	mi
 800a9a4:	2220      	movmi	r2, #32
 800a9a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9aa:	071a      	lsls	r2, r3, #28
 800a9ac:	bf44      	itt	mi
 800a9ae:	222b      	movmi	r2, #43	; 0x2b
 800a9b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9b4:	782a      	ldrb	r2, [r5, #0]
 800a9b6:	2a2a      	cmp	r2, #42	; 0x2a
 800a9b8:	d015      	beq.n	800a9e6 <_svfiprintf_r+0xea>
 800a9ba:	462f      	mov	r7, r5
 800a9bc:	2000      	movs	r0, #0
 800a9be:	250a      	movs	r5, #10
 800a9c0:	9a07      	ldr	r2, [sp, #28]
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c8:	3b30      	subs	r3, #48	; 0x30
 800a9ca:	2b09      	cmp	r3, #9
 800a9cc:	d94d      	bls.n	800aa6a <_svfiprintf_r+0x16e>
 800a9ce:	b1b8      	cbz	r0, 800aa00 <_svfiprintf_r+0x104>
 800a9d0:	e00f      	b.n	800a9f2 <_svfiprintf_r+0xf6>
 800a9d2:	462f      	mov	r7, r5
 800a9d4:	e7b8      	b.n	800a948 <_svfiprintf_r+0x4c>
 800a9d6:	4a40      	ldr	r2, [pc, #256]	; (800aad8 <_svfiprintf_r+0x1dc>)
 800a9d8:	463d      	mov	r5, r7
 800a9da:	1a80      	subs	r0, r0, r2
 800a9dc:	fa0b f000 	lsl.w	r0, fp, r0
 800a9e0:	4318      	orrs	r0, r3
 800a9e2:	9004      	str	r0, [sp, #16]
 800a9e4:	e7d3      	b.n	800a98e <_svfiprintf_r+0x92>
 800a9e6:	9a03      	ldr	r2, [sp, #12]
 800a9e8:	1d11      	adds	r1, r2, #4
 800a9ea:	6812      	ldr	r2, [r2, #0]
 800a9ec:	9103      	str	r1, [sp, #12]
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	db01      	blt.n	800a9f6 <_svfiprintf_r+0xfa>
 800a9f2:	9207      	str	r2, [sp, #28]
 800a9f4:	e004      	b.n	800aa00 <_svfiprintf_r+0x104>
 800a9f6:	4252      	negs	r2, r2
 800a9f8:	f043 0302 	orr.w	r3, r3, #2
 800a9fc:	9207      	str	r2, [sp, #28]
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	783b      	ldrb	r3, [r7, #0]
 800aa02:	2b2e      	cmp	r3, #46	; 0x2e
 800aa04:	d10c      	bne.n	800aa20 <_svfiprintf_r+0x124>
 800aa06:	787b      	ldrb	r3, [r7, #1]
 800aa08:	2b2a      	cmp	r3, #42	; 0x2a
 800aa0a:	d133      	bne.n	800aa74 <_svfiprintf_r+0x178>
 800aa0c:	9b03      	ldr	r3, [sp, #12]
 800aa0e:	3702      	adds	r7, #2
 800aa10:	1d1a      	adds	r2, r3, #4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	9203      	str	r2, [sp, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfb8      	it	lt
 800aa1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa1e:	9305      	str	r3, [sp, #20]
 800aa20:	4d2e      	ldr	r5, [pc, #184]	; (800aadc <_svfiprintf_r+0x1e0>)
 800aa22:	2203      	movs	r2, #3
 800aa24:	7839      	ldrb	r1, [r7, #0]
 800aa26:	4628      	mov	r0, r5
 800aa28:	f7ff fa54 	bl	8009ed4 <memchr>
 800aa2c:	b138      	cbz	r0, 800aa3e <_svfiprintf_r+0x142>
 800aa2e:	2340      	movs	r3, #64	; 0x40
 800aa30:	1b40      	subs	r0, r0, r5
 800aa32:	fa03 f000 	lsl.w	r0, r3, r0
 800aa36:	9b04      	ldr	r3, [sp, #16]
 800aa38:	3701      	adds	r7, #1
 800aa3a:	4303      	orrs	r3, r0
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	7839      	ldrb	r1, [r7, #0]
 800aa40:	2206      	movs	r2, #6
 800aa42:	4827      	ldr	r0, [pc, #156]	; (800aae0 <_svfiprintf_r+0x1e4>)
 800aa44:	1c7e      	adds	r6, r7, #1
 800aa46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa4a:	f7ff fa43 	bl	8009ed4 <memchr>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d038      	beq.n	800aac4 <_svfiprintf_r+0x1c8>
 800aa52:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <_svfiprintf_r+0x1e8>)
 800aa54:	bb13      	cbnz	r3, 800aa9c <_svfiprintf_r+0x1a0>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	3307      	adds	r3, #7
 800aa5a:	f023 0307 	bic.w	r3, r3, #7
 800aa5e:	3308      	adds	r3, #8
 800aa60:	9303      	str	r3, [sp, #12]
 800aa62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa64:	444b      	add	r3, r9
 800aa66:	9309      	str	r3, [sp, #36]	; 0x24
 800aa68:	e76d      	b.n	800a946 <_svfiprintf_r+0x4a>
 800aa6a:	fb05 3202 	mla	r2, r5, r2, r3
 800aa6e:	2001      	movs	r0, #1
 800aa70:	460f      	mov	r7, r1
 800aa72:	e7a6      	b.n	800a9c2 <_svfiprintf_r+0xc6>
 800aa74:	2300      	movs	r3, #0
 800aa76:	250a      	movs	r5, #10
 800aa78:	4619      	mov	r1, r3
 800aa7a:	3701      	adds	r7, #1
 800aa7c:	9305      	str	r3, [sp, #20]
 800aa7e:	4638      	mov	r0, r7
 800aa80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa84:	3a30      	subs	r2, #48	; 0x30
 800aa86:	2a09      	cmp	r2, #9
 800aa88:	d903      	bls.n	800aa92 <_svfiprintf_r+0x196>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0c8      	beq.n	800aa20 <_svfiprintf_r+0x124>
 800aa8e:	9105      	str	r1, [sp, #20]
 800aa90:	e7c6      	b.n	800aa20 <_svfiprintf_r+0x124>
 800aa92:	fb05 2101 	mla	r1, r5, r1, r2
 800aa96:	2301      	movs	r3, #1
 800aa98:	4607      	mov	r7, r0
 800aa9a:	e7f0      	b.n	800aa7e <_svfiprintf_r+0x182>
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4b11      	ldr	r3, [pc, #68]	; (800aae8 <_svfiprintf_r+0x1ec>)
 800aaa4:	a904      	add	r1, sp, #16
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	f7fc fbe2 	bl	8007270 <_printf_float>
 800aaac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aab0:	4681      	mov	r9, r0
 800aab2:	d1d6      	bne.n	800aa62 <_svfiprintf_r+0x166>
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	065b      	lsls	r3, r3, #25
 800aab8:	f53f af35 	bmi.w	800a926 <_svfiprintf_r+0x2a>
 800aabc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aabe:	b01d      	add	sp, #116	; 0x74
 800aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac4:	ab03      	add	r3, sp, #12
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	4622      	mov	r2, r4
 800aaca:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <_svfiprintf_r+0x1ec>)
 800aacc:	a904      	add	r1, sp, #16
 800aace:	4640      	mov	r0, r8
 800aad0:	f7fc fe7a 	bl	80077c8 <_printf_i>
 800aad4:	e7ea      	b.n	800aaac <_svfiprintf_r+0x1b0>
 800aad6:	bf00      	nop
 800aad8:	0800b134 	.word	0x0800b134
 800aadc:	0800b13a 	.word	0x0800b13a
 800aae0:	0800b13e 	.word	0x0800b13e
 800aae4:	08007271 	.word	0x08007271
 800aae8:	0800a849 	.word	0x0800a849

0800aaec <_sbrk_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	2300      	movs	r3, #0
 800aaf0:	4c05      	ldr	r4, [pc, #20]	; (800ab08 <_sbrk_r+0x1c>)
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	f7f8 f898 	bl	8002c2c <_sbrk>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_sbrk_r+0x1a>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_sbrk_r+0x1a>
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	20000764 	.word	0x20000764

0800ab0c <strncmp>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	b16a      	cbz	r2, 800ab2c <strncmp+0x20>
 800ab10:	3901      	subs	r1, #1
 800ab12:	1884      	adds	r4, r0, r2
 800ab14:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ab18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d103      	bne.n	800ab28 <strncmp+0x1c>
 800ab20:	42a0      	cmp	r0, r4
 800ab22:	d001      	beq.n	800ab28 <strncmp+0x1c>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1f5      	bne.n	800ab14 <strncmp+0x8>
 800ab28:	1a98      	subs	r0, r3, r2
 800ab2a:	bd10      	pop	{r4, pc}
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	e7fc      	b.n	800ab2a <strncmp+0x1e>

0800ab30 <__ascii_wctomb>:
 800ab30:	b149      	cbz	r1, 800ab46 <__ascii_wctomb+0x16>
 800ab32:	2aff      	cmp	r2, #255	; 0xff
 800ab34:	bf8b      	itete	hi
 800ab36:	238a      	movhi	r3, #138	; 0x8a
 800ab38:	700a      	strbls	r2, [r1, #0]
 800ab3a:	6003      	strhi	r3, [r0, #0]
 800ab3c:	2001      	movls	r0, #1
 800ab3e:	bf88      	it	hi
 800ab40:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab44:	4770      	bx	lr
 800ab46:	4608      	mov	r0, r1
 800ab48:	4770      	bx	lr

0800ab4a <memmove>:
 800ab4a:	4288      	cmp	r0, r1
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	eb01 0302 	add.w	r3, r1, r2
 800ab52:	d807      	bhi.n	800ab64 <memmove+0x1a>
 800ab54:	1e42      	subs	r2, r0, #1
 800ab56:	4299      	cmp	r1, r3
 800ab58:	d00a      	beq.n	800ab70 <memmove+0x26>
 800ab5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ab62:	e7f8      	b.n	800ab56 <memmove+0xc>
 800ab64:	4283      	cmp	r3, r0
 800ab66:	d9f5      	bls.n	800ab54 <memmove+0xa>
 800ab68:	1881      	adds	r1, r0, r2
 800ab6a:	1ad2      	subs	r2, r2, r3
 800ab6c:	42d3      	cmn	r3, r2
 800ab6e:	d100      	bne.n	800ab72 <memmove+0x28>
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab7a:	e7f7      	b.n	800ab6c <memmove+0x22>

0800ab7c <__malloc_lock>:
 800ab7c:	4770      	bx	lr

0800ab7e <__malloc_unlock>:
 800ab7e:	4770      	bx	lr

0800ab80 <_realloc_r>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	4607      	mov	r7, r0
 800ab84:	4614      	mov	r4, r2
 800ab86:	460e      	mov	r6, r1
 800ab88:	b921      	cbnz	r1, 800ab94 <_realloc_r+0x14>
 800ab8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab8e:	4611      	mov	r1, r2
 800ab90:	f7ff be00 	b.w	800a794 <_malloc_r>
 800ab94:	b922      	cbnz	r2, 800aba0 <_realloc_r+0x20>
 800ab96:	f7ff fdb1 	bl	800a6fc <_free_r>
 800ab9a:	4625      	mov	r5, r4
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba0:	f000 f814 	bl	800abcc <_malloc_usable_size_r>
 800aba4:	42a0      	cmp	r0, r4
 800aba6:	d20f      	bcs.n	800abc8 <_realloc_r+0x48>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4638      	mov	r0, r7
 800abac:	f7ff fdf2 	bl	800a794 <_malloc_r>
 800abb0:	4605      	mov	r5, r0
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d0f2      	beq.n	800ab9c <_realloc_r+0x1c>
 800abb6:	4631      	mov	r1, r6
 800abb8:	4622      	mov	r2, r4
 800abba:	f7fc fab5 	bl	8007128 <memcpy>
 800abbe:	4631      	mov	r1, r6
 800abc0:	4638      	mov	r0, r7
 800abc2:	f7ff fd9b 	bl	800a6fc <_free_r>
 800abc6:	e7e9      	b.n	800ab9c <_realloc_r+0x1c>
 800abc8:	4635      	mov	r5, r6
 800abca:	e7e7      	b.n	800ab9c <_realloc_r+0x1c>

0800abcc <_malloc_usable_size_r>:
 800abcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd0:	1f18      	subs	r0, r3, #4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bfbc      	itt	lt
 800abd6:	580b      	ldrlt	r3, [r1, r0]
 800abd8:	18c0      	addlt	r0, r0, r3
 800abda:	4770      	bx	lr

0800abdc <_init>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr

0800abe8 <_fini>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr
