
CarRadioToAdauBrigeF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0800b100  0800b100  0001b100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7c0  0800b7c0  00020280  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7c0  0800b7c0  00020280  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7c0  0800b7c0  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b7c0  0800b7c0  0001b7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7c8  0800b7c8  0001b7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800b7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000280  0800ba4c  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800ba4c  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec12  00000000  00000000  000202a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003843  00000000  00000000  0003eebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  00042700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001440  00000000  00000000  00043c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000065b3  00000000  00000000  00045080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001214e  00000000  00000000  0004b633  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097dc2  00000000  00000000  0005d781  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af4  00000000  00000000  000f55c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000280 	.word	0x20000280
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b0e4 	.word	0x0800b0e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000284 	.word	0x20000284
 800014c:	0800b0e4 	.word	0x0800b0e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <_ZN8SigmaDSPC1EP17I2C_HandleTypeDefhhP12GPIO_TypeDeftP20__UART_HandleTypeDef>:
          uint8_t i2cAddress;  DSP i2c address
          uint8_t device;      The DSP type, e.g ADAU1701
          uint8_t resetPin;    pin to reset DSP (optional parameter)
Returns:  None
 ***************************************/
SigmaDSP::SigmaDSP(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress, uint8_t device, GPIO_TypeDef* resetGPIO, uint16_t resetPin, UART_HandleTypeDef *uart) : _hi2c(hi2c), _dspAddress(i2cAddress), _deviceType(device), _resetGPIO(resetGPIO), _resetPin(resetPin), _uart(uart)
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4611      	mov	r1, r2
 8001194:	461a      	mov	r2, r3
 8001196:	460b      	mov	r3, r1
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	4613      	mov	r3, r2
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	79ba      	ldrb	r2, [r7, #6]
 80011ae:	721a      	strb	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8bba      	ldrh	r2, [r7, #28]
 80011ba:	821a      	strh	r2, [r3, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a3a      	ldr	r2, [r7, #32]
 80011c0:	615a      	str	r2, [r3, #20]
{

}
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
	...

080011d0 <_ZN8SigmaDSP5resetEv>:
Purpose:  Physically resets the DSP
Inputs:   None
Returns:  None
 ***************************************/
void SigmaDSP::reset()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_uart, (uint8_t*)"[adau] reset\n", 13, 2);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6958      	ldr	r0, [r3, #20]
 80011dc:	2302      	movs	r3, #2
 80011de:	220d      	movs	r2, #13
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <_ZN8SigmaDSP5resetEv+0x44>)
 80011e2:	f003 ff5c 	bl	800509e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(_resetGPIO, _resetPin, GPIO_PIN_RESET);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68d8      	ldr	r0, [r3, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	8a1b      	ldrh	r3, [r3, #16]
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	f002 fb7a 	bl	80038ea <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80011f6:	2032      	movs	r0, #50	; 0x32
 80011f8:	f001 ff74 	bl	80030e4 <HAL_Delay>
	HAL_GPIO_WritePin(_resetGPIO, _resetPin, GPIO_PIN_SET);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68d8      	ldr	r0, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	8a1b      	ldrh	r3, [r3, #16]
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	f002 fb6f 	bl	80038ea <HAL_GPIO_WritePin>
	//  {
	//    digitalWrite(_resetPin, LOW);
	//    delay(200);
	//    digitalWrite(_resetPin, HIGH);
	//  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800b100 	.word	0x0800b100

08001218 <_ZN8SigmaDSP4pingEv>:
          2 - error: address send, nack received
          3 - error: data send, nack received
          4 - error: unknown i2c error
 ***************************************/
bool SigmaDSP::ping()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
	//  return _WireObject.endTransmission();
	uint8_t emptyData[] = {};
	//	HAL_I2C_IsDeviceReady(_hi2c, _dspAddress, 5, 10);

//	HAL_Delay(10);
	int res= HAL_I2C_Master_Transmit(_hi2c, _dspAddress, emptyData, sizeof(emptyData), 10);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b299      	uxth	r1, r3
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	230a      	movs	r3, #10
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	f002 fd14 	bl	8003c60 <HAL_I2C_Master_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(_uart, (uint8_t*)"[adau] ping: ", 13, 2);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6958      	ldr	r0, [r3, #20]
 8001240:	2302      	movs	r3, #2
 8001242:	220d      	movs	r2, #13
 8001244:	4921      	ldr	r1, [pc, #132]	; (80012cc <_ZN8SigmaDSP4pingEv+0xb4>)
 8001246:	f003 ff2a 	bl	800509e <HAL_UART_Transmit>

	switch(res) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d82b      	bhi.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
 8001250:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <_ZN8SigmaDSP4pingEv+0x40>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	08001269 	.word	0x08001269
 800125c:	08001279 	.word	0x08001279
 8001260:	08001289 	.word	0x08001289
 8001264:	08001299 	.word	0x08001299
	case HAL_OK : HAL_UART_Transmit(_uart, (uint8_t*)"ok", 2, 2); break;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6958      	ldr	r0, [r3, #20]
 800126c:	2302      	movs	r3, #2
 800126e:	2202      	movs	r2, #2
 8001270:	4917      	ldr	r1, [pc, #92]	; (80012d0 <_ZN8SigmaDSP4pingEv+0xb8>)
 8001272:	f003 ff14 	bl	800509e <HAL_UART_Transmit>
 8001276:	e017      	b.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
	case HAL_ERROR: HAL_UART_Transmit(_uart, (uint8_t*)"error", 5, 2); break;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6958      	ldr	r0, [r3, #20]
 800127c:	2302      	movs	r3, #2
 800127e:	2205      	movs	r2, #5
 8001280:	4914      	ldr	r1, [pc, #80]	; (80012d4 <_ZN8SigmaDSP4pingEv+0xbc>)
 8001282:	f003 ff0c 	bl	800509e <HAL_UART_Transmit>
 8001286:	e00f      	b.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
	case HAL_BUSY: HAL_UART_Transmit(_uart, (uint8_t*)"busy", 4, 2); break;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6958      	ldr	r0, [r3, #20]
 800128c:	2302      	movs	r3, #2
 800128e:	2204      	movs	r2, #4
 8001290:	4911      	ldr	r1, [pc, #68]	; (80012d8 <_ZN8SigmaDSP4pingEv+0xc0>)
 8001292:	f003 ff04 	bl	800509e <HAL_UART_Transmit>
 8001296:	e007      	b.n	80012a8 <_ZN8SigmaDSP4pingEv+0x90>
	case HAL_TIMEOUT: HAL_UART_Transmit(_uart, (uint8_t*)"timeout", 7, 2); break;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6958      	ldr	r0, [r3, #20]
 800129c:	2302      	movs	r3, #2
 800129e:	2207      	movs	r2, #7
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <_ZN8SigmaDSP4pingEv+0xc4>)
 80012a2:	f003 fefc 	bl	800509e <HAL_UART_Transmit>
 80012a6:	bf00      	nop
	}

	HAL_UART_Transmit(_uart, (uint8_t*)"\n", 1, 2);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6958      	ldr	r0, [r3, #20]
 80012ac:	2302      	movs	r3, #2
 80012ae:	2201      	movs	r2, #1
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <_ZN8SigmaDSP4pingEv+0xc8>)
 80012b2:	f003 fef4 	bl	800509e <HAL_UART_Transmit>

	return HAL_OK == res;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
	//	return HAL_OK == HAL_I2C_IsDeviceReady(_hi2c, _dspAddress, 5, 100);
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0800b110 	.word	0x0800b110
 80012d0:	0800b120 	.word	0x0800b120
 80012d4:	0800b124 	.word	0x0800b124
 80012d8:	0800b12c 	.word	0x0800b12c
 80012dc:	0800b134 	.word	0x0800b134
 80012e0:	0800b13c 	.word	0x0800b13c

080012e4 <_ZN8SigmaDSP4muteEtbh>:

	safeload_writeRegister(startMemoryAddress, value, true);
}

void SigmaDSP::mute(uint16_t startMemoryAddress, bool mute, uint8_t channels)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	4608      	mov	r0, r1
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	807b      	strh	r3, [r7, #2]
 80012f6:	460b      	mov	r3, r1
 80012f8:	707b      	strb	r3, [r7, #1]
 80012fa:	4613      	mov	r3, r2
 80012fc:	703b      	strb	r3, [r7, #0]
	static int32_t unmute = 0x80 << 16;

	for (uint8_t i = 0; i < channels - 1; i++)
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	783b      	ldrb	r3, [r7, #0]
 8001306:	3b01      	subs	r3, #1
 8001308:	429a      	cmp	r2, r3
 800130a:	da11      	bge.n	8001330 <_ZN8SigmaDSP4muteEtbh+0x4c>
		safeload_writeRegister(startMemoryAddress++, mute ? (int32_t) 0 : unmute, false);
 800130c:	8879      	ldrh	r1, [r7, #2]
 800130e:	1c4b      	adds	r3, r1, #1
 8001310:	807b      	strh	r3, [r7, #2]
 8001312:	787b      	ldrb	r3, [r7, #1]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <_ZN8SigmaDSP4muteEtbh+0x38>
 8001318:	2200      	movs	r2, #0
 800131a:	e001      	b.n	8001320 <_ZN8SigmaDSP4muteEtbh+0x3c>
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <_ZN8SigmaDSP4muteEtbh+0x6c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f89c 	bl	8001460 <_ZN8SigmaDSP22safeload_writeRegisterEtlb>
	for (uint8_t i = 0; i < channels - 1; i++)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e7e8      	b.n	8001302 <_ZN8SigmaDSP4muteEtbh+0x1e>

	safeload_writeRegister(startMemoryAddress, mute ? (int32_t) 0 : unmute, true);
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <_ZN8SigmaDSP4muteEtbh+0x56>
 8001336:	2200      	movs	r2, #0
 8001338:	e001      	b.n	800133e <_ZN8SigmaDSP4muteEtbh+0x5a>
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <_ZN8SigmaDSP4muteEtbh+0x6c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	8879      	ldrh	r1, [r7, #2]
 8001340:	2301      	movs	r3, #1
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f88c 	bl	8001460 <_ZN8SigmaDSP22safeload_writeRegisterEtlb>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000000 	.word	0x20000000

08001354 <_ZN8SigmaDSP14twoChannelGainEtii>:


void SigmaDSP::twoChannelGain(uint16_t startMemoryAddress, int gain1, int gain2)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	460b      	mov	r3, r1
 8001362:	817b      	strh	r3, [r7, #10]

	//	float gain1f = gain1;
	//	float gain2f = gain2;
	//
	float _gain1 = powf(10.0, (float)gain1 / 20);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fcb9 	bl	8000cdc <__aeabi_i2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4914      	ldr	r1, [pc, #80]	; (80013c0 <_ZN8SigmaDSP14twoChannelGainEtii+0x6c>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fdbc 	bl	8000eec <__aeabi_fdiv>
 8001374:	4603      	mov	r3, r0
 8001376:	4619      	mov	r1, r3
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <_ZN8SigmaDSP14twoChannelGainEtii+0x70>)
 800137a:	f005 fb7d 	bl	8006a78 <powf>
 800137e:	6178      	str	r0, [r7, #20]
	float _gain2 = powf(10.0, (float)gain2 / 20);
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	f7ff fcab 	bl	8000cdc <__aeabi_i2f>
 8001386:	4603      	mov	r3, r0
 8001388:	490d      	ldr	r1, [pc, #52]	; (80013c0 <_ZN8SigmaDSP14twoChannelGainEtii+0x6c>)
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fdae 	bl	8000eec <__aeabi_fdiv>
 8001390:	4603      	mov	r3, r0
 8001392:	4619      	mov	r1, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <_ZN8SigmaDSP14twoChannelGainEtii+0x70>)
 8001396:	f005 fb6f 	bl	8006a78 <powf>
 800139a:	6138      	str	r0, [r7, #16]
	//	float _gain2 = pow(10, gain2 / 20); // 10^(dB / 20)
	//	float tt = ((float)level1 / 20);
	//	float lev = powf(10.0, tt);// ((float)level1 / 20);
	//	;

	safeload_writeRegister(startMemoryAddress++, _gain1, false);
 800139c:	8979      	ldrh	r1, [r7, #10]
 800139e:	1c4b      	adds	r3, r1, #1
 80013a0:	817b      	strh	r3, [r7, #10]
 80013a2:	2300      	movs	r3, #0
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 f876 	bl	8001498 <_ZN8SigmaDSP22safeload_writeRegisterEtfb>
	safeload_writeRegister(startMemoryAddress, _gain2, true);
 80013ac:	8979      	ldrh	r1, [r7, #10]
 80013ae:	2301      	movs	r3, #1
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f870 	bl	8001498 <_ZN8SigmaDSP22safeload_writeRegisterEtfb>
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	41a00000 	.word	0x41a00000
 80013c4:	41200000 	.word	0x41200000

080013c8 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>:
          uint8_t *data;                 Data array to write
          bool finished;                 Indicates if this is the last packet or not
Returns:  None
 ***************************************/
void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, uint8_t *data, bool finished)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	817b      	strh	r3, [r7, #10]
 80013d8:	4613      	mov	r3, r2
 80013da:	727b      	strb	r3, [r7, #9]
	static uint8_t _safeload_count = 0; // Keeps track of the safeload count

	uint8_t addr[2]; // Address array

	addr[0] = (memoryAddress >> 8) & 0xFF;
 80013dc:	897b      	ldrh	r3, [r7, #10]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	753b      	strb	r3, [r7, #20]
	addr[1] = memoryAddress & 0xFF;
 80013e6:	897b      	ldrh	r3, [r7, #10]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	757b      	strb	r3, [r7, #21]

	writeRegister(dspRegister::SafeloadAddress0 + _safeload_count, sizeof(addr), addr); // Place passed 16-bit memory address in safeload address area
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f603 0315 	addw	r3, r3, #2069	; 0x815
 80013f6:	b299      	uxth	r1, r3
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2202      	movs	r2, #2
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f866 	bl	80014d0 <_ZN8SigmaDSP13writeRegisterEthPKh>
	// Q: Why is the safeload registers five bytes long, while I'm loading four-byte parameters into the RAM using these registers?
	// A: The safeload registers are also used to load the slew RAM data, which is five bytes long. For parameter RAM writes using safeload,
	// the first byte of the safeload register can be set to 0x00.

	// Needs 5 bytes of data
	writeRegister(dspRegister::SafeloadData0 + _safeload_count, 5, data); // Placed passed data (5 bytes) in the next safeload data space
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800140e:	b299      	uxth	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2205      	movs	r2, #5
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f85b 	bl	80014d0 <_ZN8SigmaDSP13writeRegisterEthPKh>

	_safeload_count++; // Increase counter
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 8001424:	701a      	strb	r2, [r3, #0]

	if(finished == true || _safeload_count >= 5) // Max 5 safeload memory registers
 8001426:	7a7b      	ldrb	r3, [r7, #9]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x6c>
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b04      	cmp	r3, #4
 8001432:	d90e      	bls.n	8001452 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x8a>
	{
		addr[0] = 0x00;
 8001434:	2300      	movs	r3, #0
 8001436:	753b      	strb	r3, [r7, #20]
		addr[1] = 0x3C; // Set the IST bit (initiate safeload transfer bit)
 8001438:	233c      	movs	r3, #60	; 0x3c
 800143a:	757b      	strb	r3, [r7, #21]
		writeRegister(dspRegister::CoreRegister, sizeof(addr), addr); // Load content from the safeload registers
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2202      	movs	r2, #2
 8001442:	f640 011c 	movw	r1, #2076	; 0x81c
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f842 	bl	80014d0 <_ZN8SigmaDSP13writeRegisterEthPKh>
		_safeload_count = 0;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <_ZN8SigmaDSP22safeload_writeRegisterEtPhb+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
	}
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000029c 	.word	0x2000029c

08001460 <_ZN8SigmaDSP22safeload_writeRegisterEtlb>:

void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, int32_t data, bool finished)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	817b      	strh	r3, [r7, #10]
 8001470:	4613      	mov	r3, r2
 8001472:	727b      	strb	r3, [r7, #9]
	uint8_t dataArray[5];
	intToFixed(data, dataArray);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	461a      	mov	r2, r3
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f8ba 	bl	80015f6 <_ZN8SigmaDSP10intToFixedElPh>
	safeload_writeRegister(memoryAddress, dataArray, finished);
 8001482:	7a7b      	ldrb	r3, [r7, #9]
 8001484:	f107 0210 	add.w	r2, r7, #16
 8001488:	8979      	ldrh	r1, [r7, #10]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff ff9c 	bl	80013c8 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>
}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_ZN8SigmaDSP22safeload_writeRegisterEtfb>:

void SigmaDSP::safeload_writeRegister(uint16_t memoryAddress, float data, bool finished)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	4613      	mov	r3, r2
 80014aa:	727b      	strb	r3, [r7, #9]
	uint8_t dataArray[5];
	floatToFixed(data, dataArray);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	461a      	mov	r2, r3
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 f86f 	bl	8001598 <_ZN8SigmaDSP12floatToFixedEfPh>
	safeload_writeRegister(memoryAddress, dataArray, finished);
 80014ba:	7a7b      	ldrb	r3, [r7, #9]
 80014bc:	f107 0210 	add.w	r2, r7, #16
 80014c0:	8979      	ldrh	r1, [r7, #10]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff ff80 	bl	80013c8 <_ZN8SigmaDSP22safeload_writeRegisterEtPhb>
}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN8SigmaDSP13writeRegisterEthPKh>:
          uint8_t length;                Number of bytes to write
          uint8_t *data;                 Data array to write
Returns:  None
 ***************************************/
void SigmaDSP::writeRegister(uint16_t address, uint8_t length, const uint8_t *data)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	817b      	strh	r3, [r7, #10]
 80014de:	4613      	mov	r3, r2
 80014e0:	727b      	strb	r3, [r7, #9]
	package[1] = LSByte;
	for(uint8_t i = 2; i < length + 2; i++) {
		package[i] = data[i-2]; // Send all bytes in passed array
	}

	HAL_I2C_Master_Transmit(_hi2c, _dspAddress, package, length + 2, 10);
 80014e2:	466b      	mov	r3, sp
 80014e4:	461d      	mov	r5, r3
	uint8_t MSByte = address >> 8;
 80014e6:	897b      	ldrh	r3, [r7, #10]
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	77bb      	strb	r3, [r7, #30]
	uint8_t LSByte = (uint8_t)address & 0xFF;
 80014ec:	897b      	ldrh	r3, [r7, #10]
 80014ee:	777b      	strb	r3, [r7, #29]
	uint8_t package[length + 2];
 80014f0:	7a7b      	ldrb	r3, [r7, #9]
 80014f2:	1c58      	adds	r0, r3, #1
 80014f4:	61b8      	str	r0, [r7, #24]
 80014f6:	4603      	mov	r3, r0
 80014f8:	3301      	adds	r3, #1
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f04f 0400 	mov.w	r4, #0
 8001508:	00d4      	lsls	r4, r2, #3
 800150a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800150e:	00cb      	lsls	r3, r1, #3
 8001510:	4603      	mov	r3, r0
 8001512:	3301      	adds	r3, #1
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	f04f 0400 	mov.w	r4, #0
 8001522:	00d4      	lsls	r4, r2, #3
 8001524:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001528:	00cb      	lsls	r3, r1, #3
 800152a:	4603      	mov	r3, r0
 800152c:	3301      	adds	r3, #1
 800152e:	3307      	adds	r3, #7
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	ebad 0d03 	sub.w	sp, sp, r3
 8001538:	ab02      	add	r3, sp, #8
 800153a:	3300      	adds	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
	package[0] = MSByte;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	7fba      	ldrb	r2, [r7, #30]
 8001542:	701a      	strb	r2, [r3, #0]
	package[1] = LSByte;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	7f7a      	ldrb	r2, [r7, #29]
 8001548:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 2; i < length + 2; i++) {
 800154a:	2302      	movs	r3, #2
 800154c:	77fb      	strb	r3, [r7, #31]
 800154e:	7ffa      	ldrb	r2, [r7, #31]
 8001550:	7a7b      	ldrb	r3, [r7, #9]
 8001552:	3302      	adds	r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	da0b      	bge.n	8001570 <_ZN8SigmaDSP13writeRegisterEthPKh+0xa0>
		package[i] = data[i-2]; // Send all bytes in passed array
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	3b02      	subs	r3, #2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	441a      	add	r2, r3
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	7811      	ldrb	r1, [r2, #0]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 2; i < length + 2; i++) {
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	3301      	adds	r3, #1
 800156c:	77fb      	strb	r3, [r7, #31]
 800156e:	e7ee      	b.n	800154e <_ZN8SigmaDSP13writeRegisterEthPKh+0x7e>
	HAL_I2C_Master_Transmit(_hi2c, _dspAddress, package, length + 2, 10);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6858      	ldr	r0, [r3, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b299      	uxth	r1, r3
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	7a7b      	ldrb	r3, [r7, #9]
 800157e:	b29b      	uxth	r3, r3
 8001580:	3302      	adds	r3, #2
 8001582:	b29c      	uxth	r4, r3
 8001584:	230a      	movs	r3, #10
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	4623      	mov	r3, r4
 800158a:	f002 fb69 	bl	8003c60 <HAL_I2C_Master_Transmit>
 800158e:	46ad      	mov	sp, r5
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bdb0      	pop	{r4, r5, r7, pc}

08001598 <_ZN8SigmaDSP12floatToFixedEfPh>:
Inputs:   float value;      Value to convert
          uint8_t *buffer;  Buffer to store the converted data to
Returns:  None
 ***************************************/
void SigmaDSP::floatToFixed(float value, uint8_t *buffer)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	// Convert float to 4 byte hex
	int32_t fixedval = (value * ((int32_t)1 << 23));
 80015a4:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f7ff fbeb 	bl	8000d84 <__aeabi_fmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fdc3 	bl	800113c <__aeabi_f2iz>
 80015b6:	4603      	mov	r3, r0
 80015b8:	617b      	str	r3, [r7, #20]

	//	 Store the 4 bytes in the passed buffer
	buffer[0] = 0x00; // First must be empty
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
	buffer[1] = (fixedval >> 24) & 0xFF;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	0e1a      	lsrs	r2, r3, #24
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
	buffer[2] = (fixedval >> 16) & 0xFF;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	141a      	asrs	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3302      	adds	r3, #2
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (fixedval >>  8) & 0xFF;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	121a      	asrs	r2, r3, #8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3303      	adds	r3, #3
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
	buffer[4] = fixedval & 0xFF;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3304      	adds	r3, #4
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

	//		buffer[0] = (fixedval >> 24) & 0xFF;
	//		buffer[1] = (fixedval >> 16) & 0xFF;
	//		buffer[2] = (fixedval >>  8) & 0xFF;
	//		buffer[3] = fixedval & 0xFF;
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_ZN8SigmaDSP10intToFixedElPh>:
Inputs:   int32_t value;      Value to convert
          uint8_t *buffer;    Buffer to store the converted data to
Returns:  None
 ***************************************/
void SigmaDSP::intToFixed(int32_t value, uint8_t *buffer)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
	//	 Store the 4 bytes in the passed buffer
	buffer[0] = 0x00; // First must be empty
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
	buffer[1] = (value >> 24) & 0xFF;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	0e1a      	lsrs	r2, r3, #24
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]
	buffer[2] = (value >> 16) & 0xFF;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	141a      	asrs	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3302      	adds	r3, #2
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (value >>  8) & 0xFF;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	121a      	asrs	r2, r3, #8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3303      	adds	r3, #3
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	701a      	strb	r2, [r3, #0]
	buffer[4] = value & 0xFF;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

	//	buffer[0] = (value >> 24) & 0xFF;
	//	buffer[1] = (value >> 16) & 0xFF;
	//	buffer[2] = (value >>  8) & 0xFF;
	//	buffer[3] = value & 0xFF;
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <_ZN7AndroidC1EP20__UART_HandleTypeDefS1_>:
#include "Android.h"
#include "string.h"

Android::Android(UART_HandleTypeDef *_uartAndroid, UART_HandleTypeDef *_uartLog): uartAndroid(_uartAndroid), uartLog(_uartLog)
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001664:	821a      	strh	r2, [r3, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	749a      	strb	r2, [r3, #18]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	74da      	strb	r2, [r3, #19]
{
}
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <_ZN7Android7connectEv>:

void Android::connect() {
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	switch (connectionState) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7c9b      	ldrb	r3, [r3, #18]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <_ZN7Android7connectEv+0x16>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d00c      	beq.n	80016ac <_ZN7Android7connectEv+0x2e>
		break;
	}
	default:;
	}

}
 8001692:	e02f      	b.n	80016f4 <_ZN7Android7connectEv+0x76>
		ping();
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f881 	bl	800179c <_ZN7Android4pingEv>
		connectionState = PONG_WAIT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	749a      	strb	r2, [r3, #18]
		pingSysTime = HAL_GetTick();
 80016a0:	f001 fd16 	bl	80030d0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60da      	str	r2, [r3, #12]
		break;
 80016aa:	e023      	b.n	80016f4 <_ZN7Android7connectEv+0x76>
		if(tryPong()) {
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f895 	bl	80017dc <_ZN7Android7tryPongEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00a      	beq.n	80016ce <_ZN7Android7connectEv+0x50>
			connectionState = CONNECTED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	749a      	strb	r2, [r3, #18]
			if(playing) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7a1b      	ldrb	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d015      	beq.n	80016f2 <_ZN7Android7connectEv+0x74>
				play();
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f89c 	bl	8001804 <_ZN7Android4playEv>
		break;
 80016cc:	e011      	b.n	80016f2 <_ZN7Android7connectEv+0x74>
		} else if(HAL_GetTick() - pingSysTime > tryPongTime) {
 80016ce:	f001 fcff 	bl	80030d0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	8a12      	ldrh	r2, [r2, #16]
 80016de:	4293      	cmp	r3, r2
 80016e0:	bf8c      	ite	hi
 80016e2:	2301      	movhi	r3, #1
 80016e4:	2300      	movls	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <_ZN7Android7connectEv+0x74>
			connectionState = PING_SEND;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	749a      	strb	r2, [r3, #18]
		break;
 80016f2:	bf00      	nop
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZN7Android11isConnectedEv>:

bool Android::isConnected() {
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	return connectionState == CONNECTED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7c9b      	ldrb	r3, [r3, #18]
 8001708:	2b02      	cmp	r3, #2
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_ZN7Android13processComandEPc>:

void Android::resetState() {
	connectionState = PING_SEND;
}

void Android::processComand(char *command) {
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uartLog, (uint8_t *)"[android] received: ", 20, 2);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6858      	ldr	r0, [r3, #4]
 800172a:	2302      	movs	r3, #2
 800172c:	2214      	movs	r2, #20
 800172e:	4917      	ldr	r1, [pc, #92]	; (800178c <_ZN7Android13processComandEPc+0x70>)
 8001730:	f003 fcb5 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uartLog, (uint8_t *)command, strlen(command), 2);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685c      	ldr	r4, [r3, #4]
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f7fe fd09 	bl	8000150 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	2302      	movs	r3, #2
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	4620      	mov	r0, r4
 8001748:	f003 fca9 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uartLog, (uint8_t *)"\n", 1, 2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6858      	ldr	r0, [r3, #4]
 8001750:	2302      	movs	r3, #2
 8001752:	2201      	movs	r2, #1
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <_ZN7Android13processComandEPc+0x74>)
 8001756:	f003 fca2 	bl	800509e <HAL_UART_Transmit>
	if(strstr(command,"PONG") != NULL) {
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <_ZN7Android13processComandEPc+0x78>)
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f006 fdc9 	bl	80082f4 <strstr>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <_ZN7Android13processComandEPc+0x66>
		lastCommand = PONG;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	74da      	strb	r2, [r3, #19]
		HAL_Delay(30);
 800176e:	201e      	movs	r0, #30
 8001770:	f001 fcb8 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] PONG received\n", 24, 2);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6858      	ldr	r0, [r3, #4]
 8001778:	2302      	movs	r3, #2
 800177a:	2218      	movs	r2, #24
 800177c:	4906      	ldr	r1, [pc, #24]	; (8001798 <_ZN7Android13processComandEPc+0x7c>)
 800177e:	f003 fc8e 	bl	800509e <HAL_UART_Transmit>
	//		char *istr = strstr(tmp,"PING:PONG");
	//		if(istr != NULL) {
	//			HAL_UART_Transmit(&huart1, (uint8_t*)"\nнашлась строка\n", 16, 10);
	//		}
	//	}
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	0800b140 	.word	0x0800b140
 8001790:	0800b158 	.word	0x0800b158
 8001794:	0800b15c 	.word	0x0800b15c
 8001798:	0800b164 	.word	0x0800b164

0800179c <_ZN7Android4pingEv>:

void Android::ping() {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f001 fc9d 	bl	80030e4 <HAL_Delay>
	HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:PING>\n", 13, 2);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	2302      	movs	r3, #2
 80017b0:	220d      	movs	r2, #13
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <_ZN7Android4pingEv+0x38>)
 80017b4:	f003 fc73 	bl	800509e <HAL_UART_Transmit>
	HAL_Delay(30);
 80017b8:	201e      	movs	r0, #30
 80017ba:	f001 fc93 	bl	80030e4 <HAL_Delay>
	HAL_UART_Transmit(uartLog, (uint8_t *)"[android] ping\n", 15, 2);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6858      	ldr	r0, [r3, #4]
 80017c2:	2302      	movs	r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	4904      	ldr	r1, [pc, #16]	; (80017d8 <_ZN7Android4pingEv+0x3c>)
 80017c8:	f003 fc69 	bl	800509e <HAL_UART_Transmit>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	0800b180 	.word	0x0800b180
 80017d8:	0800b190 	.word	0x0800b190

080017dc <_ZN7Android7tryPongEv>:

bool Android::tryPong() {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if(lastCommand == PONG) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7cdb      	ldrb	r3, [r3, #19]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d104      	bne.n	80017f6 <_ZN7Android7tryPongEv+0x1a>
		lastCommand = EMPTY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	74da      	strb	r2, [r3, #19]
		return true;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <_ZN7Android7tryPongEv+0x1c>
	}
	return false;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <_ZN7Android4playEv>:

void Android::play() {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	playing = true;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	721a      	strb	r2, [r3, #8]
	if(connectionState == CONNECTED) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7c9b      	ldrb	r3, [r3, #18]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d113      	bne.n	8001842 <_ZN7Android4playEv+0x3e>
		HAL_Delay(10);
 800181a:	200a      	movs	r0, #10
 800181c:	f001 fc62 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:PLAY>\n", 13, 2);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	2302      	movs	r3, #2
 8001826:	220d      	movs	r2, #13
 8001828:	4908      	ldr	r1, [pc, #32]	; (800184c <_ZN7Android4playEv+0x48>)
 800182a:	f003 fc38 	bl	800509e <HAL_UART_Transmit>
		HAL_Delay(30);
 800182e:	201e      	movs	r0, #30
 8001830:	f001 fc58 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] play\n", 15, 2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6858      	ldr	r0, [r3, #4]
 8001838:	2302      	movs	r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	4904      	ldr	r1, [pc, #16]	; (8001850 <_ZN7Android4playEv+0x4c>)
 800183e:	f003 fc2e 	bl	800509e <HAL_UART_Transmit>
	}
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	0800b1a0 	.word	0x0800b1a0
 8001850:	0800b1b0 	.word	0x0800b1b0

08001854 <_ZN7Android4stopEv>:
void Android::stop() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	playing = false;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	721a      	strb	r2, [r3, #8]
	if(connectionState == CONNECTED) {
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7c9b      	ldrb	r3, [r3, #18]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d113      	bne.n	8001892 <_ZN7Android4stopEv+0x3e>
		HAL_Delay(10);
 800186a:	200a      	movs	r0, #10
 800186c:	f001 fc3a 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:STOP>\n", 13, 2);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	2302      	movs	r3, #2
 8001876:	220d      	movs	r2, #13
 8001878:	4908      	ldr	r1, [pc, #32]	; (800189c <_ZN7Android4stopEv+0x48>)
 800187a:	f003 fc10 	bl	800509e <HAL_UART_Transmit>
		HAL_Delay(30);
 800187e:	201e      	movs	r0, #30
 8001880:	f001 fc30 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] stop\n", 15, 2);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6858      	ldr	r0, [r3, #4]
 8001888:	2302      	movs	r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	4904      	ldr	r1, [pc, #16]	; (80018a0 <_ZN7Android4stopEv+0x4c>)
 800188e:	f003 fc06 	bl	800509e <HAL_UART_Transmit>
	}
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	0800b1c0 	.word	0x0800b1c0
 80018a0:	0800b1d0 	.word	0x0800b1d0

080018a4 <_ZN7Android4nextEv>:
void Android::next() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	if(connectionState == CONNECTED) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7c9b      	ldrb	r3, [r3, #18]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d113      	bne.n	80018dc <_ZN7Android4nextEv+0x38>
		HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f001 fc15 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:NEXT>\n", 13, 2);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	2302      	movs	r3, #2
 80018c0:	220d      	movs	r2, #13
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <_ZN7Android4nextEv+0x40>)
 80018c4:	f003 fbeb 	bl	800509e <HAL_UART_Transmit>
		HAL_Delay(30);
 80018c8:	201e      	movs	r0, #30
 80018ca:	f001 fc0b 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] next\n", 15, 2);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6858      	ldr	r0, [r3, #4]
 80018d2:	2302      	movs	r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	4904      	ldr	r1, [pc, #16]	; (80018e8 <_ZN7Android4nextEv+0x44>)
 80018d8:	f003 fbe1 	bl	800509e <HAL_UART_Transmit>
	}
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0800b1e0 	.word	0x0800b1e0
 80018e8:	0800b1f0 	.word	0x0800b1f0

080018ec <_ZN7Android4prevEv>:
void Android::prev() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	if(connectionState == CONNECTED) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7c9b      	ldrb	r3, [r3, #18]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d113      	bne.n	8001924 <_ZN7Android4prevEv+0x38>
		HAL_Delay(10);
 80018fc:	200a      	movs	r0, #10
 80018fe:	f001 fbf1 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:PREV>\n", 13, 2);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	2302      	movs	r3, #2
 8001908:	220d      	movs	r2, #13
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <_ZN7Android4prevEv+0x40>)
 800190c:	f003 fbc7 	bl	800509e <HAL_UART_Transmit>
		HAL_Delay(30);
 8001910:	201e      	movs	r0, #30
 8001912:	f001 fbe7 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] prev\n", 15, 2);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6858      	ldr	r0, [r3, #4]
 800191a:	2302      	movs	r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	4904      	ldr	r1, [pc, #16]	; (8001930 <_ZN7Android4prevEv+0x44>)
 8001920:	f003 fbbd 	bl	800509e <HAL_UART_Transmit>
	}
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	0800b200 	.word	0x0800b200
 8001930:	0800b210 	.word	0x0800b210

08001934 <_ZN7Android8shutdownEv>:
void Android::shutdown() {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	if(connectionState == CONNECTED) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7c9b      	ldrb	r3, [r3, #18]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d113      	bne.n	800196c <_ZN7Android8shutdownEv+0x38>
		HAL_Delay(10);
 8001944:	200a      	movs	r0, #10
 8001946:	f001 fbcd 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartAndroid, (uint8_t *)"<MEDIA:SHUTDOWN>\n", 17, 2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	2302      	movs	r3, #2
 8001950:	2211      	movs	r2, #17
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <_ZN7Android8shutdownEv+0x40>)
 8001954:	f003 fba3 	bl	800509e <HAL_UART_Transmit>
		HAL_Delay(30);
 8001958:	201e      	movs	r0, #30
 800195a:	f001 fbc3 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(uartLog, (uint8_t *)"[android] shutdown\n", 19, 2);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6858      	ldr	r0, [r3, #4]
 8001962:	2302      	movs	r3, #2
 8001964:	2213      	movs	r2, #19
 8001966:	4904      	ldr	r1, [pc, #16]	; (8001978 <_ZN7Android8shutdownEv+0x44>)
 8001968:	f003 fb99 	bl	800509e <HAL_UART_Transmit>
	}
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800b220 	.word	0x0800b220
 8001978:	0800b234 	.word	0x0800b234

0800197c <_ZN12PowerManagerC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvvES5_S5_S5_>:
#include "PowerManager.h"
#include <string.h>

PowerManager::PowerManager(
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	80fb      	strh	r3, [r7, #6]
		relayPin(_relayPin),
		uart(_uart),
		accOnCallback(_accOnCallback),
		accOffCallback(_accOffCallback),
		waitOffCallback(_waitOffCallback),
		offCallback(_offCallback)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8b3a      	ldrh	r2, [r7, #24]
 8001996:	809a      	strh	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	819a      	strh	r2, [r3, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	619a      	str	r2, [r3, #24]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	61da      	str	r2, [r3, #28]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c0:	621a      	str	r2, [r3, #32]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2202      	movs	r2, #2
 80019c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
{
}
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
	...

080019f0 <_ZN12PowerManager15powerProcessingEv>:

void PowerManager::powerProcessing() {
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	switch (powerState) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	f200 8090 	bhi.w	8001b24 <_ZN12PowerManager15powerProcessingEv+0x134>
 8001a04:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <_ZN12PowerManager15powerProcessingEv+0x1c>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a21 	.word	0x08001a21
 8001a10:	08001a41 	.word	0x08001a41
 8001a14:	08001a57 	.word	0x08001a57
 8001a18:	08001aad 	.word	0x08001aad
 8001a1c:	08001af7 	.word	0x08001af7
	case ACC_ON : {
		if(!checkAcc()) {
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f883 	bl	8001b2c <_ZN12PowerManager8checkAccEv>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d06f      	beq.n	8001b16 <_ZN12PowerManager15powerProcessingEv+0x126>
			changeState(ACC_OFF);
 8001a36:	2101      	movs	r1, #1
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f889 	bl	8001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		}
		break;
 8001a3e:	e06a      	b.n	8001b16 <_ZN12PowerManager15powerProcessingEv+0x126>
	}
	case ACC_OFF : {
		waitAccTime = HAL_GetTick();
 8001a40:	f001 fb46 	bl	80030d0 <HAL_GetTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
		changeState(WAIT_ACC);
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f87e 	bl	8001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8001a54:	e066      	b.n	8001b24 <_ZN12PowerManager15powerProcessingEv+0x134>
	}
	case WAIT_ACC : {
		if(checkAcc()) {
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f868 	bl	8001b2c <_ZN12PowerManager8checkAccEv>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <_ZN12PowerManager15powerProcessingEv+0x86>
			changeState(ACC_ON);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f86e 	bl	8001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>
			if(maxAccWaitTime < HAL_GetTick() - waitAccTime) {
				waitPowerOffTime = HAL_GetTick();
				changeState(WAIT_OFF);
			}
		}
		break;
 8001a74:	e051      	b.n	8001b1a <_ZN12PowerManager15powerProcessingEv+0x12a>
			if(maxAccWaitTime < HAL_GetTick() - waitAccTime) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	461c      	mov	r4, r3
 8001a7c:	f001 fb28 	bl	80030d0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	429c      	cmp	r4, r3
 8001a8a:	bf34      	ite	cc
 8001a8c:	2301      	movcc	r3, #1
 8001a8e:	2300      	movcs	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d041      	beq.n	8001b1a <_ZN12PowerManager15powerProcessingEv+0x12a>
				waitPowerOffTime = HAL_GetTick();
 8001a96:	f001 fb1b 	bl	80030d0 <HAL_GetTick>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
				changeState(WAIT_OFF);
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f853 	bl	8001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8001aaa:	e036      	b.n	8001b1a <_ZN12PowerManager15powerProcessingEv+0x12a>
	}
	case WAIT_OFF : {
		if(checkAcc()) {
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f83d 	bl	8001b2c <_ZN12PowerManager8checkAccEv>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <_ZN12PowerManager15powerProcessingEv+0xdc>
			changeState(ACC_ON);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f843 	bl	8001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		} else {
			if(maxPowerOffTime < HAL_GetTick() - waitPowerOffTime) {
				changeState(OFF);
			}
		}
		break;
 8001aca:	e028      	b.n	8001b1e <_ZN12PowerManager15powerProcessingEv+0x12e>
			if(maxPowerOffTime < HAL_GetTick() - waitPowerOffTime) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	461c      	mov	r4, r3
 8001ad2:	f001 fafd 	bl	80030d0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	429c      	cmp	r4, r3
 8001ae0:	bf34      	ite	cc
 8001ae2:	2301      	movcc	r3, #1
 8001ae4:	2300      	movcs	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d018      	beq.n	8001b1e <_ZN12PowerManager15powerProcessingEv+0x12e>
				changeState(OFF);
 8001aec:	2104      	movs	r1, #4
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f82e 	bl	8001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		break;
 8001af4:	e013      	b.n	8001b1e <_ZN12PowerManager15powerProcessingEv+0x12e>
	}
	case OFF : {
		if(checkAcc()) {
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f818 	bl	8001b2c <_ZN12PowerManager8checkAccEv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <_ZN12PowerManager15powerProcessingEv+0x132>
			changeState(WAIT_ACC);
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f81e 	bl	8001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>
		}
		break;
 8001b14:	e005      	b.n	8001b22 <_ZN12PowerManager15powerProcessingEv+0x132>
		break;
 8001b16:	bf00      	nop
 8001b18:	e004      	b.n	8001b24 <_ZN12PowerManager15powerProcessingEv+0x134>
		break;
 8001b1a:	bf00      	nop
 8001b1c:	e002      	b.n	8001b24 <_ZN12PowerManager15powerProcessingEv+0x134>
		break;
 8001b1e:	bf00      	nop
 8001b20:	e000      	b.n	8001b24 <_ZN12PowerManager15powerProcessingEv+0x134>
		break;
 8001b22:	bf00      	nop
	}
	}
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}

08001b2c <_ZN12PowerManager8checkAccEv>:

GPIO_PinState PowerManager::checkAcc() {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(accGPIO, accPin);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	899b      	ldrh	r3, [r3, #12]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f001 febc 	bl	80038bc <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <_ZN12PowerManager11changeStateENS_10PowerStateE>:

void PowerManager::changeState(PowerState newState) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
	powerState = newState;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	switch (newState) {
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d841      	bhi.n	8001bee <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <_ZN12PowerManager11changeStateENS_10PowerStateE+0x20>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b85 	.word	0x08001b85
 8001b74:	08001ba5 	.word	0x08001ba5
 8001b78:	08001bb5 	.word	0x08001bb5
 8001b7c:	08001bbf 	.word	0x08001bbf
 8001b80:	08001bcf 	.word	0x08001bcf
	case ACC_ON : {
		uartLog("acc on");
 8001b84:	491c      	ldr	r1, [pc, #112]	; (8001bf8 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xa8>)
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f840 	bl	8001c0c <_ZN12PowerManager7uartLogEPc>
		(*accOnCallback)();
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	4798      	blx	r3
		HAL_GPIO_WritePin(relayGPIO, relayPin, GPIO_PIN_SET);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	889b      	ldrh	r3, [r3, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f001 fea4 	bl	80038ea <HAL_GPIO_WritePin>
		break;
 8001ba2:	e024      	b.n	8001bee <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case ACC_OFF : {
		uartLog("acc off");
 8001ba4:	4915      	ldr	r1, [pc, #84]	; (8001bfc <_ZN12PowerManager11changeStateENS_10PowerStateE+0xac>)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f830 	bl	8001c0c <_ZN12PowerManager7uartLogEPc>
		(*accOffCallback)();
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4798      	blx	r3
		break;
 8001bb2:	e01c      	b.n	8001bee <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case WAIT_ACC : {
		uartLog("wait acc");
 8001bb4:	4912      	ldr	r1, [pc, #72]	; (8001c00 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xb0>)
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f828 	bl	8001c0c <_ZN12PowerManager7uartLogEPc>
		break;
 8001bbc:	e017      	b.n	8001bee <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case WAIT_OFF : {
		uartLog("wait off");
 8001bbe:	4911      	ldr	r1, [pc, #68]	; (8001c04 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xb4>)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f823 	bl	8001c0c <_ZN12PowerManager7uartLogEPc>
		(*waitOffCallback)();
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4798      	blx	r3
		break;
 8001bcc:	e00f      	b.n	8001bee <_ZN12PowerManager11changeStateENS_10PowerStateE+0x9e>
	}
	case OFF : {
		uartLog("off");
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <_ZN12PowerManager11changeStateENS_10PowerStateE+0xb8>)
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f81b 	bl	8001c0c <_ZN12PowerManager7uartLogEPc>
		(*offCallback)();
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4798      	blx	r3
		HAL_GPIO_WritePin(relayGPIO, relayPin, GPIO_PIN_RESET);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	889b      	ldrh	r3, [r3, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	f001 fe7f 	bl	80038ea <HAL_GPIO_WritePin>
		break;
 8001bec:	bf00      	nop
	}
	}


}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800b248 	.word	0x0800b248
 8001bfc:	0800b250 	.word	0x0800b250
 8001c00:	0800b258 	.word	0x0800b258
 8001c04:	0800b264 	.word	0x0800b264
 8001c08:	0800b270 	.word	0x0800b270

08001c0c <_ZN12PowerManager7uartLogEPc>:

void PowerManager::uartLog(char *str) {
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart, (uint8_t *)"[power] ", 8, 2);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6918      	ldr	r0, [r3, #16]
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	490d      	ldr	r1, [pc, #52]	; (8001c54 <_ZN12PowerManager7uartLogEPc+0x48>)
 8001c20:	f003 fa3d 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t *)str, strlen(str), 2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691c      	ldr	r4, [r3, #16]
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f7fe fa91 	bl	8000150 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	2302      	movs	r3, #2
 8001c34:	6839      	ldr	r1, [r7, #0]
 8001c36:	4620      	mov	r0, r4
 8001c38:	f003 fa31 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t *)"\n", 1, 2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6918      	ldr	r0, [r3, #16]
 8001c40:	2302      	movs	r3, #2
 8001c42:	2201      	movs	r2, #1
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <_ZN12PowerManager7uartLogEPc+0x4c>)
 8001c46:	f003 fa2a 	bl	800509e <HAL_UART_Transmit>
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	0800b274 	.word	0x0800b274
 8001c58:	0800b280 	.word	0x0800b280

08001c5c <_ZN13SerialReciverC1EP20__UART_HandleTypeDef>:
#include "SerialReciver.h"

SerialReciver::SerialReciver(UART_HandleTypeDef *_uart): uart(_uart) {}
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	711a      	strb	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <_ZN13SerialReciver7getDataEPc>:

int SerialReciver::getData(char *data) {
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
	if(!hasData || HAL_GetTick() - lastReciveTime < 10) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <_ZN13SerialReciver7getDataEPc+0x2a>
 8001ca6:	f001 fa13 	bl	80030d0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d801      	bhi.n	8001cbc <_ZN13SerialReciver7getDataEPc+0x2e>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <_ZN13SerialReciver7getDataEPc+0x30>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <_ZN13SerialReciver7getDataEPc+0x38>
		return 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e02b      	b.n	8001d1e <_ZN13SerialReciver7getDataEPc+0x90>
	}

	int size = idx == 0 ? BUFFER_SIZE : idx;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <_ZN13SerialReciver7getDataEPc+0x4a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001cd6:	e000      	b.n	8001cda <_ZN13SerialReciver7getDataEPc+0x4c>
 8001cd8:	23c8      	movs	r3, #200	; 0xc8
 8001cda:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < size; i++) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	da12      	bge.n	8001d0e <_ZN13SerialReciver7getDataEPc+0x80>
		data[i] = buffer[i];
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	440a      	add	r2, r1
 8001cf4:	3205      	adds	r2, #5
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	701a      	strb	r2, [r3, #0]
		buffer[i] = '\0';
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3305      	adds	r3, #5
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++) {
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e7e8      	b.n	8001ce0 <_ZN13SerialReciver7getDataEPc+0x52>
	}

	hasData = 0;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	711a      	strb	r2, [r3, #4]
	idx = 0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	return size;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZN13SerialReciver22reciveInterruptHandlerEv>:

void SerialReciver::reciveInterruptHandler() {
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	if((uart->Instance->SR & USART_SR_RXNE) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x3a>
	{
		buffer[idx] = (uint8_t)(uart->Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d56:	b2d1      	uxtb	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	715a      	strb	r2, [r3, #5]
	}
	//		if(sim[idx] == end){
	//			hasData = 1;
	//		}
	idx = idx == BUFFER_SIZE-1 ? 0 : idx + 1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d66:	2bc7      	cmp	r3, #199	; 0xc7
 8001d68:	d004      	beq.n	8001d74 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x4e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d70:	3301      	adds	r3, #1
 8001d72:	e000      	b.n	8001d76 <_ZN13SerialReciver22reciveInterruptHandlerEv+0x50>
 8001d74:	2300      	movs	r3, #0
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	hasData=1;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	711a      	strb	r2, [r3, #4]
	lastReciveTime = HAL_GetTick();
 8001d82:	f001 f9a5 	bl	80030d0 <HAL_GetTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0e      	blt.n	8001dc8 <__NVIC_ClearPendingIRQ+0x30>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_ClearPendingIRQ+0x3c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	3360      	adds	r3, #96	; 0x60
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ddc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <__NVIC_SystemReset+0x20>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_SystemReset+0x24>)
 8001dec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001dee:	60cb      	str	r3, [r1, #12]
 8001df0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <__NVIC_SystemReset+0x1c>
 8001df8:	e000ed00 	.word	0xe000ed00
 8001dfc:	05fa0004 	.word	0x05fa0004

08001e00 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e04:	f001 f90c 	bl	8003020 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e08:	f000 f87e 	bl	8001f08 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e0c:	f000 fa3e 	bl	800228c <_ZL12MX_GPIO_Initv>
	MX_TIM4_Init();
 8001e10:	f000 f982 	bl	8002118 <_ZL12MX_TIM4_Initv>
	MX_I2C2_Init();
 8001e14:	f000 f8ec 	bl	8001ff0 <_ZL12MX_I2C2_Initv>
	MX_USART2_UART_Init();
 8001e18:	f000 fa0a 	bl	8002230 <_ZL19MX_USART2_UART_Initv>
	MX_USART1_UART_Init();
 8001e1c:	f000 f9da 	bl	80021d4 <_ZL19MX_USART1_UART_Initv>
	MX_TIM1_Init();
 8001e20:	f000 f91a 	bl	8002058 <_ZL12MX_TIM1_Initv>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001e24:	f000 f8bf 	bl	8001fa6 <_ZL12MX_NVIC_Initv>
	/* USER CODE BEGIN 2 */

	extDeviceCommandReciver.startTimer();
 8001e28:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <main+0xe0>)
 8001e2a:	f004 fd49 	bl	80068c0 <_ZN23ExtDeviceCommandReciver10startTimerEv>

	HAL_Delay(100);
 8001e2e:	2064      	movs	r0, #100	; 0x64
 8001e30:	f001 f958 	bl	80030e4 <HAL_Delay>
	serial.println("[stm32] started");
 8001e34:	492b      	ldr	r1, [pc, #172]	; (8001ee4 <main+0xe4>)
 8001e36:	482c      	ldr	r0, [pc, #176]	; (8001ee8 <main+0xe8>)
 8001e38:	f004 fdab 	bl	8006992 <_ZN6Serial7printlnEPc>
	resetAdauCmd();
 8001e3c:	f000 fd4c 	bl	80028d8 <resetAdauCmd>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		powerManager.powerProcessing();
 8001e40:	482a      	ldr	r0, [pc, #168]	; (8001eec <main+0xec>)
 8001e42:	f7ff fdd5 	bl	80019f0 <_ZN12PowerManager15powerProcessingEv>
		volumeProcessing();
 8001e46:	f000 fb75 	bl	8002534 <volumeProcessing>
		muteProcessing();
 8001e4a:	f000 fd99 	bl	8002980 <muteProcessing>
		timeProcessing();
 8001e4e:	f000 fb2d 	bl	80024ac <timeProcessing>
		monitorProcessing();
 8001e52:	f000 fc6f 	bl	8002734 <monitorProcessing>
		amplifierProcessing();
 8001e56:	f000 fc19 	bl	800268c <amplifierProcessing>
//		if(!android.isConnected() && extDeviceCommandReciver.isPlaying()) {
		if(!android.isConnected()) {
 8001e5a:	4825      	ldr	r0, [pc, #148]	; (8001ef0 <main+0xf0>)
 8001e5c:	f7ff fc4e 	bl	80016fc <_ZN7Android11isConnectedEv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f083 0301 	eor.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <main+0x88>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // включить прерывания usart'a
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <main+0xf4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <main+0xf4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0220 	orr.w	r2, r2, #32
 8001e7a:	60da      	str	r2, [r3, #12]
			HAL_Delay(20);
 8001e7c:	2014      	movs	r0, #20
 8001e7e:	f001 f931 	bl	80030e4 <HAL_Delay>
			android.connect();
 8001e82:	481b      	ldr	r0, [pc, #108]	; (8001ef0 <main+0xf0>)
 8001e84:	f7ff fbfb 	bl	800167e <_ZN7Android7connectEv>
		}
		cmdInfoToSerial();
 8001e88:	f000 fd40 	bl	800290c <cmdInfoToSerial>

		if(serialReciver.getData(tmp)) {
 8001e8c:	491a      	ldr	r1, [pc, #104]	; (8001ef8 <main+0xf8>)
 8001e8e:	481b      	ldr	r0, [pc, #108]	; (8001efc <main+0xfc>)
 8001e90:	f7ff fefd 	bl	8001c8e <_ZN13SerialReciver7getDataEPc>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0cd      	beq.n	8001e40 <main+0x40>
			if(strstr(tmp, adauResetCmd) != NULL) {
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <main+0x100>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <main+0xf8>)
 8001eac:	f006 fa22 	bl	80082f4 <strstr>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <main+0xbc>
				resetAdauCmd();
 8001eb6:	f000 fd0f 	bl	80028d8 <resetAdauCmd>
 8001eba:	e00e      	b.n	8001eda <main+0xda>
			} else if(strstr(tmp, stmResetCmd) != NULL) {
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <main+0x104>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <main+0xf8>)
 8001ec4:	f006 fa16 	bl	80082f4 <strstr>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <main+0xd2>
				NVIC_SystemReset();
 8001ece:	f7ff ff83 	bl	8001dd8 <__NVIC_SystemReset>
			} else {
				android.processComand(tmp);
 8001ed2:	4909      	ldr	r1, [pc, #36]	; (8001ef8 <main+0xf8>)
 8001ed4:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <main+0xf0>)
 8001ed6:	f7ff fc21 	bl	800171c <_ZN7Android13processComandEPc>
			}
			clearTmp();
 8001eda:	f000 fcd5 	bl	8002888 <clearTmp>
		powerManager.powerProcessing();
 8001ede:	e7af      	b.n	8001e40 <main+0x40>
 8001ee0:	2000051c 	.word	0x2000051c
 8001ee4:	0800b294 	.word	0x0800b294
 8001ee8:	20000404 	.word	0x20000404
 8001eec:	2000054c 	.word	0x2000054c
 8001ef0:	20000588 	.word	0x20000588
 8001ef4:	200003c4 	.word	0x200003c4
 8001ef8:	20000688 	.word	0x20000688
 8001efc:	2000059c 	.word	0x2000059c
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	20000010 	.word	0x20000010

08001f08 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b090      	sub	sp, #64	; 0x40
 8001f0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	2228      	movs	r2, #40	; 0x28
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 fb95 	bl	8007646 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f32:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 f98b 	bl	800426c <HAL_RCC_OscConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <_Z18SystemClock_Configv+0x62>
	{
		Error_Handler();
 8001f66:	f000 fdd1 	bl	8002b0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2102      	movs	r1, #2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fbf1 	bl	800476c <HAL_RCC_ClockConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <_Z18SystemClock_Configv+0x96>
	{
		Error_Handler();
 8001f9a:	f000 fdb7 	bl	8002b0c <Error_Handler>
	}
}
 8001f9e:	bf00      	nop
 8001fa0:	3740      	adds	r7, #64	; 0x40
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_ZL12MX_NVIC_Initv>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	af00      	add	r7, sp, #0
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2102      	movs	r1, #2
 8001fae:	2006      	movs	r0, #6
 8001fb0:	f001 f9b3 	bl	800331a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fb4:	2006      	movs	r0, #6
 8001fb6:	f001 f9cc 	bl	8003352 <HAL_NVIC_EnableIRQ>
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2017      	movs	r0, #23
 8001fc0:	f001 f9ab 	bl	800331a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fc4:	2017      	movs	r0, #23
 8001fc6:	f001 f9c4 	bl	8003352 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2026      	movs	r0, #38	; 0x26
 8001fd0:	f001 f9a3 	bl	800331a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fd4:	2026      	movs	r0, #38	; 0x26
 8001fd6:	f001 f9bc 	bl	8003352 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2101      	movs	r1, #1
 8001fde:	2025      	movs	r0, #37	; 0x25
 8001fe0:	f001 f99b 	bl	800331a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fe4:	2025      	movs	r0, #37	; 0x25
 8001fe6:	f001 f9b4 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <_ZL12MX_I2C2_Initv>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <_ZL12MX_I2C2_Initv+0x60>)
 8001ff8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 8001ffc:	4a15      	ldr	r2, [pc, #84]	; (8002054 <_ZL12MX_I2C2_Initv+0x64>)
 8001ffe:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 800200e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002012:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <_ZL12MX_I2C2_Initv+0x5c>)
 800202e:	f001 fcaf 	bl	8003990 <HAL_I2C_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZL12MX_I2C2_Initv+0x56>
	{
		Error_Handler();
 8002042:	f000 fd63 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002a0 	.word	0x200002a0
 8002050:	40005800 	.word	0x40005800
 8002054:	000186a0 	.word	0x000186a0

08002058 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 8002076:	4a27      	ldr	r2, [pc, #156]	; (8002114 <_ZL12MX_TIM1_Initv+0xbc>)
 8002078:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72-1;
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 800207c:	2247      	movs	r2, #71	; 0x47
 800207e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 8002088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a0:	481b      	ldr	r0, [pc, #108]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 80020a2:	f002 fcff 	bl	8004aa4 <HAL_TIM_Base_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZL12MX_TIM1_Initv+0x62>
	{
		Error_Handler();
 80020b6:	f000 fd29 	bl	8002b0c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	4619      	mov	r1, r3
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 80020c8:	f002 fd8e 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <_ZL12MX_TIM1_Initv+0x88>
	{
		Error_Handler();
 80020dc:	f000 fd16 	bl	8002b0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020e0:	2320      	movs	r3, #32
 80020e2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e8:	463b      	mov	r3, r7
 80020ea:	4619      	mov	r1, r3
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <_ZL12MX_TIM1_Initv+0xb8>)
 80020ee:	f002 ff2b 	bl	8004f48 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <_ZL12MX_TIM1_Initv+0xae>
	{
		Error_Handler();
 8002102:	f000 fd03 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002f4 	.word	0x200002f4
 8002114:	40012c00 	.word	0x40012c00

08002118 <_ZL12MX_TIM4_Initv>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 8002136:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <_ZL12MX_TIM4_Initv+0xb8>)
 8002138:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 36000-1;
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 800213c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002140:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 800214a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800215c:	481b      	ldr	r0, [pc, #108]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 800215e:	f002 fca1 	bl	8004aa4 <HAL_TIM_Base_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <_ZL12MX_TIM4_Initv+0x5e>
	{
		Error_Handler();
 8002172:	f000 fccb 	bl	8002b0c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	4619      	mov	r1, r3
 8002182:	4812      	ldr	r0, [pc, #72]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 8002184:	f002 fd30 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <_ZL12MX_TIM4_Initv+0x84>
	{
		Error_Handler();
 8002198:	f000 fcb8 	bl	8002b0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800219c:	2320      	movs	r3, #32
 800219e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	4619      	mov	r1, r3
 80021a8:	4808      	ldr	r0, [pc, #32]	; (80021cc <_ZL12MX_TIM4_Initv+0xb4>)
 80021aa:	f002 fecd 	bl	8004f48 <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <_ZL12MX_TIM4_Initv+0xaa>
	{
		Error_Handler();
 80021be:	f000 fca5 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000033c 	.word	0x2000033c
 80021d0:	40000800 	.word	0x40000800

080021d4 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 80021da:	4a14      	ldr	r2, [pc, #80]	; (800222c <_ZL19MX_USART1_UART_Initv+0x58>)
 80021dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <_ZL19MX_USART1_UART_Initv+0x54>)
 800220c:	f002 fefa 	bl	8005004 <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <_ZL19MX_USART1_UART_Initv+0x50>
	{
		Error_Handler();
 8002220:	f000 fc74 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000384 	.word	0x20000384
 800222c:	40013800 	.word	0x40013800

08002230 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002238:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002266:	4807      	ldr	r0, [pc, #28]	; (8002284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002268:	f002 fecc 	bl	8005004 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <_ZL19MX_USART2_UART_Initv+0x50>
	{
		Error_Handler();
 800227c:	f000 fc46 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200003c4 	.word	0x200003c4
 8002288:	40004400 	.word	0x40004400

0800228c <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022a0:	4b5a      	ldr	r3, [pc, #360]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a59      	ldr	r2, [pc, #356]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b57      	ldr	r3, [pc, #348]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022b8:	4b54      	ldr	r3, [pc, #336]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a53      	ldr	r2, [pc, #332]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022be:	f043 0320 	orr.w	r3, r3, #32
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b51      	ldr	r3, [pc, #324]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b4e      	ldr	r3, [pc, #312]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a4d      	ldr	r2, [pc, #308]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022e8:	4b48      	ldr	r3, [pc, #288]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a47      	ldr	r2, [pc, #284]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <_ZL12MX_GPIO_Initv+0x180>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_Pin|MONITOR_OPEN_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8002306:	4842      	ldr	r0, [pc, #264]	; (8002410 <_ZL12MX_GPIO_Initv+0x184>)
 8002308:	f001 faef 	bl	80038ea <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ADAU_RESET_Pin|POWER_RELAY_Pin, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	2111      	movs	r1, #17
 8002310:	4840      	ldr	r0, [pc, #256]	; (8002414 <_ZL12MX_GPIO_Initv+0x188>)
 8002312:	f001 faea 	bl	80038ea <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	2120      	movs	r1, #32
 800231a:	483e      	ldr	r0, [pc, #248]	; (8002414 <_ZL12MX_GPIO_Initv+0x188>)
 800231c:	f001 fae5 	bl	80038ea <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MBUS_TX_GPIO_Port, MBUS_TX_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2102      	movs	r1, #2
 8002324:	483c      	ldr	r0, [pc, #240]	; (8002418 <_ZL12MX_GPIO_Initv+0x18c>)
 8002326:	f001 fae0 	bl	80038ea <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800232a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800232e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002330:	2301      	movs	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2302      	movs	r3, #2
 800233a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	4833      	ldr	r0, [pc, #204]	; (8002410 <_ZL12MX_GPIO_Initv+0x184>)
 8002344:	f001 f8a4 	bl	8003490 <HAL_GPIO_Init>

	/*Configure GPIO pin : MONITOR_OPEN_Pin */
	GPIO_InitStruct.Pin = MONITOR_OPEN_Pin;
 8002348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2302      	movs	r3, #2
 8002358:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MONITOR_OPEN_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	482b      	ldr	r0, [pc, #172]	; (8002410 <_ZL12MX_GPIO_Initv+0x184>)
 8002362:	f001 f895 	bl	8003490 <HAL_GPIO_Init>

	/*Configure GPIO pin : ADAU_RESET_Pin */
	GPIO_InitStruct.Pin = ADAU_RESET_Pin;
 8002366:	2301      	movs	r3, #1
 8002368:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236a:	2301      	movs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2302      	movs	r3, #2
 8002374:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ADAU_RESET_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	4825      	ldr	r0, [pc, #148]	; (8002414 <_ZL12MX_GPIO_Initv+0x188>)
 800237e:	f001 f887 	bl	8003490 <HAL_GPIO_Init>

	/*Configure GPIO pins : AC_Pin DSP_DATA_Pin */
	GPIO_InitStruct.Pin = AC_Pin|DSP_DATA_Pin;
 8002382:	2382      	movs	r3, #130	; 0x82
 8002384:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	4619      	mov	r1, r3
 8002394:	481f      	ldr	r0, [pc, #124]	; (8002414 <_ZL12MX_GPIO_Initv+0x188>)
 8002396:	f001 f87b 	bl	8003490 <HAL_GPIO_Init>

	/*Configure GPIO pins : POWER_RELAY_Pin AMPLIFIER_RELAY_Pin */
	GPIO_InitStruct.Pin = POWER_RELAY_Pin|AMPLIFIER_RELAY_Pin;
 800239a:	2330      	movs	r3, #48	; 0x30
 800239c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4619      	mov	r1, r3
 80023b0:	4818      	ldr	r0, [pc, #96]	; (8002414 <_ZL12MX_GPIO_Initv+0x188>)
 80023b2:	f001 f86d 	bl	8003490 <HAL_GPIO_Init>

	/*Configure GPIO pin : DSP_CLOCK_Pin */
	GPIO_InitStruct.Pin = DSP_CLOCK_Pin;
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <_ZL12MX_GPIO_Initv+0x190>)
 80023bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DSP_CLOCK_GPIO_Port, &GPIO_InitStruct);
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4619      	mov	r1, r3
 80023c8:	4812      	ldr	r0, [pc, #72]	; (8002414 <_ZL12MX_GPIO_Initv+0x188>)
 80023ca:	f001 f861 	bl	8003490 <HAL_GPIO_Init>

	/*Configure GPIO pin : MBUS_RX_Pin */
	GPIO_InitStruct.Pin = MBUS_RX_Pin;
 80023ce:	2301      	movs	r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <_ZL12MX_GPIO_Initv+0x194>)
 80023d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MBUS_RX_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4619      	mov	r1, r3
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <_ZL12MX_GPIO_Initv+0x18c>)
 80023e2:	f001 f855 	bl	8003490 <HAL_GPIO_Init>

	/*Configure GPIO pin : MBUS_TX_Pin */
	GPIO_InitStruct.Pin = MBUS_TX_Pin;
 80023e6:	2302      	movs	r3, #2
 80023e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MBUS_TX_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4619      	mov	r1, r3
 80023fc:	4806      	ldr	r0, [pc, #24]	; (8002418 <_ZL12MX_GPIO_Initv+0x18c>)
 80023fe:	f001 f847 	bl	8003490 <HAL_GPIO_Init>

}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40011000 	.word	0x40011000
 8002414:	40010800 	.word	0x40010800
 8002418:	40010c00 	.word	0x40010c00
 800241c:	10110000 	.word	0x10110000
 8002420:	10210000 	.word	0x10210000

08002424 <clearPendingInterrupt>:

/* USER CODE BEGIN 4 */
void clearPendingInterrupt() {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	EXTI->PR = EXTI_PR_PR0; //Сбрасываем флаг прерывания
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <clearPendingInterrupt+0x24>)
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800242e:	2006      	movs	r0, #6
 8002430:	f7ff fcb2 	bl	8001d98 <__NVIC_ClearPendingIRQ>
	EXTI->PR = EXTI_PR_PR9; //Сбрасываем флаг прерывания
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <clearPendingInterrupt+0x24>)
 8002436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243a:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 800243c:	2017      	movs	r0, #23
 800243e:	f7ff fcab 	bl	8001d98 <__NVIC_ClearPendingIRQ>
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40010400 	.word	0x40010400

0800244c <dataRequestInterrupt>:

void dataRequestInterrupt() {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	dspCommandReciver.readPackage();
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <dataRequestInterrupt+0x1c>)
 8002452:	f003 fa9b 	bl	800598c <_ZN17DspCommandReciver11readPackageEv>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8002456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245a:	4804      	ldr	r0, [pc, #16]	; (800246c <dataRequestInterrupt+0x20>)
 800245c:	f001 fa5d 	bl	800391a <HAL_GPIO_TogglePin>
	clearPendingInterrupt();
 8002460:	f7ff ffe0 	bl	8002424 <clearPendingInterrupt>
	//	serial.println("dataRequestInterrupt");
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000420 	.word	0x20000420
 800246c:	40011000 	.word	0x40011000

08002470 <mBusRequestInterrupt>:

void mBusRequestInterrupt() {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
	uint32_t value = extDeviceCommandReciver.commandProcessing();
 8002476:	480a      	ldr	r0, [pc, #40]	; (80024a0 <mBusRequestInterrupt+0x30>)
 8002478:	f003 fef4 	bl	8006264 <_ZN23ExtDeviceCommandReciver17commandProcessingEv>
 800247c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800247e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002482:	4808      	ldr	r0, [pc, #32]	; (80024a4 <mBusRequestInterrupt+0x34>)
 8002484:	f001 fa49 	bl	800391a <HAL_GPIO_TogglePin>
	sysTime = HAL_GetTick();
 8002488:	f000 fe22 	bl	80030d0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <mBusRequestInterrupt+0x38>)
 8002490:	601a      	str	r2, [r3, #0]
	clearPendingInterrupt();
 8002492:	f7ff ffc7 	bl	8002424 <clearPendingInterrupt>
	//	serial.println("mBusRequestInterrupt");
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000051c 	.word	0x2000051c
 80024a4:	40011000 	.word	0x40011000
 80024a8:	20000674 	.word	0x20000674

080024ac <timeProcessing>:

void timeProcessing() {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	uint32_t newSysTime = HAL_GetTick();
 80024b2:	f000 fe0d 	bl	80030d0 <HAL_GetTick>
 80024b6:	6078      	str	r0, [r7, #4]
	if(newSysTime - sysTime > sendTimePeriod && extDeviceCommandReciver.isPlaying()) {
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <timeProcessing+0x74>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <timeProcessing+0x78>)
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d907      	bls.n	80024d8 <timeProcessing+0x2c>
 80024c8:	4817      	ldr	r0, [pc, #92]	; (8002528 <timeProcessing+0x7c>)
 80024ca:	f003 ffa3 	bl	8006414 <_ZN23ExtDeviceCommandReciver9isPlayingEv>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <timeProcessing+0x2c>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <timeProcessing+0x2e>
 80024d8:	2300      	movs	r3, #0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01c      	beq.n	8002518 <timeProcessing+0x6c>
		sysTime = newSysTime;
 80024de:	4a10      	ldr	r2, [pc, #64]	; (8002520 <timeProcessing+0x74>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80024e4:	2006      	movs	r0, #6
 80024e6:	f000 ff42 	bl	800336e <HAL_NVIC_DisableIRQ>
		extDeviceCommandReciver.sendTime(abs(volumeLastValue), sendAdauLastStatus ? 1 : 2);
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <timeProcessing+0x80>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bfb8      	it	lt
 80024f2:	425b      	neglt	r3, r3
 80024f4:	b2d9      	uxtb	r1, r3
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <timeProcessing+0x84>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <timeProcessing+0x58>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <timeProcessing+0x5a>
 8002504:	2302      	movs	r3, #2
 8002506:	461a      	mov	r2, r3
 8002508:	4807      	ldr	r0, [pc, #28]	; (8002528 <timeProcessing+0x7c>)
 800250a:	f003 ff49 	bl	80063a0 <_ZN23ExtDeviceCommandReciver8sendTimeEhh>
		clearPendingInterrupt();
 800250e:	f7ff ff89 	bl	8002424 <clearPendingInterrupt>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002512:	2006      	movs	r0, #6
 8002514:	f000 ff1d 	bl	8003352 <HAL_NVIC_EnableIRQ>
	}
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000674 	.word	0x20000674
 8002524:	20000004 	.word	0x20000004
 8002528:	2000051c 	.word	0x2000051c
 800252c:	20000678 	.word	0x20000678
 8002530:	2000067c 	.word	0x2000067c

08002534 <volumeProcessing>:

void volumeProcessing() {
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
	if(dspCommandReciver.isChanged()) {
 800253a:	4848      	ldr	r0, [pc, #288]	; (800265c <volumeProcessing+0x128>)
 800253c:	f003 fcc6 	bl	8005ecc <_ZN17DspCommandReciver9isChangedEv>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8086 	beq.w	8002654 <volumeProcessing+0x120>
		if(HAL_GetTick() - lastVolumeChanged < 50) {
 8002548:	f000 fdc2 	bl	80030d0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <volumeProcessing+0x12c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b31      	cmp	r3, #49	; 0x31
 8002556:	bf94      	ite	ls
 8002558:	2301      	movls	r3, #1
 800255a:	2300      	movhi	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d175      	bne.n	800264e <volumeProcessing+0x11a>
			return;
		}

		int8_t level1 = dspCommandReciver.getAbsoluteLevel(CH1);
 8002562:	2100      	movs	r1, #0
 8002564:	483d      	ldr	r0, [pc, #244]	; (800265c <volumeProcessing+0x128>)
 8002566:	f003 fc41 	bl	8005dec <_ZN17DspCommandReciver16getAbsoluteLevelEh>
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
		int8_t level2 = dspCommandReciver.getAbsoluteLevel(CH2);
 800256e:	2101      	movs	r1, #1
 8002570:	483a      	ldr	r0, [pc, #232]	; (800265c <volumeProcessing+0x128>)
 8002572:	f003 fc3b 	bl	8005dec <_ZN17DspCommandReciver16getAbsoluteLevelEh>
 8002576:	4603      	mov	r3, r0
 8002578:	71bb      	strb	r3, [r7, #6]

		serial.print("[volume] changed (DB)");
 800257a:	493a      	ldr	r1, [pc, #232]	; (8002664 <volumeProcessing+0x130>)
 800257c:	483a      	ldr	r0, [pc, #232]	; (8002668 <volumeProcessing+0x134>)
 800257e:	f004 f9f3 	bl	8006968 <_ZN6Serial5printEPc>
		serial.print(" CH1:");
 8002582:	493a      	ldr	r1, [pc, #232]	; (800266c <volumeProcessing+0x138>)
 8002584:	4838      	ldr	r0, [pc, #224]	; (8002668 <volumeProcessing+0x134>)
 8002586:	f004 f9ef 	bl	8006968 <_ZN6Serial5printEPc>
		serial.print(level1);
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	4619      	mov	r1, r3
 8002590:	4835      	ldr	r0, [pc, #212]	; (8002668 <volumeProcessing+0x134>)
 8002592:	f004 fa59 	bl	8006a48 <_ZN6Serial5printEi>
		serial.print(" CH2:");
 8002596:	4936      	ldr	r1, [pc, #216]	; (8002670 <volumeProcessing+0x13c>)
 8002598:	4833      	ldr	r0, [pc, #204]	; (8002668 <volumeProcessing+0x134>)
 800259a:	f004 f9e5 	bl	8006968 <_ZN6Serial5printEPc>
		serial.print(level2);
 800259e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4830      	ldr	r0, [pc, #192]	; (8002668 <volumeProcessing+0x134>)
 80025a6:	f004 fa4f 	bl	8006a48 <_ZN6Serial5printEi>
		serial.print(" ");
 80025aa:	4932      	ldr	r1, [pc, #200]	; (8002674 <volumeProcessing+0x140>)
 80025ac:	482e      	ldr	r0, [pc, #184]	; (8002668 <volumeProcessing+0x134>)
 80025ae:	f004 f9db 	bl	8006968 <_ZN6Serial5printEPc>

		bool connected = dsp.ping();
 80025b2:	4831      	ldr	r0, [pc, #196]	; (8002678 <volumeProcessing+0x144>)
 80025b4:	f7fe fe30 	bl	8001218 <_ZN8SigmaDSP4pingEv>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]
		if(!connected) {
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <volumeProcessing+0xd6>
			for(int i = 0; i < 5 && !connected; i++) {
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	dc1b      	bgt.n	800260a <volumeProcessing+0xd6>
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d118      	bne.n	800260a <volumeProcessing+0xd6>
				serial.println("[adau] reconnect");
 80025d8:	4928      	ldr	r1, [pc, #160]	; (800267c <volumeProcessing+0x148>)
 80025da:	4823      	ldr	r0, [pc, #140]	; (8002668 <volumeProcessing+0x134>)
 80025dc:	f004 f9d9 	bl	8006992 <_ZN6Serial7printlnEPc>
				HAL_I2C_DeInit(&hi2c2);
 80025e0:	4827      	ldr	r0, [pc, #156]	; (8002680 <volumeProcessing+0x14c>)
 80025e2:	f001 fb0d 	bl	8003c00 <HAL_I2C_DeInit>
				HAL_Delay(20);
 80025e6:	2014      	movs	r0, #20
 80025e8:	f000 fd7c 	bl	80030e4 <HAL_Delay>
				HAL_I2C_Init(&hi2c2);
 80025ec:	4824      	ldr	r0, [pc, #144]	; (8002680 <volumeProcessing+0x14c>)
 80025ee:	f001 f9cf 	bl	8003990 <HAL_I2C_Init>
				HAL_Delay(20);
 80025f2:	2014      	movs	r0, #20
 80025f4:	f000 fd76 	bl	80030e4 <HAL_Delay>
				connected = dsp.ping();
 80025f8:	481f      	ldr	r0, [pc, #124]	; (8002678 <volumeProcessing+0x144>)
 80025fa:	f7fe fe0d 	bl	8001218 <_ZN8SigmaDSP4pingEv>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]
			for(int i = 0; i < 5 && !connected; i++) {
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3301      	adds	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	e7e0      	b.n	80025cc <volumeProcessing+0x98>
			}
		}

		dspCommandReciver.resetChangedFlag();
 800260a:	4814      	ldr	r0, [pc, #80]	; (800265c <volumeProcessing+0x128>)
 800260c:	f003 fc6a 	bl	8005ee4 <_ZN17DspCommandReciver16resetChangedFlagEv>

		volumeLastValue = level1;
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <volumeProcessing+0x150>)
 8002616:	6013      	str	r3, [r2, #0]
		sendAdauLastStatus = connected;
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <volumeProcessing+0x154>)
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	7013      	strb	r3, [r2, #0]

		if(!connected) {
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	f083 0301 	eor.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d113      	bne.n	8002652 <volumeProcessing+0x11e>
			return;
		}
		HAL_Delay(20);
 800262a:	2014      	movs	r0, #20
 800262c:	f000 fd5a 	bl	80030e4 <HAL_Delay>
		dsp.twoChannelGain(MOD_DIGITALINPUTGAIN_ALG0_GAIN1940ALGNS8_ADDR, level1, level2);
 8002630:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002634:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002638:	2108      	movs	r1, #8
 800263a:	480f      	ldr	r0, [pc, #60]	; (8002678 <volumeProcessing+0x144>)
 800263c:	f7fe fe8a 	bl	8001354 <_ZN8SigmaDSP14twoChannelGainEtii>
		lastVolumeChanged = HAL_GetTick();
 8002640:	f000 fd46 	bl	80030d0 <HAL_GetTick>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <volumeProcessing+0x12c>)
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e002      	b.n	8002654 <volumeProcessing+0x120>
			return;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <volumeProcessing+0x120>
			return;
 8002652:	bf00      	nop
	}
}
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000420 	.word	0x20000420
 8002660:	20000750 	.word	0x20000750
 8002664:	0800b2a4 	.word	0x0800b2a4
 8002668:	20000404 	.word	0x20000404
 800266c:	0800b2bc 	.word	0x0800b2bc
 8002670:	0800b2c4 	.word	0x0800b2c4
 8002674:	0800b2cc 	.word	0x0800b2cc
 8002678:	20000408 	.word	0x20000408
 800267c:	0800b2d0 	.word	0x0800b2d0
 8002680:	200002a0 	.word	0x200002a0
 8002684:	20000678 	.word	0x20000678
 8002688:	2000067c 	.word	0x2000067c

0800268c <amplifierProcessing>:

void amplifierProcessing() {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	if(amplifierReadyToStart) {
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <amplifierProcessing+0x88>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d022      	beq.n	80026de <amplifierProcessing+0x52>
		if(HAL_GetTick() - amplifierStartTime > amplifierStartTimePeriod && !HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
 8002698:	f000 fd1a 	bl	80030d0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <amplifierProcessing+0x8c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <amplifierProcessing+0x90>)
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d908      	bls.n	80026be <amplifierProcessing+0x32>
 80026ac:	2120      	movs	r1, #32
 80026ae:	481c      	ldr	r0, [pc, #112]	; (8002720 <amplifierProcessing+0x94>)
 80026b0:	f001 f904 	bl	80038bc <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <amplifierProcessing+0x32>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <amplifierProcessing+0x34>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d024      	beq.n	800270e <amplifierProcessing+0x82>
			HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_SET);
 80026c4:	2201      	movs	r2, #1
 80026c6:	2120      	movs	r1, #32
 80026c8:	4815      	ldr	r0, [pc, #84]	; (8002720 <amplifierProcessing+0x94>)
 80026ca:	f001 f90e 	bl	80038ea <HAL_GPIO_WritePin>
			amplifierStarted = true;
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <amplifierProcessing+0x98>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
			serial.println("[amplifier] power on");
 80026d4:	4914      	ldr	r1, [pc, #80]	; (8002728 <amplifierProcessing+0x9c>)
 80026d6:	4815      	ldr	r0, [pc, #84]	; (800272c <amplifierProcessing+0xa0>)
 80026d8:	f004 f95b 	bl	8006992 <_ZN6Serial7printlnEPc>
	} else if(HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
		HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
		amplifierStarted = false;
		serial.println("[amplifier] power off");
	}
}
 80026dc:	e017      	b.n	800270e <amplifierProcessing+0x82>
	} else if(HAL_GPIO_ReadPin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin)) {
 80026de:	2120      	movs	r1, #32
 80026e0:	480f      	ldr	r0, [pc, #60]	; (8002720 <amplifierProcessing+0x94>)
 80026e2:	f001 f8eb 	bl	80038bc <HAL_GPIO_ReadPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <amplifierProcessing+0x82>
		HAL_GPIO_WritePin(AMPLIFIER_RELAY_GPIO_Port, AMPLIFIER_RELAY_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2120      	movs	r1, #32
 80026fa:	4809      	ldr	r0, [pc, #36]	; (8002720 <amplifierProcessing+0x94>)
 80026fc:	f001 f8f5 	bl	80038ea <HAL_GPIO_WritePin>
		amplifierStarted = false;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <amplifierProcessing+0x98>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
		serial.println("[amplifier] power off");
 8002706:	490a      	ldr	r1, [pc, #40]	; (8002730 <amplifierProcessing+0xa4>)
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <amplifierProcessing+0xa0>)
 800270a:	f004 f942 	bl	8006992 <_ZN6Serial7printlnEPc>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000067d 	.word	0x2000067d
 8002718:	20000680 	.word	0x20000680
 800271c:	20000008 	.word	0x20000008
 8002720:	40010800 	.word	0x40010800
 8002724:	2000067e 	.word	0x2000067e
 8002728:	0800b2e4 	.word	0x0800b2e4
 800272c:	20000404 	.word	0x20000404
 8002730:	0800b2fc 	.word	0x0800b2fc

08002734 <monitorProcessing>:

void monitorProcessing() {
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	if(monitorOpen) {
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <monitorProcessing+0x70>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d017      	beq.n	8002770 <monitorProcessing+0x3c>
		if(!HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
 8002740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002744:	4818      	ldr	r0, [pc, #96]	; (80027a8 <monitorProcessing+0x74>)
 8002746:	f001 f8b9 	bl	80038bc <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d021      	beq.n	800279e <monitorProcessing+0x6a>
			HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_SET);
 800275a:	2201      	movs	r2, #1
 800275c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002760:	4811      	ldr	r0, [pc, #68]	; (80027a8 <monitorProcessing+0x74>)
 8002762:	f001 f8c2 	bl	80038ea <HAL_GPIO_WritePin>
			serial.println("[monitor] open");
 8002766:	4911      	ldr	r1, [pc, #68]	; (80027ac <monitorProcessing+0x78>)
 8002768:	4811      	ldr	r0, [pc, #68]	; (80027b0 <monitorProcessing+0x7c>)
 800276a:	f004 f912 	bl	8006992 <_ZN6Serial7printlnEPc>
		}
	} else if(HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
		HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_RESET);
		serial.println("[monitor] close");
	}
}
 800276e:	e016      	b.n	800279e <monitorProcessing+0x6a>
	} else if(HAL_GPIO_ReadPin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin)) {
 8002770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <monitorProcessing+0x74>)
 8002776:	f001 f8a1 	bl	80038bc <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <monitorProcessing+0x6a>
		HAL_GPIO_WritePin(MONITOR_OPEN_GPIO_Port, MONITOR_OPEN_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002790:	4805      	ldr	r0, [pc, #20]	; (80027a8 <monitorProcessing+0x74>)
 8002792:	f001 f8aa 	bl	80038ea <HAL_GPIO_WritePin>
		serial.println("[monitor] close");
 8002796:	4907      	ldr	r1, [pc, #28]	; (80027b4 <monitorProcessing+0x80>)
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <monitorProcessing+0x7c>)
 800279a:	f004 f8fa 	bl	8006992 <_ZN6Serial7printlnEPc>
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000684 	.word	0x20000684
 80027a8:	40011000 	.word	0x40011000
 80027ac:	0800b314 	.word	0x0800b314
 80027b0:	20000404 	.word	0x20000404
 80027b4:	0800b324 	.word	0x0800b324

080027b8 <accOn>:

void accOn() {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	//через 10 сек вкл усилитель и снять mute
	amplifierReadyToStart = true;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <accOn+0x20>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
	amplifierStartTime = HAL_GetTick();
 80027c2:	f000 fc85 	bl	80030d0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <accOn+0x24>)
 80027ca:	601a      	str	r2, [r3, #0]
	monitorOpen = true;
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <accOn+0x28>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000067d 	.word	0x2000067d
 80027dc:	20000680 	.word	0x20000680
 80027e0:	20000684 	.word	0x20000684

080027e4 <accOff>:

void accOff() {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	amplifierReadyToStart = false;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <accOff+0x1c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
	extDeviceCommandReciver.resetPlayingFlag();
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <accOff+0x20>)
 80027f0:	f003 fe04 	bl	80063fc <_ZN23ExtDeviceCommandReciver16resetPlayingFlagEv>
	android.stop();
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <accOff+0x24>)
 80027f6:	f7ff f82d 	bl	8001854 <_ZN7Android4stopEv>
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000067d 	.word	0x2000067d
 8002804:	2000051c 	.word	0x2000051c
 8002808:	20000588 	.word	0x20000588

0800280c <waitOff>:

void waitOff() {
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	android.shutdown();
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <waitOff+0x10>)
 8002812:	f7ff f88f 	bl	8001934 <_ZN7Android8shutdownEv>
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000588 	.word	0x20000588

08002820 <off>:

void off() {
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	monitorOpen = false;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <off+0x14>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000684 	.word	0x20000684

08002838 <playTrack>:

void playTrack() {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	android.play();
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <playTrack+0x10>)
 800283e:	f7fe ffe1 	bl	8001804 <_ZN7Android4playEv>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000588 	.word	0x20000588

0800284c <stopTrack>:

void stopTrack() {
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	android.stop();
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <stopTrack+0x10>)
 8002852:	f7fe ffff 	bl	8001854 <_ZN7Android4stopEv>
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000588 	.word	0x20000588

08002860 <nextTrack>:

void nextTrack() {
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	android.next();
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <nextTrack+0x10>)
 8002866:	f7ff f81d 	bl	80018a4 <_ZN7Android4nextEv>
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000588 	.word	0x20000588

08002874 <prevTrack>:

void prevTrack() {
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	android.prev();
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <prevTrack+0x10>)
 800287a:	f7ff f837 	bl	80018ec <_ZN7Android4prevEv>
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000588 	.word	0x20000588

08002888 <clearTmp>:

void clearTmp() {
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 200; i++) {
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2bc7      	cmp	r3, #199	; 0xc7
 8002896:	dc08      	bgt.n	80028aa <clearTmp+0x22>
		tmp[i] = '\0';
 8002898:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <clearTmp+0x2c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 200; i++) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3301      	adds	r3, #1
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	e7f3      	b.n	8002892 <clearTmp+0xa>
	}
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	20000688 	.word	0x20000688

080028b8 <uartRequestInterrupt>:

void uartRequestInterrupt() {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	serialReciver.reciveInterruptHandler();
 80028bc:	4804      	ldr	r0, [pc, #16]	; (80028d0 <uartRequestInterrupt+0x18>)
 80028be:	f7ff fa32 	bl	8001d26 <_ZN13SerialReciver22reciveInterruptHandlerEv>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80028c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <uartRequestInterrupt+0x1c>)
 80028c8:	f001 f827 	bl	800391a <HAL_GPIO_TogglePin>
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2000059c 	.word	0x2000059c
 80028d4:	40011000 	.word	0x40011000

080028d8 <resetAdauCmd>:

void resetAdauCmd() {
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	dsp.reset();
 80028dc:	4808      	ldr	r0, [pc, #32]	; (8002900 <resetAdauCmd+0x28>)
 80028de:	f7fe fc77 	bl	80011d0 <_ZN8SigmaDSP5resetEv>
	dspCommandReciver.setChangedFlag();
 80028e2:	4808      	ldr	r0, [pc, #32]	; (8002904 <resetAdauCmd+0x2c>)
 80028e4:	f003 fb0c 	bl	8005f00 <_ZN17DspCommandReciver14setChangedFlagEv>
	HAL_Delay(100);
 80028e8:	2064      	movs	r0, #100	; 0x64
 80028ea:	f000 fbfb 	bl	80030e4 <HAL_Delay>
	lastVolumeChanged = HAL_GetTick();
 80028ee:	f000 fbef 	bl	80030d0 <HAL_GetTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b04      	ldr	r3, [pc, #16]	; (8002908 <resetAdauCmd+0x30>)
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000408 	.word	0x20000408
 8002904:	20000420 	.word	0x20000420
 8002908:	20000750 	.word	0x20000750

0800290c <cmdInfoToSerial>:

void cmdInfoToSerial() {
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - lastInfoSend < 10000) {
 8002910:	f000 fbde 	bl	80030d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <cmdInfoToSerial+0x5c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002920:	4293      	cmp	r3, r2
 8002922:	bf94      	ite	ls
 8002924:	2301      	movls	r3, #1
 8002926:	2300      	movhi	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11a      	bne.n	8002964 <cmdInfoToSerial+0x58>
		return;
	}
	serial.print("[Available commands] ");
 800292e:	490f      	ldr	r1, [pc, #60]	; (800296c <cmdInfoToSerial+0x60>)
 8002930:	480f      	ldr	r0, [pc, #60]	; (8002970 <cmdInfoToSerial+0x64>)
 8002932:	f004 f819 	bl	8006968 <_ZN6Serial5printEPc>
	serial.print(adauResetCmd);
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <cmdInfoToSerial+0x68>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4619      	mov	r1, r3
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <cmdInfoToSerial+0x64>)
 800293e:	f004 f813 	bl	8006968 <_ZN6Serial5printEPc>
	serial.print(", ");
 8002942:	490d      	ldr	r1, [pc, #52]	; (8002978 <cmdInfoToSerial+0x6c>)
 8002944:	480a      	ldr	r0, [pc, #40]	; (8002970 <cmdInfoToSerial+0x64>)
 8002946:	f004 f80f 	bl	8006968 <_ZN6Serial5printEPc>
	serial.println(stmResetCmd);
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <cmdInfoToSerial+0x70>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	4807      	ldr	r0, [pc, #28]	; (8002970 <cmdInfoToSerial+0x64>)
 8002952:	f004 f81e 	bl	8006992 <_ZN6Serial7printlnEPc>
	lastInfoSend = HAL_GetTick();
 8002956:	f000 fbbb 	bl	80030d0 <HAL_GetTick>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	4b02      	ldr	r3, [pc, #8]	; (8002968 <cmdInfoToSerial+0x5c>)
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e000      	b.n	8002966 <cmdInfoToSerial+0x5a>
		return;
 8002964:	bf00      	nop
}
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000754 	.word	0x20000754
 800296c:	0800b334 	.word	0x0800b334
 8002970:	20000404 	.word	0x20000404
 8002974:	2000000c 	.word	0x2000000c
 8002978:	0800b34c 	.word	0x0800b34c
 800297c:	20000010 	.word	0x20000010

08002980 <muteProcessing>:



void muteProcessing() {
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	// если магнитола устанавливает уровень -94db и ниже, то это == общему mute
	if (volumeLastValue <= -94 || !amplifierStarted) {
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <muteProcessing+0x70>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f113 0f5d 	cmn.w	r3, #93	; 0x5d
 800298c:	db06      	blt.n	800299c <muteProcessing+0x1c>
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <muteProcessing+0x74>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <muteProcessing+0x20>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <muteProcessing+0x22>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <muteProcessing+0x34>
		muteRadioFunc(true);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f000 f82c 	bl	8002a04 <muteRadioFunc>
		muteAndroidFunc(true);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f000 f86b 	bl	8002a88 <muteAndroidFunc>
			muteRadioFunc(false);
		}
		// андроид включим всегда
		muteAndroidFunc(false);
	}
}
 80029b2:	e01a      	b.n	80029ea <muteProcessing+0x6a>
		if (extDeviceCommandReciver.isPlaying()) {
 80029b4:	4810      	ldr	r0, [pc, #64]	; (80029f8 <muteProcessing+0x78>)
 80029b6:	f003 fd2d 	bl	8006414 <_ZN23ExtDeviceCommandReciver9isPlayingEv>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <muteProcessing+0x48>
			muteRadioFunc(true);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f000 f81f 	bl	8002a04 <muteRadioFunc>
 80029c6:	e00d      	b.n	80029e4 <muteProcessing+0x64>
			if(muteAndroid && muteRadio) {
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <muteProcessing+0x7c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <muteProcessing+0x5e>
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <muteProcessing+0x80>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <muteProcessing+0x5e>
				muteRadio = true;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <muteProcessing+0x80>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
			muteRadioFunc(false);
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f810 	bl	8002a04 <muteRadioFunc>
		muteAndroidFunc(false);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f000 f84f 	bl	8002a88 <muteAndroidFunc>
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000678 	.word	0x20000678
 80029f4:	2000067e 	.word	0x2000067e
 80029f8:	2000051c 	.word	0x2000051c
 80029fc:	20000686 	.word	0x20000686
 8002a00:	20000685 	.word	0x20000685

08002a04 <muteRadioFunc>:

void muteRadioFunc(bool mute) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	if(!muteRadio && mute) {
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <muteRadioFunc+0x70>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f083 0301 	eor.w	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <muteRadioFunc+0x3a>
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <muteRadioFunc+0x3a>
		dsp.mute(MOD_MUTEANALOG_ALG0_MUTENOSLEWALG1MUTE_ADDR, true, MOD_MUTEANALOG_COUNT);
 8002a22:	2302      	movs	r3, #2
 8002a24:	2201      	movs	r2, #1
 8002a26:	2104      	movs	r1, #4
 8002a28:	4813      	ldr	r0, [pc, #76]	; (8002a78 <muteRadioFunc+0x74>)
 8002a2a:	f7fe fc5b 	bl	80012e4 <_ZN8SigmaDSP4muteEtbh>
		muteRadio = true;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <muteRadioFunc+0x70>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
		serial.println("[volume] radio mute on");
 8002a34:	4911      	ldr	r1, [pc, #68]	; (8002a7c <muteRadioFunc+0x78>)
 8002a36:	4812      	ldr	r0, [pc, #72]	; (8002a80 <muteRadioFunc+0x7c>)
 8002a38:	f003 ffab 	bl	8006992 <_ZN6Serial7printlnEPc>
	} else if (muteRadio && !mute) {
		dsp.mute(MOD_MUTEANALOG_ALG0_MUTENOSLEWALG1MUTE_ADDR, false, MOD_MUTEANALOG_COUNT);
		muteRadio = false;
		serial.println("[volume] radio mute off");
	}
}
 8002a3c:	e016      	b.n	8002a6c <muteRadioFunc+0x68>
	} else if (muteRadio && !mute) {
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <muteRadioFunc+0x70>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <muteRadioFunc+0x68>
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <muteRadioFunc+0x68>
		dsp.mute(MOD_MUTEANALOG_ALG0_MUTENOSLEWALG1MUTE_ADDR, false, MOD_MUTEANALOG_COUNT);
 8002a52:	2302      	movs	r3, #2
 8002a54:	2200      	movs	r2, #0
 8002a56:	2104      	movs	r1, #4
 8002a58:	4807      	ldr	r0, [pc, #28]	; (8002a78 <muteRadioFunc+0x74>)
 8002a5a:	f7fe fc43 	bl	80012e4 <_ZN8SigmaDSP4muteEtbh>
		muteRadio = false;
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <muteRadioFunc+0x70>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
		serial.println("[volume] radio mute off");
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <muteRadioFunc+0x80>)
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <muteRadioFunc+0x7c>)
 8002a68:	f003 ff93 	bl	8006992 <_ZN6Serial7printlnEPc>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000685 	.word	0x20000685
 8002a78:	20000408 	.word	0x20000408
 8002a7c:	0800b350 	.word	0x0800b350
 8002a80:	20000404 	.word	0x20000404
 8002a84:	0800b368 	.word	0x0800b368

08002a88 <muteAndroidFunc>:

void muteAndroidFunc(bool mute) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
	if(!muteAndroid && mute) {
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <muteAndroidFunc+0x70>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	f083 0301 	eor.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <muteAndroidFunc+0x3a>
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <muteAndroidFunc+0x3a>
		dsp.mute(MOD_MUTEDIGITAL_ALG0_MUTENOSLEWALG3MUTE_ADDR, true, MOD_MUTEDIGITAL_COUNT);
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2106      	movs	r1, #6
 8002aac:	4813      	ldr	r0, [pc, #76]	; (8002afc <muteAndroidFunc+0x74>)
 8002aae:	f7fe fc19 	bl	80012e4 <_ZN8SigmaDSP4muteEtbh>
		muteAndroid = true;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <muteAndroidFunc+0x70>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
		serial.println("[volume] android mute on");
 8002ab8:	4911      	ldr	r1, [pc, #68]	; (8002b00 <muteAndroidFunc+0x78>)
 8002aba:	4812      	ldr	r0, [pc, #72]	; (8002b04 <muteAndroidFunc+0x7c>)
 8002abc:	f003 ff69 	bl	8006992 <_ZN6Serial7printlnEPc>
	} else if (muteAndroid && !mute) {
		dsp.mute(MOD_MUTEDIGITAL_ALG0_MUTENOSLEWALG3MUTE_ADDR, false, MOD_MUTEDIGITAL_COUNT);
		muteAndroid = false;
		serial.println("[volume] android mute off");
	}
}
 8002ac0:	e016      	b.n	8002af0 <muteAndroidFunc+0x68>
	} else if (muteAndroid && !mute) {
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <muteAndroidFunc+0x70>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <muteAndroidFunc+0x68>
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f083 0301 	eor.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <muteAndroidFunc+0x68>
		dsp.mute(MOD_MUTEDIGITAL_ALG0_MUTENOSLEWALG3MUTE_ADDR, false, MOD_MUTEDIGITAL_COUNT);
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2106      	movs	r1, #6
 8002adc:	4807      	ldr	r0, [pc, #28]	; (8002afc <muteAndroidFunc+0x74>)
 8002ade:	f7fe fc01 	bl	80012e4 <_ZN8SigmaDSP4muteEtbh>
		muteAndroid = false;
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <muteAndroidFunc+0x70>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
		serial.println("[volume] android mute off");
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <muteAndroidFunc+0x80>)
 8002aea:	4806      	ldr	r0, [pc, #24]	; (8002b04 <muteAndroidFunc+0x7c>)
 8002aec:	f003 ff51 	bl	8006992 <_ZN6Serial7printlnEPc>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000686 	.word	0x20000686
 8002afc:	20000408 	.word	0x20000408
 8002b00:	0800b380 	.word	0x0800b380
 8002b04:	20000404 	.word	0x20000404
 8002b08:	0800b39c 	.word	0x0800b39c

08002b0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <_Z41__static_initialization_and_destruction_0ii>:
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af08      	add	r7, sp, #32
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d14d      	bne.n	8002bc4 <_Z41__static_initialization_and_destruction_0ii+0xac>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d148      	bne.n	8002bc4 <_Z41__static_initialization_and_destruction_0ii+0xac>
Serial serial(&huart2);
 8002b32:	4926      	ldr	r1, [pc, #152]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002b34:	4826      	ldr	r0, [pc, #152]	; (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002b36:	f003 ff09 	bl	800694c <_ZN6SerialC1EP20__UART_HandleTypeDef>
SigmaDSP dsp(&hi2c2, DSP_I2C_ADDRESS, ADAU1701, GPIOA, ADAU_RESET_Pin, &huart2);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	2268      	movs	r2, #104	; 0x68
 8002b4a:	4923      	ldr	r1, [pc, #140]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002b4c:	4823      	ldr	r0, [pc, #140]	; (8002bdc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002b4e:	f7fe fb1b 	bl	8001188 <_ZN8SigmaDSPC1EP17I2C_HandleTypeDefhhP12GPIO_TypeDeftP20__UART_HandleTypeDef>
DspCommandReciver dspCommandReciver(GPIOA, DSP_CLOCK_Pin, GPIOA, DSP_DATA_Pin, &huart2);
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002b5c:	2240      	movs	r2, #64	; 0x40
 8002b5e:	491d      	ldr	r1, [pc, #116]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002b60:	481f      	ldr	r0, [pc, #124]	; (8002be0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002b62:	f002 fe3b 	bl	80057dc <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef>
ExtDeviceCommandReciver extDeviceCommandReciver(GPIOB, MBUS_RX_Pin, GPIOB, MBUS_TX_Pin, &htim1, &huart2, playTrack, stopTrack, nextTrack, prevTrack);
 8002b66:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002b68:	9306      	str	r3, [sp, #24]
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002b6c:	9305      	str	r3, [sp, #20]
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002b70:	9304      	str	r3, [sp, #16]
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002b74:	9303      	str	r3, [sp, #12]
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002b78:	9302      	str	r3, [sp, #8]
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	2302      	movs	r3, #2
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	491c      	ldr	r1, [pc, #112]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002b88:	481c      	ldr	r0, [pc, #112]	; (8002bfc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002b8a:	f003 f9ec 	bl	8005f66 <_ZN23ExtDeviceCommandReciverC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefP20__UART_HandleTypeDefPFvvES7_S7_S7_>
PowerManager powerManager(GPIOA, AC_Pin, GPIOA, POWER_RELAY_Pin, &huart2, accOn, accOff, waitOff, off);
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002b90:	9305      	str	r3, [sp, #20]
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002b94:	9304      	str	r3, [sp, #16]
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002b98:	9303      	str	r3, [sp, #12]
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002b9c:	9302      	str	r3, [sp, #8]
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2310      	movs	r3, #16
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002ba8:	2202      	movs	r2, #2
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002bac:	4818      	ldr	r0, [pc, #96]	; (8002c10 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002bae:	f7fe fee5 	bl	800197c <_ZN12PowerManagerC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDefPFvvES5_S5_S5_>
Android android(&huart2, &huart2);
 8002bb2:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002bb4:	4905      	ldr	r1, [pc, #20]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002bb6:	4817      	ldr	r0, [pc, #92]	; (8002c14 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002bb8:	f7fe fd42 	bl	8001640 <_ZN7AndroidC1EP20__UART_HandleTypeDefS1_>
SerialReciver serialReciver(&huart2);
 8002bbc:	4903      	ldr	r1, [pc, #12]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002bbe:	4816      	ldr	r0, [pc, #88]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002bc0:	f7ff f84c 	bl	8001c5c <_ZN13SerialReciverC1EP20__UART_HandleTypeDef>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200003c4 	.word	0x200003c4
 8002bd0:	20000404 	.word	0x20000404
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	200002a0 	.word	0x200002a0
 8002bdc:	20000408 	.word	0x20000408
 8002be0:	20000420 	.word	0x20000420
 8002be4:	08002875 	.word	0x08002875
 8002be8:	08002861 	.word	0x08002861
 8002bec:	0800284d 	.word	0x0800284d
 8002bf0:	08002839 	.word	0x08002839
 8002bf4:	200002f4 	.word	0x200002f4
 8002bf8:	40010c00 	.word	0x40010c00
 8002bfc:	2000051c 	.word	0x2000051c
 8002c00:	08002821 	.word	0x08002821
 8002c04:	0800280d 	.word	0x0800280d
 8002c08:	080027e5 	.word	0x080027e5
 8002c0c:	080027b9 	.word	0x080027b9
 8002c10:	2000054c 	.word	0x2000054c
 8002c14:	20000588 	.word	0x20000588
 8002c18:	2000059c 	.word	0x2000059c

08002c1c <_GLOBAL__sub_I_hi2c2>:
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7ff ff77 	bl	8002b18 <_Z41__static_initialization_and_destruction_0ii>
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_MspInit+0x5c>)
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_MspInit+0x5c>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6193      	str	r3, [r2, #24]
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_MspInit+0x5c>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_MspInit+0x5c>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_MspInit+0x5c>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	61d3      	str	r3, [r2, #28]
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_MspInit+0x5c>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_MspInit+0x60>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_MspInit+0x60>)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40010000 	.word	0x40010000

08002c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_I2C_MspInit+0x74>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d124      	bne.n	8002cfa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_I2C_MspInit+0x78>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_I2C_MspInit+0x78>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	6193      	str	r3, [r2, #24]
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_I2C_MspInit+0x78>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ADAU_SCL_Pin|ADAU_SDA_Pin;
 8002cc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cce:	2312      	movs	r3, #18
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <HAL_I2C_MspInit+0x7c>)
 8002cde:	f000 fbd7 	bl	8003490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_I2C_MspInit+0x78>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <HAL_I2C_MspInit+0x78>)
 8002ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_I2C_MspInit+0x78>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cfa:	bf00      	nop
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40005800 	.word	0x40005800
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010c00 	.word	0x40010c00

08002d10 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_I2C_MspDeInit+0x3c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10f      	bne.n	8002d42 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_I2C_MspDeInit+0x40>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_I2C_MspDeInit+0x40>)
 8002d28:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d2c:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(ADAU_SCL_GPIO_Port, ADAU_SCL_Pin);
 8002d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d32:	4808      	ldr	r0, [pc, #32]	; (8002d54 <HAL_I2C_MspDeInit+0x44>)
 8002d34:	f000 fd06 	bl	8003744 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ADAU_SDA_GPIO_Port, ADAU_SDA_Pin);
 8002d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <HAL_I2C_MspDeInit+0x44>)
 8002d3e:	f000 fd01 	bl	8003744 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40005800 	.word	0x40005800
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010c00 	.word	0x40010c00

08002d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_TIM_Base_MspInit+0x58>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10c      	bne.n	8002d84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_TIM_Base_MspInit+0x5c>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_TIM_Base_MspInit+0x5c>)
 8002d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d74:	6193      	str	r3, [r2, #24]
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_TIM_Base_MspInit+0x5c>)
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d82:	e010      	b.n	8002da6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_TIM_Base_MspInit+0x60>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10b      	bne.n	8002da6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_TIM_Base_MspInit+0x5c>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_TIM_Base_MspInit+0x5c>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	61d3      	str	r3, [r2, #28]
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_TIM_Base_MspInit+0x5c>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40000800 	.word	0x40000800

08002dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0318 	add.w	r3, r7, #24
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a37      	ldr	r2, [pc, #220]	; (8002eb4 <HAL_UART_MspInit+0xf8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d132      	bne.n	8002e42 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b33      	ldr	r3, [pc, #204]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6193      	str	r3, [r2, #24]
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f107 0318 	add.w	r3, r7, #24
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4826      	ldr	r0, [pc, #152]	; (8002ebc <HAL_UART_MspInit+0x100>)
 8002e22:	f000 fb35 	bl	8003490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	f107 0318 	add.w	r3, r7, #24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4820      	ldr	r0, [pc, #128]	; (8002ebc <HAL_UART_MspInit+0x100>)
 8002e3c:	f000 fb28 	bl	8003490 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e40:	e034      	b.n	8002eac <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_UART_MspInit+0x104>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d12f      	bne.n	8002eac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	61d3      	str	r3, [r2, #28]
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480b      	ldr	r0, [pc, #44]	; (8002ebc <HAL_UART_MspInit+0x100>)
 8002e90:	f000 fafe 	bl	8003490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_RX_Pin;
 8002e94:	2308      	movs	r3, #8
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8002ea0:	f107 0318 	add.w	r3, r7, #24
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <HAL_UART_MspInit+0x100>)
 8002ea8:	f000 faf2 	bl	8003490 <HAL_GPIO_Init>
}
 8002eac:	bf00      	nop
 8002eae:	3728      	adds	r7, #40	; 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40010800 	.word	0x40010800
 8002ec0:	40004400 	.word	0x40004400

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <HardFault_Handler+0x4>

08002ed6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <MemManage_Handler+0x4>

08002edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <BusFault_Handler+0x4>

08002ee2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <UsageFault_Handler+0x4>

08002ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f10:	f000 f8cc 	bl	80030ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	mBusRequestInterrupt();
 8002f1c:	f7ff faa8 	bl	8002470 <mBusRequestInterrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f000 fd13 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataRequestInterrupt();
 8002f2e:	f7ff fa8d 	bl	800244c <dataRequestInterrupt>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002f32:	2040      	movs	r0, #64	; 0x40
 8002f34:	f000 fd0a 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	HAL_UART_Transmit(&huart1, (uint8_t *)"USART1_IRQHandler\n", 18, 5);
//	uartRequestInterrupt();
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <USART1_IRQHandler+0x10>)
 8002f42:	f002 f93f 	bl	80051c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000384 	.word	0x20000384

08002f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uartRequestInterrupt();
 8002f54:	f7ff fcb0 	bl	80028b8 <uartRequestInterrupt>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <_sbrk+0x5c>)
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <_sbrk+0x60>)
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <_sbrk+0x64>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <_sbrk+0x64>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <_sbrk+0x68>)
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <_sbrk+0x64>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d207      	bcs.n	8002f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f8c:	f004 fb26 	bl	80075dc <__errno>
 8002f90:	4602      	mov	r2, r0
 8002f92:	230c      	movs	r3, #12
 8002f94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	e009      	b.n	8002fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <_sbrk+0x64>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <_sbrk+0x64>)
 8002fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20005000 	.word	0x20005000
 8002fbc:	00000400 	.word	0x00000400
 8002fc0:	20000758 	.word	0x20000758
 8002fc4:	20000770 	.word	0x20000770

08002fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fd6:	e003      	b.n	8002fe0 <LoopCopyDataInit>

08002fd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002fda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fde:	3104      	adds	r1, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fe0:	480a      	ldr	r0, [pc, #40]	; (800300c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fe4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fe6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fe8:	d3f6      	bcc.n	8002fd8 <CopyDataInit>
  ldr r2, =_sbss
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fec:	e002      	b.n	8002ff4 <LoopFillZerobss>

08002fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ff0:	f842 3b04 	str.w	r3, [r2], #4

08002ff4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ff6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ff8:	d3f9      	bcc.n	8002fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ffa:	f7ff ffe5 	bl	8002fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f004 faf3 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003002:	f7fe fefd 	bl	8001e00 <main>
  bx lr
 8003006:	4770      	bx	lr
  ldr r3, =_sidata
 8003008:	0800b7cc 	.word	0x0800b7cc
  ldr r0, =_sdata
 800300c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003010:	20000280 	.word	0x20000280
  ldr r2, =_sbss
 8003014:	20000280 	.word	0x20000280
  ldr r3, = _ebss
 8003018:	2000076c 	.word	0x2000076c

0800301c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC1_2_IRQHandler>
	...

08003020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_Init+0x28>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <HAL_Init+0x28>)
 800302a:	f043 0310 	orr.w	r3, r3, #16
 800302e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003030:	2003      	movs	r0, #3
 8003032:	f000 f967 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003036:	2000      	movs	r0, #0
 8003038:	f000 f808 	bl	800304c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800303c:	f7ff fdf6 	bl	8002c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40022000 	.word	0x40022000

0800304c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_InitTick+0x54>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_InitTick+0x58>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003062:	fbb3 f3f1 	udiv	r3, r3, r1
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f98d 	bl	800338a <HAL_SYSTICK_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e00e      	b.n	8003098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b0f      	cmp	r3, #15
 800307e:	d80a      	bhi.n	8003096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003080:	2200      	movs	r2, #0
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	f000 f947 	bl	800331a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800308c:	4a06      	ldr	r2, [pc, #24]	; (80030a8 <HAL_InitTick+0x5c>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000014 	.word	0x20000014
 80030a4:	2000001c 	.word	0x2000001c
 80030a8:	20000018 	.word	0x20000018

080030ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_IncTick+0x1c>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_IncTick+0x20>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	4a03      	ldr	r2, [pc, #12]	; (80030cc <HAL_IncTick+0x20>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	2000001c 	.word	0x2000001c
 80030cc:	20000764 	.word	0x20000764

080030d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return uwTick;
 80030d4:	4b02      	ldr	r3, [pc, #8]	; (80030e0 <HAL_GetTick+0x10>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	20000764 	.word	0x20000764

080030e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d005      	beq.n	800310a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_Delay+0x40>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800310a:	bf00      	nop
 800310c:	f7ff ffe0 	bl	80030d0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d8f7      	bhi.n	800310c <HAL_Delay+0x28>
  {
  }
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	2000001c 	.word	0x2000001c

08003128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003144:	4013      	ands	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315a:	4a04      	ldr	r2, [pc, #16]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	60d3      	str	r3, [r2, #12]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <__NVIC_GetPriorityGrouping+0x18>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 0307 	and.w	r3, r3, #7
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	db0b      	blt.n	80031b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	4906      	ldr	r1, [pc, #24]	; (80031c0 <__NVIC_EnableIRQ+0x34>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2001      	movs	r0, #1
 80031ae:	fa00 f202 	lsl.w	r2, r0, r2
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	db10      	blt.n	80031f8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	4909      	ldr	r1, [pc, #36]	; (8003204 <__NVIC_DisableIRQ+0x40>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2001      	movs	r0, #1
 80031e6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ea:	3320      	adds	r3, #32
 80031ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80031f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	; (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	; (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff90 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff0b 	bl	8003128 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff20 	bl	8003170 <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff90 	bl	800325c <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5f 	bl	8003208 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff13 	bl	800318c <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff21 	bl	80031c4 <__NVIC_DisableIRQ>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff94 	bl	80032c0 <SysTick_Config>
 8003398:	4603      	mov	r3, r0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d005      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2204      	movs	r2, #4
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e051      	b.n	800346a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020e 	bic.w	r2, r2, #14
 80033d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <HAL_DMA_Abort_IT+0xd0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d029      	beq.n	8003444 <HAL_DMA_Abort_IT+0xa0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <HAL_DMA_Abort_IT+0xd4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d022      	beq.n	8003440 <HAL_DMA_Abort_IT+0x9c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <HAL_DMA_Abort_IT+0xd8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d01a      	beq.n	800343a <HAL_DMA_Abort_IT+0x96>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_DMA_Abort_IT+0xdc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d012      	beq.n	8003434 <HAL_DMA_Abort_IT+0x90>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <HAL_DMA_Abort_IT+0xe0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00a      	beq.n	800342e <HAL_DMA_Abort_IT+0x8a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_DMA_Abort_IT+0xe4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d102      	bne.n	8003428 <HAL_DMA_Abort_IT+0x84>
 8003422:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003426:	e00e      	b.n	8003446 <HAL_DMA_Abort_IT+0xa2>
 8003428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800342c:	e00b      	b.n	8003446 <HAL_DMA_Abort_IT+0xa2>
 800342e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003432:	e008      	b.n	8003446 <HAL_DMA_Abort_IT+0xa2>
 8003434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003438:	e005      	b.n	8003446 <HAL_DMA_Abort_IT+0xa2>
 800343a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800343e:	e002      	b.n	8003446 <HAL_DMA_Abort_IT+0xa2>
 8003440:	2310      	movs	r3, #16
 8003442:	e000      	b.n	8003446 <HAL_DMA_Abort_IT+0xa2>
 8003444:	2301      	movs	r3, #1
 8003446:	4a11      	ldr	r2, [pc, #68]	; (800348c <HAL_DMA_Abort_IT+0xe8>)
 8003448:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
    } 
  }
  return status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40020008 	.word	0x40020008
 8003478:	4002001c 	.word	0x4002001c
 800347c:	40020030 	.word	0x40020030
 8003480:	40020044 	.word	0x40020044
 8003484:	40020058 	.word	0x40020058
 8003488:	4002006c 	.word	0x4002006c
 800348c:	40020000 	.word	0x40020000

08003490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003490:	b480      	push	{r7}
 8003492:	b08b      	sub	sp, #44	; 0x2c
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a2:	e127      	b.n	80036f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034a4:	2201      	movs	r2, #1
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	429a      	cmp	r2, r3
 80034be:	f040 8116 	bne.w	80036ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d034      	beq.n	8003534 <HAL_GPIO_Init+0xa4>
 80034ca:	2b12      	cmp	r3, #18
 80034cc:	d80d      	bhi.n	80034ea <HAL_GPIO_Init+0x5a>
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d02b      	beq.n	800352a <HAL_GPIO_Init+0x9a>
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d804      	bhi.n	80034e0 <HAL_GPIO_Init+0x50>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d031      	beq.n	800353e <HAL_GPIO_Init+0xae>
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d01c      	beq.n	8003518 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034de:	e048      	b.n	8003572 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d043      	beq.n	800356c <HAL_GPIO_Init+0xdc>
 80034e4:	2b11      	cmp	r3, #17
 80034e6:	d01b      	beq.n	8003520 <HAL_GPIO_Init+0x90>
          break;
 80034e8:	e043      	b.n	8003572 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034ea:	4a89      	ldr	r2, [pc, #548]	; (8003710 <HAL_GPIO_Init+0x280>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d026      	beq.n	800353e <HAL_GPIO_Init+0xae>
 80034f0:	4a87      	ldr	r2, [pc, #540]	; (8003710 <HAL_GPIO_Init+0x280>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d806      	bhi.n	8003504 <HAL_GPIO_Init+0x74>
 80034f6:	4a87      	ldr	r2, [pc, #540]	; (8003714 <HAL_GPIO_Init+0x284>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d020      	beq.n	800353e <HAL_GPIO_Init+0xae>
 80034fc:	4a86      	ldr	r2, [pc, #536]	; (8003718 <HAL_GPIO_Init+0x288>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01d      	beq.n	800353e <HAL_GPIO_Init+0xae>
          break;
 8003502:	e036      	b.n	8003572 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003504:	4a85      	ldr	r2, [pc, #532]	; (800371c <HAL_GPIO_Init+0x28c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d019      	beq.n	800353e <HAL_GPIO_Init+0xae>
 800350a:	4a85      	ldr	r2, [pc, #532]	; (8003720 <HAL_GPIO_Init+0x290>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d016      	beq.n	800353e <HAL_GPIO_Init+0xae>
 8003510:	4a84      	ldr	r2, [pc, #528]	; (8003724 <HAL_GPIO_Init+0x294>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_GPIO_Init+0xae>
          break;
 8003516:	e02c      	b.n	8003572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	623b      	str	r3, [r7, #32]
          break;
 800351e:	e028      	b.n	8003572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	3304      	adds	r3, #4
 8003526:	623b      	str	r3, [r7, #32]
          break;
 8003528:	e023      	b.n	8003572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	3308      	adds	r3, #8
 8003530:	623b      	str	r3, [r7, #32]
          break;
 8003532:	e01e      	b.n	8003572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	330c      	adds	r3, #12
 800353a:	623b      	str	r3, [r7, #32]
          break;
 800353c:	e019      	b.n	8003572 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003546:	2304      	movs	r3, #4
 8003548:	623b      	str	r3, [r7, #32]
          break;
 800354a:	e012      	b.n	8003572 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003554:	2308      	movs	r3, #8
 8003556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	611a      	str	r2, [r3, #16]
          break;
 800355e:	e008      	b.n	8003572 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003560:	2308      	movs	r3, #8
 8003562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	615a      	str	r2, [r3, #20]
          break;
 800356a:	e002      	b.n	8003572 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
          break;
 8003570:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2bff      	cmp	r3, #255	; 0xff
 8003576:	d801      	bhi.n	800357c <HAL_GPIO_Init+0xec>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	e001      	b.n	8003580 <HAL_GPIO_Init+0xf0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2bff      	cmp	r3, #255	; 0xff
 8003586:	d802      	bhi.n	800358e <HAL_GPIO_Init+0xfe>
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x104>
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	3b08      	subs	r3, #8
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	210f      	movs	r1, #15
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	6a39      	ldr	r1, [r7, #32]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	431a      	orrs	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8096 	beq.w	80036ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035c2:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_GPIO_Init+0x298>)
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_GPIO_Init+0x298>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6193      	str	r3, [r2, #24]
 80035ce:	4b56      	ldr	r3, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x298>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035da:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_GPIO_Init+0x29c>)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3302      	adds	r3, #2
 80035e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	220f      	movs	r2, #15
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <HAL_GPIO_Init+0x2a0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x19e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_GPIO_Init+0x2a4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x19a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a49      	ldr	r2, [pc, #292]	; (8003738 <HAL_GPIO_Init+0x2a8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x196>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a48      	ldr	r2, [pc, #288]	; (800373c <HAL_GPIO_Init+0x2ac>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x192>
 800361e:	2303      	movs	r3, #3
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x1a0>
 8003622:	2304      	movs	r3, #4
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x1a0>
 8003626:	2302      	movs	r3, #2
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x1a0>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x1a0>
 800362e:	2300      	movs	r3, #0
 8003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003632:	f002 0203 	and.w	r2, r2, #3
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	4093      	lsls	r3, r2
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003640:	493a      	ldr	r1, [pc, #232]	; (800372c <HAL_GPIO_Init+0x29c>)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d006      	beq.n	8003668 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4938      	ldr	r1, [pc, #224]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
 8003666:	e006      	b.n	8003676 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	43db      	mvns	r3, r3
 8003670:	4933      	ldr	r1, [pc, #204]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 8003672:	4013      	ands	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	492e      	ldr	r1, [pc, #184]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
 800368e:	e006      	b.n	800369e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	43db      	mvns	r3, r3
 8003698:	4929      	ldr	r1, [pc, #164]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 800369a:	4013      	ands	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036aa:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	4924      	ldr	r1, [pc, #144]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
 80036b6:	e006      	b.n	80036c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	43db      	mvns	r3, r3
 80036c0:	491f      	ldr	r1, [pc, #124]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	491a      	ldr	r1, [pc, #104]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60cb      	str	r3, [r1, #12]
 80036de:	e006      	b.n	80036ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	4915      	ldr	r1, [pc, #84]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	3301      	adds	r3, #1
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f47f aed0 	bne.w	80034a4 <HAL_GPIO_Init+0x14>
  }
}
 8003704:	bf00      	nop
 8003706:	372c      	adds	r7, #44	; 0x2c
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	10210000 	.word	0x10210000
 8003714:	10110000 	.word	0x10110000
 8003718:	10120000 	.word	0x10120000
 800371c:	10310000 	.word	0x10310000
 8003720:	10320000 	.word	0x10320000
 8003724:	10220000 	.word	0x10220000
 8003728:	40021000 	.word	0x40021000
 800372c:	40010000 	.word	0x40010000
 8003730:	40010800 	.word	0x40010800
 8003734:	40010c00 	.word	0x40010c00
 8003738:	40011000 	.word	0x40011000
 800373c:	40011400 	.word	0x40011400
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003752:	e09a      	b.n	800388a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003754:	2201      	movs	r2, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 808d 	beq.w	8003884 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800376a:	4a4e      	ldr	r2, [pc, #312]	; (80038a4 <HAL_GPIO_DeInit+0x160>)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003776:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4013      	ands	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <HAL_GPIO_DeInit+0x164>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_GPIO_DeInit+0x78>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a45      	ldr	r2, [pc, #276]	; (80038ac <HAL_GPIO_DeInit+0x168>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00d      	beq.n	80037b8 <HAL_GPIO_DeInit+0x74>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a44      	ldr	r2, [pc, #272]	; (80038b0 <HAL_GPIO_DeInit+0x16c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <HAL_GPIO_DeInit+0x70>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a43      	ldr	r2, [pc, #268]	; (80038b4 <HAL_GPIO_DeInit+0x170>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_GPIO_DeInit+0x6c>
 80037ac:	2303      	movs	r3, #3
 80037ae:	e006      	b.n	80037be <HAL_GPIO_DeInit+0x7a>
 80037b0:	2304      	movs	r3, #4
 80037b2:	e004      	b.n	80037be <HAL_GPIO_DeInit+0x7a>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e002      	b.n	80037be <HAL_GPIO_DeInit+0x7a>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_GPIO_DeInit+0x7a>
 80037bc:	2300      	movs	r3, #0
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	f002 0203 	and.w	r2, r2, #3
 80037c4:	0092      	lsls	r2, r2, #2
 80037c6:	4093      	lsls	r3, r2
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d132      	bne.n	8003834 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80037de:	4a31      	ldr	r2, [pc, #196]	; (80038a4 <HAL_GPIO_DeInit+0x160>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	482d      	ldr	r0, [pc, #180]	; (80038a4 <HAL_GPIO_DeInit+0x160>)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	400a      	ands	r2, r1
 80037f6:	3302      	adds	r3, #2
 80037f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80037fc:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	43db      	mvns	r3, r3
 8003804:	492c      	ldr	r1, [pc, #176]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 8003806:	4013      	ands	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800380a:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	43db      	mvns	r3, r3
 8003812:	4929      	ldr	r1, [pc, #164]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 8003814:	4013      	ands	r3, r2
 8003816:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	43db      	mvns	r3, r3
 8003820:	4925      	ldr	r1, [pc, #148]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 8003822:	4013      	ands	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	43db      	mvns	r3, r3
 800382e:	4922      	ldr	r1, [pc, #136]	; (80038b8 <HAL_GPIO_DeInit+0x174>)
 8003830:	4013      	ands	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2bff      	cmp	r3, #255	; 0xff
 8003838:	d801      	bhi.n	800383e <HAL_GPIO_DeInit+0xfa>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	e001      	b.n	8003842 <HAL_GPIO_DeInit+0xfe>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2bff      	cmp	r3, #255	; 0xff
 8003848:	d802      	bhi.n	8003850 <HAL_GPIO_DeInit+0x10c>
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	e002      	b.n	8003856 <HAL_GPIO_DeInit+0x112>
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3b08      	subs	r3, #8
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	210f      	movs	r1, #15
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	2104      	movs	r1, #4
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	431a      	orrs	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	f47f af5e 	bne.w	8003754 <HAL_GPIO_DeInit+0x10>
  }
}
 8003898:	bf00      	nop
 800389a:	3724      	adds	r7, #36	; 0x24
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40010800 	.word	0x40010800
 80038ac:	40010c00 	.word	0x40010c00
 80038b0:	40011000 	.word	0x40011000
 80038b4:	40011400 	.word	0x40011400
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e001      	b.n	80038de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	807b      	strh	r3, [r7, #2]
 80038f6:	4613      	mov	r3, r2
 80038f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038fa:	787b      	ldrb	r3, [r7, #1]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003906:	e003      	b.n	8003910 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	041a      	lsls	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	611a      	str	r2, [r3, #16]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800392c:	887a      	ldrh	r2, [r7, #2]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4013      	ands	r3, r2
 8003932:	041a      	lsls	r2, r3, #16
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43d9      	mvns	r1, r3
 8003938:	887b      	ldrh	r3, [r7, #2]
 800393a:	400b      	ands	r3, r1
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f806 	bl	800397c <HAL_GPIO_EXTI_Callback>
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010400 	.word	0x40010400

0800397c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e11f      	b.n	8003be2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff f96a 	bl	8002c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f4:	f001 f810 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 80039f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4a7b      	ldr	r2, [pc, #492]	; (8003bec <HAL_I2C_Init+0x25c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d807      	bhi.n	8003a14 <HAL_I2C_Init+0x84>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a7a      	ldr	r2, [pc, #488]	; (8003bf0 <HAL_I2C_Init+0x260>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bf94      	ite	ls
 8003a0c:	2301      	movls	r3, #1
 8003a0e:	2300      	movhi	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e006      	b.n	8003a22 <HAL_I2C_Init+0x92>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a77      	ldr	r2, [pc, #476]	; (8003bf4 <HAL_I2C_Init+0x264>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	bf94      	ite	ls
 8003a1c:	2301      	movls	r3, #1
 8003a1e:	2300      	movhi	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0db      	b.n	8003be2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a72      	ldr	r2, [pc, #456]	; (8003bf8 <HAL_I2C_Init+0x268>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	0c9b      	lsrs	r3, r3, #18
 8003a34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a64      	ldr	r2, [pc, #400]	; (8003bec <HAL_I2C_Init+0x25c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d802      	bhi.n	8003a64 <HAL_I2C_Init+0xd4>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3301      	adds	r3, #1
 8003a62:	e009      	b.n	8003a78 <HAL_I2C_Init+0xe8>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <HAL_I2C_Init+0x26c>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	3301      	adds	r3, #1
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4956      	ldr	r1, [pc, #344]	; (8003bec <HAL_I2C_Init+0x25c>)
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d80d      	bhi.n	8003ab4 <HAL_I2C_Init+0x124>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e59      	subs	r1, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	bf38      	it	cc
 8003ab0:	2304      	movcc	r3, #4
 8003ab2:	e04f      	b.n	8003b54 <HAL_I2C_Init+0x1c4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <HAL_I2C_Init+0x150>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	440b      	add	r3, r1
 8003aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e012      	b.n	8003b06 <HAL_I2C_Init+0x176>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e58      	subs	r0, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	0099      	lsls	r1, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Init+0x17e>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e022      	b.n	8003b54 <HAL_I2C_Init+0x1c4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10e      	bne.n	8003b34 <HAL_I2C_Init+0x1a4>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e58      	subs	r0, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	440b      	add	r3, r1
 8003b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b32:	e00f      	b.n	8003b54 <HAL_I2C_Init+0x1c4>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e58      	subs	r0, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	0099      	lsls	r1, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	6809      	ldr	r1, [r1, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6911      	ldr	r1, [r2, #16]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	4311      	orrs	r1, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	000186a0 	.word	0x000186a0
 8003bf0:	001e847f 	.word	0x001e847f
 8003bf4:	003d08ff 	.word	0x003d08ff
 8003bf8:	431bde83 	.word	0x431bde83
 8003bfc:	10624dd3 	.word	0x10624dd3

08003c00 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e021      	b.n	8003c56 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2224      	movs	r2, #36	; 0x24
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff f870 	bl	8002d10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	817b      	strh	r3, [r7, #10]
 8003c70:	4613      	mov	r3, r2
 8003c72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff fa2c 	bl	80030d0 <HAL_GetTick>
 8003c78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	f040 80e0 	bne.w	8003e48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2319      	movs	r3, #25
 8003c8e:	2201      	movs	r2, #1
 8003c90:	4970      	ldr	r1, [pc, #448]	; (8003e54 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f964 	bl	8003f60 <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e0d3      	b.n	8003e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_I2C_Master_Transmit+0x50>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e0cc      	b.n	8003e4a <HAL_I2C_Master_Transmit+0x1ea>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d007      	beq.n	8003cd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	; 0x21
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	893a      	ldrh	r2, [r7, #8]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a50      	ldr	r2, [pc, #320]	; (8003e58 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d18:	8979      	ldrh	r1, [r7, #10]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6a3a      	ldr	r2, [r7, #32]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f89c 	bl	8003e5c <I2C_MasterRequestWrite>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e08d      	b.n	8003e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d44:	e066      	b.n	8003e14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	6a39      	ldr	r1, [r7, #32]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f9de 	bl	800410c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d107      	bne.n	8003d6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e06b      	b.n	8003e4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d11b      	bne.n	8003de8 <HAL_I2C_Master_Transmit+0x188>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d017      	beq.n	8003de8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	6a39      	ldr	r1, [r7, #32]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f9ce 	bl	800418e <I2C_WaitOnBTFFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d107      	bne.n	8003e10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e01a      	b.n	8003e4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d194      	bne.n	8003d46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	00100002 	.word	0x00100002
 8003e58:	ffff0000 	.word	0xffff0000

08003e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d006      	beq.n	8003e86 <I2C_MasterRequestWrite+0x2a>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d003      	beq.n	8003e86 <I2C_MasterRequestWrite+0x2a>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e84:	d108      	bne.n	8003e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e00b      	b.n	8003eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	2b12      	cmp	r3, #18
 8003e9e:	d107      	bne.n	8003eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f84f 	bl	8003f60 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d103      	bne.n	8003ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e035      	b.n	8003f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eec:	d108      	bne.n	8003f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eee:	897b      	ldrh	r3, [r7, #10]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003efc:	611a      	str	r2, [r3, #16]
 8003efe:	e01b      	b.n	8003f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f00:	897b      	ldrh	r3, [r7, #10]
 8003f02:	11db      	asrs	r3, r3, #7
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 0306 	and.w	r3, r3, #6
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f063 030f 	orn	r3, r3, #15
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <I2C_MasterRequestWrite+0xfc>)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f875 	bl	800400e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e010      	b.n	8003f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f2e:	897b      	ldrh	r3, [r7, #10]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4907      	ldr	r1, [pc, #28]	; (8003f5c <I2C_MasterRequestWrite+0x100>)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f865 	bl	800400e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	00010008 	.word	0x00010008
 8003f5c:	00010002 	.word	0x00010002

08003f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f70:	e025      	b.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d021      	beq.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7a:	f7ff f8a9 	bl	80030d0 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d116      	bne.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e023      	b.n	8004006 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d10d      	bne.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	e00c      	b.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	43da      	mvns	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	429a      	cmp	r2, r3
 8004002:	d0b6      	beq.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800401c:	e051      	b.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d123      	bne.n	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004046:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e046      	b.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d021      	beq.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7ff f827 	bl	80030d0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d116      	bne.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e020      	b.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10c      	bne.n	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	43da      	mvns	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e00b      	b.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d18d      	bne.n	800401e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004118:	e02d      	b.n	8004176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f878 	bl	8004210 <I2C_IsAcknowledgeFailed>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e02d      	b.n	8004186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d021      	beq.n	8004176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fe ffcd 	bl	80030d0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d116      	bne.n	8004176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e007      	b.n	8004186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b80      	cmp	r3, #128	; 0x80
 8004182:	d1ca      	bne.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800419a:	e02d      	b.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f837 	bl	8004210 <I2C_IsAcknowledgeFailed>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e02d      	b.n	8004208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d021      	beq.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b4:	f7fe ff8c 	bl	80030d0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d116      	bne.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d1ca      	bne.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d11b      	bne.n	8004260 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004230:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0204 	orr.w	r2, r3, #4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e26c      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8087 	beq.w	800439a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800428c:	4b92      	ldr	r3, [pc, #584]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b04      	cmp	r3, #4
 8004296:	d00c      	beq.n	80042b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004298:	4b8f      	ldr	r3, [pc, #572]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d112      	bne.n	80042ca <HAL_RCC_OscConfig+0x5e>
 80042a4:	4b8c      	ldr	r3, [pc, #560]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b0:	d10b      	bne.n	80042ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b2:	4b89      	ldr	r3, [pc, #548]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d06c      	beq.n	8004398 <HAL_RCC_OscConfig+0x12c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d168      	bne.n	8004398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e246      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x76>
 80042d4:	4b80      	ldr	r3, [pc, #512]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a7f      	ldr	r2, [pc, #508]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e02e      	b.n	8004340 <HAL_RCC_OscConfig+0xd4>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x98>
 80042ea:	4b7b      	ldr	r3, [pc, #492]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7a      	ldr	r2, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b78      	ldr	r3, [pc, #480]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e01d      	b.n	8004340 <HAL_RCC_OscConfig+0xd4>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0xbc>
 800430e:	4b72      	ldr	r3, [pc, #456]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a71      	ldr	r2, [pc, #452]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b6f      	ldr	r3, [pc, #444]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6e      	ldr	r2, [pc, #440]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0xd4>
 8004328:	4b6b      	ldr	r3, [pc, #428]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6a      	ldr	r2, [pc, #424]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800432e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a67      	ldr	r2, [pc, #412]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800433a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe fec2 	bl	80030d0 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fe febe 	bl	80030d0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1fa      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b5d      	ldr	r3, [pc, #372]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0xe4>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fe feae 	bl	80030d0 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fe feaa 	bl	80030d0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1e6      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x10c>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d063      	beq.n	800446e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a6:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043b2:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x18c>
 80043be:	4b46      	ldr	r3, [pc, #280]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x176>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1ba      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4939      	ldr	r1, [pc, #228]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	e03a      	b.n	800446e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_RCC_OscConfig+0x270>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fe fe63 	bl	80030d0 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fe fe5f 	bl	80030d0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e19b      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4927      	ldr	r1, [pc, #156]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	e015      	b.n	800446e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_RCC_OscConfig+0x270>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fe fe42 	bl	80030d0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004450:	f7fe fe3e 	bl	80030d0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e17a      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d03a      	beq.n	80044f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d019      	beq.n	80044b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004488:	f7fe fe22 	bl	80030d0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fe fe1e 	bl	80030d0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e15a      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044ae:	2001      	movs	r0, #1
 80044b0:	f000 fada 	bl	8004a68 <RCC_Delay>
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7fe fe08 	bl	80030d0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c2:	e00f      	b.n	80044e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fe fe04 	bl	80030d0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d908      	bls.n	80044e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e140      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	42420000 	.word	0x42420000
 80044e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e4:	4b9e      	ldr	r3, [pc, #632]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e9      	bne.n	80044c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a6 	beq.w	800464a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004502:	4b97      	ldr	r3, [pc, #604]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	4b94      	ldr	r3, [pc, #592]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	4a93      	ldr	r2, [pc, #588]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	61d3      	str	r3, [r2, #28]
 800451a:	4b91      	ldr	r3, [pc, #580]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	4b8e      	ldr	r3, [pc, #568]	; (8004764 <HAL_RCC_OscConfig+0x4f8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d118      	bne.n	8004568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004536:	4b8b      	ldr	r3, [pc, #556]	; (8004764 <HAL_RCC_OscConfig+0x4f8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a8a      	ldr	r2, [pc, #552]	; (8004764 <HAL_RCC_OscConfig+0x4f8>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004542:	f7fe fdc5 	bl	80030d0 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454a:	f7fe fdc1 	bl	80030d0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	; 0x64
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0fd      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	4b81      	ldr	r3, [pc, #516]	; (8004764 <HAL_RCC_OscConfig+0x4f8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x312>
 8004570:	4b7b      	ldr	r3, [pc, #492]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4a7a      	ldr	r2, [pc, #488]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6213      	str	r3, [r2, #32]
 800457c:	e02d      	b.n	80045da <HAL_RCC_OscConfig+0x36e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x334>
 8004586:	4b76      	ldr	r3, [pc, #472]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4a75      	ldr	r2, [pc, #468]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	6213      	str	r3, [r2, #32]
 8004592:	4b73      	ldr	r3, [pc, #460]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a72      	ldr	r2, [pc, #456]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	e01c      	b.n	80045da <HAL_RCC_OscConfig+0x36e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCC_OscConfig+0x356>
 80045a8:	4b6d      	ldr	r3, [pc, #436]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4a6c      	ldr	r2, [pc, #432]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	6213      	str	r3, [r2, #32]
 80045b4:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4a69      	ldr	r2, [pc, #420]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6213      	str	r3, [r2, #32]
 80045c0:	e00b      	b.n	80045da <HAL_RCC_OscConfig+0x36e>
 80045c2:	4b67      	ldr	r3, [pc, #412]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4a66      	ldr	r2, [pc, #408]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	6213      	str	r3, [r2, #32]
 80045ce:	4b64      	ldr	r3, [pc, #400]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a63      	ldr	r2, [pc, #396]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80045d4:	f023 0304 	bic.w	r3, r3, #4
 80045d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d015      	beq.n	800460e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e2:	f7fe fd75 	bl	80030d0 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fe fd71 	bl	80030d0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0ab      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	4b57      	ldr	r3, [pc, #348]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ee      	beq.n	80045ea <HAL_RCC_OscConfig+0x37e>
 800460c:	e014      	b.n	8004638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fe fd5f 	bl	80030d0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fe fd5b 	bl	80030d0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e095      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ee      	bne.n	8004616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463e:	4b48      	ldr	r3, [pc, #288]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	4a47      	ldr	r2, [pc, #284]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8081 	beq.w	8004756 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d061      	beq.n	8004724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d146      	bne.n	80046f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b3f      	ldr	r3, [pc, #252]	; (8004768 <HAL_RCC_OscConfig+0x4fc>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fe fd2f 	bl	80030d0 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004676:	f7fe fd2b 	bl	80030d0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e067      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d108      	bne.n	80046b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800469e:	4b30      	ldr	r3, [pc, #192]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	492d      	ldr	r1, [pc, #180]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b0:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a19      	ldr	r1, [r3, #32]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	430b      	orrs	r3, r1
 80046c2:	4927      	ldr	r1, [pc, #156]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <HAL_RCC_OscConfig+0x4fc>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fe fcff 	bl	80030d0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fe fcfb 	bl	80030d0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e037      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x46a>
 80046f4:	e02f      	b.n	8004756 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <HAL_RCC_OscConfig+0x4fc>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fe fce8 	bl	80030d0 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fe fce4 	bl	80030d0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e020      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x498>
 8004722:	e018      	b.n	8004756 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e013      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCC_OscConfig+0x4f4>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	429a      	cmp	r2, r3
 8004742:	d106      	bne.n	8004752 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	40007000 	.word	0x40007000
 8004768:	42420060 	.word	0x42420060

0800476c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0d0      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d910      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 0207 	bic.w	r2, r3, #7
 8004796:	4965      	ldr	r1, [pc, #404]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a52      	ldr	r2, [pc, #328]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d040      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d115      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e073      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06b      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b39      	ldr	r3, [pc, #228]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4936      	ldr	r1, [pc, #216]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7fe fc38 	bl	80030d0 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fe fc34 	bl	80030d0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e053      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b27      	ldr	r3, [pc, #156]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d210      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 0207 	bic.w	r2, r3, #7
 80048a2:	4922      	ldr	r1, [pc, #136]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f821 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048fe:	4601      	mov	r1, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	5cd3      	ldrb	r3, [r2, r3]
 800490e:	fa21 f303 	lsr.w	r3, r1, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1cc>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1d0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fb96 	bl	800304c <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40022000 	.word	0x40022000
 8004930:	40021000 	.word	0x40021000
 8004934:	0800b4cc 	.word	0x0800b4cc
 8004938:	20000014 	.word	0x20000014
 800493c:	20000018 	.word	0x20000018

08004940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b490      	push	{r4, r7}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004946:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004948:	1d3c      	adds	r4, r7, #4
 800494a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800494c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b04      	cmp	r3, #4
 8004978:	d002      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x40>
 800497a:	2b08      	cmp	r3, #8
 800497c:	d003      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x46>
 800497e:	e02d      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004980:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004982:	623b      	str	r3, [r7, #32]
      break;
 8004984:	e02d      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	0c9b      	lsrs	r3, r3, #18
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004992:	4413      	add	r3, r2
 8004994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004998:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	0c5b      	lsrs	r3, r3, #17
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049b2:	4413      	add	r3, r2
 80049b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4a0f      	ldr	r2, [pc, #60]	; (80049fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80049be:	fb02 f203 	mul.w	r2, r2, r3
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	e004      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049d0:	fb02 f303 	mul.w	r3, r2, r3
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	623b      	str	r3, [r7, #32]
      break;
 80049da:	e002      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80049de:	623b      	str	r3, [r7, #32]
      break;
 80049e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e2:	6a3b      	ldr	r3, [r7, #32]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3728      	adds	r7, #40	; 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc90      	pop	{r4, r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	0800b3b8 	.word	0x0800b3b8
 80049f4:	0800b3c8 	.word	0x0800b3c8
 80049f8:	40021000 	.word	0x40021000
 80049fc:	007a1200 	.word	0x007a1200
 8004a00:	003d0900 	.word	0x003d0900

08004a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a08:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000014 	.word	0x20000014

08004a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a1c:	f7ff fff2 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a20:	4601      	mov	r1, r0
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4a03      	ldr	r2, [pc, #12]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	0800b4dc 	.word	0x0800b4dc

08004a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a44:	f7ff ffde 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	0adb      	lsrs	r3, r3, #11
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4a03      	ldr	r2, [pc, #12]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	0800b4dc 	.word	0x0800b4dc

08004a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <RCC_Delay+0x34>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <RCC_Delay+0x38>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	0a5b      	lsrs	r3, r3, #9
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a84:	bf00      	nop
  }
  while (Delay --);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1e5a      	subs	r2, r3, #1
 8004a8a:	60fa      	str	r2, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f9      	bne.n	8004a84 <RCC_Delay+0x1c>
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000014 	.word	0x20000014
 8004aa0:	10624dd3 	.word	0x10624dd3

08004aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e041      	b.n	8004b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fe f944 	bl	8002d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f000 f938 	bl	8004d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d001      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e03a      	b.n	8004bd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_TIM_Base_Start_IT+0x98>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00e      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x58>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d009      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x58>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x58>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d111      	bne.n	8004bc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d010      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	e007      	b.n	8004bd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800

08004be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_ConfigClockSource+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e0a6      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x166>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d067      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x120>
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d80b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x6c>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d073      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d802      	bhi.n	8004c4a <HAL_TIM_ConfigClockSource+0x62>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d06f      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c48:	e078      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d06c      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
 8004c4e:	2b30      	cmp	r3, #48	; 0x30
 8004c50:	d06a      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c52:	e073      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d00d      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x8c>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d804      	bhi.n	8004c66 <HAL_TIM_ConfigClockSource+0x7e>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d033      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0xe0>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d041      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c64:	e06a      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	d066      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x152>
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d017      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c72:	e063      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f000 f941 	bl	8004f0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
      break;
 8004ca0:	e04c      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f000 f92a 	bl	8004f0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc4:	609a      	str	r2, [r3, #8]
      break;
 8004cc6:	e039      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f000 f8a1 	bl	8004e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2150      	movs	r1, #80	; 0x50
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f8f8 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004ce6:	e029      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f000 f8bf 	bl	8004e78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2160      	movs	r1, #96	; 0x60
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f8e8 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004d06:	e019      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f000 f881 	bl	8004e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2140      	movs	r1, #64	; 0x40
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f8d8 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004d26:	e009      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 f8cf 	bl	8004ed6 <TIM_ITRx_SetConfig>
        break;
 8004d38:	e000      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <TIM_Base_SetConfig+0xb8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00b      	beq.n	8004d88 <TIM_Base_SetConfig+0x30>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d007      	beq.n	8004d88 <TIM_Base_SetConfig+0x30>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <TIM_Base_SetConfig+0xbc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0x30>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <TIM_Base_SetConfig+0xc0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d108      	bne.n	8004d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <TIM_Base_SetConfig+0xb8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_Base_SetConfig+0x62>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d007      	beq.n	8004dba <TIM_Base_SetConfig+0x62>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <TIM_Base_SetConfig+0xbc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_Base_SetConfig+0x62>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <TIM_Base_SetConfig+0xc0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a07      	ldr	r2, [pc, #28]	; (8004e10 <TIM_Base_SetConfig+0xb8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d103      	bne.n	8004e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	615a      	str	r2, [r3, #20]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800

08004e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 030a 	bic.w	r3, r3, #10
 8004e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f023 0210 	bic.w	r2, r3, #16
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	031b      	lsls	r3, r3, #12
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f043 0307 	orr.w	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr

08004f0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	021a      	lsls	r2, r3, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	609a      	str	r2, [r3, #8]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e046      	b.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d009      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a10      	ldr	r2, [pc, #64]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d10c      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800

08005004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e03f      	b.n	8005096 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fd fec6 	bl	8002dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	; 0x24
 8005034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fb39 	bl	80056c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800507c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b08a      	sub	sp, #40	; 0x28
 80050a2:	af02      	add	r7, sp, #8
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d17c      	bne.n	80051b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_UART_Transmit+0x2c>
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e075      	b.n	80051ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_UART_Transmit+0x3e>
 80050d8:	2302      	movs	r3, #2
 80050da:	e06e      	b.n	80051ba <HAL_UART_Transmit+0x11c>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2221      	movs	r2, #33	; 0x21
 80050ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80050f2:	f7fd ffed 	bl	80030d0 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d108      	bne.n	8005120 <HAL_UART_Transmit+0x82>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e003      	b.n	8005128 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005130:	e02a      	b.n	8005188 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2200      	movs	r2, #0
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f95c 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e036      	b.n	80051ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3302      	adds	r3, #2
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	e007      	b.n	800517a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3301      	adds	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1cf      	bne.n	8005132 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	2140      	movs	r1, #64	; 0x40
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f92c 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e006      	b.n	80051ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_UART_IRQHandler+0x52>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f9d5 	bl	80055be <UART_Receive_IT>
      return;
 8005214:	e0d1      	b.n	80053ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80b0 	beq.w	800537e <HAL_UART_IRQHandler+0x1ba>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_UART_IRQHandler+0x70>
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80a5 	beq.w	800537e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_UART_IRQHandler+0x90>
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	f043 0201 	orr.w	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_UART_IRQHandler+0xb0>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	f043 0202 	orr.w	r2, r3, #2
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_UART_IRQHandler+0xd0>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	f043 0204 	orr.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00f      	beq.n	80052be <HAL_UART_IRQHandler+0xfa>
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_UART_IRQHandler+0xee>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	f043 0208 	orr.w	r2, r3, #8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d078      	beq.n	80053b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_UART_IRQHandler+0x11c>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f96f 	bl	80055be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <HAL_UART_IRQHandler+0x144>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d031      	beq.n	800536c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f8c0 	bl	800548e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d023      	beq.n	8005364 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_UART_IRQHandler+0x1fc>)
 800533a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe f82f 	bl	80033a4 <HAL_DMA_Abort_IT>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d016      	beq.n	800537a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005356:	4610      	mov	r0, r2
 8005358:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535a:	e00e      	b.n	800537a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f843 	bl	80053e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005362:	e00a      	b.n	800537a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f83f 	bl	80053e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536a:	e006      	b.n	800537a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f83b 	bl	80053e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005378:	e01e      	b.n	80053b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537a:	bf00      	nop
    return;
 800537c:	e01c      	b.n	80053b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_UART_IRQHandler+0x1d6>
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f8ac 	bl	80054f0 <UART_Transmit_IT>
    return;
 8005398:	e00f      	b.n	80053ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_UART_IRQHandler+0x1f6>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8ed 	bl	800558e <UART_EndTransmit_IT>
    return;
 80053b4:	bf00      	nop
 80053b6:	e000      	b.n	80053ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80053b8:	bf00      	nop
  }
}
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	080054c9 	.word	0x080054c9

080053c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540a:	e02c      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d028      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x30>
 800541a:	f7fd fe59 	bl	80030d0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	429a      	cmp	r2, r3
 8005428:	d21d      	bcs.n	8005466 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005438:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e00f      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4013      	ands	r3, r2
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	429a      	cmp	r2, r3
 8005482:	d0c3      	beq.n	800540c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff80 	bl	80053e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b21      	cmp	r3, #33	; 0x21
 8005502:	d13e      	bne.n	8005582 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550c:	d114      	bne.n	8005538 <UART_Transmit_IT+0x48>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d110      	bne.n	8005538 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]
 8005536:	e008      	b.n	800554a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	1c59      	adds	r1, r3, #1
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6211      	str	r1, [r2, #32]
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29b      	uxth	r3, r3
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	84d1      	strh	r1, [r2, #38]	; 0x26
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10f      	bne.n	800557e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800556c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800557c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
  }
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ff08 	bl	80053c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b22      	cmp	r3, #34	; 0x22
 80055d0:	d170      	bne.n	80056b4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d117      	bne.n	800560c <UART_Receive_IT+0x4e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d113      	bne.n	800560c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	1c9a      	adds	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
 800560a:	e026      	b.n	800565a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561e:	d007      	beq.n	8005630 <UART_Receive_IT+0x72>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <UART_Receive_IT+0x80>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e008      	b.n	8005650 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29b      	uxth	r3, r3
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4619      	mov	r1, r3
 8005668:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800566a:	2b00      	cmp	r3, #0
 800566c:	d120      	bne.n	80056b0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0220 	bic.w	r2, r2, #32
 800567c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800568c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fe95 	bl	80053d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e002      	b.n	80056b6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
  }
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056fa:	f023 030c 	bic.w	r3, r3, #12
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	430b      	orrs	r3, r1
 8005706:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <UART_SetConfig+0x114>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d103      	bne.n	8005730 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005728:	f7ff f98a 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	e002      	b.n	8005736 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005730:	f7ff f972 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8005734:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009a      	lsls	r2, r3, #2
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <UART_SetConfig+0x118>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	0119      	lsls	r1, r3, #4
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009a      	lsls	r2, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	fbb2 f2f3 	udiv	r2, r2, r3
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <UART_SetConfig+0x118>)
 800576e:	fba3 0302 	umull	r0, r3, r3, r2
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2064      	movs	r0, #100	; 0x64
 8005776:	fb00 f303 	mul.w	r3, r0, r3
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	3332      	adds	r3, #50	; 0x32
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <UART_SetConfig+0x118>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578c:	4419      	add	r1, r3
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009a      	lsls	r2, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <UART_SetConfig+0x118>)
 80057a6:	fba3 0302 	umull	r0, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2064      	movs	r0, #100	; 0x64
 80057ae:	fb00 f303 	mul.w	r3, r0, r3
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	3332      	adds	r3, #50	; 0x32
 80057b8:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <UART_SetConfig+0x118>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	440a      	add	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40013800 	.word	0x40013800
 80057d8:	51eb851f 	.word	0x51eb851f

080057dc <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef>:
#include "DspCommandReciver.h"
#include <string.h>
#include "LevelMapping.h"

DspCommandReciver::DspCommandReciver(GPIO_TypeDef* clockGPIO, uint16_t clockPin, GPIO_TypeDef* dataGPIO, uint16_t dataPin, UART_HandleTypeDef *uart)
 80057dc:	b5b0      	push	{r4, r5, r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80fb      	strh	r3, [r7, #6]
:_clockGPIO(clockGPIO), _clockPin(clockPin), _dataGPIO(dataGPIO), _dataPin(dataPin), _uart(uart) {
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	809a      	strh	r2, [r3, #4]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	609a      	str	r2, [r3, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8c3a      	ldrh	r2, [r7, #32]
 8005802:	819a      	strh	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005818:	675a      	str	r2, [r3, #116]	; 0x74
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a27      	ldr	r2, [pc, #156]	; (80058bc <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xe0>)
 800581e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8005822:	4615      	mov	r5, r2
 8005824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005828:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800582c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a23      	ldr	r2, [pc, #140]	; (80058c0 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xe4>)
 8005834:	3398      	adds	r3, #152	; 0x98
 8005836:	ca07      	ldmia	r2, {r0, r1, r2}
 8005838:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xe8>)
 8005840:	33a4      	adds	r3, #164	; 0xa4
 8005842:	4611      	mov	r1, r2
 8005844:	224b      	movs	r2, #75	; 0x4b
 8005846:	4618      	mov	r0, r3
 8005848:	f001 fef2 	bl	8007630 <memcpy>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <_ZN17DspCommandReciverC1EP12GPIO_TypeDeftS1_tP20__UART_HandleTypeDef+0xec>)
 8005850:	f103 04ef 	add.w	r4, r3, #239	; 0xef
 8005854:	4613      	mov	r3, r2
 8005856:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005858:	6020      	str	r0, [r4, #0]
 800585a:	6061      	str	r1, [r4, #4]
 800585c:	60a2      	str	r2, [r4, #8]
	clearData(buff);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	335a      	adds	r3, #90	; 0x5a
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f9c9 	bl	8005bfc <_ZN17DspCommandReciver9clearDataEPa>

	volumeRead = false;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	faderCh1Read = false;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	faderCh2Read = false;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	equalizerRead = false;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	volumeChng = false;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	faderCh1Chng = false;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	faderCh2Chng = false;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	equalizerChng = false;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	changed = false;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

	//	clearData(volume);
	//	clearData(faderCh1);
	//	clearData(faderCh2);
	//	clearData(equalizer);
}
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bdb0      	pop	{r4, r5, r7, pc}
 80058bc:	0800b3cc 	.word	0x0800b3cc
 80058c0:	0800b3ec 	.word	0x0800b3ec
 80058c4:	0800b3f8 	.word	0x0800b3f8
 80058c8:	0800b444 	.word	0x0800b444

080058cc <_ZN17DspCommandReciver11readPackageEi>:
		}
	}
}

//Вход с clock == 1
bool DspCommandReciver::readPackage(int iterator) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	//Если итератор больше номера последнего бита, то пакет битый. Выходим
	if(iterator > M_SIZE - 1) {
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b10      	cmp	r3, #16
 80058da:	dd01      	ble.n	80058e0 <_ZN17DspCommandReciver11readPackageEi+0x14>
		return false;
 80058dc:	2300      	movs	r3, #0
 80058de:	e050      	b.n	8005982 <_ZN17DspCommandReciver11readPackageEi+0xb6>
	}

	//считываем значение data в текущую позицию буфера
	buff[iterator] = HAL_GPIO_ReadPin(_dataGPIO, _dataPin);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	899b      	ldrh	r3, [r3, #12]
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7fd ffe6 	bl	80038bc <HAL_GPIO_ReadPin>
 80058f0:	4603      	mov	r3, r0
 80058f2:	b259      	sxtb	r1, r3
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	335a      	adds	r3, #90	; 0x5a
 80058fc:	460a      	mov	r2, r1
 80058fe:	701a      	strb	r2, [r3, #0]

	//ждем пока опустится clock
	while(HAL_GPIO_ReadPin(_clockGPIO, _clockPin)){}
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	889b      	ldrh	r3, [r3, #4]
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f7fd ffd6 	bl	80038bc <HAL_GPIO_ReadPin>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d000      	beq.n	8005922 <_ZN17DspCommandReciver11readPackageEi+0x56>
 8005920:	e7ee      	b.n	8005900 <_ZN17DspCommandReciver11readPackageEi+0x34>

	//когда clock опустился и data != 1, значит не конец пакета
	//если clock опустился и data == 1, значит конец пакета
	if(!HAL_GPIO_ReadPin(_dataGPIO, _dataPin)) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	899b      	ldrh	r3, [r3, #12]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7fd ffc5 	bl	80038bc <HAL_GPIO_ReadPin>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d019      	beq.n	8005976 <_ZN17DspCommandReciver11readPackageEi+0xaa>
		//ждем пока clock снова поднимется
		while(!HAL_GPIO_ReadPin(_clockGPIO, _clockPin));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	889b      	ldrh	r3, [r3, #4]
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fd ffb5 	bl	80038bc <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d000      	beq.n	8005964 <_ZN17DspCommandReciver11readPackageEi+0x98>
 8005962:	e7ee      	b.n	8005942 <_ZN17DspCommandReciver11readPackageEi+0x76>
		//когда clock поднялся - нужно читать след бит, уходим в след уровень рекурсии для чтения
		return readPackage(++iterator);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	3301      	adds	r3, #1
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ffad 	bl	80058cc <_ZN17DspCommandReciver11readPackageEi>
 8005972:	4603      	mov	r3, r0
 8005974:	e005      	b.n	8005982 <_ZN17DspCommandReciver11readPackageEi+0xb6>
	} else {
		//Если итератор равен 16 (номер последнего бита в пакете 0...16) то все впорядке иначе пакет битый

		//		char tmp[20];
		//		HAL_UART_Transmit(_uart, (uint8_t *)itoa(iterator,tmp,10), strlen(tmp), 10);
		if(iterator == M_SIZE - 1) {
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b10      	cmp	r3, #16
 800597a:	d101      	bne.n	8005980 <_ZN17DspCommandReciver11readPackageEi+0xb4>
			//			HAL_UART_Transmit(_uart, (uint8_t *)"PACK\n", 5, 10);
			return true;
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <_ZN17DspCommandReciver11readPackageEi+0xb6>
		} else {
			//			HAL_UART_Transmit(_uart, (uint8_t *)"NO PACK\n", 8, 10);
			return false;
 8005980:	2300      	movs	r3, #0

		//		return iterator == M_SIZE - 1 ? true : false;
		//		HAL_UART_Transmit(_uart, (uint8_t *)"PACK\n", 5, 10);
		//конец пакета
	}
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <_ZN17DspCommandReciver11readPackageEv>:

void DspCommandReciver::readPackage() {
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	//перед чтением пакета проверяем, что clock поднят
	if(!HAL_GPIO_ReadPin(_clockGPIO, _clockPin)) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	889b      	ldrh	r3, [r3, #4]
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7fd ff8c 	bl	80038bc <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf0c      	ite	eq
 80059aa:	2301      	moveq	r3, #1
 80059ac:	2300      	movne	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <_ZN17DspCommandReciver11readPackageEv+0x38>
		HAL_UART_Transmit(_uart, (uint8_t *)"[m-dsp] R-ERROR: clock not up\n", 30, 2);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80059b8:	2302      	movs	r3, #2
 80059ba:	221e      	movs	r2, #30
 80059bc:	490b      	ldr	r1, [pc, #44]	; (80059ec <_ZN17DspCommandReciver11readPackageEv+0x60>)
 80059be:	f7ff fb6e 	bl	800509e <HAL_UART_Transmit>
		return;
 80059c2:	e00f      	b.n	80059e4 <_ZN17DspCommandReciver11readPackageEv+0x58>
	}

	if(readPackage(0)) {
 80059c4:	2100      	movs	r1, #0
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff ff80 	bl	80058cc <_ZN17DspCommandReciver11readPackageEi>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <_ZN17DspCommandReciver11readPackageEv+0x4c>
		typeDetectAndSave();
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f80c 	bl	80059f0 <_ZN17DspCommandReciver17typeDetectAndSaveEv>
	}

	clearData(buff);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	335a      	adds	r3, #90	; 0x5a
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f90c 	bl	8005bfc <_ZN17DspCommandReciver9clearDataEPa>
}
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	0800b450 	.word	0x0800b450

080059f0 <_ZN17DspCommandReciver17typeDetectAndSaveEv>:


void DspCommandReciver::typeDetectAndSave() {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	if(buff[15] == 0 && buff[16] == 0) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d114      	bne.n	8005a2c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x3c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10f      	bne.n	8005a2c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x3c>
		volumeChng = tranferDataFromBuffer(volume, false);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	330e      	adds	r3, #14
 8005a10:	2200      	movs	r2, #0
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f8b4 	bl	8005b82 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		volumeRead = true;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	if(buff[15] == 1 && buff[16] == 0) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d12a      	bne.n	8005a8c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d125      	bne.n	8005a8c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
		if(buff[0] == 0) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f993 305a 	ldrsb.w	r3, [r3, #90]	; 0x5a
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d110      	bne.n	8005a6c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x7c>
			faderCh1Chng = tranferDataFromBuffer(faderCh1, false);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	331f      	adds	r3, #31
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f895 	bl	8005b82 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			faderCh1Read = true;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005a6a:	e00f      	b.n	8005a8c <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x9c>
		} else {
			faderCh2Chng = tranferDataFromBuffer(faderCh2, false);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3330      	adds	r3, #48	; 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f884 	bl	8005b82 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			faderCh2Read = true;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}

	}
	if(buff[15] == 0 && buff[16] == 1) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d171      	bne.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d16c      	bne.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
		equalizerChng = tranferDataFromBuffer(equalizer, true);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3341      	adds	r3, #65	; 0x41
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f86a 	bl	8005b82 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		equalizerRead = true;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

		if((volumeChng || faderCh1Chng || faderCh2Chng || (equalizerChng && eqChangedDetect))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10e      	bne.n	8005af2 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x102>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d048      	beq.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d043      	beq.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
				&& (volumeRead && faderCh1Read && faderCh2Read && equalizerRead)) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d03e      	beq.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d039      	beq.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d034      	beq.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d02f      	beq.n	8005b7a <_ZN17DspCommandReciver17typeDetectAndSaveEv+0x18a>
			volumeChng = faderCh1Chng = faderCh2Chng = equalizerChng = false;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			volumeRead = faderCh1Read = faderCh2Read = equalizerRead = false;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			changed = true;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			//			printToSerial(_uart);
		}
	}
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <_ZN17DspCommandReciver21tranferDataFromBufferEPab>:

bool DspCommandReciver::tranferDataFromBuffer(int8_t *target, bool eq) {
 8005b82:	b480      	push	{r7}
 8005b84:	b087      	sub	sp, #28
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
	bool targetChanged = false;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < M_SIZE; i++) {
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	dc28      	bgt.n	8005bf0 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x6e>
		if(target[i] != buff[i]) {
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f993 2000 	ldrsb.w	r2, [r3]
 8005ba8:	68f9      	ldr	r1, [r7, #12]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	440b      	add	r3, r1
 8005bae:	335a      	adds	r3, #90	; 0x5a
 8005bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d017      	beq.n	8005be8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
			target[i] = buff[i];
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	325a      	adds	r2, #90	; 0x5a
 8005bc6:	f992 2000 	ldrsb.w	r2, [r2]
 8005bca:	701a      	strb	r2, [r3, #0]
			if(eq || (i != 0 && i != 1 && i != 14)) {
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d108      	bne.n	8005be4 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x62>
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d004      	beq.n	8005be8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b0e      	cmp	r3, #14
 8005be2:	d001      	beq.n	8005be8 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x66>
				targetChanged = true;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < M_SIZE; i++) {
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	3301      	adds	r3, #1
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	e7d3      	b.n	8005b98 <_ZN17DspCommandReciver21tranferDataFromBufferEPab+0x16>
			}
		}
	}
	//	if(targetChanged) HAL_UART_Transmit(_uart, (uint8_t *)"Changed\n", 8, 10);
	return targetChanged;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <_ZN17DspCommandReciver9clearDataEPa>:
	for(uint8_t i = 0; i < sizeof(array); i++) {
		array[i] = '\0';
	}
}

void DspCommandReciver::clearData(int8_t *array) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	for(int8_t i = 0; i < M_SIZE; i++) {
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
 8005c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	dc0c      	bgt.n	8005c2c <_ZN17DspCommandReciver9clearDataEPa+0x30>
		array[i] = -2;
 8005c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4413      	add	r3, r2
 8005c1a:	22fe      	movs	r2, #254	; 0xfe
 8005c1c:	701a      	strb	r2, [r3, #0]
	for(int8_t i = 0; i < M_SIZE; i++) {
 8005c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	3301      	adds	r3, #1
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	73fb      	strb	r3, [r7, #15]
 8005c2a:	e7ee      	b.n	8005c0a <_ZN17DspCommandReciver9clearDataEPa+0xe>
	}
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr
	...

08005c38 <_ZN17DspCommandReciver8getLevelEhh>:

//функция получения уровня громкости. параметры тип пакета, канал 1 или 2, массив данных для разбора
int8_t DspCommandReciver::getLevel(uint8_t type, uint8_t channel) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
 8005c44:	4613      	mov	r3, r2
 8005c46:	70bb      	strb	r3, [r7, #2]
	//в этом массиве хранятся значения для анализа
	int8_t valuesArrayForCheck[] = {-1, -1, -1, -1};
 8005c48:	4b67      	ldr	r3, [pc, #412]	; (8005de8 <_ZN17DspCommandReciver8getLevelEhh+0x1b0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60bb      	str	r3, [r7, #8]
	uint8_t width;

	//складываем значения для анализа в зависимости от типа пакета
	//из каждого пакета бере данные в нужных позициях
	//кол-во проверяемых элементов до 4 в завистимости от типа пакета
	switch(type) {
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	f200 8093 	bhi.w	8005d7c <_ZN17DspCommandReciver8getLevelEhh+0x144>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <_ZN17DspCommandReciver8getLevelEhh+0x24>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005cb5 	.word	0x08005cb5
 8005c64:	08005ced 	.word	0x08005ced
 8005c68:	08005d45 	.word	0x08005d45
	//громкость атт1 канал 1
	case VOLUME_ATTV1:
		if(channel == CH1) {
 8005c6c:	78bb      	ldrb	r3, [r7, #2]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10c      	bne.n	8005c8c <_ZN17DspCommandReciver8getLevelEhh+0x54>
			valuesArrayForCheck[0] = volume[2];
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8005c78:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[3];
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8005c80:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = volume[4];
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8005c88:	72bb      	strb	r3, [r7, #10]
 8005c8a:	e00b      	b.n	8005ca4 <_ZN17DspCommandReciver8getLevelEhh+0x6c>
		} else {
			//громкость атт1 канал 2
			valuesArrayForCheck[0] = volume[7];
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8005c92:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[8];
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8005c9a:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = volume[9];
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8005ca2:	72bb      	strb	r3, [r7, #10]
		}

		//Так же установим значения размерности целевого массива
		height = VOLUME_ATTV1_H;
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	74fb      	strb	r3, [r7, #19]
		width = VOLUME_ATTV1_W;
 8005ca8:	2304      	movs	r3, #4
 8005caa:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)volumeATTV1;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3378      	adds	r3, #120	; 0x78
 8005cb0:	617b      	str	r3, [r7, #20]
		break;
 8005cb2:	e064      	b.n	8005d7e <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case VOLUME_ATTV2:
		if(channel == CH1) {
 8005cb4:	78bb      	ldrb	r3, [r7, #2]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d108      	bne.n	8005ccc <_ZN17DspCommandReciver8getLevelEhh+0x94>
			valuesArrayForCheck[0] = volume[5];
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8005cc0:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[6];
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8005cc8:	727b      	strb	r3, [r7, #9]
 8005cca:	e007      	b.n	8005cdc <_ZN17DspCommandReciver8getLevelEhh+0xa4>
		} else {
			valuesArrayForCheck[0] = volume[10];
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8005cd2:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = volume[11];
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8005cda:	727b      	strb	r3, [r7, #9]
		}

		height = VOLUME_ATTV2_H;
 8005cdc:	2304      	movs	r3, #4
 8005cde:	74fb      	strb	r3, [r7, #19]
		width = VOLUME_ATTV2_W;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)volumeATTV2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3398      	adds	r3, #152	; 0x98
 8005ce8:	617b      	str	r3, [r7, #20]
		break;
 8005cea:	e048      	b.n	8005d7e <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case FADER_FRONT_ATTV1:
		if(channel == CH1) {
 8005cec:	78bb      	ldrb	r3, [r7, #2]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d110      	bne.n	8005d14 <_ZN17DspCommandReciver8getLevelEhh+0xdc>
			valuesArrayForCheck[0] = faderCh1[2];
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8005cf8:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh1[3];
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005d00:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = faderCh1[4];
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f993 3023 	ldrsb.w	r3, [r3, #35]	; 0x23
 8005d08:	72bb      	strb	r3, [r7, #10]
			valuesArrayForCheck[3] = faderCh1[5];
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8005d10:	72fb      	strb	r3, [r7, #11]
 8005d12:	e00f      	b.n	8005d34 <_ZN17DspCommandReciver8getLevelEhh+0xfc>
		} else {
			valuesArrayForCheck[0] = faderCh2[2];
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8005d1a:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh2[3];
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f993 3033 	ldrsb.w	r3, [r3, #51]	; 0x33
 8005d22:	727b      	strb	r3, [r7, #9]
			valuesArrayForCheck[2] = faderCh2[4];
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8005d2a:	72bb      	strb	r3, [r7, #10]
			valuesArrayForCheck[3] = faderCh2[5];
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8005d32:	72fb      	strb	r3, [r7, #11]
		}

		height = FADER_ATTV1_H;
 8005d34:	230f      	movs	r3, #15
 8005d36:	74fb      	strb	r3, [r7, #19]
		width = FADER_ATTV1_W;
 8005d38:	2305      	movs	r3, #5
 8005d3a:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)faderATTV1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	33a4      	adds	r3, #164	; 0xa4
 8005d40:	617b      	str	r3, [r7, #20]
		break;
 8005d42:	e01c      	b.n	8005d7e <_ZN17DspCommandReciver8getLevelEhh+0x146>
	case FADER_FRONT_ATTV2:
		if(channel == CH1) {
 8005d44:	78bb      	ldrb	r3, [r7, #2]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d108      	bne.n	8005d5c <_ZN17DspCommandReciver8getLevelEhh+0x124>
			valuesArrayForCheck[0] = faderCh1[6];
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8005d50:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh1[7];
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8005d58:	727b      	strb	r3, [r7, #9]
 8005d5a:	e007      	b.n	8005d6c <_ZN17DspCommandReciver8getLevelEhh+0x134>
		} else {
			valuesArrayForCheck[0] = faderCh2[6];
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8005d62:	723b      	strb	r3, [r7, #8]
			valuesArrayForCheck[1] = faderCh2[7];
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f993 3037 	ldrsb.w	r3, [r3, #55]	; 0x37
 8005d6a:	727b      	strb	r3, [r7, #9]
		}

		height = FADER_ATTV2_H;
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	74fb      	strb	r3, [r7, #19]
		width = FADER_ATTV2_W;
 8005d70:	2303      	movs	r3, #3
 8005d72:	74bb      	strb	r3, [r7, #18]

		target = (int8_t*)faderATTV2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	33ef      	adds	r3, #239	; 0xef
 8005d78:	617b      	str	r3, [r7, #20]
		break;
 8005d7a:	e000      	b.n	8005d7e <_ZN17DspCommandReciver8getLevelEhh+0x146>
	default: break;
 8005d7c:	bf00      	nop
	}


	int8_t result = -1;
 8005d7e:	23ff      	movs	r3, #255	; 0xff
 8005d80:	747b      	strb	r3, [r7, #17]
	//Будем идти по строчно в целевом массиве на каждой итерации
	//отдавая данные в функцию сверки текщих данных с iтой строкой массива
	for(int i = 0; i < height; i++) {
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	7cfb      	ldrb	r3, [r7, #19]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	da26      	bge.n	8005ddc <_ZN17DspCommandReciver8getLevelEhh+0x1a4>
		if(checkElement(valuesArrayForCheck, &target[i * width], i, 0)) {
 8005d8e:	7cbb      	ldrb	r3, [r7, #18]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	441a      	add	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	b258      	sxtb	r0, r3
 8005da0:	f107 0108 	add.w	r1, r7, #8
 8005da4:	2300      	movs	r3, #0
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4603      	mov	r3, r0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f853 	bl	8005e56 <_ZN17DspCommandReciver12checkElementEPaS0_aa>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bf14      	ite	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	2300      	moveq	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <_ZN17DspCommandReciver8getLevelEhh+0x19c>
			result = target[i * width];
 8005dc0:	7cbb      	ldrb	r3, [r7, #18]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	fb02 f303 	mul.w	r3, r2, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	747b      	strb	r3, [r7, #17]
			break;
 8005dd2:	e003      	b.n	8005ddc <_ZN17DspCommandReciver8getLevelEhh+0x1a4>
	for(int i = 0; i < height; i++) {
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e7d4      	b.n	8005d86 <_ZN17DspCommandReciver8getLevelEhh+0x14e>
	//		char a[] = "res0 ";
	//		HAL_UART_Transmit(_uart, (uint8_t *)a, sizeof(a), 10);
	//
	//	}

	return result;
 8005ddc:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	0800b470 	.word	0x0800b470

08005dec <_ZN17DspCommandReciver16getAbsoluteLevelEh>:

int8_t DspCommandReciver::getAbsoluteLevel(uint8_t channel) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
	int8_t vol_attv1 = getLevel(VOLUME_ATTV1, channel);
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff1a 	bl	8005c38 <_ZN17DspCommandReciver8getLevelEhh>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]
	int8_t vol_attv2 = getLevel(VOLUME_ATTV2, channel);
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff ff12 	bl	8005c38 <_ZN17DspCommandReciver8getLevelEhh>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73bb      	strb	r3, [r7, #14]
	int8_t fader_attv1 = getLevel(FADER_FRONT_ATTV1, channel);
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ff0a 	bl	8005c38 <_ZN17DspCommandReciver8getLevelEhh>
 8005e24:	4603      	mov	r3, r0
 8005e26:	737b      	strb	r3, [r7, #13]
	int8_t fader_attv2 = getLevel(FADER_FRONT_ATTV2, channel);
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	2103      	movs	r1, #3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff ff02 	bl	8005c38 <_ZN17DspCommandReciver8getLevelEhh>
 8005e34:	4603      	mov	r3, r0
 8005e36:	733b      	strb	r3, [r7, #12]

	return vol_attv1 + vol_attv2 + fader_attv1 + fader_attv2;
 8005e38:	7bfa      	ldrb	r2, [r7, #15]
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	7b7b      	ldrb	r3, [r7, #13]
 8005e42:	4413      	add	r3, r2
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	7b3b      	ldrb	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	b25b      	sxtb	r3, r3

	//	int8_t absoluteLevel = vol_attv1 + vol_attv2 + fader_attv1 + fader_attv2;
	//	return getCorrectedLevel(absoluteLevel);
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_ZN17DspCommandReciver12checkElementEPaS0_aa>:

//функция сверки прешедших данных состокой массива
//Параметры: массив с данными для сверки, ссылка на строку из эталонного массива, индекс текущей обрабатываемой позиции в массивах
int8_t DspCommandReciver::checkElement(int8_t *valuesArrayForCheck, int8_t *targetArray, int8_t targetArrayWidth, int8_t wIdx) {
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af02      	add	r7, sp, #8
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	70fb      	strb	r3, [r7, #3]
	//если wIdx равен 4, то уже рекурсивно пройдены все элементы и стоит вернуть успех
	if(wIdx == 4) {
 8005e64:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d101      	bne.n	8005e70 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x1a>
		return 1;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e029      	b.n	8005ec4 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	}

	//если встретили -1 в массиве для сверки, значит его значения уже пройдены и совпали с эталном, возвращаем успех
	if(valuesArrayForCheck[wIdx] == -1) {
 8005e70:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	4413      	add	r3, r2
 8005e78:	f993 3000 	ldrsb.w	r3, [r3]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d101      	bne.n	8005e86 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x30>
		return 1;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e01e      	b.n	8005ec4 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	}

	//сравниваем текщий элемент из массива для сверки с эталоным (у эталоннного индекс + 1 тк первым идет значение громкости)
	if(valuesArrayForCheck[wIdx] == targetArray[wIdx + 1]) {
 8005e86:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f993 2000 	ldrsb.w	r2, [r3]
 8005e92:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8005e96:	3301      	adds	r3, #1
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d10e      	bne.n	8005ec2 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6c>
		//если совпали, то проваливаемся в рекурсию для сравнения следующей позиции в массиве
		return checkElement(valuesArrayForCheck, targetArray, targetArrayWidth, wIdx+1);
 8005ea4:	7e3b      	ldrb	r3, [r7, #24]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	b25b      	sxtb	r3, r3
 8005eac:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff ffcc 	bl	8005e56 <_ZN17DspCommandReciver12checkElementEPaS0_aa>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	e000      	b.n	8005ec4 <_ZN17DspCommandReciver12checkElementEPaS0_aa+0x6e>
	} else {
		return 0;
 8005ec2:	2300      	movs	r3, #0
	}
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <_ZN17DspCommandReciver9isChangedEv>:

bool DspCommandReciver::isChanged() {
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	return changed;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
	//	if(changed) {
	//		changed = false;
	//		return true;
	//	}
	//	return false;
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <_ZN17DspCommandReciver16resetChangedFlagEv>:

bool DspCommandReciver::resetChangedFlag() {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	changed = false;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
}
 8005ef4:	bf00      	nop
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <_ZN17DspCommandReciver14setChangedFlagEv>:

void DspCommandReciver::setChangedFlag() {
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	changed = true;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <_ZN23ExtDeviceCommandReciver5toIntEc>:
	inline void updateStop();
	inline void updateDiskNumber();
	inline void updateTrackNumber();
	inline void updatePlayFlag(bool play);

	inline int toInt(char ch) {
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
		return ch - 48;
 8005f26:	78fb      	ldrb	r3, [r7, #3]
 8005f28:	3b30      	subs	r3, #48	; 0x30
	}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <_ZN23ExtDeviceCommandReciver5toHexEc>:

	inline unsigned char toHex(char ch) {
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
		if (ch >= 'A') {
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d906      	bls.n	8005f54 <_ZN23ExtDeviceCommandReciver5toHexEc+0x20>
			return ch - 'A' + 0xA & 0x0F;
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	3b37      	subs	r3, #55	; 0x37
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e003      	b.n	8005f5c <_ZN23ExtDeviceCommandReciver5toHexEc+0x28>
		} else {
			return ch - '0' & 0x0F;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	b2db      	uxtb	r3, r3
		}
	}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr

08005f66 <_ZN23ExtDeviceCommandReciverC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefP20__UART_HandleTypeDefPFvvES7_S7_S7_>:
#include "ExtDeviceCommandReciver.h"
#include <string.h>
#include "ExtDeviceCommandReciverCommands.h"

ExtDeviceCommandReciver::ExtDeviceCommandReciver(
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
		timer(_timer),
		uart(_uart),
		playCallback(_playCallback),
		stopCallback(_stopCallback),
		nextCallback(_nextCallback),
		prevCallback(_prevCallback) {
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	809a      	strh	r2, [r3, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8b3a      	ldrh	r2, [r7, #24]
 8005f8c:	819a      	strh	r2, [r3, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a3a      	ldr	r2, [r7, #32]
 8005f92:	611a      	str	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	615a      	str	r2, [r3, #20]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	761a      	strb	r2, [r3, #24]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	765a      	strb	r2, [r3, #25]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	769a      	strb	r2, [r3, #26]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	76da      	strb	r2, [r3, #27]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbc:	621a      	str	r2, [r3, #32]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <_ZN23ExtDeviceCommandReciver11readCommandEv>:

//Вход с rxPin == 0
uint32_t ExtDeviceCommandReciver::readCommand() {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	return readCommand(0);
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f818 	bl	800601c <_ZN23ExtDeviceCommandReciver11readCommandEm>
 8005fec:	4603      	mov	r3, r0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>:

void ExtDeviceCommandReciver::convertToHex(uint64_t value, char *str){
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	e9c7 2300 	strd	r2, r3, [r7]
	sprintf(str, "%X", value);
 8006004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006008:	4903      	ldr	r1, [pc, #12]	; (8006018 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc+0x20>)
 800600a:	69b8      	ldr	r0, [r7, #24]
 800600c:	f002 f952 	bl	80082b4 <siprintf>
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	0800b474 	.word	0x0800b474

0800601c <_ZN23ExtDeviceCommandReciver11readCommandEm>:

//Вход с rxPin == 0
uint32_t ExtDeviceCommandReciver::readCommand(uint32_t result) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
	//ждем пока сигнал поднимается
	resetMicros();
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc65 	bl	80068f6 <_ZN23ExtDeviceCommandReciver11resetMicrosEv>
	while(!HAL_GPIO_ReadPin(rxGPIO, rxPin)) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	889b      	ldrh	r3, [r3, #4]
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fd fc40 	bl	80038bc <HAL_GPIO_ReadPin>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	bf0c      	ite	eq
 8006042:	2301      	moveq	r3, #1
 8006044:	2300      	movne	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d000      	beq.n	800604e <_ZN23ExtDeviceCommandReciver11readCommandEm+0x32>
 800604c:	e7ee      	b.n	800602c <_ZN23ExtDeviceCommandReciver11readCommandEm+0x10>
	}

	//проверяем за какое время поднялся
	uint16_t time =  getMicros() < 1000 ? 0 : 1;
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fc43 	bl	80068da <_ZN23ExtDeviceCommandReciver9getMicrosEv>
 8006054:	4603      	mov	r3, r0
 8006056:	461a      	mov	r2, r3
 8006058:	f240 33e7 	movw	r3, #999	; 0x3e7
 800605c:	429a      	cmp	r2, r3
 800605e:	bf8c      	ite	hi
 8006060:	2301      	movhi	r3, #1
 8006062:	2300      	movls	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	81bb      	strh	r3, [r7, #12]
	uint8_t currentBit = time;
 8006068:	89bb      	ldrh	r3, [r7, #12]
 800606a:	72fb      	strb	r3, [r7, #11]
	result = result << 1 | currentBit;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	005a      	lsls	r2, r3, #1
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	4313      	orrs	r3, r2
 8006074:	603b      	str	r3, [r7, #0]
	//ждем пока сигнал опустится или пройдет время больше ожидаемого времени между командами
	bool nonExitFromTimer = true;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
	resetMicros();
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fc3b 	bl	80068f6 <_ZN23ExtDeviceCommandReciver11resetMicrosEv>
	while(HAL_GPIO_ReadPin(rxGPIO, rxPin) && nonExitFromTimer) {
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	889b      	ldrh	r3, [r3, #4]
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f7fd fc16 	bl	80038bc <HAL_GPIO_ReadPin>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x84>
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x84>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x86>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00c      	beq.n	80060c0 <_ZN23ExtDeviceCommandReciver11readCommandEm+0xa4>
		nonExitFromTimer = getMicros() < 3100;
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fc17 	bl	80068da <_ZN23ExtDeviceCommandReciver9getMicrosEv>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	f640 431b 	movw	r3, #3099	; 0xc1b
 80060b4:	429a      	cmp	r2, r3
 80060b6:	bf94      	ite	ls
 80060b8:	2301      	movls	r3, #1
 80060ba:	2300      	movhi	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]
	while(HAL_GPIO_ReadPin(rxGPIO, rxPin) && nonExitFromTimer) {
 80060be:	e7df      	b.n	8006080 <_ZN23ExtDeviceCommandReciver11readCommandEm+0x64>
	}
	//если время меньше, то значит данные еще идут иначе данных больше нет
	if(nonExitFromTimer) {
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <_ZN23ExtDeviceCommandReciver11readCommandEm+0xb4>
		result = readCommand(result);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ffa7 	bl	800601c <_ZN23ExtDeviceCommandReciver11readCommandEm>
 80060ce:	6038      	str	r0, [r7, #0]
	}
	return result;
 80060d0:	683b      	ldr	r3, [r7, #0]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <_ZN23ExtDeviceCommandReciver9writeZeroEv>:

void ExtDeviceCommandReciver::writeZero()
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_SET);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6898      	ldr	r0, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	899b      	ldrh	r3, [r3, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	4619      	mov	r1, r3
 80060ee:	f7fd fbfc 	bl	80038ea <HAL_GPIO_WritePin>
	delayMicros(600);
 80060f2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc0b 	bl	8006912 <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_RESET);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6898      	ldr	r0, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	899b      	ldrh	r3, [r3, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	4619      	mov	r1, r3
 8006108:	f7fd fbef 	bl	80038ea <HAL_GPIO_WritePin>
	delayMicros(2400);
 800610c:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fbfe 	bl	8006912 <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <_ZN23ExtDeviceCommandReciver8writeOneEv>:

void ExtDeviceCommandReciver::writeOne()
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_SET);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6898      	ldr	r0, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	899b      	ldrh	r3, [r3, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	4619      	mov	r1, r3
 8006132:	f7fd fbda 	bl	80038ea <HAL_GPIO_WritePin>
	delayMicros(1800);
 8006136:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fbe9 	bl	8006912 <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	HAL_GPIO_WritePin(txGPIO, txPin, GPIO_PIN_RESET);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6898      	ldr	r0, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	899b      	ldrh	r3, [r3, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	4619      	mov	r1, r3
 800614c:	f7fd fbcd 	bl	80038ea <HAL_GPIO_WritePin>
	delayMicros(1200);
 8006150:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fbdc 	bl	8006912 <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>:

void ExtDeviceCommandReciver::writeCommand(char *command, int size) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t*)"[mbus] S: ", 10, 2);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6918      	ldr	r0, [r3, #16]
 8006174:	2302      	movs	r3, #2
 8006176:	220a      	movs	r2, #10
 8006178:	4921      	ldr	r1, [pc, #132]	; (8006200 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x9c>)
 800617a:	f7fe ff90 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)command, size, 2);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6918      	ldr	r0, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	b29a      	uxth	r2, r3
 8006186:	2302      	movs	r3, #2
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	f7fe ff88 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)"\n", 1, 2);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6918      	ldr	r0, [r3, #16]
 8006192:	2302      	movs	r3, #2
 8006194:	2201      	movs	r2, #1
 8006196:	491b      	ldr	r1, [pc, #108]	; (8006204 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0xa0>)
 8006198:	f7fe ff81 	bl	800509e <HAL_UART_Transmit>

	delayMicros(5000);
 800619c:	f241 3188 	movw	r1, #5000	; 0x1388
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fbb6 	bl	8006912 <_ZN23ExtDeviceCommandReciver11delayMicrosEt>
	uint8_t controlSum = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < size - 1; i++) {
 80061aa:	2300      	movs	r3, #0
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	da16      	bge.n	80061e6 <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x82>
		uint8_t output = toHex(command[i]);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	4619      	mov	r1, r3
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7ff feb6 	bl	8005f34 <_ZN23ExtDeviceCommandReciver5toHexEc>
 80061c8:	4603      	mov	r3, r0
 80061ca:	75fb      	strb	r3, [r7, #23]
		controlSum = controlSum ^ output;
 80061cc:	7ffa      	ldrb	r2, [r7, #31]
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	4053      	eors	r3, r2
 80061d2:	77fb      	strb	r3, [r7, #31]
		writeHexBitWise(output);
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	4619      	mov	r1, r3
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f815 	bl	8006208 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>
	for (int i = 0; i < size - 1; i++) {
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	3301      	adds	r3, #1
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e7e3      	b.n	80061ae <_ZN23ExtDeviceCommandReciver12writeCommandEPci+0x4a>
	}
	controlSum += 1;
 80061e6:	7ffb      	ldrb	r3, [r7, #31]
 80061e8:	3301      	adds	r3, #1
 80061ea:	77fb      	strb	r3, [r7, #31]
	writeHexBitWise(controlSum);
 80061ec:	7ffb      	ldrb	r3, [r7, #31]
 80061ee:	4619      	mov	r1, r3
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f809 	bl	8006208 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>
}
 80061f6:	bf00      	nop
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	0800b478 	.word	0x0800b478
 8006204:	0800b484 	.word	0x0800b484

08006208 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh>:

void ExtDeviceCommandReciver::writeHexBitWise(uint8_t command) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
	for (int8_t i = 3; i > -1; i--) {
 8006214:	2303      	movs	r3, #3
 8006216:	73fb      	strb	r3, [r7, #15]
 8006218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621c:	2b00      	cmp	r3, #0
 800621e:	db1c      	blt.n	800625a <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x52>
		uint8_t value = ((command & (1 << i) ) >> i);
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006226:	2101      	movs	r1, #1
 8006228:	fa01 f303 	lsl.w	r3, r1, r3
 800622c:	401a      	ands	r2, r3
 800622e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006232:	fa42 f303 	asr.w	r3, r2, r3
 8006236:	73bb      	strb	r3, [r7, #14]
		if (value == 1) {
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d103      	bne.n	8006246 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x3e>
			writeOne();
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff ff6d 	bl	800611e <_ZN23ExtDeviceCommandReciver8writeOneEv>
 8006244:	e002      	b.n	800624c <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x44>
		} else {
			writeZero();
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff ff47 	bl	80060da <_ZN23ExtDeviceCommandReciver9writeZeroEv>
	for (int8_t i = 3; i > -1; i--) {
 800624c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e7de      	b.n	8006218 <_ZN23ExtDeviceCommandReciver15writeHexBitWiseEh+0x10>
		}
	}
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <_ZN23ExtDeviceCommandReciver17commandProcessingEv>:

//разбор комад
uint32_t ExtDeviceCommandReciver::commandProcessing() {
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b08f      	sub	sp, #60	; 0x3c
 8006268:	af02      	add	r7, sp, #8
 800626a:	6078      	str	r0, [r7, #4]
	//перед чтением пакета проверяем, что clock поднят
	if(HAL_GPIO_ReadPin(rxGPIO, rxPin)) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	889b      	ldrh	r3, [r3, #4]
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f7fd fb20 	bl	80038bc <HAL_GPIO_ReadPin>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x3a>
		HAL_UART_Transmit(uart, (uint8_t *)"[mbus] R-ERROR: line not down\n", 30, 2);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6918      	ldr	r0, [r3, #16]
 8006290:	2302      	movs	r3, #2
 8006292:	221e      	movs	r2, #30
 8006294:	493d      	ldr	r1, [pc, #244]	; (800638c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x128>)
 8006296:	f7fe ff02 	bl	800509e <HAL_UART_Transmit>
		return 0;
 800629a:	2300      	movs	r3, #0
 800629c:	e071      	b.n	8006382 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>
	}

	uint32_t command = readCommand();
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fe9c 	bl	8005fdc <_ZN23ExtDeviceCommandReciver11readCommandEv>
 80062a4:	62f8      	str	r0, [r7, #44]	; 0x2c


	char tmp[20];
	convertToHex(command, tmp);
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	f04f 0400 	mov.w	r4, #0
 80062ac:	f107 0218 	add.w	r2, r7, #24
 80062b0:	9200      	str	r2, [sp, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4623      	mov	r3, r4
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fe9e 	bl	8005ff8 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>
	HAL_UART_Transmit(uart, (uint8_t*)"[mbus] R: ", 10, 2);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6918      	ldr	r0, [r3, #16]
 80062c0:	2302      	movs	r3, #2
 80062c2:	220a      	movs	r2, #10
 80062c4:	4932      	ldr	r1, [pc, #200]	; (8006390 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x12c>)
 80062c6:	f7fe feea 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)tmp, strlen(tmp), 2);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691c      	ldr	r4, [r3, #16]
 80062ce:	f107 0318 	add.w	r3, r7, #24
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7f9 ff3c 	bl	8000150 <strlen>
 80062d8:	4603      	mov	r3, r0
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f107 0118 	add.w	r1, r7, #24
 80062e0:	2302      	movs	r3, #2
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7fe fedb 	bl	800509e <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*)"\n", 1, 2);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6918      	ldr	r0, [r3, #16]
 80062ec:	2302      	movs	r3, #2
 80062ee:	2201      	movs	r2, #1
 80062f0:	4928      	ldr	r1, [pc, #160]	; (8006394 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x130>)
 80062f2:	f7fe fed4 	bl	800509e <HAL_UART_Transmit>


	switch (command) {
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	f240 528e 	movw	r2, #1422	; 0x58e
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xa6>
 8006300:	f240 529d 	movw	r2, #1437	; 0x59d
 8006304:	4293      	cmp	r3, r2
 8006306:	d005      	beq.n	8006314 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xb0>
 8006308:	e009      	b.n	800631e <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xba>
	case 0x58E : {
		pong();
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f88e 	bl	800642c <_ZN23ExtDeviceCommandReciver4pongEv>
		return command;
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	e036      	b.n	8006382 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>
	}
	case 0x59D : {
		wakeUp();
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f899 	bl	800644c <_ZN23ExtDeviceCommandReciver6wakeUpEv>
		return command;
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	e031      	b.n	8006382 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>

	char commandBuf[10];
	//	for (int i = 0; i < bufSize; i++) {
	//		commandBuf[i] = 'X';
	//	}
	convertToHex(command, commandBuf);
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	f04f 0400 	mov.w	r4, #0
 8006324:	f107 020c 	add.w	r2, r7, #12
 8006328:	9200      	str	r2, [sp, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	4623      	mov	r3, r4
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff fe62 	bl	8005ff8 <_ZN23ExtDeviceCommandReciver12convertToHexEyPc>

	//если мы пришли не по адресу 5 или не по команде Control
	if (commandBuf[0] != '5' || commandBuf[1] != '1') { //0x5130021(5)
 8006334:	7b3b      	ldrb	r3, [r7, #12]
 8006336:	2b35      	cmp	r3, #53	; 0x35
 8006338:	d102      	bne.n	8006340 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xdc>
 800633a:	7b7b      	ldrb	r3, [r7, #13]
 800633c:	2b31      	cmp	r3, #49	; 0x31
 800633e:	d001      	beq.n	8006344 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xe0>
		return command;
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	e01e      	b.n	8006382 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11e>
	}
	//анализ подкоманды
	switch (commandBuf[2]) {
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b31      	cmp	r3, #49	; 0x31
 8006348:	d002      	beq.n	8006350 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xec>
 800634a:	2b33      	cmp	r3, #51	; 0x33
 800634c:	d010      	beq.n	8006370 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x10c>
 800634e:	e017      	b.n	8006380 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11c>
	case '1' : { // управление воспроизведением
		if (command == 0x5110127) { //команда играй
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	4a11      	ldr	r2, [pc, #68]	; (8006398 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x134>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d103      	bne.n	8006360 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0xfc>
			play();
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f89b 	bl	8006494 <_ZN23ExtDeviceCommandReciver4playEv>
		} else if (command == 0x5114024) { // команда стоп (возможно переход на другое устройство)
			stop();
		}
		break;
 800635e:	e00e      	b.n	800637e <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11a>
		} else if (command == 0x5114024) { // команда стоп (возможно переход на другое устройство)
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x138>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d10a      	bne.n	800637e <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11a>
			stop();
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8b5 	bl	80064d8 <_ZN23ExtDeviceCommandReciver4stopEv>
		break;
 800636e:	e006      	b.n	800637e <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11a>
	}
	case '3' : { // переключение треков
		updateTrack(commandBuf);
 8006370:	f107 030c 	add.w	r3, r7, #12
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f8c4 	bl	8006504 <_ZN23ExtDeviceCommandReciver11updateTrackEPc>
		break;
 800637c:	e000      	b.n	8006380 <_ZN23ExtDeviceCommandReciver17commandProcessingEv+0x11c>
		break;
 800637e:	bf00      	nop
	}
	default:;
	}
	return command;
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006382:	4618      	mov	r0, r3
 8006384:	3734      	adds	r7, #52	; 0x34
 8006386:	46bd      	mov	sp, r7
 8006388:	bd90      	pop	{r4, r7, pc}
 800638a:	bf00      	nop
 800638c:	0800b488 	.word	0x0800b488
 8006390:	0800b4a8 	.word	0x0800b4a8
 8006394:	0800b484 	.word	0x0800b484
 8006398:	05110127 	.word	0x05110127
 800639c:	05114024 	.word	0x05114024

080063a0 <_ZN23ExtDeviceCommandReciver8sendTimeEhh>:

void ExtDeviceCommandReciver::sendTime(uint8_t _min, uint8_t _sec) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
 80063ac:	4613      	mov	r3, r2
 80063ae:	70bb      	strb	r3, [r7, #2]
	min = _min;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	769a      	strb	r2, [r3, #26]
	sec = _sec;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	78ba      	ldrb	r2, [r7, #2]
 80063ba:	76da      	strb	r2, [r3, #27]
	updateTrackTime();
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f98d 	bl	80066dc <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv>

	if(!playing) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7f1b      	ldrb	r3, [r3, #28]
 80063c6:	f083 0301 	eor.w	r3, r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10c      	bne.n	80063ea <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x4a>
		return;
	}

	HAL_UART_Transmit(uart, (uint8_t *)"[mbus] send time: ", 18, 2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6918      	ldr	r0, [r3, #16]
 80063d4:	2302      	movs	r3, #2
 80063d6:	2212      	movs	r2, #18
 80063d8:	4906      	ldr	r1, [pc, #24]	; (80063f4 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x54>)
 80063da:	f7fe fe60 	bl	800509e <HAL_UART_Transmit>
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 80063de:	2210      	movs	r2, #16
 80063e0:	4905      	ldr	r1, [pc, #20]	; (80063f8 <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x58>)
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff febe 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
 80063e8:	e000      	b.n	80063ec <_ZN23ExtDeviceCommandReciver8sendTimeEhh+0x4c>
		return;
 80063ea:	bf00      	nop
}
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	0800b4b4 	.word	0x0800b4b4
 80063f8:	20000048 	.word	0x20000048

080063fc <_ZN23ExtDeviceCommandReciver16resetPlayingFlagEv>:

void ExtDeviceCommandReciver::resetPlayingFlag() {
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	playing = false;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	771a      	strb	r2, [r3, #28]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr

08006414 <_ZN23ExtDeviceCommandReciver9isPlayingEv>:

bool ExtDeviceCommandReciver::isPlaying() {
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	return playing;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7f1b      	ldrb	r3, [r3, #28]
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
	...

0800642c <_ZN23ExtDeviceCommandReciver4pongEv>:

void ExtDeviceCommandReciver::pong() {
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	writeCommand(PONG, sizeof(PONG));
 8006434:	2203      	movs	r2, #3
 8006436:	4904      	ldr	r1, [pc, #16]	; (8006448 <_ZN23ExtDeviceCommandReciver4pongEv+0x1c>)
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fe93 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000020 	.word	0x20000020

0800644c <_ZN23ExtDeviceCommandReciver6wakeUpEv>:

void ExtDeviceCommandReciver::wakeUp() {
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	writeCommand(HARDWARE_STATUS, sizeof(HARDWARE_STATUS));
 8006454:	220c      	movs	r2, #12
 8006456:	490b      	ldr	r1, [pc, #44]	; (8006484 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x38>)
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fe83 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_COUNT, sizeof(DISC_COUNT));
 800645e:	2212      	movs	r2, #18
 8006460:	4909      	ldr	r1, [pc, #36]	; (8006488 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x3c>)
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fe7e 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_INFO_WITH_TRACK_WAKEUP, sizeof(DISC_INFO_WITH_TRACK_WAKEUP));
 8006468:	220d      	movs	r2, #13
 800646a:	4908      	ldr	r1, [pc, #32]	; (800648c <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x40>)
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fe79 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(STATUS_STOP, sizeof(STATUS_STOP));
 8006472:	2210      	movs	r2, #16
 8006474:	4906      	ldr	r1, [pc, #24]	; (8006490 <_ZN23ExtDeviceCommandReciver6wakeUpEv+0x44>)
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fe74 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	//	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000024 	.word	0x20000024
 8006488:	20000058 	.word	0x20000058
 800648c:	2000006c 	.word	0x2000006c
 8006490:	2000009c 	.word	0x2000009c

08006494 <_ZN23ExtDeviceCommandReciver4playEv>:

void ExtDeviceCommandReciver::play() {
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	writeCommand(STATUS_SEEKING, sizeof(STATUS_SEEKING));
 800649c:	2210      	movs	r2, #16
 800649e:	490b      	ldr	r1, [pc, #44]	; (80064cc <_ZN23ExtDeviceCommandReciver4playEv+0x38>)
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff fe5f 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(DISC_INFO_WITH_TRACK_WAKEUP, sizeof(DISC_INFO_WITH_TRACK_WAKEUP));
 80064a6:	220d      	movs	r2, #13
 80064a8:	4909      	ldr	r1, [pc, #36]	; (80064d0 <_ZN23ExtDeviceCommandReciver4playEv+0x3c>)
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fe5a 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 80064b0:	2210      	movs	r2, #16
 80064b2:	4908      	ldr	r1, [pc, #32]	; (80064d4 <_ZN23ExtDeviceCommandReciver4playEv+0x40>)
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fe55 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(true);
 80064ba:	2101      	movs	r1, #1
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8dd 	bl	800667c <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	2000008c 	.word	0x2000008c
 80064d0:	2000006c 	.word	0x2000006c
 80064d4:	20000048 	.word	0x20000048

080064d8 <_ZN23ExtDeviceCommandReciver4stopEv>:

void ExtDeviceCommandReciver::stop() {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	updateStop();
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f93f 	bl	8006764 <_ZN23ExtDeviceCommandReciver10updateStopEv>
	writeCommand(STATUS_STOP, sizeof(STATUS_STOP));
 80064e6:	2210      	movs	r2, #16
 80064e8:	4905      	ldr	r1, [pc, #20]	; (8006500 <_ZN23ExtDeviceCommandReciver4stopEv+0x28>)
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fe3a 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(false);
 80064f0:	2100      	movs	r1, #0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8c2 	bl	800667c <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	2000009c 	.word	0x2000009c

08006504 <_ZN23ExtDeviceCommandReciver11updateTrackEPc>:

void ExtDeviceCommandReciver::updateTrack(char *commandBuf) {
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
	int oldTrack = track;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7e1b      	ldrb	r3, [r3, #24]
 8006512:	61bb      	str	r3, [r7, #24]
	int oldDisk = disk;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	7e5b      	ldrb	r3, [r3, #25]
 8006518:	617b      	str	r3, [r7, #20]

	bool changed = false;
 800651a:	2300      	movs	r3, #0
 800651c:	77fb      	strb	r3, [r7, #31]
	bool next = false;
 800651e:	2300      	movs	r3, #0
 8006520:	77bb      	strb	r3, [r7, #30]

	//проверяем пришел ли новый номер трека
	int newTrack = toInt(commandBuf[4]) * 10 + toInt(commandBuf[5]);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	3304      	adds	r3, #4
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fcf5 	bl	8005f1a <_ZN23ExtDeviceCommandReciver5toIntEc>
 8006530:	4602      	mov	r2, r0
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	461c      	mov	r4, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	3305      	adds	r3, #5
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fce8 	bl	8005f1a <_ZN23ExtDeviceCommandReciver5toIntEc>
 800654a:	4603      	mov	r3, r0
 800654c:	4423      	add	r3, r4
 800654e:	613b      	str	r3, [r7, #16]
	if(newTrack != 0 && track != newTrack) {
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d027      	beq.n	80065a6 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7e1b      	ldrb	r3, [r3, #24]
 800655a:	461a      	mov	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4293      	cmp	r3, r2
 8006560:	d021      	beq.n	80065a6 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		track = newTrack;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	761a      	strb	r2, [r3, #24]
		updateTrackNumber();
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f946 	bl	80067fc <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv>
		changed = true;
 8006570:	2301      	movs	r3, #1
 8006572:	77fb      	strb	r3, [r7, #31]

		if(oldTrack == 99 && newTrack == 1) {
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b63      	cmp	r3, #99	; 0x63
 8006578:	d105      	bne.n	8006586 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x82>
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x82>
			next = true;
 8006580:	2301      	movs	r3, #1
 8006582:	77bb      	strb	r3, [r7, #30]
 8006584:	e00f      	b.n	80065a6 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		} else if(oldTrack == 1 && newTrack == 99) {
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d105      	bne.n	8006598 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x94>
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b63      	cmp	r3, #99	; 0x63
 8006590:	d102      	bne.n	8006598 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x94>
			next = false;
 8006592:	2300      	movs	r3, #0
 8006594:	77bb      	strb	r3, [r7, #30]
 8006596:	e006      	b.n	80065a6 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xa2>
		} else {
			next = newTrack > oldTrack ? true : false;
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	429a      	cmp	r2, r3
 800659e:	bfcc      	ite	gt
 80065a0:	2301      	movgt	r3, #1
 80065a2:	2300      	movle	r3, #0
 80065a4:	77bb      	strb	r3, [r7, #30]
		}
	}

	//проверяем пришел ли новый номер диска
	int newDisk = toInt(commandBuf[3]);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	3303      	adds	r3, #3
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fcb3 	bl	8005f1a <_ZN23ExtDeviceCommandReciver5toIntEc>
 80065b4:	60f8      	str	r0, [r7, #12]
	if(newDisk != 0 && disk != newDisk) {
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d03b      	beq.n	8006634 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x130>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7e5b      	ldrb	r3, [r3, #25]
 80065c0:	461a      	mov	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d035      	beq.n	8006634 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x130>
		disk = newDisk;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	765a      	strb	r2, [r3, #25]
		updateDiskNumber();
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8d9 	bl	8006788 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv>
		changed = true;
 80065d6:	2301      	movs	r3, #1
 80065d8:	77fb      	strb	r3, [r7, #31]

		if(oldDisk == 6 && newDisk == 1) {
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d105      	bne.n	80065ec <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xe8>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d102      	bne.n	80065ec <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xe8>
			next = true;
 80065e6:	2301      	movs	r3, #1
 80065e8:	77bb      	strb	r3, [r7, #30]
 80065ea:	e00f      	b.n	800660c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x108>
		} else if(oldDisk == 1 && newDisk == 6) {
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d105      	bne.n	80065fe <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xfa>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b06      	cmp	r3, #6
 80065f6:	d102      	bne.n	80065fe <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0xfa>
			next = false;
 80065f8:	2300      	movs	r3, #0
 80065fa:	77bb      	strb	r3, [r7, #30]
 80065fc:	e006      	b.n	800660c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x108>
		} else {
			next = newDisk > oldDisk ? true : false;
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	429a      	cmp	r2, r3
 8006604:	bfcc      	ite	gt
 8006606:	2301      	movgt	r3, #1
 8006608:	2300      	movle	r3, #0
 800660a:	77bb      	strb	r3, [r7, #30]
		}

		writeCommand(CHANGE_DISK1, sizeof(CHANGE_DISK1));
 800660c:	220c      	movs	r2, #12
 800660e:	4916      	ldr	r1, [pc, #88]	; (8006668 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x164>)
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fda7 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(CHANGE_DISK2, sizeof(CHANGE_DISK2));
 8006616:	220c      	movs	r2, #12
 8006618:	4914      	ldr	r1, [pc, #80]	; (800666c <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x168>)
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff fda2 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(STATUS_SEEKING, sizeof(STATUS_SEEKING));
 8006620:	2210      	movs	r2, #16
 8006622:	4913      	ldr	r1, [pc, #76]	; (8006670 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x16c>)
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fd9d 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
		writeCommand(DISC_INFO_WITH_TRACK, sizeof(DISC_INFO_WITH_TRACK));
 800662a:	220d      	movs	r2, #13
 800662c:	4911      	ldr	r1, [pc, #68]	; (8006674 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x170>)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fd98 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>
	}
	writeCommand(STATUS_PLAY, sizeof(STATUS_PLAY));
 8006634:	2210      	movs	r2, #16
 8006636:	4910      	ldr	r1, [pc, #64]	; (8006678 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x174>)
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff fd93 	bl	8006164 <_ZN23ExtDeviceCommandReciver12writeCommandEPci>

	updatePlayFlag(true);
 800663e:	2101      	movs	r1, #1
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f81b 	bl	800667c <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>

	if(changed) {
 8006646:	7ffb      	ldrb	r3, [r7, #31]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d009      	beq.n	8006660 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x15c>
		if(next) {
 800664c:	7fbb      	ldrb	r3, [r7, #30]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x156>
			(*nextCallback)();
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	4798      	blx	r3
		} else {
			(*prevCallback)();
		}
	}
}
 8006658:	e002      	b.n	8006660 <_ZN23ExtDeviceCommandReciver11updateTrackEPc+0x15c>
			(*prevCallback)();
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	4798      	blx	r3
}
 8006660:	bf00      	nop
 8006662:	3724      	adds	r7, #36	; 0x24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd90      	pop	{r4, r7, pc}
 8006668:	20000030 	.word	0x20000030
 800666c:	2000003c 	.word	0x2000003c
 8006670:	2000008c 	.word	0x2000008c
 8006674:	2000007c 	.word	0x2000007c
 8006678:	20000048 	.word	0x20000048

0800667c <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb>:

inline void ExtDeviceCommandReciver::updatePlayFlag(bool play) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
	if(play && playing || !play && !playing) {
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x1a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	7f1b      	ldrb	r3, [r3, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11d      	bne.n	80066d2 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x56>
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f083 0301 	eor.w	r3, r3, #1
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d006      	beq.n	80066b0 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x34>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	7f1b      	ldrb	r3, [r3, #28]
 80066a6:	f083 0301 	eor.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d110      	bne.n	80066d2 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x56>
		return;
	}

	if(play) {
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d006      	beq.n	80066c4 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x48>
		playing = true;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	771a      	strb	r2, [r3, #28]
		(*playCallback)();
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	4798      	blx	r3
 80066c2:	e007      	b.n	80066d4 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x58>
	} else {
		playing = false;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	771a      	strb	r2, [r3, #28]
		(*stopCallback)();
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	4798      	blx	r3
 80066d0:	e000      	b.n	80066d4 <_ZN23ExtDeviceCommandReciver14updatePlayFlagEb+0x58>
		return;
 80066d2:	bf00      	nop
	}
}
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv>:

inline void ExtDeviceCommandReciver::updateTrackTime() {
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	STATUS_PLAY[MIN_POS_F] = min / 10 + '0';
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	7e9b      	ldrb	r3, [r3, #26]
 80066e8:	4a1c      	ldr	r2, [pc, #112]	; (800675c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	08db      	lsrs	r3, r3, #3
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	3330      	adds	r3, #48	; 0x30
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 80066f8:	71da      	strb	r2, [r3, #7]
	STATUS_PLAY[MIN_POS_S] = min % 10 + '0';
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7e9a      	ldrb	r2, [r3, #26]
 80066fe:	4b17      	ldr	r3, [pc, #92]	; (800675c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 8006700:	fba3 1302 	umull	r1, r3, r3, r2
 8006704:	08d9      	lsrs	r1, r3, #3
 8006706:	460b      	mov	r3, r1
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	440b      	add	r3, r1
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	b2db      	uxtb	r3, r3
 8006712:	3330      	adds	r3, #48	; 0x30
 8006714:	b2da      	uxtb	r2, r3
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 8006718:	721a      	strb	r2, [r3, #8]
	STATUS_PLAY[SEC_POS_F] = sec / 10 + '0';
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7edb      	ldrb	r3, [r3, #27]
 800671e:	4a0f      	ldr	r2, [pc, #60]	; (800675c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	08db      	lsrs	r3, r3, #3
 8006726:	b2db      	uxtb	r3, r3
 8006728:	3330      	adds	r3, #48	; 0x30
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 800672e:	725a      	strb	r2, [r3, #9]
	STATUS_PLAY[SEC_POS_S] = sec % 10 + '0';
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7eda      	ldrb	r2, [r3, #27]
 8006734:	4b09      	ldr	r3, [pc, #36]	; (800675c <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x80>)
 8006736:	fba3 1302 	umull	r1, r3, r3, r2
 800673a:	08d9      	lsrs	r1, r3, #3
 800673c:	460b      	mov	r3, r1
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	b2db      	uxtb	r3, r3
 8006748:	3330      	adds	r3, #48	; 0x30
 800674a:	b2da      	uxtb	r2, r3
 800674c:	4b04      	ldr	r3, [pc, #16]	; (8006760 <_ZN23ExtDeviceCommandReciver15updateTrackTimeEv+0x84>)
 800674e:	729a      	strb	r2, [r3, #10]
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	cccccccd 	.word	0xcccccccd
 8006760:	20000048 	.word	0x20000048

08006764 <_ZN23ExtDeviceCommandReciver10updateStopEv>:

inline void ExtDeviceCommandReciver::updateStop() {
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	STATUS_STOP[DISK_POS] = disk + '0';
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	7e5b      	ldrb	r3, [r3, #25]
 8006770:	3330      	adds	r3, #48	; 0x30
 8006772:	b2da      	uxtb	r2, r3
 8006774:	4b03      	ldr	r3, [pc, #12]	; (8006784 <_ZN23ExtDeviceCommandReciver10updateStopEv+0x20>)
 8006776:	719a      	strb	r2, [r3, #6]
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	2000009c 	.word	0x2000009c

08006788 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv>:

inline void ExtDeviceCommandReciver::updateDiskNumber() {
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	CHANGE_DISK2[3] = disk + '0';
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7e5b      	ldrb	r3, [r3, #25]
 8006794:	3330      	adds	r3, #48	; 0x30
 8006796:	b2da      	uxtb	r2, r3
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x5c>)
 800679a:	70da      	strb	r2, [r3, #3]
	STATUS_SEEKING[DISK_POS] = disk + '0';
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7e5b      	ldrb	r3, [r3, #25]
 80067a0:	3330      	adds	r3, #48	; 0x30
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x60>)
 80067a6:	719a      	strb	r2, [r3, #6]
	DISC_INFO_WITH_TRACK[2] = disk + '0';
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7e5b      	ldrb	r3, [r3, #25]
 80067ac:	3330      	adds	r3, #48	; 0x30
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x64>)
 80067b2:	709a      	strb	r2, [r3, #2]
	//	DISC_INFO[2] = disk + '0';
	STATUS_PLAY[DISK_POS] = disk + '0';
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7e5b      	ldrb	r3, [r3, #25]
 80067b8:	3330      	adds	r3, #48	; 0x30
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x68>)
 80067be:	719a      	strb	r2, [r3, #6]
	STATUS_STOP[DISK_POS] = disk + '0';
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7e5b      	ldrb	r3, [r3, #25]
 80067c4:	3330      	adds	r3, #48	; 0x30
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x6c>)
 80067ca:	719a      	strb	r2, [r3, #6]
	HARDWARE_STATUS[3] = disk + '0';
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7e5b      	ldrb	r3, [r3, #25]
 80067d0:	3330      	adds	r3, #48	; 0x30
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <_ZN23ExtDeviceCommandReciver16updateDiskNumberEv+0x70>)
 80067d6:	70da      	strb	r2, [r3, #3]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000003c 	.word	0x2000003c
 80067e8:	2000008c 	.word	0x2000008c
 80067ec:	2000007c 	.word	0x2000007c
 80067f0:	20000048 	.word	0x20000048
 80067f4:	2000009c 	.word	0x2000009c
 80067f8:	20000024 	.word	0x20000024

080067fc <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv>:

inline void ExtDeviceCommandReciver::updateTrackNumber() {
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	STATUS_SEEKING[TRACK_POS_F] = track / 10 + '0';
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7e1b      	ldrb	r3, [r3, #24]
 8006808:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	08db      	lsrs	r3, r3, #3
 8006810:	b2db      	uxtb	r3, r3
 8006812:	3330      	adds	r3, #48	; 0x30
 8006814:	b2da      	uxtb	r2, r3
 8006816:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb8>)
 8006818:	70da      	strb	r2, [r3, #3]
	STATUS_SEEKING[TRACK_POS_S] = track % 10 + '0';
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	7e1a      	ldrb	r2, [r3, #24]
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006820:	fba3 1302 	umull	r1, r3, r3, r2
 8006824:	08d9      	lsrs	r1, r3, #3
 8006826:	460b      	mov	r3, r1
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	b2db      	uxtb	r3, r3
 8006832:	3330      	adds	r3, #48	; 0x30
 8006834:	b2da      	uxtb	r2, r3
 8006836:	4b1f      	ldr	r3, [pc, #124]	; (80068b4 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb8>)
 8006838:	711a      	strb	r2, [r3, #4]
	STATUS_PLAY[TRACK_POS_F] = track / 10 + '0';
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7e1b      	ldrb	r3, [r3, #24]
 800683e:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	b2db      	uxtb	r3, r3
 8006848:	3330      	adds	r3, #48	; 0x30
 800684a:	b2da      	uxtb	r2, r3
 800684c:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xbc>)
 800684e:	70da      	strb	r2, [r3, #3]
	STATUS_PLAY[TRACK_POS_S] = track % 10 + '0';
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7e1a      	ldrb	r2, [r3, #24]
 8006854:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006856:	fba3 1302 	umull	r1, r3, r3, r2
 800685a:	08d9      	lsrs	r1, r3, #3
 800685c:	460b      	mov	r3, r1
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	b2db      	uxtb	r3, r3
 8006868:	3330      	adds	r3, #48	; 0x30
 800686a:	b2da      	uxtb	r2, r3
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xbc>)
 800686e:	711a      	strb	r2, [r3, #4]
	DISC_INFO_WITH_TRACK[3] = track / 10 + '0';
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7e1b      	ldrb	r3, [r3, #24]
 8006874:	4a0e      	ldr	r2, [pc, #56]	; (80068b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	08db      	lsrs	r3, r3, #3
 800687c:	b2db      	uxtb	r3, r3
 800687e:	3330      	adds	r3, #48	; 0x30
 8006880:	b2da      	uxtb	r2, r3
 8006882:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xc0>)
 8006884:	70da      	strb	r2, [r3, #3]
	DISC_INFO_WITH_TRACK[4] = track % 10 + '0';
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7e1a      	ldrb	r2, [r3, #24]
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xb4>)
 800688c:	fba3 1302 	umull	r1, r3, r3, r2
 8006890:	08d9      	lsrs	r1, r3, #3
 8006892:	460b      	mov	r3, r1
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	b2db      	uxtb	r3, r3
 800689e:	3330      	adds	r3, #48	; 0x30
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	4b06      	ldr	r3, [pc, #24]	; (80068bc <_ZN23ExtDeviceCommandReciver17updateTrackNumberEv+0xc0>)
 80068a4:	711a      	strb	r2, [r3, #4]
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr
 80068b0:	cccccccd 	.word	0xcccccccd
 80068b4:	2000008c 	.word	0x2000008c
 80068b8:	20000048 	.word	0x20000048
 80068bc:	2000007c 	.word	0x2000007c

080068c0 <_ZN23ExtDeviceCommandReciver10startTimerEv>:




//TIMER FUNC
void ExtDeviceCommandReciver::startTimer() {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(timer); // запуск таймера
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe f939 	bl	8004b44 <HAL_TIM_Base_Start_IT>
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <_ZN23ExtDeviceCommandReciver9getMicrosEv>:

uint16_t ExtDeviceCommandReciver::getMicros() {
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(timer);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	b29b      	uxth	r3, r3
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <_ZN23ExtDeviceCommandReciver11resetMicrosEv>:

void ExtDeviceCommandReciver::resetMicros()
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(timer, 0 );  // устанавливаем значение счетчика на 0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2200      	movs	r2, #0
 8006906:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr

08006912 <_ZN23ExtDeviceCommandReciver11delayMicrosEt>:

void ExtDeviceCommandReciver::delayMicros(uint16_t us)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(timer,0);  // set the counter value a 0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < us);  // wait for the counter to reach the us input in the parameter
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006930:	887b      	ldrh	r3, [r7, #2]
 8006932:	429a      	cmp	r2, r3
 8006934:	bf34      	ite	cc
 8006936:	2301      	movcc	r3, #1
 8006938:	2300      	movcs	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d000      	beq.n	8006942 <_ZN23ExtDeviceCommandReciver11delayMicrosEt+0x30>
 8006940:	e7f2      	b.n	8006928 <_ZN23ExtDeviceCommandReciver11delayMicrosEt+0x16>
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr

0800694c <_ZN6SerialC1EP20__UART_HandleTypeDef>:
#include "Serial.h"
#include <string.h>
#include <stdio.h>

Serial::Serial(UART_HandleTypeDef *uart):_uart(uart) {}
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <_ZN6Serial5printEPc>:

void Serial::print(char *str) {
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(_uart, (uint8_t*)str, strlen(str), 10);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681c      	ldr	r4, [r3, #0]
 8006976:	6838      	ldr	r0, [r7, #0]
 8006978:	f7f9 fbea 	bl	8000150 <strlen>
 800697c:	4603      	mov	r3, r0
 800697e:	b29a      	uxth	r2, r3
 8006980:	230a      	movs	r3, #10
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	4620      	mov	r0, r4
 8006986:	f7fe fb8a 	bl	800509e <HAL_UART_Transmit>
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	bd90      	pop	{r4, r7, pc}

08006992 <_ZN6Serial7printlnEPc>:


void Serial::println(char *str) {
 8006992:	b5b0      	push	{r4, r5, r7, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
	char char_array[len + 1];
	for(int i = 0; i < len; i++) {
		char_array[i] = str[i];
	}
	char_array[len] = '\n';
	HAL_UART_Transmit(_uart, (uint8_t*)char_array, ++len, 10);
 800699c:	466b      	mov	r3, sp
 800699e:	461d      	mov	r5, r3
	int len = strlen(str);
 80069a0:	6838      	ldr	r0, [r7, #0]
 80069a2:	f7f9 fbd5 	bl	8000150 <strlen>
 80069a6:	4603      	mov	r3, r0
 80069a8:	613b      	str	r3, [r7, #16]
	char char_array[len + 1];
 80069aa:	6938      	ldr	r0, [r7, #16]
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	4603      	mov	r3, r0
 80069b0:	3301      	adds	r3, #1
 80069b2:	4619      	mov	r1, r3
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	f04f 0400 	mov.w	r4, #0
 80069c0:	00d4      	lsls	r4, r2, #3
 80069c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	4603      	mov	r3, r0
 80069ca:	3301      	adds	r3, #1
 80069cc:	4619      	mov	r1, r3
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	f04f 0400 	mov.w	r4, #0
 80069da:	00d4      	lsls	r4, r2, #3
 80069dc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80069e0:	00cb      	lsls	r3, r1, #3
 80069e2:	4603      	mov	r3, r0
 80069e4:	3301      	adds	r3, #1
 80069e6:	3307      	adds	r3, #7
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	ebad 0d03 	sub.w	sp, sp, r3
 80069f0:	466b      	mov	r3, sp
 80069f2:	3300      	adds	r3, #0
 80069f4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < len; i++) {
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	da0c      	bge.n	8006a1c <_ZN6Serial7printlnEPc+0x8a>
		char_array[i] = str[i];
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	4413      	add	r3, r2
 8006a08:	7819      	ldrb	r1, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4413      	add	r3, r2
 8006a10:	460a      	mov	r2, r1
 8006a12:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++) {
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	3301      	adds	r3, #1
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e7ee      	b.n	80069fa <_ZN6Serial7printlnEPc+0x68>
	char_array[len] = '\n';
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4413      	add	r3, r2
 8006a22:	220a      	movs	r2, #10
 8006a24:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(_uart, (uint8_t*)char_array, ++len, 10);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	230a      	movs	r3, #10
 8006a38:	f7fe fb31 	bl	800509e <HAL_UART_Transmit>
 8006a3c:	46ad      	mov	sp, r5
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a48 <_ZN6Serial5printEi>:
	sprintf(buffer, "%d", i);
	print(buffer);
	//	print(std::to_string(i));
}

void Serial::print(int i) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b092      	sub	sp, #72	; 0x48
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
	char buffer[64];
	sprintf(buffer, "%d", i);
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	4906      	ldr	r1, [pc, #24]	; (8006a74 <_ZN6Serial5printEi+0x2c>)
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fc2a 	bl	80082b4 <siprintf>
	print(buffer);
 8006a60:	f107 0308 	add.w	r3, r7, #8
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ff7e 	bl	8006968 <_ZN6Serial5printEPc>
	//	print(std::to_string(i));
}
 8006a6c:	bf00      	nop
 8006a6e:	3748      	adds	r7, #72	; 0x48
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	0800b4c8 	.word	0x0800b4c8

08006a78 <powf>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	b08d      	sub	sp, #52	; 0x34
 8006a7e:	4605      	mov	r5, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	f000 f959 	bl	8006d38 <__ieee754_powf>
 8006a86:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8006d34 <powf+0x2bc>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	f998 9000 	ldrsb.w	r9, [r8]
 8006a90:	4647      	mov	r7, r8
 8006a92:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006a96:	d060      	beq.n	8006b5a <powf+0xe2>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7fa fb38 	bl	8001110 <__aeabi_fcmpun>
 8006aa0:	4683      	mov	fp, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d159      	bne.n	8006b5a <powf+0xe2>
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f7fa fb31 	bl	8001110 <__aeabi_fcmpun>
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	b300      	cbz	r0, 8006af6 <powf+0x7e>
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f7fa faf9 	bl	80010ac <__aeabi_fcmpeq>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d04d      	beq.n	8006b5a <powf+0xe2>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9302      	str	r3, [sp, #8]
 8006ac2:	4b96      	ldr	r3, [pc, #600]	; (8006d1c <powf+0x2a4>)
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	9303      	str	r3, [sp, #12]
 8006ac8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006acc:	f7f9 fcac 	bl	8000428 <__aeabi_f2d>
 8006ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f7f9 fca7 	bl	8000428 <__aeabi_f2d>
 8006ada:	2200      	movs	r2, #0
 8006adc:	4b90      	ldr	r3, [pc, #576]	; (8006d20 <powf+0x2a8>)
 8006ade:	f1b9 0f02 	cmp.w	r9, #2
 8006ae2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006aea:	d031      	beq.n	8006b50 <powf+0xd8>
 8006aec:	a802      	add	r0, sp, #8
 8006aee:	f000 fcc2 	bl	8007476 <matherr>
 8006af2:	bb38      	cbnz	r0, 8006b44 <powf+0xcc>
 8006af4:	e05d      	b.n	8006bb2 <powf+0x13a>
 8006af6:	4628      	mov	r0, r5
 8006af8:	f7fa fad8 	bl	80010ac <__aeabi_fcmpeq>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d05d      	beq.n	8006bbc <powf+0x144>
 8006b00:	2100      	movs	r1, #0
 8006b02:	4620      	mov	r0, r4
 8006b04:	f7fa fad2 	bl	80010ac <__aeabi_fcmpeq>
 8006b08:	4607      	mov	r7, r0
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d029      	beq.n	8006b62 <powf+0xea>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	9302      	str	r3, [sp, #8]
 8006b12:	4b82      	ldr	r3, [pc, #520]	; (8006d1c <powf+0x2a4>)
 8006b14:	4628      	mov	r0, r5
 8006b16:	9303      	str	r3, [sp, #12]
 8006b18:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006b1c:	f7f9 fc84 	bl	8000428 <__aeabi_f2d>
 8006b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7f9 fc7f 	bl	8000428 <__aeabi_f2d>
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b36:	f1b9 0f00 	cmp.w	r9, #0
 8006b3a:	d0d7      	beq.n	8006aec <powf+0x74>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4b78      	ldr	r3, [pc, #480]	; (8006d20 <powf+0x2a8>)
 8006b40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b46:	b11b      	cbz	r3, 8006b50 <powf+0xd8>
 8006b48:	f000 fd48 	bl	80075dc <__errno>
 8006b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4e:	6003      	str	r3, [r0, #0]
 8006b50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b54:	f7f9 ffb8 	bl	8000ac8 <__aeabi_d2f>
 8006b58:	4606      	mov	r6, r0
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	b00d      	add	sp, #52	; 0x34
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fc8c 	bl	8007480 <finitef>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d0f6      	beq.n	8006b5a <powf+0xe2>
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f7fa faa6 	bl	80010c0 <__aeabi_fcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d0f0      	beq.n	8006b5a <powf+0xe2>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	9302      	str	r3, [sp, #8]
 8006b7c:	4b67      	ldr	r3, [pc, #412]	; (8006d1c <powf+0x2a4>)
 8006b7e:	4628      	mov	r0, r5
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	970a      	str	r7, [sp, #40]	; 0x28
 8006b84:	f7f9 fc50 	bl	8000428 <__aeabi_f2d>
 8006b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7f9 fc4b 	bl	8000428 <__aeabi_f2d>
 8006b92:	f998 3000 	ldrsb.w	r3, [r8]
 8006b96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b9a:	b923      	cbnz	r3, 8006ba6 <powf+0x12e>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ba4:	e7a2      	b.n	8006aec <powf+0x74>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	495e      	ldr	r1, [pc, #376]	; (8006d24 <powf+0x2ac>)
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bb0:	d19c      	bne.n	8006aec <powf+0x74>
 8006bb2:	f000 fd13 	bl	80075dc <__errno>
 8006bb6:	2321      	movs	r3, #33	; 0x21
 8006bb8:	6003      	str	r3, [r0, #0]
 8006bba:	e7c3      	b.n	8006b44 <powf+0xcc>
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 fc5f 	bl	8007480 <finitef>
 8006bc2:	4681      	mov	r9, r0
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d17b      	bne.n	8006cc0 <powf+0x248>
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f000 fc59 	bl	8007480 <finitef>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d076      	beq.n	8006cc0 <powf+0x248>
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fc54 	bl	8007480 <finitef>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d071      	beq.n	8006cc0 <powf+0x248>
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7f9 fc23 	bl	8000428 <__aeabi_f2d>
 8006be2:	4682      	mov	sl, r0
 8006be4:	4620      	mov	r0, r4
 8006be6:	468b      	mov	fp, r1
 8006be8:	f7f9 fc1e 	bl	8000428 <__aeabi_f2d>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8006bf8:	f7fa fa8a 	bl	8001110 <__aeabi_fcmpun>
 8006bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c00:	f998 8000 	ldrsb.w	r8, [r8]
 8006c04:	4945      	ldr	r1, [pc, #276]	; (8006d1c <powf+0x2a4>)
 8006c06:	b1b0      	cbz	r0, 8006c36 <powf+0x1be>
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c12:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006c16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c1a:	f1b8 0f00 	cmp.w	r8, #0
 8006c1e:	d0bd      	beq.n	8006b9c <powf+0x124>
 8006c20:	2100      	movs	r1, #0
 8006c22:	4608      	mov	r0, r1
 8006c24:	f7fa f962 	bl	8000eec <__aeabi_fdiv>
 8006c28:	f7f9 fbfe 	bl	8000428 <__aeabi_f2d>
 8006c2c:	f1b8 0f02 	cmp.w	r8, #2
 8006c30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c34:	e7bc      	b.n	8006bb0 <powf+0x138>
 8006c36:	2603      	movs	r6, #3
 8006c38:	900a      	str	r0, [sp, #40]	; 0x28
 8006c3a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006c44:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006c48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c4c:	f7fa f89a 	bl	8000d84 <__aeabi_fmul>
 8006c50:	4604      	mov	r4, r0
 8006c52:	f1b8 0f00 	cmp.w	r8, #0
 8006c56:	d11e      	bne.n	8006c96 <powf+0x21e>
 8006c58:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006c5c:	4b32      	ldr	r3, [pc, #200]	; (8006d28 <powf+0x2b0>)
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4628      	mov	r0, r5
 8006c62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c66:	f7fa fa2b 	bl	80010c0 <__aeabi_fcmplt>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d04e      	beq.n	8006d0c <powf+0x294>
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 fc12 	bl	8007498 <rintf>
 8006c74:	4621      	mov	r1, r4
 8006c76:	f7fa fa19 	bl	80010ac <__aeabi_fcmpeq>
 8006c7a:	b920      	cbnz	r0, 8006c86 <powf+0x20e>
 8006c7c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006c80:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <powf+0x2b4>)
 8006c82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c86:	f997 3000 	ldrsb.w	r3, [r7]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d13e      	bne.n	8006d0c <powf+0x294>
 8006c8e:	f000 fca5 	bl	80075dc <__errno>
 8006c92:	2322      	movs	r3, #34	; 0x22
 8006c94:	e790      	b.n	8006bb8 <powf+0x140>
 8006c96:	2200      	movs	r2, #0
 8006c98:	4b25      	ldr	r3, [pc, #148]	; (8006d30 <powf+0x2b8>)
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ca2:	f7fa fa0d 	bl	80010c0 <__aeabi_fcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d0ed      	beq.n	8006c86 <powf+0x20e>
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fbf4 	bl	8007498 <rintf>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	f7fa f9fb 	bl	80010ac <__aeabi_fcmpeq>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d1e5      	bne.n	8006c86 <powf+0x20e>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <powf+0x2ac>)
 8006cbe:	e7e0      	b.n	8006c82 <powf+0x20a>
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7fa f9f2 	bl	80010ac <__aeabi_fcmpeq>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f43f af46 	beq.w	8006b5a <powf+0xe2>
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f000 fbd6 	bl	8007480 <finitef>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f43f af40 	beq.w	8006b5a <powf+0xe2>
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fbd0 	bl	8007480 <finitef>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	f43f af3a 	beq.w	8006b5a <powf+0xe2>
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	9302      	str	r3, [sp, #8]
 8006cea:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <powf+0x2a4>)
 8006cec:	4628      	mov	r0, r5
 8006cee:	9303      	str	r3, [sp, #12]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf4:	f7f9 fb98 	bl	8000428 <__aeabi_f2d>
 8006cf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7f9 fb93 	bl	8000428 <__aeabi_f2d>
 8006d02:	2200      	movs	r2, #0
 8006d04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e7ba      	b.n	8006c82 <powf+0x20a>
 8006d0c:	a802      	add	r0, sp, #8
 8006d0e:	f000 fbb2 	bl	8007476 <matherr>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f47f af16 	bne.w	8006b44 <powf+0xcc>
 8006d18:	e7b9      	b.n	8006c8e <powf+0x216>
 8006d1a:	bf00      	nop
 8006d1c:	0800b4e4 	.word	0x0800b4e4
 8006d20:	3ff00000 	.word	0x3ff00000
 8006d24:	fff00000 	.word	0xfff00000
 8006d28:	47efffff 	.word	0x47efffff
 8006d2c:	c7efffff 	.word	0xc7efffff
 8006d30:	7ff00000 	.word	0x7ff00000
 8006d34:	200000ac 	.word	0x200000ac

08006d38 <__ieee754_powf>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	9101      	str	r1, [sp, #4]
 8006d40:	9c01      	ldr	r4, [sp, #4]
 8006d42:	4681      	mov	r9, r0
 8006d44:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 8006d48:	f000 8324 	beq.w	8007394 <__ieee754_powf+0x65c>
 8006d4c:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006d50:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006d54:	4680      	mov	r8, r0
 8006d56:	dc06      	bgt.n	8006d66 <__ieee754_powf+0x2e>
 8006d58:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006d5c:	dd09      	ble.n	8006d72 <__ieee754_powf+0x3a>
 8006d5e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006d62:	f000 8317 	beq.w	8007394 <__ieee754_powf+0x65c>
 8006d66:	4885      	ldr	r0, [pc, #532]	; (8006f7c <__ieee754_powf+0x244>)
 8006d68:	b007      	add	sp, #28
 8006d6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6e:	f000 bb8f 	b.w	8007490 <nanf>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	da1d      	bge.n	8006db2 <__ieee754_powf+0x7a>
 8006d76:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006d7a:	da2b      	bge.n	8006dd4 <__ieee754_powf+0x9c>
 8006d7c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006d80:	db30      	blt.n	8006de4 <__ieee754_powf+0xac>
 8006d82:	15fb      	asrs	r3, r7, #23
 8006d84:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006d88:	fa47 f503 	asr.w	r5, r7, r3
 8006d8c:	fa05 f303 	lsl.w	r3, r5, r3
 8006d90:	42bb      	cmp	r3, r7
 8006d92:	d127      	bne.n	8006de4 <__ieee754_powf+0xac>
 8006d94:	f005 0501 	and.w	r5, r5, #1
 8006d98:	f1c5 0502 	rsb	r5, r5, #2
 8006d9c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006da0:	d122      	bne.n	8006de8 <__ieee754_powf+0xb0>
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	4649      	mov	r1, r9
 8006da6:	da11      	bge.n	8006dcc <__ieee754_powf+0x94>
 8006da8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006dac:	f7fa f89e 	bl	8000eec <__aeabi_fdiv>
 8006db0:	e021      	b.n	8006df6 <__ieee754_powf+0xbe>
 8006db2:	2500      	movs	r5, #0
 8006db4:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006db8:	d1f0      	bne.n	8006d9c <__ieee754_powf+0x64>
 8006dba:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006dbe:	f000 82e9 	beq.w	8007394 <__ieee754_powf+0x65c>
 8006dc2:	dd09      	ble.n	8006dd8 <__ieee754_powf+0xa0>
 8006dc4:	2c00      	cmp	r4, #0
 8006dc6:	f280 82e8 	bge.w	800739a <__ieee754_powf+0x662>
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	b007      	add	sp, #28
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	2502      	movs	r5, #2
 8006dd6:	e7ed      	b.n	8006db4 <__ieee754_powf+0x7c>
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	daf6      	bge.n	8006dca <__ieee754_powf+0x92>
 8006ddc:	9b01      	ldr	r3, [sp, #4]
 8006dde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006de2:	e7f3      	b.n	8006dcc <__ieee754_powf+0x94>
 8006de4:	2500      	movs	r5, #0
 8006de6:	e7d9      	b.n	8006d9c <__ieee754_powf+0x64>
 8006de8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006dec:	d105      	bne.n	8006dfa <__ieee754_powf+0xc2>
 8006dee:	4649      	mov	r1, r9
 8006df0:	4608      	mov	r0, r1
 8006df2:	f7f9 ffc7 	bl	8000d84 <__aeabi_fmul>
 8006df6:	4601      	mov	r1, r0
 8006df8:	e7e8      	b.n	8006dcc <__ieee754_powf+0x94>
 8006dfa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006dfe:	4648      	mov	r0, r9
 8006e00:	d107      	bne.n	8006e12 <__ieee754_powf+0xda>
 8006e02:	f1b8 0f00 	cmp.w	r8, #0
 8006e06:	db04      	blt.n	8006e12 <__ieee754_powf+0xda>
 8006e08:	b007      	add	sp, #28
 8006e0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0e:	f000 badf 	b.w	80073d0 <__ieee754_sqrtf>
 8006e12:	f000 fb32 	bl	800747a <fabsf>
 8006e16:	4601      	mov	r1, r0
 8006e18:	b126      	cbz	r6, 8006e24 <__ieee754_powf+0xec>
 8006e1a:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006e1e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006e22:	d118      	bne.n	8006e56 <__ieee754_powf+0x11e>
 8006e24:	2c00      	cmp	r4, #0
 8006e26:	da04      	bge.n	8006e32 <__ieee754_powf+0xfa>
 8006e28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006e2c:	f7fa f85e 	bl	8000eec <__aeabi_fdiv>
 8006e30:	4601      	mov	r1, r0
 8006e32:	f1b8 0f00 	cmp.w	r8, #0
 8006e36:	dac9      	bge.n	8006dcc <__ieee754_powf+0x94>
 8006e38:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8006e3c:	ea50 0305 	orrs.w	r3, r0, r5
 8006e40:	d104      	bne.n	8006e4c <__ieee754_powf+0x114>
 8006e42:	4608      	mov	r0, r1
 8006e44:	f7f9 fe94 	bl	8000b70 <__aeabi_fsub>
 8006e48:	4601      	mov	r1, r0
 8006e4a:	e7af      	b.n	8006dac <__ieee754_powf+0x74>
 8006e4c:	2d01      	cmp	r5, #1
 8006e4e:	d1bd      	bne.n	8006dcc <__ieee754_powf+0x94>
 8006e50:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006e54:	e7ba      	b.n	8006dcc <__ieee754_powf+0x94>
 8006e56:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8006e5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e5e:	9303      	str	r3, [sp, #12]
 8006e60:	432b      	orrs	r3, r5
 8006e62:	d101      	bne.n	8006e68 <__ieee754_powf+0x130>
 8006e64:	4649      	mov	r1, r9
 8006e66:	e7ec      	b.n	8006e42 <__ieee754_powf+0x10a>
 8006e68:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006e6c:	f340 8098 	ble.w	8006fa0 <__ieee754_powf+0x268>
 8006e70:	4b43      	ldr	r3, [pc, #268]	; (8006f80 <__ieee754_powf+0x248>)
 8006e72:	429e      	cmp	r6, r3
 8006e74:	dc03      	bgt.n	8006e7e <__ieee754_powf+0x146>
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	daa7      	bge.n	8006dca <__ieee754_powf+0x92>
 8006e7a:	4942      	ldr	r1, [pc, #264]	; (8006f84 <__ieee754_powf+0x24c>)
 8006e7c:	e7b8      	b.n	8006df0 <__ieee754_powf+0xb8>
 8006e7e:	4b42      	ldr	r3, [pc, #264]	; (8006f88 <__ieee754_powf+0x250>)
 8006e80:	429e      	cmp	r6, r3
 8006e82:	dd02      	ble.n	8006e8a <__ieee754_powf+0x152>
 8006e84:	2c00      	cmp	r4, #0
 8006e86:	dcf8      	bgt.n	8006e7a <__ieee754_powf+0x142>
 8006e88:	e79f      	b.n	8006dca <__ieee754_powf+0x92>
 8006e8a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006e8e:	f7f9 fe6f 	bl	8000b70 <__aeabi_fsub>
 8006e92:	493e      	ldr	r1, [pc, #248]	; (8006f8c <__ieee754_powf+0x254>)
 8006e94:	4606      	mov	r6, r0
 8006e96:	f7f9 ff75 	bl	8000d84 <__aeabi_fmul>
 8006e9a:	493d      	ldr	r1, [pc, #244]	; (8006f90 <__ieee754_powf+0x258>)
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7f9 ff70 	bl	8000d84 <__aeabi_fmul>
 8006ea4:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006ea8:	4680      	mov	r8, r0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7f9 ff6a 	bl	8000d84 <__aeabi_fmul>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4838      	ldr	r0, [pc, #224]	; (8006f94 <__ieee754_powf+0x25c>)
 8006eb4:	f7f9 fe5c 	bl	8000b70 <__aeabi_fsub>
 8006eb8:	4631      	mov	r1, r6
 8006eba:	f7f9 ff63 	bl	8000d84 <__aeabi_fmul>
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006ec4:	f7f9 fe54 	bl	8000b70 <__aeabi_fsub>
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4681      	mov	r9, r0
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7f9 ff59 	bl	8000d84 <__aeabi_fmul>
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	f7f9 ff55 	bl	8000d84 <__aeabi_fmul>
 8006eda:	492f      	ldr	r1, [pc, #188]	; (8006f98 <__ieee754_powf+0x260>)
 8006edc:	f7f9 ff52 	bl	8000d84 <__aeabi_fmul>
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	f7f9 fe44 	bl	8000b70 <__aeabi_fsub>
 8006ee8:	4601      	mov	r1, r0
 8006eea:	4606      	mov	r6, r0
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7f9 fe41 	bl	8000b74 <__addsf3>
 8006ef2:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8006ef6:	f02a 0a0f 	bic.w	sl, sl, #15
 8006efa:	4639      	mov	r1, r7
 8006efc:	4650      	mov	r0, sl
 8006efe:	f7f9 fe37 	bl	8000b70 <__aeabi_fsub>
 8006f02:	4601      	mov	r1, r0
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7f9 fe33 	bl	8000b70 <__aeabi_fsub>
 8006f0a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	3d01      	subs	r5, #1
 8006f12:	f024 040f 	bic.w	r4, r4, #15
 8006f16:	432b      	orrs	r3, r5
 8006f18:	4606      	mov	r6, r0
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	9801      	ldr	r0, [sp, #4]
 8006f1e:	bf0c      	ite	eq
 8006f20:	4d1e      	ldreq	r5, [pc, #120]	; (8006f9c <__ieee754_powf+0x264>)
 8006f22:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8006f26:	f7f9 fe23 	bl	8000b70 <__aeabi_fsub>
 8006f2a:	4651      	mov	r1, sl
 8006f2c:	f7f9 ff2a 	bl	8000d84 <__aeabi_fmul>
 8006f30:	9901      	ldr	r1, [sp, #4]
 8006f32:	4607      	mov	r7, r0
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7f9 ff25 	bl	8000d84 <__aeabi_fmul>
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7f9 fe19 	bl	8000b74 <__addsf3>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4606      	mov	r6, r0
 8006f46:	4650      	mov	r0, sl
 8006f48:	f7f9 ff1c 	bl	8000d84 <__aeabi_fmul>
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4607      	mov	r7, r0
 8006f50:	4681      	mov	r9, r0
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7f9 fe0e 	bl	8000b74 <__addsf3>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006f62:	f340 81fb 	ble.w	800735c <__ieee754_powf+0x624>
 8006f66:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8006f6a:	f340 8149 	ble.w	8007200 <__ieee754_powf+0x4c8>
 8006f6e:	4905      	ldr	r1, [pc, #20]	; (8006f84 <__ieee754_powf+0x24c>)
 8006f70:	4628      	mov	r0, r5
 8006f72:	f7f9 ff07 	bl	8000d84 <__aeabi_fmul>
 8006f76:	4903      	ldr	r1, [pc, #12]	; (8006f84 <__ieee754_powf+0x24c>)
 8006f78:	e73b      	b.n	8006df2 <__ieee754_powf+0xba>
 8006f7a:	bf00      	nop
 8006f7c:	0800b6b1 	.word	0x0800b6b1
 8006f80:	3f7ffff7 	.word	0x3f7ffff7
 8006f84:	7149f2ca 	.word	0x7149f2ca
 8006f88:	3f800007 	.word	0x3f800007
 8006f8c:	3fb8aa00 	.word	0x3fb8aa00
 8006f90:	36eca570 	.word	0x36eca570
 8006f94:	3eaaaaab 	.word	0x3eaaaaab
 8006f98:	3fb8aa3b 	.word	0x3fb8aa3b
 8006f9c:	bf800000 	.word	0xbf800000
 8006fa0:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8006fa4:	f280 810a 	bge.w	80071bc <__ieee754_powf+0x484>
 8006fa8:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8006fac:	f7f9 feea 	bl	8000d84 <__aeabi_fmul>
 8006fb0:	f06f 0217 	mvn.w	r2, #23
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	15f3      	asrs	r3, r6, #23
 8006fb8:	3b7f      	subs	r3, #127	; 0x7f
 8006fba:	441a      	add	r2, r3
 8006fbc:	4b81      	ldr	r3, [pc, #516]	; (80071c4 <__ieee754_powf+0x48c>)
 8006fbe:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8006fc8:	dd06      	ble.n	8006fd8 <__ieee754_powf+0x2a0>
 8006fca:	4b7f      	ldr	r3, [pc, #508]	; (80071c8 <__ieee754_powf+0x490>)
 8006fcc:	4298      	cmp	r0, r3
 8006fce:	f340 80f7 	ble.w	80071c0 <__ieee754_powf+0x488>
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8006fd8:	2700      	movs	r7, #0
 8006fda:	4b7c      	ldr	r3, [pc, #496]	; (80071cc <__ieee754_powf+0x494>)
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8006fe2:	9205      	str	r2, [sp, #20]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	9302      	str	r3, [sp, #8]
 8006fe8:	f7f9 fdc2 	bl	8000b70 <__aeabi_fsub>
 8006fec:	4631      	mov	r1, r6
 8006fee:	4683      	mov	fp, r0
 8006ff0:	9802      	ldr	r0, [sp, #8]
 8006ff2:	f7f9 fdbf 	bl	8000b74 <__addsf3>
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006ffc:	f7f9 ff76 	bl	8000eec <__aeabi_fdiv>
 8007000:	4601      	mov	r1, r0
 8007002:	9004      	str	r0, [sp, #16]
 8007004:	4658      	mov	r0, fp
 8007006:	f7f9 febd 	bl	8000d84 <__aeabi_fmul>
 800700a:	46b2      	mov	sl, r6
 800700c:	1076      	asrs	r6, r6, #1
 800700e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8007012:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8007016:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800701a:	f028 080f 	bic.w	r8, r8, #15
 800701e:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 8007022:	4681      	mov	r9, r0
 8007024:	4631      	mov	r1, r6
 8007026:	4640      	mov	r0, r8
 8007028:	f7f9 feac 	bl	8000d84 <__aeabi_fmul>
 800702c:	4601      	mov	r1, r0
 800702e:	4658      	mov	r0, fp
 8007030:	f7f9 fd9e 	bl	8000b70 <__aeabi_fsub>
 8007034:	9902      	ldr	r1, [sp, #8]
 8007036:	4683      	mov	fp, r0
 8007038:	4630      	mov	r0, r6
 800703a:	f7f9 fd99 	bl	8000b70 <__aeabi_fsub>
 800703e:	4601      	mov	r1, r0
 8007040:	4650      	mov	r0, sl
 8007042:	f7f9 fd95 	bl	8000b70 <__aeabi_fsub>
 8007046:	4641      	mov	r1, r8
 8007048:	f7f9 fe9c 	bl	8000d84 <__aeabi_fmul>
 800704c:	4601      	mov	r1, r0
 800704e:	4658      	mov	r0, fp
 8007050:	f7f9 fd8e 	bl	8000b70 <__aeabi_fsub>
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	4619      	mov	r1, r3
 8007058:	f7f9 fe94 	bl	8000d84 <__aeabi_fmul>
 800705c:	4649      	mov	r1, r9
 800705e:	4683      	mov	fp, r0
 8007060:	4648      	mov	r0, r9
 8007062:	f7f9 fe8f 	bl	8000d84 <__aeabi_fmul>
 8007066:	4606      	mov	r6, r0
 8007068:	4959      	ldr	r1, [pc, #356]	; (80071d0 <__ieee754_powf+0x498>)
 800706a:	f7f9 fe8b 	bl	8000d84 <__aeabi_fmul>
 800706e:	4959      	ldr	r1, [pc, #356]	; (80071d4 <__ieee754_powf+0x49c>)
 8007070:	f7f9 fd80 	bl	8000b74 <__addsf3>
 8007074:	4631      	mov	r1, r6
 8007076:	f7f9 fe85 	bl	8000d84 <__aeabi_fmul>
 800707a:	4957      	ldr	r1, [pc, #348]	; (80071d8 <__ieee754_powf+0x4a0>)
 800707c:	f7f9 fd7a 	bl	8000b74 <__addsf3>
 8007080:	4631      	mov	r1, r6
 8007082:	f7f9 fe7f 	bl	8000d84 <__aeabi_fmul>
 8007086:	4955      	ldr	r1, [pc, #340]	; (80071dc <__ieee754_powf+0x4a4>)
 8007088:	f7f9 fd74 	bl	8000b74 <__addsf3>
 800708c:	4631      	mov	r1, r6
 800708e:	f7f9 fe79 	bl	8000d84 <__aeabi_fmul>
 8007092:	4953      	ldr	r1, [pc, #332]	; (80071e0 <__ieee754_powf+0x4a8>)
 8007094:	f7f9 fd6e 	bl	8000b74 <__addsf3>
 8007098:	4631      	mov	r1, r6
 800709a:	f7f9 fe73 	bl	8000d84 <__aeabi_fmul>
 800709e:	4951      	ldr	r1, [pc, #324]	; (80071e4 <__ieee754_powf+0x4ac>)
 80070a0:	f7f9 fd68 	bl	8000b74 <__addsf3>
 80070a4:	4631      	mov	r1, r6
 80070a6:	4682      	mov	sl, r0
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7f9 fe6b 	bl	8000d84 <__aeabi_fmul>
 80070ae:	4601      	mov	r1, r0
 80070b0:	4650      	mov	r0, sl
 80070b2:	f7f9 fe67 	bl	8000d84 <__aeabi_fmul>
 80070b6:	4606      	mov	r6, r0
 80070b8:	4649      	mov	r1, r9
 80070ba:	4640      	mov	r0, r8
 80070bc:	f7f9 fd5a 	bl	8000b74 <__addsf3>
 80070c0:	4659      	mov	r1, fp
 80070c2:	f7f9 fe5f 	bl	8000d84 <__aeabi_fmul>
 80070c6:	4631      	mov	r1, r6
 80070c8:	f7f9 fd54 	bl	8000b74 <__addsf3>
 80070cc:	4641      	mov	r1, r8
 80070ce:	4682      	mov	sl, r0
 80070d0:	4640      	mov	r0, r8
 80070d2:	f7f9 fe57 	bl	8000d84 <__aeabi_fmul>
 80070d6:	4944      	ldr	r1, [pc, #272]	; (80071e8 <__ieee754_powf+0x4b0>)
 80070d8:	9002      	str	r0, [sp, #8]
 80070da:	f7f9 fd4b 	bl	8000b74 <__addsf3>
 80070de:	4651      	mov	r1, sl
 80070e0:	f7f9 fd48 	bl	8000b74 <__addsf3>
 80070e4:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80070e8:	f026 060f 	bic.w	r6, r6, #15
 80070ec:	4631      	mov	r1, r6
 80070ee:	4640      	mov	r0, r8
 80070f0:	f7f9 fe48 	bl	8000d84 <__aeabi_fmul>
 80070f4:	493c      	ldr	r1, [pc, #240]	; (80071e8 <__ieee754_powf+0x4b0>)
 80070f6:	4680      	mov	r8, r0
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7f9 fd39 	bl	8000b70 <__aeabi_fsub>
 80070fe:	9b02      	ldr	r3, [sp, #8]
 8007100:	4619      	mov	r1, r3
 8007102:	f7f9 fd35 	bl	8000b70 <__aeabi_fsub>
 8007106:	4601      	mov	r1, r0
 8007108:	4650      	mov	r0, sl
 800710a:	f7f9 fd31 	bl	8000b70 <__aeabi_fsub>
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 fe38 	bl	8000d84 <__aeabi_fmul>
 8007114:	4659      	mov	r1, fp
 8007116:	4681      	mov	r9, r0
 8007118:	4630      	mov	r0, r6
 800711a:	f7f9 fe33 	bl	8000d84 <__aeabi_fmul>
 800711e:	4601      	mov	r1, r0
 8007120:	4648      	mov	r0, r9
 8007122:	f7f9 fd27 	bl	8000b74 <__addsf3>
 8007126:	4682      	mov	sl, r0
 8007128:	4601      	mov	r1, r0
 800712a:	4640      	mov	r0, r8
 800712c:	f7f9 fd22 	bl	8000b74 <__addsf3>
 8007130:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8007134:	f029 090f 	bic.w	r9, r9, #15
 8007138:	492c      	ldr	r1, [pc, #176]	; (80071ec <__ieee754_powf+0x4b4>)
 800713a:	4648      	mov	r0, r9
 800713c:	f7f9 fe22 	bl	8000d84 <__aeabi_fmul>
 8007140:	4641      	mov	r1, r8
 8007142:	4606      	mov	r6, r0
 8007144:	4648      	mov	r0, r9
 8007146:	f7f9 fd13 	bl	8000b70 <__aeabi_fsub>
 800714a:	4601      	mov	r1, r0
 800714c:	4650      	mov	r0, sl
 800714e:	f7f9 fd0f 	bl	8000b70 <__aeabi_fsub>
 8007152:	4927      	ldr	r1, [pc, #156]	; (80071f0 <__ieee754_powf+0x4b8>)
 8007154:	f7f9 fe16 	bl	8000d84 <__aeabi_fmul>
 8007158:	4926      	ldr	r1, [pc, #152]	; (80071f4 <__ieee754_powf+0x4bc>)
 800715a:	4680      	mov	r8, r0
 800715c:	4648      	mov	r0, r9
 800715e:	f7f9 fe11 	bl	8000d84 <__aeabi_fmul>
 8007162:	4601      	mov	r1, r0
 8007164:	4640      	mov	r0, r8
 8007166:	f7f9 fd05 	bl	8000b74 <__addsf3>
 800716a:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <__ieee754_powf+0x4c0>)
 800716c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8007170:	f7f9 fd00 	bl	8000b74 <__addsf3>
 8007174:	9a05      	ldr	r2, [sp, #20]
 8007176:	4680      	mov	r8, r0
 8007178:	4610      	mov	r0, r2
 800717a:	f7f9 fdaf 	bl	8000cdc <__aeabi_i2f>
 800717e:	4681      	mov	r9, r0
 8007180:	4b1e      	ldr	r3, [pc, #120]	; (80071fc <__ieee754_powf+0x4c4>)
 8007182:	4641      	mov	r1, r8
 8007184:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8007188:	4630      	mov	r0, r6
 800718a:	f7f9 fcf3 	bl	8000b74 <__addsf3>
 800718e:	4639      	mov	r1, r7
 8007190:	f7f9 fcf0 	bl	8000b74 <__addsf3>
 8007194:	4649      	mov	r1, r9
 8007196:	f7f9 fced 	bl	8000b74 <__addsf3>
 800719a:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800719e:	f02a 0a0f 	bic.w	sl, sl, #15
 80071a2:	4649      	mov	r1, r9
 80071a4:	4650      	mov	r0, sl
 80071a6:	f7f9 fce3 	bl	8000b70 <__aeabi_fsub>
 80071aa:	4639      	mov	r1, r7
 80071ac:	f7f9 fce0 	bl	8000b70 <__aeabi_fsub>
 80071b0:	4631      	mov	r1, r6
 80071b2:	f7f9 fcdd 	bl	8000b70 <__aeabi_fsub>
 80071b6:	4601      	mov	r1, r0
 80071b8:	4640      	mov	r0, r8
 80071ba:	e6a4      	b.n	8006f06 <__ieee754_powf+0x1ce>
 80071bc:	2200      	movs	r2, #0
 80071be:	e6fa      	b.n	8006fb6 <__ieee754_powf+0x27e>
 80071c0:	2701      	movs	r7, #1
 80071c2:	e70a      	b.n	8006fda <__ieee754_powf+0x2a2>
 80071c4:	001cc471 	.word	0x001cc471
 80071c8:	005db3d6 	.word	0x005db3d6
 80071cc:	0800b4ec 	.word	0x0800b4ec
 80071d0:	3e53f142 	.word	0x3e53f142
 80071d4:	3e6c3255 	.word	0x3e6c3255
 80071d8:	3e8ba305 	.word	0x3e8ba305
 80071dc:	3eaaaaab 	.word	0x3eaaaaab
 80071e0:	3edb6db7 	.word	0x3edb6db7
 80071e4:	3f19999a 	.word	0x3f19999a
 80071e8:	40400000 	.word	0x40400000
 80071ec:	3f763800 	.word	0x3f763800
 80071f0:	3f76384f 	.word	0x3f76384f
 80071f4:	369dc3a0 	.word	0x369dc3a0
 80071f8:	0800b4fc 	.word	0x0800b4fc
 80071fc:	0800b4f4 	.word	0x0800b4f4
 8007200:	f040 80c0 	bne.w	8007384 <__ieee754_powf+0x64c>
 8007204:	4966      	ldr	r1, [pc, #408]	; (80073a0 <__ieee754_powf+0x668>)
 8007206:	4630      	mov	r0, r6
 8007208:	f7f9 fcb4 	bl	8000b74 <__addsf3>
 800720c:	4639      	mov	r1, r7
 800720e:	4681      	mov	r9, r0
 8007210:	4650      	mov	r0, sl
 8007212:	f7f9 fcad 	bl	8000b70 <__aeabi_fsub>
 8007216:	4601      	mov	r1, r0
 8007218:	4648      	mov	r0, r9
 800721a:	f7f9 ff6f 	bl	80010fc <__aeabi_fcmpgt>
 800721e:	2800      	cmp	r0, #0
 8007220:	f47f aea5 	bne.w	8006f6e <__ieee754_powf+0x236>
 8007224:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007228:	15e4      	asrs	r4, r4, #23
 800722a:	3c7e      	subs	r4, #126	; 0x7e
 800722c:	4123      	asrs	r3, r4
 800722e:	4443      	add	r3, r8
 8007230:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007234:	495b      	ldr	r1, [pc, #364]	; (80073a4 <__ieee754_powf+0x66c>)
 8007236:	3a7f      	subs	r2, #127	; 0x7f
 8007238:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800723c:	4111      	asrs	r1, r2
 800723e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8007242:	f1c2 0217 	rsb	r2, r2, #23
 8007246:	4114      	asrs	r4, r2
 8007248:	f1b8 0f00 	cmp.w	r8, #0
 800724c:	ea23 0101 	bic.w	r1, r3, r1
 8007250:	4638      	mov	r0, r7
 8007252:	bfb8      	it	lt
 8007254:	4264      	neglt	r4, r4
 8007256:	f7f9 fc8b 	bl	8000b70 <__aeabi_fsub>
 800725a:	4681      	mov	r9, r0
 800725c:	4631      	mov	r1, r6
 800725e:	4648      	mov	r0, r9
 8007260:	f7f9 fc88 	bl	8000b74 <__addsf3>
 8007264:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8007268:	f027 070f 	bic.w	r7, r7, #15
 800726c:	494e      	ldr	r1, [pc, #312]	; (80073a8 <__ieee754_powf+0x670>)
 800726e:	4638      	mov	r0, r7
 8007270:	f7f9 fd88 	bl	8000d84 <__aeabi_fmul>
 8007274:	4649      	mov	r1, r9
 8007276:	4680      	mov	r8, r0
 8007278:	4638      	mov	r0, r7
 800727a:	f7f9 fc79 	bl	8000b70 <__aeabi_fsub>
 800727e:	4601      	mov	r1, r0
 8007280:	4630      	mov	r0, r6
 8007282:	f7f9 fc75 	bl	8000b70 <__aeabi_fsub>
 8007286:	4949      	ldr	r1, [pc, #292]	; (80073ac <__ieee754_powf+0x674>)
 8007288:	f7f9 fd7c 	bl	8000d84 <__aeabi_fmul>
 800728c:	4948      	ldr	r1, [pc, #288]	; (80073b0 <__ieee754_powf+0x678>)
 800728e:	4606      	mov	r6, r0
 8007290:	4638      	mov	r0, r7
 8007292:	f7f9 fd77 	bl	8000d84 <__aeabi_fmul>
 8007296:	4601      	mov	r1, r0
 8007298:	4630      	mov	r0, r6
 800729a:	f7f9 fc6b 	bl	8000b74 <__addsf3>
 800729e:	4607      	mov	r7, r0
 80072a0:	4601      	mov	r1, r0
 80072a2:	4640      	mov	r0, r8
 80072a4:	f7f9 fc66 	bl	8000b74 <__addsf3>
 80072a8:	4641      	mov	r1, r8
 80072aa:	4606      	mov	r6, r0
 80072ac:	f7f9 fc60 	bl	8000b70 <__aeabi_fsub>
 80072b0:	4601      	mov	r1, r0
 80072b2:	4638      	mov	r0, r7
 80072b4:	f7f9 fc5c 	bl	8000b70 <__aeabi_fsub>
 80072b8:	4631      	mov	r1, r6
 80072ba:	4680      	mov	r8, r0
 80072bc:	4630      	mov	r0, r6
 80072be:	f7f9 fd61 	bl	8000d84 <__aeabi_fmul>
 80072c2:	4607      	mov	r7, r0
 80072c4:	493b      	ldr	r1, [pc, #236]	; (80073b4 <__ieee754_powf+0x67c>)
 80072c6:	f7f9 fd5d 	bl	8000d84 <__aeabi_fmul>
 80072ca:	493b      	ldr	r1, [pc, #236]	; (80073b8 <__ieee754_powf+0x680>)
 80072cc:	f7f9 fc50 	bl	8000b70 <__aeabi_fsub>
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f9 fd57 	bl	8000d84 <__aeabi_fmul>
 80072d6:	4939      	ldr	r1, [pc, #228]	; (80073bc <__ieee754_powf+0x684>)
 80072d8:	f7f9 fc4c 	bl	8000b74 <__addsf3>
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f9 fd51 	bl	8000d84 <__aeabi_fmul>
 80072e2:	4937      	ldr	r1, [pc, #220]	; (80073c0 <__ieee754_powf+0x688>)
 80072e4:	f7f9 fc44 	bl	8000b70 <__aeabi_fsub>
 80072e8:	4639      	mov	r1, r7
 80072ea:	f7f9 fd4b 	bl	8000d84 <__aeabi_fmul>
 80072ee:	4935      	ldr	r1, [pc, #212]	; (80073c4 <__ieee754_powf+0x68c>)
 80072f0:	f7f9 fc40 	bl	8000b74 <__addsf3>
 80072f4:	4639      	mov	r1, r7
 80072f6:	f7f9 fd45 	bl	8000d84 <__aeabi_fmul>
 80072fa:	4601      	mov	r1, r0
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7f9 fc37 	bl	8000b70 <__aeabi_fsub>
 8007302:	4607      	mov	r7, r0
 8007304:	4601      	mov	r1, r0
 8007306:	4630      	mov	r0, r6
 8007308:	f7f9 fd3c 	bl	8000d84 <__aeabi_fmul>
 800730c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007310:	4681      	mov	r9, r0
 8007312:	4638      	mov	r0, r7
 8007314:	f7f9 fc2c 	bl	8000b70 <__aeabi_fsub>
 8007318:	4601      	mov	r1, r0
 800731a:	4648      	mov	r0, r9
 800731c:	f7f9 fde6 	bl	8000eec <__aeabi_fdiv>
 8007320:	4641      	mov	r1, r8
 8007322:	4607      	mov	r7, r0
 8007324:	4630      	mov	r0, r6
 8007326:	f7f9 fd2d 	bl	8000d84 <__aeabi_fmul>
 800732a:	4641      	mov	r1, r8
 800732c:	f7f9 fc22 	bl	8000b74 <__addsf3>
 8007330:	4601      	mov	r1, r0
 8007332:	4638      	mov	r0, r7
 8007334:	f7f9 fc1c 	bl	8000b70 <__aeabi_fsub>
 8007338:	4631      	mov	r1, r6
 800733a:	f7f9 fc19 	bl	8000b70 <__aeabi_fsub>
 800733e:	4601      	mov	r1, r0
 8007340:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007344:	f7f9 fc14 	bl	8000b70 <__aeabi_fsub>
 8007348:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800734c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007350:	da1e      	bge.n	8007390 <__ieee754_powf+0x658>
 8007352:	4621      	mov	r1, r4
 8007354:	f000 f8f0 	bl	8007538 <scalbnf>
 8007358:	4629      	mov	r1, r5
 800735a:	e54a      	b.n	8006df2 <__ieee754_powf+0xba>
 800735c:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <__ieee754_powf+0x690>)
 800735e:	429c      	cmp	r4, r3
 8007360:	dd05      	ble.n	800736e <__ieee754_powf+0x636>
 8007362:	491a      	ldr	r1, [pc, #104]	; (80073cc <__ieee754_powf+0x694>)
 8007364:	4628      	mov	r0, r5
 8007366:	f7f9 fd0d 	bl	8000d84 <__aeabi_fmul>
 800736a:	4918      	ldr	r1, [pc, #96]	; (80073cc <__ieee754_powf+0x694>)
 800736c:	e541      	b.n	8006df2 <__ieee754_powf+0xba>
 800736e:	d109      	bne.n	8007384 <__ieee754_powf+0x64c>
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 fbfd 	bl	8000b70 <__aeabi_fsub>
 8007376:	4631      	mov	r1, r6
 8007378:	f7f9 feb6 	bl	80010e8 <__aeabi_fcmpge>
 800737c:	2800      	cmp	r0, #0
 800737e:	f43f af51 	beq.w	8007224 <__ieee754_powf+0x4ec>
 8007382:	e7ee      	b.n	8007362 <__ieee754_powf+0x62a>
 8007384:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007388:	f73f af4c 	bgt.w	8007224 <__ieee754_powf+0x4ec>
 800738c:	2400      	movs	r4, #0
 800738e:	e765      	b.n	800725c <__ieee754_powf+0x524>
 8007390:	4618      	mov	r0, r3
 8007392:	e7e1      	b.n	8007358 <__ieee754_powf+0x620>
 8007394:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007398:	e518      	b.n	8006dcc <__ieee754_powf+0x94>
 800739a:	9901      	ldr	r1, [sp, #4]
 800739c:	e516      	b.n	8006dcc <__ieee754_powf+0x94>
 800739e:	bf00      	nop
 80073a0:	3338aa3c 	.word	0x3338aa3c
 80073a4:	007fffff 	.word	0x007fffff
 80073a8:	3f317200 	.word	0x3f317200
 80073ac:	3f317218 	.word	0x3f317218
 80073b0:	35bfbe8c 	.word	0x35bfbe8c
 80073b4:	3331bb4c 	.word	0x3331bb4c
 80073b8:	35ddea0e 	.word	0x35ddea0e
 80073bc:	388ab355 	.word	0x388ab355
 80073c0:	3b360b61 	.word	0x3b360b61
 80073c4:	3e2aaaab 	.word	0x3e2aaaab
 80073c8:	43160000 	.word	0x43160000
 80073cc:	0da24260 	.word	0x0da24260

080073d0 <__ieee754_sqrtf>:
 80073d0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80073d4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	4603      	mov	r3, r0
 80073dc:	4604      	mov	r4, r0
 80073de:	d309      	bcc.n	80073f4 <__ieee754_sqrtf+0x24>
 80073e0:	4601      	mov	r1, r0
 80073e2:	f7f9 fccf 	bl	8000d84 <__aeabi_fmul>
 80073e6:	4601      	mov	r1, r0
 80073e8:	4620      	mov	r0, r4
 80073ea:	f7f9 fbc3 	bl	8000b74 <__addsf3>
 80073ee:	4604      	mov	r4, r0
 80073f0:	4620      	mov	r0, r4
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	d0fb      	beq.n	80073f0 <__ieee754_sqrtf+0x20>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	da06      	bge.n	800740a <__ieee754_sqrtf+0x3a>
 80073fc:	4601      	mov	r1, r0
 80073fe:	f7f9 fbb7 	bl	8000b70 <__aeabi_fsub>
 8007402:	4601      	mov	r1, r0
 8007404:	f7f9 fd72 	bl	8000eec <__aeabi_fdiv>
 8007408:	e7f1      	b.n	80073ee <__ieee754_sqrtf+0x1e>
 800740a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800740e:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8007412:	d32e      	bcc.n	8007472 <__ieee754_sqrtf+0xa2>
 8007414:	3c7f      	subs	r4, #127	; 0x7f
 8007416:	07e2      	lsls	r2, r4, #31
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	ea4f 0164 	mov.w	r1, r4, asr #1
 8007420:	4616      	mov	r6, r2
 8007422:	f04f 0419 	mov.w	r4, #25
 8007426:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800742a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800742e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007432:	bf48      	it	mi
 8007434:	005b      	lslmi	r3, r3, #1
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	1835      	adds	r5, r6, r0
 800743a:	429d      	cmp	r5, r3
 800743c:	bfde      	ittt	le
 800743e:	182e      	addle	r6, r5, r0
 8007440:	1b5b      	suble	r3, r3, r5
 8007442:	1812      	addle	r2, r2, r0
 8007444:	3c01      	subs	r4, #1
 8007446:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800744a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800744e:	d1f3      	bne.n	8007438 <__ieee754_sqrtf+0x68>
 8007450:	b113      	cbz	r3, 8007458 <__ieee754_sqrtf+0x88>
 8007452:	3201      	adds	r2, #1
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	1054      	asrs	r4, r2, #1
 800745a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800745e:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8007462:	e7c5      	b.n	80073f0 <__ieee754_sqrtf+0x20>
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	3201      	adds	r2, #1
 8007468:	0219      	lsls	r1, r3, #8
 800746a:	d5fb      	bpl.n	8007464 <__ieee754_sqrtf+0x94>
 800746c:	3a01      	subs	r2, #1
 800746e:	1aa4      	subs	r4, r4, r2
 8007470:	e7d0      	b.n	8007414 <__ieee754_sqrtf+0x44>
 8007472:	2200      	movs	r2, #0
 8007474:	e7f8      	b.n	8007468 <__ieee754_sqrtf+0x98>

08007476 <matherr>:
 8007476:	2000      	movs	r0, #0
 8007478:	4770      	bx	lr

0800747a <fabsf>:
 800747a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800747e:	4770      	bx	lr

08007480 <finitef>:
 8007480:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007484:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007488:	bfac      	ite	ge
 800748a:	2000      	movge	r0, #0
 800748c:	2001      	movlt	r0, #1
 800748e:	4770      	bx	lr

08007490 <nanf>:
 8007490:	4800      	ldr	r0, [pc, #0]	; (8007494 <nanf+0x4>)
 8007492:	4770      	bx	lr
 8007494:	7fc00000 	.word	0x7fc00000

08007498 <rintf>:
 8007498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800749a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800749e:	0dd5      	lsrs	r5, r2, #23
 80074a0:	3d7f      	subs	r5, #127	; 0x7f
 80074a2:	2d16      	cmp	r5, #22
 80074a4:	4601      	mov	r1, r0
 80074a6:	dc3b      	bgt.n	8007520 <rintf+0x88>
 80074a8:	b1e2      	cbz	r2, 80074e4 <rintf+0x4c>
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	4602      	mov	r2, r0
 80074ae:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 80074b2:	da1a      	bge.n	80074ea <rintf+0x52>
 80074b4:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <rintf+0x98>)
 80074b6:	f3c0 0116 	ubfx	r1, r0, #0, #23
 80074ba:	4249      	negs	r1, r1
 80074bc:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 80074c0:	0d03      	lsrs	r3, r0, #20
 80074c2:	0a49      	lsrs	r1, r1, #9
 80074c4:	051b      	lsls	r3, r3, #20
 80074c6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80074ca:	4319      	orrs	r1, r3
 80074cc:	4628      	mov	r0, r5
 80074ce:	f7f9 fb51 	bl	8000b74 <__addsf3>
 80074d2:	9001      	str	r0, [sp, #4]
 80074d4:	4629      	mov	r1, r5
 80074d6:	9801      	ldr	r0, [sp, #4]
 80074d8:	f7f9 fb4a 	bl	8000b70 <__aeabi_fsub>
 80074dc:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80074e0:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 80074e4:	4608      	mov	r0, r1
 80074e6:	b003      	add	sp, #12
 80074e8:	bd30      	pop	{r4, r5, pc}
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <rintf+0x9c>)
 80074ec:	412b      	asrs	r3, r5
 80074ee:	4218      	tst	r0, r3
 80074f0:	d0f8      	beq.n	80074e4 <rintf+0x4c>
 80074f2:	0859      	lsrs	r1, r3, #1
 80074f4:	4208      	tst	r0, r1
 80074f6:	d006      	beq.n	8007506 <rintf+0x6e>
 80074f8:	ea20 0201 	bic.w	r2, r0, r1
 80074fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007500:	fa41 f505 	asr.w	r5, r1, r5
 8007504:	432a      	orrs	r2, r5
 8007506:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <rintf+0x98>)
 8007508:	4611      	mov	r1, r2
 800750a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800750e:	4620      	mov	r0, r4
 8007510:	f7f9 fb30 	bl	8000b74 <__addsf3>
 8007514:	9001      	str	r0, [sp, #4]
 8007516:	9801      	ldr	r0, [sp, #4]
 8007518:	4621      	mov	r1, r4
 800751a:	f7f9 fb29 	bl	8000b70 <__aeabi_fsub>
 800751e:	e004      	b.n	800752a <rintf+0x92>
 8007520:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007524:	d3de      	bcc.n	80074e4 <rintf+0x4c>
 8007526:	f7f9 fb25 	bl	8000b74 <__addsf3>
 800752a:	4601      	mov	r1, r0
 800752c:	e7da      	b.n	80074e4 <rintf+0x4c>
 800752e:	bf00      	nop
 8007530:	0800b504 	.word	0x0800b504
 8007534:	007fffff 	.word	0x007fffff

08007538 <scalbnf>:
 8007538:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800753c:	b510      	push	{r4, lr}
 800753e:	4602      	mov	r2, r0
 8007540:	460c      	mov	r4, r1
 8007542:	4601      	mov	r1, r0
 8007544:	d027      	beq.n	8007596 <scalbnf+0x5e>
 8007546:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800754a:	d303      	bcc.n	8007554 <scalbnf+0x1c>
 800754c:	f7f9 fb12 	bl	8000b74 <__addsf3>
 8007550:	4602      	mov	r2, r0
 8007552:	e020      	b.n	8007596 <scalbnf+0x5e>
 8007554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007558:	d215      	bcs.n	8007586 <scalbnf+0x4e>
 800755a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800755e:	f7f9 fc11 	bl	8000d84 <__aeabi_fmul>
 8007562:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <scalbnf+0x8c>)
 8007564:	4602      	mov	r2, r0
 8007566:	429c      	cmp	r4, r3
 8007568:	db22      	blt.n	80075b0 <scalbnf+0x78>
 800756a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800756e:	3b19      	subs	r3, #25
 8007570:	4423      	add	r3, r4
 8007572:	2bfe      	cmp	r3, #254	; 0xfe
 8007574:	dd09      	ble.n	800758a <scalbnf+0x52>
 8007576:	4611      	mov	r1, r2
 8007578:	4813      	ldr	r0, [pc, #76]	; (80075c8 <scalbnf+0x90>)
 800757a:	f000 f829 	bl	80075d0 <copysignf>
 800757e:	4912      	ldr	r1, [pc, #72]	; (80075c8 <scalbnf+0x90>)
 8007580:	f7f9 fc00 	bl	8000d84 <__aeabi_fmul>
 8007584:	e7e4      	b.n	8007550 <scalbnf+0x18>
 8007586:	0ddb      	lsrs	r3, r3, #23
 8007588:	e7f2      	b.n	8007570 <scalbnf+0x38>
 800758a:	2b00      	cmp	r3, #0
 800758c:	dd05      	ble.n	800759a <scalbnf+0x62>
 800758e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8007592:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8007596:	4610      	mov	r0, r2
 8007598:	bd10      	pop	{r4, pc}
 800759a:	f113 0f16 	cmn.w	r3, #22
 800759e:	da09      	bge.n	80075b4 <scalbnf+0x7c>
 80075a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075a4:	429c      	cmp	r4, r3
 80075a6:	4611      	mov	r1, r2
 80075a8:	dce6      	bgt.n	8007578 <scalbnf+0x40>
 80075aa:	4808      	ldr	r0, [pc, #32]	; (80075cc <scalbnf+0x94>)
 80075ac:	f000 f810 	bl	80075d0 <copysignf>
 80075b0:	4906      	ldr	r1, [pc, #24]	; (80075cc <scalbnf+0x94>)
 80075b2:	e7e5      	b.n	8007580 <scalbnf+0x48>
 80075b4:	3319      	adds	r3, #25
 80075b6:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80075ba:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80075be:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80075c2:	e7dd      	b.n	8007580 <scalbnf+0x48>
 80075c4:	ffff3cb0 	.word	0xffff3cb0
 80075c8:	7149f2ca 	.word	0x7149f2ca
 80075cc:	0da24260 	.word	0x0da24260

080075d0 <copysignf>:
 80075d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80075d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80075d8:	4308      	orrs	r0, r1
 80075da:	4770      	bx	lr

080075dc <__errno>:
 80075dc:	4b01      	ldr	r3, [pc, #4]	; (80075e4 <__errno+0x8>)
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	200000b0 	.word	0x200000b0

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	2500      	movs	r5, #0
 80075ec:	4e0c      	ldr	r6, [pc, #48]	; (8007620 <__libc_init_array+0x38>)
 80075ee:	4c0d      	ldr	r4, [pc, #52]	; (8007624 <__libc_init_array+0x3c>)
 80075f0:	1ba4      	subs	r4, r4, r6
 80075f2:	10a4      	asrs	r4, r4, #2
 80075f4:	42a5      	cmp	r5, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	f003 fd74 	bl	800b0e4 <_init>
 80075fc:	2500      	movs	r5, #0
 80075fe:	4e0a      	ldr	r6, [pc, #40]	; (8007628 <__libc_init_array+0x40>)
 8007600:	4c0a      	ldr	r4, [pc, #40]	; (800762c <__libc_init_array+0x44>)
 8007602:	1ba4      	subs	r4, r4, r6
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	42a5      	cmp	r5, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007610:	4798      	blx	r3
 8007612:	3501      	adds	r5, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800761a:	4798      	blx	r3
 800761c:	3501      	adds	r5, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	0800b7c0 	.word	0x0800b7c0
 8007624:	0800b7c0 	.word	0x0800b7c0
 8007628:	0800b7c0 	.word	0x0800b7c0
 800762c:	0800b7c8 	.word	0x0800b7c8

08007630 <memcpy>:
 8007630:	b510      	push	{r4, lr}
 8007632:	1e43      	subs	r3, r0, #1
 8007634:	440a      	add	r2, r1
 8007636:	4291      	cmp	r1, r2
 8007638:	d100      	bne.n	800763c <memcpy+0xc>
 800763a:	bd10      	pop	{r4, pc}
 800763c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007644:	e7f7      	b.n	8007636 <memcpy+0x6>

08007646 <memset>:
 8007646:	4603      	mov	r3, r0
 8007648:	4402      	add	r2, r0
 800764a:	4293      	cmp	r3, r2
 800764c:	d100      	bne.n	8007650 <memset+0xa>
 800764e:	4770      	bx	lr
 8007650:	f803 1b01 	strb.w	r1, [r3], #1
 8007654:	e7f9      	b.n	800764a <memset+0x4>

08007656 <__cvt>:
 8007656:	2b00      	cmp	r3, #0
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	461e      	mov	r6, r3
 800765e:	bfbb      	ittet	lt
 8007660:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007664:	461e      	movlt	r6, r3
 8007666:	2300      	movge	r3, #0
 8007668:	232d      	movlt	r3, #45	; 0x2d
 800766a:	b088      	sub	sp, #32
 800766c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800766e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007672:	f027 0720 	bic.w	r7, r7, #32
 8007676:	2f46      	cmp	r7, #70	; 0x46
 8007678:	4614      	mov	r4, r2
 800767a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800767c:	700b      	strb	r3, [r1, #0]
 800767e:	d004      	beq.n	800768a <__cvt+0x34>
 8007680:	2f45      	cmp	r7, #69	; 0x45
 8007682:	d100      	bne.n	8007686 <__cvt+0x30>
 8007684:	3501      	adds	r5, #1
 8007686:	2302      	movs	r3, #2
 8007688:	e000      	b.n	800768c <__cvt+0x36>
 800768a:	2303      	movs	r3, #3
 800768c:	aa07      	add	r2, sp, #28
 800768e:	9204      	str	r2, [sp, #16]
 8007690:	aa06      	add	r2, sp, #24
 8007692:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007696:	e9cd 3500 	strd	r3, r5, [sp]
 800769a:	4622      	mov	r2, r4
 800769c:	4633      	mov	r3, r6
 800769e:	f001 fd93 	bl	80091c8 <_dtoa_r>
 80076a2:	2f47      	cmp	r7, #71	; 0x47
 80076a4:	4680      	mov	r8, r0
 80076a6:	d102      	bne.n	80076ae <__cvt+0x58>
 80076a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076aa:	07db      	lsls	r3, r3, #31
 80076ac:	d526      	bpl.n	80076fc <__cvt+0xa6>
 80076ae:	2f46      	cmp	r7, #70	; 0x46
 80076b0:	eb08 0905 	add.w	r9, r8, r5
 80076b4:	d111      	bne.n	80076da <__cvt+0x84>
 80076b6:	f898 3000 	ldrb.w	r3, [r8]
 80076ba:	2b30      	cmp	r3, #48	; 0x30
 80076bc:	d10a      	bne.n	80076d4 <__cvt+0x7e>
 80076be:	2200      	movs	r2, #0
 80076c0:	2300      	movs	r3, #0
 80076c2:	4620      	mov	r0, r4
 80076c4:	4631      	mov	r1, r6
 80076c6:	f7f9 f96f 	bl	80009a8 <__aeabi_dcmpeq>
 80076ca:	b918      	cbnz	r0, 80076d4 <__cvt+0x7e>
 80076cc:	f1c5 0501 	rsb	r5, r5, #1
 80076d0:	f8ca 5000 	str.w	r5, [sl]
 80076d4:	f8da 3000 	ldr.w	r3, [sl]
 80076d8:	4499      	add	r9, r3
 80076da:	2200      	movs	r2, #0
 80076dc:	2300      	movs	r3, #0
 80076de:	4620      	mov	r0, r4
 80076e0:	4631      	mov	r1, r6
 80076e2:	f7f9 f961 	bl	80009a8 <__aeabi_dcmpeq>
 80076e6:	b938      	cbnz	r0, 80076f8 <__cvt+0xa2>
 80076e8:	2230      	movs	r2, #48	; 0x30
 80076ea:	9b07      	ldr	r3, [sp, #28]
 80076ec:	454b      	cmp	r3, r9
 80076ee:	d205      	bcs.n	80076fc <__cvt+0xa6>
 80076f0:	1c59      	adds	r1, r3, #1
 80076f2:	9107      	str	r1, [sp, #28]
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e7f8      	b.n	80076ea <__cvt+0x94>
 80076f8:	f8cd 901c 	str.w	r9, [sp, #28]
 80076fc:	4640      	mov	r0, r8
 80076fe:	9b07      	ldr	r3, [sp, #28]
 8007700:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007702:	eba3 0308 	sub.w	r3, r3, r8
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	b008      	add	sp, #32
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800770e <__exponent>:
 800770e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007710:	2900      	cmp	r1, #0
 8007712:	bfb4      	ite	lt
 8007714:	232d      	movlt	r3, #45	; 0x2d
 8007716:	232b      	movge	r3, #43	; 0x2b
 8007718:	4604      	mov	r4, r0
 800771a:	bfb8      	it	lt
 800771c:	4249      	neglt	r1, r1
 800771e:	2909      	cmp	r1, #9
 8007720:	f804 2b02 	strb.w	r2, [r4], #2
 8007724:	7043      	strb	r3, [r0, #1]
 8007726:	dd21      	ble.n	800776c <__exponent+0x5e>
 8007728:	f10d 0307 	add.w	r3, sp, #7
 800772c:	461f      	mov	r7, r3
 800772e:	260a      	movs	r6, #10
 8007730:	fb91 f5f6 	sdiv	r5, r1, r6
 8007734:	fb06 1115 	mls	r1, r6, r5, r1
 8007738:	2d09      	cmp	r5, #9
 800773a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800773e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007742:	f103 32ff 	add.w	r2, r3, #4294967295
 8007746:	4629      	mov	r1, r5
 8007748:	dc09      	bgt.n	800775e <__exponent+0x50>
 800774a:	3130      	adds	r1, #48	; 0x30
 800774c:	3b02      	subs	r3, #2
 800774e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007752:	42bb      	cmp	r3, r7
 8007754:	4622      	mov	r2, r4
 8007756:	d304      	bcc.n	8007762 <__exponent+0x54>
 8007758:	1a10      	subs	r0, r2, r0
 800775a:	b003      	add	sp, #12
 800775c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775e:	4613      	mov	r3, r2
 8007760:	e7e6      	b.n	8007730 <__exponent+0x22>
 8007762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007766:	f804 2b01 	strb.w	r2, [r4], #1
 800776a:	e7f2      	b.n	8007752 <__exponent+0x44>
 800776c:	2330      	movs	r3, #48	; 0x30
 800776e:	4419      	add	r1, r3
 8007770:	7083      	strb	r3, [r0, #2]
 8007772:	1d02      	adds	r2, r0, #4
 8007774:	70c1      	strb	r1, [r0, #3]
 8007776:	e7ef      	b.n	8007758 <__exponent+0x4a>

08007778 <_printf_float>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	b091      	sub	sp, #68	; 0x44
 800777e:	460c      	mov	r4, r1
 8007780:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007782:	4693      	mov	fp, r2
 8007784:	461e      	mov	r6, r3
 8007786:	4605      	mov	r5, r0
 8007788:	f002 fe00 	bl	800a38c <_localeconv_r>
 800778c:	6803      	ldr	r3, [r0, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	9309      	str	r3, [sp, #36]	; 0x24
 8007792:	f7f8 fcdd 	bl	8000150 <strlen>
 8007796:	2300      	movs	r3, #0
 8007798:	930e      	str	r3, [sp, #56]	; 0x38
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	900a      	str	r0, [sp, #40]	; 0x28
 800779e:	3307      	adds	r3, #7
 80077a0:	f023 0307 	bic.w	r3, r3, #7
 80077a4:	f103 0208 	add.w	r2, r3, #8
 80077a8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80077ac:	f8d4 a000 	ldr.w	sl, [r4]
 80077b0:	603a      	str	r2, [r7, #0]
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077ba:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80077be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	4ba6      	ldr	r3, [pc, #664]	; (8007a64 <_printf_float+0x2ec>)
 80077ca:	4638      	mov	r0, r7
 80077cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ce:	f7f9 f91d 	bl	8000a0c <__aeabi_dcmpun>
 80077d2:	bb68      	cbnz	r0, 8007830 <_printf_float+0xb8>
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	4ba2      	ldr	r3, [pc, #648]	; (8007a64 <_printf_float+0x2ec>)
 80077da:	4638      	mov	r0, r7
 80077dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077de:	f7f9 f8f7 	bl	80009d0 <__aeabi_dcmple>
 80077e2:	bb28      	cbnz	r0, 8007830 <_printf_float+0xb8>
 80077e4:	2200      	movs	r2, #0
 80077e6:	2300      	movs	r3, #0
 80077e8:	4638      	mov	r0, r7
 80077ea:	4649      	mov	r1, r9
 80077ec:	f7f9 f8e6 	bl	80009bc <__aeabi_dcmplt>
 80077f0:	b110      	cbz	r0, 80077f8 <_printf_float+0x80>
 80077f2:	232d      	movs	r3, #45	; 0x2d
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	4f9b      	ldr	r7, [pc, #620]	; (8007a68 <_printf_float+0x2f0>)
 80077fa:	4b9c      	ldr	r3, [pc, #624]	; (8007a6c <_printf_float+0x2f4>)
 80077fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007800:	bf98      	it	ls
 8007802:	461f      	movls	r7, r3
 8007804:	2303      	movs	r3, #3
 8007806:	f04f 0900 	mov.w	r9, #0
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	f02a 0304 	bic.w	r3, sl, #4
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	9600      	str	r6, [sp, #0]
 8007814:	465b      	mov	r3, fp
 8007816:	aa0f      	add	r2, sp, #60	; 0x3c
 8007818:	4621      	mov	r1, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f9e2 	bl	8007be4 <_printf_common>
 8007820:	3001      	adds	r0, #1
 8007822:	f040 8090 	bne.w	8007946 <_printf_float+0x1ce>
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	b011      	add	sp, #68	; 0x44
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	463a      	mov	r2, r7
 8007832:	464b      	mov	r3, r9
 8007834:	4638      	mov	r0, r7
 8007836:	4649      	mov	r1, r9
 8007838:	f7f9 f8e8 	bl	8000a0c <__aeabi_dcmpun>
 800783c:	b110      	cbz	r0, 8007844 <_printf_float+0xcc>
 800783e:	4f8c      	ldr	r7, [pc, #560]	; (8007a70 <_printf_float+0x2f8>)
 8007840:	4b8c      	ldr	r3, [pc, #560]	; (8007a74 <_printf_float+0x2fc>)
 8007842:	e7db      	b.n	80077fc <_printf_float+0x84>
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800784a:	1c59      	adds	r1, r3, #1
 800784c:	a80d      	add	r0, sp, #52	; 0x34
 800784e:	a90e      	add	r1, sp, #56	; 0x38
 8007850:	d140      	bne.n	80078d4 <_printf_float+0x15c>
 8007852:	2306      	movs	r3, #6
 8007854:	6063      	str	r3, [r4, #4]
 8007856:	f04f 0c00 	mov.w	ip, #0
 800785a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800785e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	6022      	str	r2, [r4, #0]
 8007866:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	463a      	mov	r2, r7
 800786e:	464b      	mov	r3, r9
 8007870:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff feee 	bl	8007656 <__cvt>
 800787a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800787e:	2b47      	cmp	r3, #71	; 0x47
 8007880:	4607      	mov	r7, r0
 8007882:	d109      	bne.n	8007898 <_printf_float+0x120>
 8007884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007886:	1cd8      	adds	r0, r3, #3
 8007888:	db02      	blt.n	8007890 <_printf_float+0x118>
 800788a:	6862      	ldr	r2, [r4, #4]
 800788c:	4293      	cmp	r3, r2
 800788e:	dd47      	ble.n	8007920 <_printf_float+0x1a8>
 8007890:	f1a8 0802 	sub.w	r8, r8, #2
 8007894:	fa5f f888 	uxtb.w	r8, r8
 8007898:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800789c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800789e:	d824      	bhi.n	80078ea <_printf_float+0x172>
 80078a0:	3901      	subs	r1, #1
 80078a2:	4642      	mov	r2, r8
 80078a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078a8:	910d      	str	r1, [sp, #52]	; 0x34
 80078aa:	f7ff ff30 	bl	800770e <__exponent>
 80078ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078b0:	4681      	mov	r9, r0
 80078b2:	1813      	adds	r3, r2, r0
 80078b4:	2a01      	cmp	r2, #1
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	dc02      	bgt.n	80078c0 <_printf_float+0x148>
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	07d1      	lsls	r1, r2, #31
 80078be:	d501      	bpl.n	80078c4 <_printf_float+0x14c>
 80078c0:	3301      	adds	r3, #1
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0a2      	beq.n	8007812 <_printf_float+0x9a>
 80078cc:	232d      	movs	r3, #45	; 0x2d
 80078ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d2:	e79e      	b.n	8007812 <_printf_float+0x9a>
 80078d4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80078d8:	f000 816e 	beq.w	8007bb8 <_printf_float+0x440>
 80078dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078e0:	d1b9      	bne.n	8007856 <_printf_float+0xde>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1b7      	bne.n	8007856 <_printf_float+0xde>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e7b4      	b.n	8007854 <_printf_float+0xdc>
 80078ea:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80078ee:	d119      	bne.n	8007924 <_printf_float+0x1ac>
 80078f0:	2900      	cmp	r1, #0
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	dd0c      	ble.n	8007910 <_printf_float+0x198>
 80078f6:	6121      	str	r1, [r4, #16]
 80078f8:	b913      	cbnz	r3, 8007900 <_printf_float+0x188>
 80078fa:	6822      	ldr	r2, [r4, #0]
 80078fc:	07d2      	lsls	r2, r2, #31
 80078fe:	d502      	bpl.n	8007906 <_printf_float+0x18e>
 8007900:	3301      	adds	r3, #1
 8007902:	440b      	add	r3, r1
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007908:	f04f 0900 	mov.w	r9, #0
 800790c:	65a3      	str	r3, [r4, #88]	; 0x58
 800790e:	e7d9      	b.n	80078c4 <_printf_float+0x14c>
 8007910:	b913      	cbnz	r3, 8007918 <_printf_float+0x1a0>
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	07d0      	lsls	r0, r2, #31
 8007916:	d501      	bpl.n	800791c <_printf_float+0x1a4>
 8007918:	3302      	adds	r3, #2
 800791a:	e7f3      	b.n	8007904 <_printf_float+0x18c>
 800791c:	2301      	movs	r3, #1
 800791e:	e7f1      	b.n	8007904 <_printf_float+0x18c>
 8007920:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007924:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007928:	4293      	cmp	r3, r2
 800792a:	db05      	blt.n	8007938 <_printf_float+0x1c0>
 800792c:	6822      	ldr	r2, [r4, #0]
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	07d1      	lsls	r1, r2, #31
 8007932:	d5e8      	bpl.n	8007906 <_printf_float+0x18e>
 8007934:	3301      	adds	r3, #1
 8007936:	e7e5      	b.n	8007904 <_printf_float+0x18c>
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfcc      	ite	gt
 800793c:	2301      	movgt	r3, #1
 800793e:	f1c3 0302 	rsble	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	e7de      	b.n	8007904 <_printf_float+0x18c>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	055a      	lsls	r2, r3, #21
 800794a:	d407      	bmi.n	800795c <_printf_float+0x1e4>
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	463a      	mov	r2, r7
 8007950:	4659      	mov	r1, fp
 8007952:	4628      	mov	r0, r5
 8007954:	47b0      	blx	r6
 8007956:	3001      	adds	r0, #1
 8007958:	d129      	bne.n	80079ae <_printf_float+0x236>
 800795a:	e764      	b.n	8007826 <_printf_float+0xae>
 800795c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007960:	f240 80d7 	bls.w	8007b12 <_printf_float+0x39a>
 8007964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007968:	2200      	movs	r2, #0
 800796a:	2300      	movs	r3, #0
 800796c:	f7f9 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8007970:	b388      	cbz	r0, 80079d6 <_printf_float+0x25e>
 8007972:	2301      	movs	r3, #1
 8007974:	4a40      	ldr	r2, [pc, #256]	; (8007a78 <_printf_float+0x300>)
 8007976:	4659      	mov	r1, fp
 8007978:	4628      	mov	r0, r5
 800797a:	47b0      	blx	r6
 800797c:	3001      	adds	r0, #1
 800797e:	f43f af52 	beq.w	8007826 <_printf_float+0xae>
 8007982:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007986:	429a      	cmp	r2, r3
 8007988:	db02      	blt.n	8007990 <_printf_float+0x218>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	07d8      	lsls	r0, r3, #31
 800798e:	d50e      	bpl.n	80079ae <_printf_float+0x236>
 8007990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007994:	4659      	mov	r1, fp
 8007996:	4628      	mov	r0, r5
 8007998:	47b0      	blx	r6
 800799a:	3001      	adds	r0, #1
 800799c:	f43f af43 	beq.w	8007826 <_printf_float+0xae>
 80079a0:	2700      	movs	r7, #0
 80079a2:	f104 081a 	add.w	r8, r4, #26
 80079a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a8:	3b01      	subs	r3, #1
 80079aa:	42bb      	cmp	r3, r7
 80079ac:	dc09      	bgt.n	80079c2 <_printf_float+0x24a>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	079f      	lsls	r7, r3, #30
 80079b2:	f100 80fd 	bmi.w	8007bb0 <_printf_float+0x438>
 80079b6:	68e0      	ldr	r0, [r4, #12]
 80079b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ba:	4298      	cmp	r0, r3
 80079bc:	bfb8      	it	lt
 80079be:	4618      	movlt	r0, r3
 80079c0:	e733      	b.n	800782a <_printf_float+0xb2>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4642      	mov	r2, r8
 80079c6:	4659      	mov	r1, fp
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b0      	blx	r6
 80079cc:	3001      	adds	r0, #1
 80079ce:	f43f af2a 	beq.w	8007826 <_printf_float+0xae>
 80079d2:	3701      	adds	r7, #1
 80079d4:	e7e7      	b.n	80079a6 <_printf_float+0x22e>
 80079d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dc2b      	bgt.n	8007a34 <_printf_float+0x2bc>
 80079dc:	2301      	movs	r3, #1
 80079de:	4a26      	ldr	r2, [pc, #152]	; (8007a78 <_printf_float+0x300>)
 80079e0:	4659      	mov	r1, fp
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b0      	blx	r6
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f af1d 	beq.w	8007826 <_printf_float+0xae>
 80079ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ee:	b923      	cbnz	r3, 80079fa <_printf_float+0x282>
 80079f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f2:	b913      	cbnz	r3, 80079fa <_printf_float+0x282>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	07d9      	lsls	r1, r3, #31
 80079f8:	d5d9      	bpl.n	80079ae <_printf_float+0x236>
 80079fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079fe:	4659      	mov	r1, fp
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b0      	blx	r6
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f af0e 	beq.w	8007826 <_printf_float+0xae>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	f104 091a 	add.w	r9, r4, #26
 8007a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a14:	425b      	negs	r3, r3
 8007a16:	4543      	cmp	r3, r8
 8007a18:	dc01      	bgt.n	8007a1e <_printf_float+0x2a6>
 8007a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a1c:	e797      	b.n	800794e <_printf_float+0x1d6>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	464a      	mov	r2, r9
 8007a22:	4659      	mov	r1, fp
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b0      	blx	r6
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f43f aefc 	beq.w	8007826 <_printf_float+0xae>
 8007a2e:	f108 0801 	add.w	r8, r8, #1
 8007a32:	e7ee      	b.n	8007a12 <_printf_float+0x29a>
 8007a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	bfa8      	it	ge
 8007a3c:	461a      	movge	r2, r3
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	4690      	mov	r8, r2
 8007a42:	dd07      	ble.n	8007a54 <_printf_float+0x2dc>
 8007a44:	4613      	mov	r3, r2
 8007a46:	4659      	mov	r1, fp
 8007a48:	463a      	mov	r2, r7
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	47b0      	blx	r6
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f43f aee9 	beq.w	8007826 <_printf_float+0xae>
 8007a54:	f104 031a 	add.w	r3, r4, #26
 8007a58:	f04f 0a00 	mov.w	sl, #0
 8007a5c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a62:	e015      	b.n	8007a90 <_printf_float+0x318>
 8007a64:	7fefffff 	.word	0x7fefffff
 8007a68:	0800b510 	.word	0x0800b510
 8007a6c:	0800b50c 	.word	0x0800b50c
 8007a70:	0800b518 	.word	0x0800b518
 8007a74:	0800b514 	.word	0x0800b514
 8007a78:	0800b51c 	.word	0x0800b51c
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a80:	4659      	mov	r1, fp
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b0      	blx	r6
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f aecd 	beq.w	8007826 <_printf_float+0xae>
 8007a8c:	f10a 0a01 	add.w	sl, sl, #1
 8007a90:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007a94:	eba9 0308 	sub.w	r3, r9, r8
 8007a98:	4553      	cmp	r3, sl
 8007a9a:	dcef      	bgt.n	8007a7c <_printf_float+0x304>
 8007a9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	444f      	add	r7, r9
 8007aa4:	db14      	blt.n	8007ad0 <_printf_float+0x358>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	07da      	lsls	r2, r3, #31
 8007aaa:	d411      	bmi.n	8007ad0 <_printf_float+0x358>
 8007aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ab0:	eba3 0209 	sub.w	r2, r3, r9
 8007ab4:	eba3 0901 	sub.w	r9, r3, r1
 8007ab8:	4591      	cmp	r9, r2
 8007aba:	bfa8      	it	ge
 8007abc:	4691      	movge	r9, r2
 8007abe:	f1b9 0f00 	cmp.w	r9, #0
 8007ac2:	dc0d      	bgt.n	8007ae0 <_printf_float+0x368>
 8007ac4:	2700      	movs	r7, #0
 8007ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aca:	f104 081a 	add.w	r8, r4, #26
 8007ace:	e018      	b.n	8007b02 <_printf_float+0x38a>
 8007ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b0      	blx	r6
 8007ada:	3001      	adds	r0, #1
 8007adc:	d1e6      	bne.n	8007aac <_printf_float+0x334>
 8007ade:	e6a2      	b.n	8007826 <_printf_float+0xae>
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	47b0      	blx	r6
 8007aea:	3001      	adds	r0, #1
 8007aec:	d1ea      	bne.n	8007ac4 <_printf_float+0x34c>
 8007aee:	e69a      	b.n	8007826 <_printf_float+0xae>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4642      	mov	r2, r8
 8007af4:	4659      	mov	r1, fp
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b0      	blx	r6
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f ae93 	beq.w	8007826 <_printf_float+0xae>
 8007b00:	3701      	adds	r7, #1
 8007b02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	eba3 0309 	sub.w	r3, r3, r9
 8007b0c:	42bb      	cmp	r3, r7
 8007b0e:	dcef      	bgt.n	8007af0 <_printf_float+0x378>
 8007b10:	e74d      	b.n	80079ae <_printf_float+0x236>
 8007b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b14:	2a01      	cmp	r2, #1
 8007b16:	dc01      	bgt.n	8007b1c <_printf_float+0x3a4>
 8007b18:	07db      	lsls	r3, r3, #31
 8007b1a:	d538      	bpl.n	8007b8e <_printf_float+0x416>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	463a      	mov	r2, r7
 8007b20:	4659      	mov	r1, fp
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b0      	blx	r6
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f ae7d 	beq.w	8007826 <_printf_float+0xae>
 8007b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b30:	4659      	mov	r1, fp
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b0      	blx	r6
 8007b36:	3001      	adds	r0, #1
 8007b38:	f107 0701 	add.w	r7, r7, #1
 8007b3c:	f43f ae73 	beq.w	8007826 <_printf_float+0xae>
 8007b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b46:	2200      	movs	r2, #0
 8007b48:	f103 38ff 	add.w	r8, r3, #4294967295
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f7f8 ff2b 	bl	80009a8 <__aeabi_dcmpeq>
 8007b52:	b9c0      	cbnz	r0, 8007b86 <_printf_float+0x40e>
 8007b54:	4643      	mov	r3, r8
 8007b56:	463a      	mov	r2, r7
 8007b58:	4659      	mov	r1, fp
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b0      	blx	r6
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d10d      	bne.n	8007b7e <_printf_float+0x406>
 8007b62:	e660      	b.n	8007826 <_printf_float+0xae>
 8007b64:	2301      	movs	r3, #1
 8007b66:	4642      	mov	r2, r8
 8007b68:	4659      	mov	r1, fp
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b0      	blx	r6
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f43f ae59 	beq.w	8007826 <_printf_float+0xae>
 8007b74:	3701      	adds	r7, #1
 8007b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	42bb      	cmp	r3, r7
 8007b7c:	dcf2      	bgt.n	8007b64 <_printf_float+0x3ec>
 8007b7e:	464b      	mov	r3, r9
 8007b80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b84:	e6e4      	b.n	8007950 <_printf_float+0x1d8>
 8007b86:	2700      	movs	r7, #0
 8007b88:	f104 081a 	add.w	r8, r4, #26
 8007b8c:	e7f3      	b.n	8007b76 <_printf_float+0x3fe>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e7e1      	b.n	8007b56 <_printf_float+0x3de>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4642      	mov	r2, r8
 8007b96:	4659      	mov	r1, fp
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b0      	blx	r6
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f ae42 	beq.w	8007826 <_printf_float+0xae>
 8007ba2:	3701      	adds	r7, #1
 8007ba4:	68e3      	ldr	r3, [r4, #12]
 8007ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	42bb      	cmp	r3, r7
 8007bac:	dcf1      	bgt.n	8007b92 <_printf_float+0x41a>
 8007bae:	e702      	b.n	80079b6 <_printf_float+0x23e>
 8007bb0:	2700      	movs	r7, #0
 8007bb2:	f104 0819 	add.w	r8, r4, #25
 8007bb6:	e7f5      	b.n	8007ba4 <_printf_float+0x42c>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f43f ae94 	beq.w	80078e6 <_printf_float+0x16e>
 8007bbe:	f04f 0c00 	mov.w	ip, #0
 8007bc2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007bc6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007bca:	6022      	str	r2, [r4, #0]
 8007bcc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007bd0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	463a      	mov	r2, r7
 8007bd8:	464b      	mov	r3, r9
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f7ff fd3b 	bl	8007656 <__cvt>
 8007be0:	4607      	mov	r7, r0
 8007be2:	e64f      	b.n	8007884 <_printf_float+0x10c>

08007be4 <_printf_common>:
 8007be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	4691      	mov	r9, r2
 8007bea:	461f      	mov	r7, r3
 8007bec:	688a      	ldr	r2, [r1, #8]
 8007bee:	690b      	ldr	r3, [r1, #16]
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	bfb8      	it	lt
 8007bf6:	4613      	movlt	r3, r2
 8007bf8:	f8c9 3000 	str.w	r3, [r9]
 8007bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c00:	460c      	mov	r4, r1
 8007c02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c06:	b112      	cbz	r2, 8007c0e <_printf_common+0x2a>
 8007c08:	3301      	adds	r3, #1
 8007c0a:	f8c9 3000 	str.w	r3, [r9]
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	0699      	lsls	r1, r3, #26
 8007c12:	bf42      	ittt	mi
 8007c14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c18:	3302      	addmi	r3, #2
 8007c1a:	f8c9 3000 	strmi.w	r3, [r9]
 8007c1e:	6825      	ldr	r5, [r4, #0]
 8007c20:	f015 0506 	ands.w	r5, r5, #6
 8007c24:	d107      	bne.n	8007c36 <_printf_common+0x52>
 8007c26:	f104 0a19 	add.w	sl, r4, #25
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8007c30:	1a9b      	subs	r3, r3, r2
 8007c32:	42ab      	cmp	r3, r5
 8007c34:	dc29      	bgt.n	8007c8a <_printf_common+0xa6>
 8007c36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c3a:	6822      	ldr	r2, [r4, #0]
 8007c3c:	3300      	adds	r3, #0
 8007c3e:	bf18      	it	ne
 8007c40:	2301      	movne	r3, #1
 8007c42:	0692      	lsls	r2, r2, #26
 8007c44:	d42e      	bmi.n	8007ca4 <_printf_common+0xc0>
 8007c46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	47c0      	blx	r8
 8007c50:	3001      	adds	r0, #1
 8007c52:	d021      	beq.n	8007c98 <_printf_common+0xb4>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	68e5      	ldr	r5, [r4, #12]
 8007c58:	f003 0306 	and.w	r3, r3, #6
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	bf18      	it	ne
 8007c60:	2500      	movne	r5, #0
 8007c62:	f8d9 2000 	ldr.w	r2, [r9]
 8007c66:	f04f 0900 	mov.w	r9, #0
 8007c6a:	bf08      	it	eq
 8007c6c:	1aad      	subeq	r5, r5, r2
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	6922      	ldr	r2, [r4, #16]
 8007c72:	bf08      	it	eq
 8007c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	bfc4      	itt	gt
 8007c7c:	1a9b      	subgt	r3, r3, r2
 8007c7e:	18ed      	addgt	r5, r5, r3
 8007c80:	341a      	adds	r4, #26
 8007c82:	454d      	cmp	r5, r9
 8007c84:	d11a      	bne.n	8007cbc <_printf_common+0xd8>
 8007c86:	2000      	movs	r0, #0
 8007c88:	e008      	b.n	8007c9c <_printf_common+0xb8>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4630      	mov	r0, r6
 8007c92:	47c0      	blx	r8
 8007c94:	3001      	adds	r0, #1
 8007c96:	d103      	bne.n	8007ca0 <_printf_common+0xbc>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	e7c2      	b.n	8007c2a <_printf_common+0x46>
 8007ca4:	2030      	movs	r0, #48	; 0x30
 8007ca6:	18e1      	adds	r1, r4, r3
 8007ca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cb2:	4422      	add	r2, r4
 8007cb4:	3302      	adds	r3, #2
 8007cb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cba:	e7c4      	b.n	8007c46 <_printf_common+0x62>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	47c0      	blx	r8
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d0e6      	beq.n	8007c98 <_printf_common+0xb4>
 8007cca:	f109 0901 	add.w	r9, r9, #1
 8007cce:	e7d8      	b.n	8007c82 <_printf_common+0x9e>

08007cd0 <_printf_i>:
 8007cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007cd8:	460c      	mov	r4, r1
 8007cda:	7e09      	ldrb	r1, [r1, #24]
 8007cdc:	b085      	sub	sp, #20
 8007cde:	296e      	cmp	r1, #110	; 0x6e
 8007ce0:	4617      	mov	r7, r2
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	4698      	mov	r8, r3
 8007ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce8:	f000 80b3 	beq.w	8007e52 <_printf_i+0x182>
 8007cec:	d822      	bhi.n	8007d34 <_printf_i+0x64>
 8007cee:	2963      	cmp	r1, #99	; 0x63
 8007cf0:	d036      	beq.n	8007d60 <_printf_i+0x90>
 8007cf2:	d80a      	bhi.n	8007d0a <_printf_i+0x3a>
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	f000 80b9 	beq.w	8007e6c <_printf_i+0x19c>
 8007cfa:	2958      	cmp	r1, #88	; 0x58
 8007cfc:	f000 8083 	beq.w	8007e06 <_printf_i+0x136>
 8007d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d08:	e032      	b.n	8007d70 <_printf_i+0xa0>
 8007d0a:	2964      	cmp	r1, #100	; 0x64
 8007d0c:	d001      	beq.n	8007d12 <_printf_i+0x42>
 8007d0e:	2969      	cmp	r1, #105	; 0x69
 8007d10:	d1f6      	bne.n	8007d00 <_printf_i+0x30>
 8007d12:	6820      	ldr	r0, [r4, #0]
 8007d14:	6813      	ldr	r3, [r2, #0]
 8007d16:	0605      	lsls	r5, r0, #24
 8007d18:	f103 0104 	add.w	r1, r3, #4
 8007d1c:	d52a      	bpl.n	8007d74 <_printf_i+0xa4>
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6011      	str	r1, [r2, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	da03      	bge.n	8007d2e <_printf_i+0x5e>
 8007d26:	222d      	movs	r2, #45	; 0x2d
 8007d28:	425b      	negs	r3, r3
 8007d2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d2e:	486f      	ldr	r0, [pc, #444]	; (8007eec <_printf_i+0x21c>)
 8007d30:	220a      	movs	r2, #10
 8007d32:	e039      	b.n	8007da8 <_printf_i+0xd8>
 8007d34:	2973      	cmp	r1, #115	; 0x73
 8007d36:	f000 809d 	beq.w	8007e74 <_printf_i+0x1a4>
 8007d3a:	d808      	bhi.n	8007d4e <_printf_i+0x7e>
 8007d3c:	296f      	cmp	r1, #111	; 0x6f
 8007d3e:	d020      	beq.n	8007d82 <_printf_i+0xb2>
 8007d40:	2970      	cmp	r1, #112	; 0x70
 8007d42:	d1dd      	bne.n	8007d00 <_printf_i+0x30>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	f043 0320 	orr.w	r3, r3, #32
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	e003      	b.n	8007d56 <_printf_i+0x86>
 8007d4e:	2975      	cmp	r1, #117	; 0x75
 8007d50:	d017      	beq.n	8007d82 <_printf_i+0xb2>
 8007d52:	2978      	cmp	r1, #120	; 0x78
 8007d54:	d1d4      	bne.n	8007d00 <_printf_i+0x30>
 8007d56:	2378      	movs	r3, #120	; 0x78
 8007d58:	4865      	ldr	r0, [pc, #404]	; (8007ef0 <_printf_i+0x220>)
 8007d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d5e:	e055      	b.n	8007e0c <_printf_i+0x13c>
 8007d60:	6813      	ldr	r3, [r2, #0]
 8007d62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d66:	1d19      	adds	r1, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6011      	str	r1, [r2, #0]
 8007d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d70:	2301      	movs	r3, #1
 8007d72:	e08c      	b.n	8007e8e <_printf_i+0x1be>
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d7a:	6011      	str	r1, [r2, #0]
 8007d7c:	bf18      	it	ne
 8007d7e:	b21b      	sxthne	r3, r3
 8007d80:	e7cf      	b.n	8007d22 <_printf_i+0x52>
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	6825      	ldr	r5, [r4, #0]
 8007d86:	1d18      	adds	r0, r3, #4
 8007d88:	6010      	str	r0, [r2, #0]
 8007d8a:	0628      	lsls	r0, r5, #24
 8007d8c:	d501      	bpl.n	8007d92 <_printf_i+0xc2>
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	e002      	b.n	8007d98 <_printf_i+0xc8>
 8007d92:	0668      	lsls	r0, r5, #25
 8007d94:	d5fb      	bpl.n	8007d8e <_printf_i+0xbe>
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	296f      	cmp	r1, #111	; 0x6f
 8007d9a:	bf14      	ite	ne
 8007d9c:	220a      	movne	r2, #10
 8007d9e:	2208      	moveq	r2, #8
 8007da0:	4852      	ldr	r0, [pc, #328]	; (8007eec <_printf_i+0x21c>)
 8007da2:	2100      	movs	r1, #0
 8007da4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007da8:	6865      	ldr	r5, [r4, #4]
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	60a5      	str	r5, [r4, #8]
 8007dae:	f2c0 8095 	blt.w	8007edc <_printf_i+0x20c>
 8007db2:	6821      	ldr	r1, [r4, #0]
 8007db4:	f021 0104 	bic.w	r1, r1, #4
 8007db8:	6021      	str	r1, [r4, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d13d      	bne.n	8007e3a <_printf_i+0x16a>
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	f040 808e 	bne.w	8007ee0 <_printf_i+0x210>
 8007dc4:	4665      	mov	r5, ip
 8007dc6:	2a08      	cmp	r2, #8
 8007dc8:	d10b      	bne.n	8007de2 <_printf_i+0x112>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	07db      	lsls	r3, r3, #31
 8007dce:	d508      	bpl.n	8007de2 <_printf_i+0x112>
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	6862      	ldr	r2, [r4, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	bfde      	ittt	le
 8007dd8:	2330      	movle	r3, #48	; 0x30
 8007dda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007de2:	ebac 0305 	sub.w	r3, ip, r5
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	f8cd 8000 	str.w	r8, [sp]
 8007dec:	463b      	mov	r3, r7
 8007dee:	aa03      	add	r2, sp, #12
 8007df0:	4621      	mov	r1, r4
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff fef6 	bl	8007be4 <_printf_common>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d14d      	bne.n	8007e98 <_printf_i+0x1c8>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	b005      	add	sp, #20
 8007e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e06:	4839      	ldr	r0, [pc, #228]	; (8007eec <_printf_i+0x21c>)
 8007e08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e0c:	6813      	ldr	r3, [r2, #0]
 8007e0e:	6821      	ldr	r1, [r4, #0]
 8007e10:	1d1d      	adds	r5, r3, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6015      	str	r5, [r2, #0]
 8007e16:	060a      	lsls	r2, r1, #24
 8007e18:	d50b      	bpl.n	8007e32 <_printf_i+0x162>
 8007e1a:	07ca      	lsls	r2, r1, #31
 8007e1c:	bf44      	itt	mi
 8007e1e:	f041 0120 	orrmi.w	r1, r1, #32
 8007e22:	6021      	strmi	r1, [r4, #0]
 8007e24:	b91b      	cbnz	r3, 8007e2e <_printf_i+0x15e>
 8007e26:	6822      	ldr	r2, [r4, #0]
 8007e28:	f022 0220 	bic.w	r2, r2, #32
 8007e2c:	6022      	str	r2, [r4, #0]
 8007e2e:	2210      	movs	r2, #16
 8007e30:	e7b7      	b.n	8007da2 <_printf_i+0xd2>
 8007e32:	064d      	lsls	r5, r1, #25
 8007e34:	bf48      	it	mi
 8007e36:	b29b      	uxthmi	r3, r3
 8007e38:	e7ef      	b.n	8007e1a <_printf_i+0x14a>
 8007e3a:	4665      	mov	r5, ip
 8007e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e40:	fb02 3311 	mls	r3, r2, r1, r3
 8007e44:	5cc3      	ldrb	r3, [r0, r3]
 8007e46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d1f5      	bne.n	8007e3c <_printf_i+0x16c>
 8007e50:	e7b9      	b.n	8007dc6 <_printf_i+0xf6>
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	6825      	ldr	r5, [r4, #0]
 8007e56:	1d18      	adds	r0, r3, #4
 8007e58:	6961      	ldr	r1, [r4, #20]
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	0628      	lsls	r0, r5, #24
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	d501      	bpl.n	8007e66 <_printf_i+0x196>
 8007e62:	6019      	str	r1, [r3, #0]
 8007e64:	e002      	b.n	8007e6c <_printf_i+0x19c>
 8007e66:	066a      	lsls	r2, r5, #25
 8007e68:	d5fb      	bpl.n	8007e62 <_printf_i+0x192>
 8007e6a:	8019      	strh	r1, [r3, #0]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4665      	mov	r5, ip
 8007e70:	6123      	str	r3, [r4, #16]
 8007e72:	e7b9      	b.n	8007de8 <_printf_i+0x118>
 8007e74:	6813      	ldr	r3, [r2, #0]
 8007e76:	1d19      	adds	r1, r3, #4
 8007e78:	6011      	str	r1, [r2, #0]
 8007e7a:	681d      	ldr	r5, [r3, #0]
 8007e7c:	6862      	ldr	r2, [r4, #4]
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4628      	mov	r0, r5
 8007e82:	f002 faab 	bl	800a3dc <memchr>
 8007e86:	b108      	cbz	r0, 8007e8c <_printf_i+0x1bc>
 8007e88:	1b40      	subs	r0, r0, r5
 8007e8a:	6060      	str	r0, [r4, #4]
 8007e8c:	6863      	ldr	r3, [r4, #4]
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	2300      	movs	r3, #0
 8007e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e96:	e7a7      	b.n	8007de8 <_printf_i+0x118>
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	47c0      	blx	r8
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d0aa      	beq.n	8007dfc <_printf_i+0x12c>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	079b      	lsls	r3, r3, #30
 8007eaa:	d413      	bmi.n	8007ed4 <_printf_i+0x204>
 8007eac:	68e0      	ldr	r0, [r4, #12]
 8007eae:	9b03      	ldr	r3, [sp, #12]
 8007eb0:	4298      	cmp	r0, r3
 8007eb2:	bfb8      	it	lt
 8007eb4:	4618      	movlt	r0, r3
 8007eb6:	e7a3      	b.n	8007e00 <_printf_i+0x130>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	464a      	mov	r2, r9
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	47c0      	blx	r8
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	d09a      	beq.n	8007dfc <_printf_i+0x12c>
 8007ec6:	3501      	adds	r5, #1
 8007ec8:	68e3      	ldr	r3, [r4, #12]
 8007eca:	9a03      	ldr	r2, [sp, #12]
 8007ecc:	1a9b      	subs	r3, r3, r2
 8007ece:	42ab      	cmp	r3, r5
 8007ed0:	dcf2      	bgt.n	8007eb8 <_printf_i+0x1e8>
 8007ed2:	e7eb      	b.n	8007eac <_printf_i+0x1dc>
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	f104 0919 	add.w	r9, r4, #25
 8007eda:	e7f5      	b.n	8007ec8 <_printf_i+0x1f8>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1ac      	bne.n	8007e3a <_printf_i+0x16a>
 8007ee0:	7803      	ldrb	r3, [r0, #0]
 8007ee2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ee6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eea:	e76c      	b.n	8007dc6 <_printf_i+0xf6>
 8007eec:	0800b51e 	.word	0x0800b51e
 8007ef0:	0800b52f 	.word	0x0800b52f

08007ef4 <_scanf_float>:
 8007ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef8:	469a      	mov	sl, r3
 8007efa:	688b      	ldr	r3, [r1, #8]
 8007efc:	4616      	mov	r6, r2
 8007efe:	1e5a      	subs	r2, r3, #1
 8007f00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f04:	bf88      	it	hi
 8007f06:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	bf85      	ittet	hi
 8007f0e:	189b      	addhi	r3, r3, r2
 8007f10:	9301      	strhi	r3, [sp, #4]
 8007f12:	2300      	movls	r3, #0
 8007f14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f18:	4688      	mov	r8, r1
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	bf8c      	ite	hi
 8007f20:	608b      	strhi	r3, [r1, #8]
 8007f22:	9301      	strls	r3, [sp, #4]
 8007f24:	680b      	ldr	r3, [r1, #0]
 8007f26:	4607      	mov	r7, r0
 8007f28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f2c:	f848 3b1c 	str.w	r3, [r8], #28
 8007f30:	460c      	mov	r4, r1
 8007f32:	4645      	mov	r5, r8
 8007f34:	465a      	mov	r2, fp
 8007f36:	46d9      	mov	r9, fp
 8007f38:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007f3c:	f8cd b008 	str.w	fp, [sp, #8]
 8007f40:	68a1      	ldr	r1, [r4, #8]
 8007f42:	b181      	cbz	r1, 8007f66 <_scanf_float+0x72>
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b49      	cmp	r3, #73	; 0x49
 8007f4a:	d071      	beq.n	8008030 <_scanf_float+0x13c>
 8007f4c:	d84d      	bhi.n	8007fea <_scanf_float+0xf6>
 8007f4e:	2b39      	cmp	r3, #57	; 0x39
 8007f50:	d840      	bhi.n	8007fd4 <_scanf_float+0xe0>
 8007f52:	2b31      	cmp	r3, #49	; 0x31
 8007f54:	f080 8088 	bcs.w	8008068 <_scanf_float+0x174>
 8007f58:	2b2d      	cmp	r3, #45	; 0x2d
 8007f5a:	f000 8090 	beq.w	800807e <_scanf_float+0x18a>
 8007f5e:	d815      	bhi.n	8007f8c <_scanf_float+0x98>
 8007f60:	2b2b      	cmp	r3, #43	; 0x2b
 8007f62:	f000 808c 	beq.w	800807e <_scanf_float+0x18a>
 8007f66:	f1b9 0f00 	cmp.w	r9, #0
 8007f6a:	d003      	beq.n	8007f74 <_scanf_float+0x80>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	3a01      	subs	r2, #1
 8007f76:	2a01      	cmp	r2, #1
 8007f78:	f200 80ea 	bhi.w	8008150 <_scanf_float+0x25c>
 8007f7c:	4545      	cmp	r5, r8
 8007f7e:	f200 80dc 	bhi.w	800813a <_scanf_float+0x246>
 8007f82:	2601      	movs	r6, #1
 8007f84:	4630      	mov	r0, r6
 8007f86:	b007      	add	sp, #28
 8007f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f8e:	f000 809f 	beq.w	80080d0 <_scanf_float+0x1dc>
 8007f92:	2b30      	cmp	r3, #48	; 0x30
 8007f94:	d1e7      	bne.n	8007f66 <_scanf_float+0x72>
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007f9c:	d064      	beq.n	8008068 <_scanf_float+0x174>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007fa4:	6020      	str	r0, [r4, #0]
 8007fa6:	f109 0901 	add.w	r9, r9, #1
 8007faa:	b11b      	cbz	r3, 8007fb4 <_scanf_float+0xc0>
 8007fac:	3b01      	subs	r3, #1
 8007fae:	3101      	adds	r1, #1
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	60a1      	str	r1, [r4, #8]
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	6873      	ldr	r3, [r6, #4]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	6073      	str	r3, [r6, #4]
 8007fc8:	f340 80ac 	ble.w	8008124 <_scanf_float+0x230>
 8007fcc:	6833      	ldr	r3, [r6, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	6033      	str	r3, [r6, #0]
 8007fd2:	e7b5      	b.n	8007f40 <_scanf_float+0x4c>
 8007fd4:	2b45      	cmp	r3, #69	; 0x45
 8007fd6:	f000 8085 	beq.w	80080e4 <_scanf_float+0x1f0>
 8007fda:	2b46      	cmp	r3, #70	; 0x46
 8007fdc:	d06a      	beq.n	80080b4 <_scanf_float+0x1c0>
 8007fde:	2b41      	cmp	r3, #65	; 0x41
 8007fe0:	d1c1      	bne.n	8007f66 <_scanf_float+0x72>
 8007fe2:	2a01      	cmp	r2, #1
 8007fe4:	d1bf      	bne.n	8007f66 <_scanf_float+0x72>
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	e046      	b.n	8008078 <_scanf_float+0x184>
 8007fea:	2b65      	cmp	r3, #101	; 0x65
 8007fec:	d07a      	beq.n	80080e4 <_scanf_float+0x1f0>
 8007fee:	d818      	bhi.n	8008022 <_scanf_float+0x12e>
 8007ff0:	2b54      	cmp	r3, #84	; 0x54
 8007ff2:	d066      	beq.n	80080c2 <_scanf_float+0x1ce>
 8007ff4:	d811      	bhi.n	800801a <_scanf_float+0x126>
 8007ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8007ff8:	d1b5      	bne.n	8007f66 <_scanf_float+0x72>
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	d146      	bne.n	800808c <_scanf_float+0x198>
 8007ffe:	f1b9 0f00 	cmp.w	r9, #0
 8008002:	d145      	bne.n	8008090 <_scanf_float+0x19c>
 8008004:	6821      	ldr	r1, [r4, #0]
 8008006:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800800a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800800e:	d13f      	bne.n	8008090 <_scanf_float+0x19c>
 8008010:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008014:	6021      	str	r1, [r4, #0]
 8008016:	2201      	movs	r2, #1
 8008018:	e02e      	b.n	8008078 <_scanf_float+0x184>
 800801a:	2b59      	cmp	r3, #89	; 0x59
 800801c:	d01e      	beq.n	800805c <_scanf_float+0x168>
 800801e:	2b61      	cmp	r3, #97	; 0x61
 8008020:	e7de      	b.n	8007fe0 <_scanf_float+0xec>
 8008022:	2b6e      	cmp	r3, #110	; 0x6e
 8008024:	d0e9      	beq.n	8007ffa <_scanf_float+0x106>
 8008026:	d815      	bhi.n	8008054 <_scanf_float+0x160>
 8008028:	2b66      	cmp	r3, #102	; 0x66
 800802a:	d043      	beq.n	80080b4 <_scanf_float+0x1c0>
 800802c:	2b69      	cmp	r3, #105	; 0x69
 800802e:	d19a      	bne.n	8007f66 <_scanf_float+0x72>
 8008030:	f1bb 0f00 	cmp.w	fp, #0
 8008034:	d138      	bne.n	80080a8 <_scanf_float+0x1b4>
 8008036:	f1b9 0f00 	cmp.w	r9, #0
 800803a:	d197      	bne.n	8007f6c <_scanf_float+0x78>
 800803c:	6821      	ldr	r1, [r4, #0]
 800803e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008042:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008046:	d195      	bne.n	8007f74 <_scanf_float+0x80>
 8008048:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800804c:	6021      	str	r1, [r4, #0]
 800804e:	f04f 0b01 	mov.w	fp, #1
 8008052:	e011      	b.n	8008078 <_scanf_float+0x184>
 8008054:	2b74      	cmp	r3, #116	; 0x74
 8008056:	d034      	beq.n	80080c2 <_scanf_float+0x1ce>
 8008058:	2b79      	cmp	r3, #121	; 0x79
 800805a:	d184      	bne.n	8007f66 <_scanf_float+0x72>
 800805c:	f1bb 0f07 	cmp.w	fp, #7
 8008060:	d181      	bne.n	8007f66 <_scanf_float+0x72>
 8008062:	f04f 0b08 	mov.w	fp, #8
 8008066:	e007      	b.n	8008078 <_scanf_float+0x184>
 8008068:	eb12 0f0b 	cmn.w	r2, fp
 800806c:	f47f af7b 	bne.w	8007f66 <_scanf_float+0x72>
 8008070:	6821      	ldr	r1, [r4, #0]
 8008072:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008076:	6021      	str	r1, [r4, #0]
 8008078:	702b      	strb	r3, [r5, #0]
 800807a:	3501      	adds	r5, #1
 800807c:	e79a      	b.n	8007fb4 <_scanf_float+0xc0>
 800807e:	6821      	ldr	r1, [r4, #0]
 8008080:	0608      	lsls	r0, r1, #24
 8008082:	f57f af70 	bpl.w	8007f66 <_scanf_float+0x72>
 8008086:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800808a:	e7f4      	b.n	8008076 <_scanf_float+0x182>
 800808c:	2a02      	cmp	r2, #2
 800808e:	d047      	beq.n	8008120 <_scanf_float+0x22c>
 8008090:	f1bb 0f01 	cmp.w	fp, #1
 8008094:	d003      	beq.n	800809e <_scanf_float+0x1aa>
 8008096:	f1bb 0f04 	cmp.w	fp, #4
 800809a:	f47f af64 	bne.w	8007f66 <_scanf_float+0x72>
 800809e:	f10b 0b01 	add.w	fp, fp, #1
 80080a2:	fa5f fb8b 	uxtb.w	fp, fp
 80080a6:	e7e7      	b.n	8008078 <_scanf_float+0x184>
 80080a8:	f1bb 0f03 	cmp.w	fp, #3
 80080ac:	d0f7      	beq.n	800809e <_scanf_float+0x1aa>
 80080ae:	f1bb 0f05 	cmp.w	fp, #5
 80080b2:	e7f2      	b.n	800809a <_scanf_float+0x1a6>
 80080b4:	f1bb 0f02 	cmp.w	fp, #2
 80080b8:	f47f af55 	bne.w	8007f66 <_scanf_float+0x72>
 80080bc:	f04f 0b03 	mov.w	fp, #3
 80080c0:	e7da      	b.n	8008078 <_scanf_float+0x184>
 80080c2:	f1bb 0f06 	cmp.w	fp, #6
 80080c6:	f47f af4e 	bne.w	8007f66 <_scanf_float+0x72>
 80080ca:	f04f 0b07 	mov.w	fp, #7
 80080ce:	e7d3      	b.n	8008078 <_scanf_float+0x184>
 80080d0:	6821      	ldr	r1, [r4, #0]
 80080d2:	0588      	lsls	r0, r1, #22
 80080d4:	f57f af47 	bpl.w	8007f66 <_scanf_float+0x72>
 80080d8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80080dc:	6021      	str	r1, [r4, #0]
 80080de:	f8cd 9008 	str.w	r9, [sp, #8]
 80080e2:	e7c9      	b.n	8008078 <_scanf_float+0x184>
 80080e4:	6821      	ldr	r1, [r4, #0]
 80080e6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80080ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80080ee:	d006      	beq.n	80080fe <_scanf_float+0x20a>
 80080f0:	0548      	lsls	r0, r1, #21
 80080f2:	f57f af38 	bpl.w	8007f66 <_scanf_float+0x72>
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	f43f af3b 	beq.w	8007f74 <_scanf_float+0x80>
 80080fe:	0588      	lsls	r0, r1, #22
 8008100:	bf58      	it	pl
 8008102:	9802      	ldrpl	r0, [sp, #8]
 8008104:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008108:	bf58      	it	pl
 800810a:	eba9 0000 	subpl.w	r0, r9, r0
 800810e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008112:	bf58      	it	pl
 8008114:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008118:	6021      	str	r1, [r4, #0]
 800811a:	f04f 0900 	mov.w	r9, #0
 800811e:	e7ab      	b.n	8008078 <_scanf_float+0x184>
 8008120:	2203      	movs	r2, #3
 8008122:	e7a9      	b.n	8008078 <_scanf_float+0x184>
 8008124:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008128:	4631      	mov	r1, r6
 800812a:	4638      	mov	r0, r7
 800812c:	9205      	str	r2, [sp, #20]
 800812e:	4798      	blx	r3
 8008130:	9a05      	ldr	r2, [sp, #20]
 8008132:	2800      	cmp	r0, #0
 8008134:	f43f af04 	beq.w	8007f40 <_scanf_float+0x4c>
 8008138:	e715      	b.n	8007f66 <_scanf_float+0x72>
 800813a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800813e:	4632      	mov	r2, r6
 8008140:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008144:	4638      	mov	r0, r7
 8008146:	4798      	blx	r3
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	3b01      	subs	r3, #1
 800814c:	6123      	str	r3, [r4, #16]
 800814e:	e715      	b.n	8007f7c <_scanf_float+0x88>
 8008150:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008154:	2b06      	cmp	r3, #6
 8008156:	d80a      	bhi.n	800816e <_scanf_float+0x27a>
 8008158:	f1bb 0f02 	cmp.w	fp, #2
 800815c:	d967      	bls.n	800822e <_scanf_float+0x33a>
 800815e:	f1ab 0b03 	sub.w	fp, fp, #3
 8008162:	fa5f fb8b 	uxtb.w	fp, fp
 8008166:	eba5 0b0b 	sub.w	fp, r5, fp
 800816a:	455d      	cmp	r5, fp
 800816c:	d14a      	bne.n	8008204 <_scanf_float+0x310>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	05da      	lsls	r2, r3, #23
 8008172:	d51f      	bpl.n	80081b4 <_scanf_float+0x2c0>
 8008174:	055b      	lsls	r3, r3, #21
 8008176:	d467      	bmi.n	8008248 <_scanf_float+0x354>
 8008178:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	2965      	cmp	r1, #101	; 0x65
 8008180:	f103 33ff 	add.w	r3, r3, #4294967295
 8008184:	f105 3bff 	add.w	fp, r5, #4294967295
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	d00d      	beq.n	80081a8 <_scanf_float+0x2b4>
 800818c:	2945      	cmp	r1, #69	; 0x45
 800818e:	d00b      	beq.n	80081a8 <_scanf_float+0x2b4>
 8008190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008194:	4632      	mov	r2, r6
 8008196:	4638      	mov	r0, r7
 8008198:	4798      	blx	r3
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	f1a5 0b02 	sub.w	fp, r5, #2
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081ac:	4632      	mov	r2, r6
 80081ae:	4638      	mov	r0, r7
 80081b0:	4798      	blx	r3
 80081b2:	465d      	mov	r5, fp
 80081b4:	6826      	ldr	r6, [r4, #0]
 80081b6:	f016 0610 	ands.w	r6, r6, #16
 80081ba:	d176      	bne.n	80082aa <_scanf_float+0x3b6>
 80081bc:	702e      	strb	r6, [r5, #0]
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c8:	d141      	bne.n	800824e <_scanf_float+0x35a>
 80081ca:	9b02      	ldr	r3, [sp, #8]
 80081cc:	eba9 0303 	sub.w	r3, r9, r3
 80081d0:	425a      	negs	r2, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d148      	bne.n	8008268 <_scanf_float+0x374>
 80081d6:	4641      	mov	r1, r8
 80081d8:	2200      	movs	r2, #0
 80081da:	4638      	mov	r0, r7
 80081dc:	f000 fec8 	bl	8008f70 <_strtod_r>
 80081e0:	6825      	ldr	r5, [r4, #0]
 80081e2:	4680      	mov	r8, r0
 80081e4:	f015 0f02 	tst.w	r5, #2
 80081e8:	4689      	mov	r9, r1
 80081ea:	f8da 3000 	ldr.w	r3, [sl]
 80081ee:	d046      	beq.n	800827e <_scanf_float+0x38a>
 80081f0:	1d1a      	adds	r2, r3, #4
 80081f2:	f8ca 2000 	str.w	r2, [sl]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	e9c3 8900 	strd	r8, r9, [r3]
 80081fc:	68e3      	ldr	r3, [r4, #12]
 80081fe:	3301      	adds	r3, #1
 8008200:	60e3      	str	r3, [r4, #12]
 8008202:	e6bf      	b.n	8007f84 <_scanf_float+0x90>
 8008204:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008208:	4632      	mov	r2, r6
 800820a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800820e:	4638      	mov	r0, r7
 8008210:	4798      	blx	r3
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	3b01      	subs	r3, #1
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	e7a7      	b.n	800816a <_scanf_float+0x276>
 800821a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800821e:	4632      	mov	r2, r6
 8008220:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008224:	4638      	mov	r0, r7
 8008226:	4798      	blx	r3
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	3b01      	subs	r3, #1
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	4545      	cmp	r5, r8
 8008230:	d8f3      	bhi.n	800821a <_scanf_float+0x326>
 8008232:	e6a6      	b.n	8007f82 <_scanf_float+0x8e>
 8008234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008238:	4632      	mov	r2, r6
 800823a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800823e:	4638      	mov	r0, r7
 8008240:	4798      	blx	r3
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	3b01      	subs	r3, #1
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	4545      	cmp	r5, r8
 800824a:	d8f3      	bhi.n	8008234 <_scanf_float+0x340>
 800824c:	e699      	b.n	8007f82 <_scanf_float+0x8e>
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0c0      	beq.n	80081d6 <_scanf_float+0x2e2>
 8008254:	9904      	ldr	r1, [sp, #16]
 8008256:	230a      	movs	r3, #10
 8008258:	4632      	mov	r2, r6
 800825a:	3101      	adds	r1, #1
 800825c:	4638      	mov	r0, r7
 800825e:	f000 ff13 	bl	8009088 <_strtol_r>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	9d04      	ldr	r5, [sp, #16]
 8008266:	1ac2      	subs	r2, r0, r3
 8008268:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800826c:	429d      	cmp	r5, r3
 800826e:	bf28      	it	cs
 8008270:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008274:	490e      	ldr	r1, [pc, #56]	; (80082b0 <_scanf_float+0x3bc>)
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f81c 	bl	80082b4 <siprintf>
 800827c:	e7ab      	b.n	80081d6 <_scanf_float+0x2e2>
 800827e:	1d1f      	adds	r7, r3, #4
 8008280:	f015 0504 	ands.w	r5, r5, #4
 8008284:	f8ca 7000 	str.w	r7, [sl]
 8008288:	d1b5      	bne.n	80081f6 <_scanf_float+0x302>
 800828a:	681f      	ldr	r7, [r3, #0]
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	f7f8 fbbc 	bl	8000a0c <__aeabi_dcmpun>
 8008294:	b120      	cbz	r0, 80082a0 <_scanf_float+0x3ac>
 8008296:	4628      	mov	r0, r5
 8008298:	f7ff f8fa 	bl	8007490 <nanf>
 800829c:	6038      	str	r0, [r7, #0]
 800829e:	e7ad      	b.n	80081fc <_scanf_float+0x308>
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	f7f8 fc10 	bl	8000ac8 <__aeabi_d2f>
 80082a8:	e7f8      	b.n	800829c <_scanf_float+0x3a8>
 80082aa:	2600      	movs	r6, #0
 80082ac:	e66a      	b.n	8007f84 <_scanf_float+0x90>
 80082ae:	bf00      	nop
 80082b0:	0800b540 	.word	0x0800b540

080082b4 <siprintf>:
 80082b4:	b40e      	push	{r1, r2, r3}
 80082b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082ba:	b500      	push	{lr}
 80082bc:	b09c      	sub	sp, #112	; 0x70
 80082be:	ab1d      	add	r3, sp, #116	; 0x74
 80082c0:	9002      	str	r0, [sp, #8]
 80082c2:	9006      	str	r0, [sp, #24]
 80082c4:	9107      	str	r1, [sp, #28]
 80082c6:	9104      	str	r1, [sp, #16]
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <siprintf+0x38>)
 80082ca:	4909      	ldr	r1, [pc, #36]	; (80082f0 <siprintf+0x3c>)
 80082cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	6800      	ldr	r0, [r0, #0]
 80082d4:	a902      	add	r1, sp, #8
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	f002 fd94 	bl	800ae04 <_svfiprintf_r>
 80082dc:	2200      	movs	r2, #0
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	b01c      	add	sp, #112	; 0x70
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	200000b0 	.word	0x200000b0
 80082f0:	ffff0208 	.word	0xffff0208

080082f4 <strstr>:
 80082f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f6:	7803      	ldrb	r3, [r0, #0]
 80082f8:	b17b      	cbz	r3, 800831a <strstr+0x26>
 80082fa:	4604      	mov	r4, r0
 80082fc:	7823      	ldrb	r3, [r4, #0]
 80082fe:	4620      	mov	r0, r4
 8008300:	1c66      	adds	r6, r4, #1
 8008302:	b17b      	cbz	r3, 8008324 <strstr+0x30>
 8008304:	1e4a      	subs	r2, r1, #1
 8008306:	1e63      	subs	r3, r4, #1
 8008308:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800830c:	b14d      	cbz	r5, 8008322 <strstr+0x2e>
 800830e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008312:	4634      	mov	r4, r6
 8008314:	42af      	cmp	r7, r5
 8008316:	d0f7      	beq.n	8008308 <strstr+0x14>
 8008318:	e7f0      	b.n	80082fc <strstr+0x8>
 800831a:	780b      	ldrb	r3, [r1, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	bf18      	it	ne
 8008320:	2000      	movne	r0, #0
 8008322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008324:	4618      	mov	r0, r3
 8008326:	e7fc      	b.n	8008322 <strstr+0x2e>

08008328 <sulp>:
 8008328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832c:	460f      	mov	r7, r1
 800832e:	4690      	mov	r8, r2
 8008330:	f002 fb2c 	bl	800a98c <__ulp>
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	f1b8 0f00 	cmp.w	r8, #0
 800833c:	d011      	beq.n	8008362 <sulp+0x3a>
 800833e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008346:	2b00      	cmp	r3, #0
 8008348:	dd0b      	ble.n	8008362 <sulp+0x3a>
 800834a:	2400      	movs	r4, #0
 800834c:	051b      	lsls	r3, r3, #20
 800834e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008352:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008356:	4622      	mov	r2, r4
 8008358:	462b      	mov	r3, r5
 800835a:	f7f8 f8bd 	bl	80004d8 <__aeabi_dmul>
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	4620      	mov	r0, r4
 8008364:	4629      	mov	r1, r5
 8008366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800836a:	0000      	movs	r0, r0
 800836c:	0000      	movs	r0, r0
	...

08008370 <_strtod_l>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	461f      	mov	r7, r3
 8008376:	2300      	movs	r3, #0
 8008378:	b0a1      	sub	sp, #132	; 0x84
 800837a:	4683      	mov	fp, r0
 800837c:	4638      	mov	r0, r7
 800837e:	460e      	mov	r6, r1
 8008380:	9217      	str	r2, [sp, #92]	; 0x5c
 8008382:	931c      	str	r3, [sp, #112]	; 0x70
 8008384:	f001 ffff 	bl	800a386 <__localeconv_l>
 8008388:	4680      	mov	r8, r0
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	f7f7 fee0 	bl	8000150 <strlen>
 8008390:	f04f 0900 	mov.w	r9, #0
 8008394:	4604      	mov	r4, r0
 8008396:	f04f 0a00 	mov.w	sl, #0
 800839a:	961b      	str	r6, [sp, #108]	; 0x6c
 800839c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800839e:	781a      	ldrb	r2, [r3, #0]
 80083a0:	2a0d      	cmp	r2, #13
 80083a2:	d832      	bhi.n	800840a <_strtod_l+0x9a>
 80083a4:	2a09      	cmp	r2, #9
 80083a6:	d236      	bcs.n	8008416 <_strtod_l+0xa6>
 80083a8:	2a00      	cmp	r2, #0
 80083aa:	d03e      	beq.n	800842a <_strtod_l+0xba>
 80083ac:	2300      	movs	r3, #0
 80083ae:	930d      	str	r3, [sp, #52]	; 0x34
 80083b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80083b2:	782b      	ldrb	r3, [r5, #0]
 80083b4:	2b30      	cmp	r3, #48	; 0x30
 80083b6:	f040 80ac 	bne.w	8008512 <_strtod_l+0x1a2>
 80083ba:	786b      	ldrb	r3, [r5, #1]
 80083bc:	2b58      	cmp	r3, #88	; 0x58
 80083be:	d001      	beq.n	80083c4 <_strtod_l+0x54>
 80083c0:	2b78      	cmp	r3, #120	; 0x78
 80083c2:	d167      	bne.n	8008494 <_strtod_l+0x124>
 80083c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c6:	9702      	str	r7, [sp, #8]
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	ab1c      	add	r3, sp, #112	; 0x70
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4a89      	ldr	r2, [pc, #548]	; (80085f4 <_strtod_l+0x284>)
 80083d0:	ab1d      	add	r3, sp, #116	; 0x74
 80083d2:	a91b      	add	r1, sp, #108	; 0x6c
 80083d4:	4658      	mov	r0, fp
 80083d6:	f001 fcfb 	bl	8009dd0 <__gethex>
 80083da:	f010 0407 	ands.w	r4, r0, #7
 80083de:	4606      	mov	r6, r0
 80083e0:	d005      	beq.n	80083ee <_strtod_l+0x7e>
 80083e2:	2c06      	cmp	r4, #6
 80083e4:	d12b      	bne.n	800843e <_strtod_l+0xce>
 80083e6:	2300      	movs	r3, #0
 80083e8:	3501      	adds	r5, #1
 80083ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80083ec:	930d      	str	r3, [sp, #52]	; 0x34
 80083ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f040 85a6 	bne.w	8008f42 <_strtod_l+0xbd2>
 80083f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083f8:	b1e3      	cbz	r3, 8008434 <_strtod_l+0xc4>
 80083fa:	464a      	mov	r2, r9
 80083fc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008400:	4610      	mov	r0, r2
 8008402:	4619      	mov	r1, r3
 8008404:	b021      	add	sp, #132	; 0x84
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840a:	2a2b      	cmp	r2, #43	; 0x2b
 800840c:	d015      	beq.n	800843a <_strtod_l+0xca>
 800840e:	2a2d      	cmp	r2, #45	; 0x2d
 8008410:	d004      	beq.n	800841c <_strtod_l+0xac>
 8008412:	2a20      	cmp	r2, #32
 8008414:	d1ca      	bne.n	80083ac <_strtod_l+0x3c>
 8008416:	3301      	adds	r3, #1
 8008418:	931b      	str	r3, [sp, #108]	; 0x6c
 800841a:	e7bf      	b.n	800839c <_strtod_l+0x2c>
 800841c:	2201      	movs	r2, #1
 800841e:	920d      	str	r2, [sp, #52]	; 0x34
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	921b      	str	r2, [sp, #108]	; 0x6c
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1c2      	bne.n	80083b0 <_strtod_l+0x40>
 800842a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800842c:	961b      	str	r6, [sp, #108]	; 0x6c
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 8585 	bne.w	8008f3e <_strtod_l+0xbce>
 8008434:	464a      	mov	r2, r9
 8008436:	4653      	mov	r3, sl
 8008438:	e7e2      	b.n	8008400 <_strtod_l+0x90>
 800843a:	2200      	movs	r2, #0
 800843c:	e7ef      	b.n	800841e <_strtod_l+0xae>
 800843e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008440:	b13a      	cbz	r2, 8008452 <_strtod_l+0xe2>
 8008442:	2135      	movs	r1, #53	; 0x35
 8008444:	a81e      	add	r0, sp, #120	; 0x78
 8008446:	f002 fb94 	bl	800ab72 <__copybits>
 800844a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800844c:	4658      	mov	r0, fp
 800844e:	f002 f807 	bl	800a460 <_Bfree>
 8008452:	3c01      	subs	r4, #1
 8008454:	2c04      	cmp	r4, #4
 8008456:	d806      	bhi.n	8008466 <_strtod_l+0xf6>
 8008458:	e8df f004 	tbb	[pc, r4]
 800845c:	1714030a 	.word	0x1714030a
 8008460:	0a          	.byte	0x0a
 8008461:	00          	.byte	0x00
 8008462:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8008466:	0731      	lsls	r1, r6, #28
 8008468:	d5c1      	bpl.n	80083ee <_strtod_l+0x7e>
 800846a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800846e:	e7be      	b.n	80083ee <_strtod_l+0x7e>
 8008470:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008472:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8008476:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800847a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800847e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8008482:	e7f0      	b.n	8008466 <_strtod_l+0xf6>
 8008484:	f8df a170 	ldr.w	sl, [pc, #368]	; 80085f8 <_strtod_l+0x288>
 8008488:	e7ed      	b.n	8008466 <_strtod_l+0xf6>
 800848a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800848e:	f04f 39ff 	mov.w	r9, #4294967295
 8008492:	e7e8      	b.n	8008466 <_strtod_l+0xf6>
 8008494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	921b      	str	r2, [sp, #108]	; 0x6c
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b30      	cmp	r3, #48	; 0x30
 800849e:	d0f9      	beq.n	8008494 <_strtod_l+0x124>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0a4      	beq.n	80083ee <_strtod_l+0x7e>
 80084a4:	2301      	movs	r3, #1
 80084a6:	2500      	movs	r5, #0
 80084a8:	220a      	movs	r2, #10
 80084aa:	9307      	str	r3, [sp, #28]
 80084ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084ae:	9506      	str	r5, [sp, #24]
 80084b0:	9308      	str	r3, [sp, #32]
 80084b2:	9504      	str	r5, [sp, #16]
 80084b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80084b6:	7807      	ldrb	r7, [r0, #0]
 80084b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80084bc:	b2d9      	uxtb	r1, r3
 80084be:	2909      	cmp	r1, #9
 80084c0:	d929      	bls.n	8008516 <_strtod_l+0x1a6>
 80084c2:	4622      	mov	r2, r4
 80084c4:	f8d8 1000 	ldr.w	r1, [r8]
 80084c8:	f002 fda4 	bl	800b014 <strncmp>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d031      	beq.n	8008534 <_strtod_l+0x1c4>
 80084d0:	2000      	movs	r0, #0
 80084d2:	463b      	mov	r3, r7
 80084d4:	4602      	mov	r2, r0
 80084d6:	9c04      	ldr	r4, [sp, #16]
 80084d8:	9005      	str	r0, [sp, #20]
 80084da:	2b65      	cmp	r3, #101	; 0x65
 80084dc:	d001      	beq.n	80084e2 <_strtod_l+0x172>
 80084de:	2b45      	cmp	r3, #69	; 0x45
 80084e0:	d114      	bne.n	800850c <_strtod_l+0x19c>
 80084e2:	b924      	cbnz	r4, 80084ee <_strtod_l+0x17e>
 80084e4:	b910      	cbnz	r0, 80084ec <_strtod_l+0x17c>
 80084e6:	9b07      	ldr	r3, [sp, #28]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d09e      	beq.n	800842a <_strtod_l+0xba>
 80084ec:	2400      	movs	r4, #0
 80084ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80084f0:	1c73      	adds	r3, r6, #1
 80084f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80084f4:	7873      	ldrb	r3, [r6, #1]
 80084f6:	2b2b      	cmp	r3, #43	; 0x2b
 80084f8:	d078      	beq.n	80085ec <_strtod_l+0x27c>
 80084fa:	2b2d      	cmp	r3, #45	; 0x2d
 80084fc:	d070      	beq.n	80085e0 <_strtod_l+0x270>
 80084fe:	f04f 0c00 	mov.w	ip, #0
 8008502:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008506:	2f09      	cmp	r7, #9
 8008508:	d97c      	bls.n	8008604 <_strtod_l+0x294>
 800850a:	961b      	str	r6, [sp, #108]	; 0x6c
 800850c:	f04f 0e00 	mov.w	lr, #0
 8008510:	e09a      	b.n	8008648 <_strtod_l+0x2d8>
 8008512:	2300      	movs	r3, #0
 8008514:	e7c7      	b.n	80084a6 <_strtod_l+0x136>
 8008516:	9904      	ldr	r1, [sp, #16]
 8008518:	3001      	adds	r0, #1
 800851a:	2908      	cmp	r1, #8
 800851c:	bfd7      	itett	le
 800851e:	9906      	ldrle	r1, [sp, #24]
 8008520:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008524:	fb02 3301 	mlale	r3, r2, r1, r3
 8008528:	9306      	strle	r3, [sp, #24]
 800852a:	9b04      	ldr	r3, [sp, #16]
 800852c:	901b      	str	r0, [sp, #108]	; 0x6c
 800852e:	3301      	adds	r3, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	e7bf      	b.n	80084b4 <_strtod_l+0x144>
 8008534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008536:	191a      	adds	r2, r3, r4
 8008538:	921b      	str	r2, [sp, #108]	; 0x6c
 800853a:	9a04      	ldr	r2, [sp, #16]
 800853c:	5d1b      	ldrb	r3, [r3, r4]
 800853e:	2a00      	cmp	r2, #0
 8008540:	d037      	beq.n	80085b2 <_strtod_l+0x242>
 8008542:	4602      	mov	r2, r0
 8008544:	9c04      	ldr	r4, [sp, #16]
 8008546:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800854a:	2909      	cmp	r1, #9
 800854c:	d913      	bls.n	8008576 <_strtod_l+0x206>
 800854e:	2101      	movs	r1, #1
 8008550:	9105      	str	r1, [sp, #20]
 8008552:	e7c2      	b.n	80084da <_strtod_l+0x16a>
 8008554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008556:	3001      	adds	r0, #1
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	921b      	str	r2, [sp, #108]	; 0x6c
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	d0f8      	beq.n	8008554 <_strtod_l+0x1e4>
 8008562:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008566:	2a08      	cmp	r2, #8
 8008568:	f200 84f0 	bhi.w	8008f4c <_strtod_l+0xbdc>
 800856c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800856e:	9208      	str	r2, [sp, #32]
 8008570:	4602      	mov	r2, r0
 8008572:	2000      	movs	r0, #0
 8008574:	4604      	mov	r4, r0
 8008576:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800857a:	f100 0101 	add.w	r1, r0, #1
 800857e:	d012      	beq.n	80085a6 <_strtod_l+0x236>
 8008580:	440a      	add	r2, r1
 8008582:	270a      	movs	r7, #10
 8008584:	4621      	mov	r1, r4
 8008586:	eb00 0c04 	add.w	ip, r0, r4
 800858a:	458c      	cmp	ip, r1
 800858c:	d113      	bne.n	80085b6 <_strtod_l+0x246>
 800858e:	1821      	adds	r1, r4, r0
 8008590:	2908      	cmp	r1, #8
 8008592:	f104 0401 	add.w	r4, r4, #1
 8008596:	4404      	add	r4, r0
 8008598:	dc19      	bgt.n	80085ce <_strtod_l+0x25e>
 800859a:	210a      	movs	r1, #10
 800859c:	9b06      	ldr	r3, [sp, #24]
 800859e:	fb01 e303 	mla	r3, r1, r3, lr
 80085a2:	9306      	str	r3, [sp, #24]
 80085a4:	2100      	movs	r1, #0
 80085a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085a8:	1c58      	adds	r0, r3, #1
 80085aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	4608      	mov	r0, r1
 80085b0:	e7c9      	b.n	8008546 <_strtod_l+0x1d6>
 80085b2:	9804      	ldr	r0, [sp, #16]
 80085b4:	e7d3      	b.n	800855e <_strtod_l+0x1ee>
 80085b6:	2908      	cmp	r1, #8
 80085b8:	f101 0101 	add.w	r1, r1, #1
 80085bc:	dc03      	bgt.n	80085c6 <_strtod_l+0x256>
 80085be:	9b06      	ldr	r3, [sp, #24]
 80085c0:	437b      	muls	r3, r7
 80085c2:	9306      	str	r3, [sp, #24]
 80085c4:	e7e1      	b.n	800858a <_strtod_l+0x21a>
 80085c6:	2910      	cmp	r1, #16
 80085c8:	bfd8      	it	le
 80085ca:	437d      	mulle	r5, r7
 80085cc:	e7dd      	b.n	800858a <_strtod_l+0x21a>
 80085ce:	2c10      	cmp	r4, #16
 80085d0:	bfdc      	itt	le
 80085d2:	210a      	movle	r1, #10
 80085d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80085d8:	e7e4      	b.n	80085a4 <_strtod_l+0x234>
 80085da:	2301      	movs	r3, #1
 80085dc:	9305      	str	r3, [sp, #20]
 80085de:	e781      	b.n	80084e4 <_strtod_l+0x174>
 80085e0:	f04f 0c01 	mov.w	ip, #1
 80085e4:	1cb3      	adds	r3, r6, #2
 80085e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80085e8:	78b3      	ldrb	r3, [r6, #2]
 80085ea:	e78a      	b.n	8008502 <_strtod_l+0x192>
 80085ec:	f04f 0c00 	mov.w	ip, #0
 80085f0:	e7f8      	b.n	80085e4 <_strtod_l+0x274>
 80085f2:	bf00      	nop
 80085f4:	0800b548 	.word	0x0800b548
 80085f8:	7ff00000 	.word	0x7ff00000
 80085fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085fe:	1c5f      	adds	r7, r3, #1
 8008600:	971b      	str	r7, [sp, #108]	; 0x6c
 8008602:	785b      	ldrb	r3, [r3, #1]
 8008604:	2b30      	cmp	r3, #48	; 0x30
 8008606:	d0f9      	beq.n	80085fc <_strtod_l+0x28c>
 8008608:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800860c:	2f08      	cmp	r7, #8
 800860e:	f63f af7d 	bhi.w	800850c <_strtod_l+0x19c>
 8008612:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800861c:	1c5f      	adds	r7, r3, #1
 800861e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008626:	f1b8 0f09 	cmp.w	r8, #9
 800862a:	d937      	bls.n	800869c <_strtod_l+0x32c>
 800862c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800862e:	1a7f      	subs	r7, r7, r1
 8008630:	2f08      	cmp	r7, #8
 8008632:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008636:	dc37      	bgt.n	80086a8 <_strtod_l+0x338>
 8008638:	45be      	cmp	lr, r7
 800863a:	bfa8      	it	ge
 800863c:	46be      	movge	lr, r7
 800863e:	f1bc 0f00 	cmp.w	ip, #0
 8008642:	d001      	beq.n	8008648 <_strtod_l+0x2d8>
 8008644:	f1ce 0e00 	rsb	lr, lr, #0
 8008648:	2c00      	cmp	r4, #0
 800864a:	d151      	bne.n	80086f0 <_strtod_l+0x380>
 800864c:	2800      	cmp	r0, #0
 800864e:	f47f aece 	bne.w	80083ee <_strtod_l+0x7e>
 8008652:	9a07      	ldr	r2, [sp, #28]
 8008654:	2a00      	cmp	r2, #0
 8008656:	f47f aeca 	bne.w	80083ee <_strtod_l+0x7e>
 800865a:	9a05      	ldr	r2, [sp, #20]
 800865c:	2a00      	cmp	r2, #0
 800865e:	f47f aee4 	bne.w	800842a <_strtod_l+0xba>
 8008662:	2b4e      	cmp	r3, #78	; 0x4e
 8008664:	d027      	beq.n	80086b6 <_strtod_l+0x346>
 8008666:	dc21      	bgt.n	80086ac <_strtod_l+0x33c>
 8008668:	2b49      	cmp	r3, #73	; 0x49
 800866a:	f47f aede 	bne.w	800842a <_strtod_l+0xba>
 800866e:	49a4      	ldr	r1, [pc, #656]	; (8008900 <_strtod_l+0x590>)
 8008670:	a81b      	add	r0, sp, #108	; 0x6c
 8008672:	f001 fde1 	bl	800a238 <__match>
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aed7 	beq.w	800842a <_strtod_l+0xba>
 800867c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800867e:	49a1      	ldr	r1, [pc, #644]	; (8008904 <_strtod_l+0x594>)
 8008680:	3b01      	subs	r3, #1
 8008682:	a81b      	add	r0, sp, #108	; 0x6c
 8008684:	931b      	str	r3, [sp, #108]	; 0x6c
 8008686:	f001 fdd7 	bl	800a238 <__match>
 800868a:	b910      	cbnz	r0, 8008692 <_strtod_l+0x322>
 800868c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800868e:	3301      	adds	r3, #1
 8008690:	931b      	str	r3, [sp, #108]	; 0x6c
 8008692:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008918 <_strtod_l+0x5a8>
 8008696:	f04f 0900 	mov.w	r9, #0
 800869a:	e6a8      	b.n	80083ee <_strtod_l+0x7e>
 800869c:	210a      	movs	r1, #10
 800869e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80086a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80086a6:	e7b8      	b.n	800861a <_strtod_l+0x2aa>
 80086a8:	46be      	mov	lr, r7
 80086aa:	e7c8      	b.n	800863e <_strtod_l+0x2ce>
 80086ac:	2b69      	cmp	r3, #105	; 0x69
 80086ae:	d0de      	beq.n	800866e <_strtod_l+0x2fe>
 80086b0:	2b6e      	cmp	r3, #110	; 0x6e
 80086b2:	f47f aeba 	bne.w	800842a <_strtod_l+0xba>
 80086b6:	4994      	ldr	r1, [pc, #592]	; (8008908 <_strtod_l+0x598>)
 80086b8:	a81b      	add	r0, sp, #108	; 0x6c
 80086ba:	f001 fdbd 	bl	800a238 <__match>
 80086be:	2800      	cmp	r0, #0
 80086c0:	f43f aeb3 	beq.w	800842a <_strtod_l+0xba>
 80086c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b28      	cmp	r3, #40	; 0x28
 80086ca:	d10e      	bne.n	80086ea <_strtod_l+0x37a>
 80086cc:	aa1e      	add	r2, sp, #120	; 0x78
 80086ce:	498f      	ldr	r1, [pc, #572]	; (800890c <_strtod_l+0x59c>)
 80086d0:	a81b      	add	r0, sp, #108	; 0x6c
 80086d2:	f001 fdc5 	bl	800a260 <__hexnan>
 80086d6:	2805      	cmp	r0, #5
 80086d8:	d107      	bne.n	80086ea <_strtod_l+0x37a>
 80086da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086dc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80086e0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80086e4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80086e8:	e681      	b.n	80083ee <_strtod_l+0x7e>
 80086ea:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008920 <_strtod_l+0x5b0>
 80086ee:	e7d2      	b.n	8008696 <_strtod_l+0x326>
 80086f0:	ebae 0302 	sub.w	r3, lr, r2
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	9806      	ldr	r0, [sp, #24]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bf08      	it	eq
 80086fe:	4623      	moveq	r3, r4
 8008700:	2c10      	cmp	r4, #16
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	46a0      	mov	r8, r4
 8008706:	bfa8      	it	ge
 8008708:	f04f 0810 	movge.w	r8, #16
 800870c:	f7f7 fe6a 	bl	80003e4 <__aeabi_ui2d>
 8008710:	2c09      	cmp	r4, #9
 8008712:	4681      	mov	r9, r0
 8008714:	468a      	mov	sl, r1
 8008716:	dc13      	bgt.n	8008740 <_strtod_l+0x3d0>
 8008718:	9b07      	ldr	r3, [sp, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f43f ae67 	beq.w	80083ee <_strtod_l+0x7e>
 8008720:	9b07      	ldr	r3, [sp, #28]
 8008722:	dd7e      	ble.n	8008822 <_strtod_l+0x4b2>
 8008724:	2b16      	cmp	r3, #22
 8008726:	dc65      	bgt.n	80087f4 <_strtod_l+0x484>
 8008728:	4a79      	ldr	r2, [pc, #484]	; (8008910 <_strtod_l+0x5a0>)
 800872a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800872e:	464a      	mov	r2, r9
 8008730:	e9de 0100 	ldrd	r0, r1, [lr]
 8008734:	4653      	mov	r3, sl
 8008736:	f7f7 fecf 	bl	80004d8 <__aeabi_dmul>
 800873a:	4681      	mov	r9, r0
 800873c:	468a      	mov	sl, r1
 800873e:	e656      	b.n	80083ee <_strtod_l+0x7e>
 8008740:	4b73      	ldr	r3, [pc, #460]	; (8008910 <_strtod_l+0x5a0>)
 8008742:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008746:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800874a:	f7f7 fec5 	bl	80004d8 <__aeabi_dmul>
 800874e:	4606      	mov	r6, r0
 8008750:	4628      	mov	r0, r5
 8008752:	460f      	mov	r7, r1
 8008754:	f7f7 fe46 	bl	80003e4 <__aeabi_ui2d>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4630      	mov	r0, r6
 800875e:	4639      	mov	r1, r7
 8008760:	f7f7 fd04 	bl	800016c <__adddf3>
 8008764:	2c0f      	cmp	r4, #15
 8008766:	4681      	mov	r9, r0
 8008768:	468a      	mov	sl, r1
 800876a:	ddd5      	ble.n	8008718 <_strtod_l+0x3a8>
 800876c:	9b07      	ldr	r3, [sp, #28]
 800876e:	eba4 0808 	sub.w	r8, r4, r8
 8008772:	4498      	add	r8, r3
 8008774:	f1b8 0f00 	cmp.w	r8, #0
 8008778:	f340 809a 	ble.w	80088b0 <_strtod_l+0x540>
 800877c:	f018 030f 	ands.w	r3, r8, #15
 8008780:	d00a      	beq.n	8008798 <_strtod_l+0x428>
 8008782:	4963      	ldr	r1, [pc, #396]	; (8008910 <_strtod_l+0x5a0>)
 8008784:	464a      	mov	r2, r9
 8008786:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800878a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878e:	4653      	mov	r3, sl
 8008790:	f7f7 fea2 	bl	80004d8 <__aeabi_dmul>
 8008794:	4681      	mov	r9, r0
 8008796:	468a      	mov	sl, r1
 8008798:	f038 080f 	bics.w	r8, r8, #15
 800879c:	d077      	beq.n	800888e <_strtod_l+0x51e>
 800879e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80087a2:	dd4b      	ble.n	800883c <_strtod_l+0x4cc>
 80087a4:	f04f 0800 	mov.w	r8, #0
 80087a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80087ac:	f8cd 8020 	str.w	r8, [sp, #32]
 80087b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087b4:	2322      	movs	r3, #34	; 0x22
 80087b6:	f04f 0900 	mov.w	r9, #0
 80087ba:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008918 <_strtod_l+0x5a8>
 80087be:	f8cb 3000 	str.w	r3, [fp]
 80087c2:	9b08      	ldr	r3, [sp, #32]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f43f ae12 	beq.w	80083ee <_strtod_l+0x7e>
 80087ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087cc:	4658      	mov	r0, fp
 80087ce:	f001 fe47 	bl	800a460 <_Bfree>
 80087d2:	9906      	ldr	r1, [sp, #24]
 80087d4:	4658      	mov	r0, fp
 80087d6:	f001 fe43 	bl	800a460 <_Bfree>
 80087da:	9904      	ldr	r1, [sp, #16]
 80087dc:	4658      	mov	r0, fp
 80087de:	f001 fe3f 	bl	800a460 <_Bfree>
 80087e2:	9908      	ldr	r1, [sp, #32]
 80087e4:	4658      	mov	r0, fp
 80087e6:	f001 fe3b 	bl	800a460 <_Bfree>
 80087ea:	4641      	mov	r1, r8
 80087ec:	4658      	mov	r0, fp
 80087ee:	f001 fe37 	bl	800a460 <_Bfree>
 80087f2:	e5fc      	b.n	80083ee <_strtod_l+0x7e>
 80087f4:	9a07      	ldr	r2, [sp, #28]
 80087f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80087fa:	4293      	cmp	r3, r2
 80087fc:	dbb6      	blt.n	800876c <_strtod_l+0x3fc>
 80087fe:	4d44      	ldr	r5, [pc, #272]	; (8008910 <_strtod_l+0x5a0>)
 8008800:	f1c4 040f 	rsb	r4, r4, #15
 8008804:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008808:	464a      	mov	r2, r9
 800880a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800880e:	4653      	mov	r3, sl
 8008810:	f7f7 fe62 	bl	80004d8 <__aeabi_dmul>
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	1b1c      	subs	r4, r3, r4
 8008818:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800881c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008820:	e789      	b.n	8008736 <_strtod_l+0x3c6>
 8008822:	f113 0f16 	cmn.w	r3, #22
 8008826:	dba1      	blt.n	800876c <_strtod_l+0x3fc>
 8008828:	4a39      	ldr	r2, [pc, #228]	; (8008910 <_strtod_l+0x5a0>)
 800882a:	4648      	mov	r0, r9
 800882c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008830:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008834:	4651      	mov	r1, sl
 8008836:	f7f7 ff79 	bl	800072c <__aeabi_ddiv>
 800883a:	e77e      	b.n	800873a <_strtod_l+0x3ca>
 800883c:	2300      	movs	r3, #0
 800883e:	4648      	mov	r0, r9
 8008840:	4651      	mov	r1, sl
 8008842:	461d      	mov	r5, r3
 8008844:	4e33      	ldr	r6, [pc, #204]	; (8008914 <_strtod_l+0x5a4>)
 8008846:	ea4f 1828 	mov.w	r8, r8, asr #4
 800884a:	f1b8 0f01 	cmp.w	r8, #1
 800884e:	dc21      	bgt.n	8008894 <_strtod_l+0x524>
 8008850:	b10b      	cbz	r3, 8008856 <_strtod_l+0x4e6>
 8008852:	4681      	mov	r9, r0
 8008854:	468a      	mov	sl, r1
 8008856:	4b2f      	ldr	r3, [pc, #188]	; (8008914 <_strtod_l+0x5a4>)
 8008858:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800885c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008860:	464a      	mov	r2, r9
 8008862:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008866:	4653      	mov	r3, sl
 8008868:	f7f7 fe36 	bl	80004d8 <__aeabi_dmul>
 800886c:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <_strtod_l+0x5a8>)
 800886e:	460a      	mov	r2, r1
 8008870:	400b      	ands	r3, r1
 8008872:	492a      	ldr	r1, [pc, #168]	; (800891c <_strtod_l+0x5ac>)
 8008874:	4681      	mov	r9, r0
 8008876:	428b      	cmp	r3, r1
 8008878:	d894      	bhi.n	80087a4 <_strtod_l+0x434>
 800887a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800887e:	428b      	cmp	r3, r1
 8008880:	bf86      	itte	hi
 8008882:	f04f 39ff 	movhi.w	r9, #4294967295
 8008886:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8008924 <_strtod_l+0x5b4>
 800888a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800888e:	2300      	movs	r3, #0
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	e07b      	b.n	800898c <_strtod_l+0x61c>
 8008894:	f018 0f01 	tst.w	r8, #1
 8008898:	d006      	beq.n	80088a8 <_strtod_l+0x538>
 800889a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fe19 	bl	80004d8 <__aeabi_dmul>
 80088a6:	2301      	movs	r3, #1
 80088a8:	3501      	adds	r5, #1
 80088aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088ae:	e7cc      	b.n	800884a <_strtod_l+0x4da>
 80088b0:	d0ed      	beq.n	800888e <_strtod_l+0x51e>
 80088b2:	f1c8 0800 	rsb	r8, r8, #0
 80088b6:	f018 020f 	ands.w	r2, r8, #15
 80088ba:	d00a      	beq.n	80088d2 <_strtod_l+0x562>
 80088bc:	4b14      	ldr	r3, [pc, #80]	; (8008910 <_strtod_l+0x5a0>)
 80088be:	4648      	mov	r0, r9
 80088c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c4:	4651      	mov	r1, sl
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 ff2f 	bl	800072c <__aeabi_ddiv>
 80088ce:	4681      	mov	r9, r0
 80088d0:	468a      	mov	sl, r1
 80088d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80088d6:	d0da      	beq.n	800888e <_strtod_l+0x51e>
 80088d8:	f1b8 0f1f 	cmp.w	r8, #31
 80088dc:	dd24      	ble.n	8008928 <_strtod_l+0x5b8>
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80088e6:	f8cd 8020 	str.w	r8, [sp, #32]
 80088ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80088ee:	2322      	movs	r3, #34	; 0x22
 80088f0:	f04f 0900 	mov.w	r9, #0
 80088f4:	f04f 0a00 	mov.w	sl, #0
 80088f8:	f8cb 3000 	str.w	r3, [fp]
 80088fc:	e761      	b.n	80087c2 <_strtod_l+0x452>
 80088fe:	bf00      	nop
 8008900:	0800b511 	.word	0x0800b511
 8008904:	0800b59b 	.word	0x0800b59b
 8008908:	0800b519 	.word	0x0800b519
 800890c:	0800b55c 	.word	0x0800b55c
 8008910:	0800b5d8 	.word	0x0800b5d8
 8008914:	0800b5b0 	.word	0x0800b5b0
 8008918:	7ff00000 	.word	0x7ff00000
 800891c:	7ca00000 	.word	0x7ca00000
 8008920:	fff80000 	.word	0xfff80000
 8008924:	7fefffff 	.word	0x7fefffff
 8008928:	f018 0310 	ands.w	r3, r8, #16
 800892c:	bf18      	it	ne
 800892e:	236a      	movne	r3, #106	; 0x6a
 8008930:	4648      	mov	r0, r9
 8008932:	9305      	str	r3, [sp, #20]
 8008934:	4651      	mov	r1, sl
 8008936:	2300      	movs	r3, #0
 8008938:	4da1      	ldr	r5, [pc, #644]	; (8008bc0 <_strtod_l+0x850>)
 800893a:	f1b8 0f00 	cmp.w	r8, #0
 800893e:	f300 8113 	bgt.w	8008b68 <_strtod_l+0x7f8>
 8008942:	b10b      	cbz	r3, 8008948 <_strtod_l+0x5d8>
 8008944:	4681      	mov	r9, r0
 8008946:	468a      	mov	sl, r1
 8008948:	9b05      	ldr	r3, [sp, #20]
 800894a:	b1bb      	cbz	r3, 800897c <_strtod_l+0x60c>
 800894c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008950:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008954:	2b00      	cmp	r3, #0
 8008956:	4651      	mov	r1, sl
 8008958:	dd10      	ble.n	800897c <_strtod_l+0x60c>
 800895a:	2b1f      	cmp	r3, #31
 800895c:	f340 8110 	ble.w	8008b80 <_strtod_l+0x810>
 8008960:	2b34      	cmp	r3, #52	; 0x34
 8008962:	bfd8      	it	le
 8008964:	f04f 32ff 	movle.w	r2, #4294967295
 8008968:	f04f 0900 	mov.w	r9, #0
 800896c:	bfcf      	iteee	gt
 800896e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8008972:	3b20      	suble	r3, #32
 8008974:	fa02 f303 	lslle.w	r3, r2, r3
 8008978:	ea03 0a01 	andle.w	sl, r3, r1
 800897c:	2200      	movs	r2, #0
 800897e:	2300      	movs	r3, #0
 8008980:	4648      	mov	r0, r9
 8008982:	4651      	mov	r1, sl
 8008984:	f7f8 f810 	bl	80009a8 <__aeabi_dcmpeq>
 8008988:	2800      	cmp	r0, #0
 800898a:	d1a8      	bne.n	80088de <_strtod_l+0x56e>
 800898c:	9b06      	ldr	r3, [sp, #24]
 800898e:	9a04      	ldr	r2, [sp, #16]
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	9908      	ldr	r1, [sp, #32]
 8008994:	4623      	mov	r3, r4
 8008996:	4658      	mov	r0, fp
 8008998:	f001 fdb4 	bl	800a504 <__s2b>
 800899c:	9008      	str	r0, [sp, #32]
 800899e:	2800      	cmp	r0, #0
 80089a0:	f43f af00 	beq.w	80087a4 <_strtod_l+0x434>
 80089a4:	9a07      	ldr	r2, [sp, #28]
 80089a6:	9b07      	ldr	r3, [sp, #28]
 80089a8:	2a00      	cmp	r2, #0
 80089aa:	f1c3 0300 	rsb	r3, r3, #0
 80089ae:	bfa8      	it	ge
 80089b0:	2300      	movge	r3, #0
 80089b2:	f04f 0800 	mov.w	r8, #0
 80089b6:	930e      	str	r3, [sp, #56]	; 0x38
 80089b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089bc:	9316      	str	r3, [sp, #88]	; 0x58
 80089be:	f8cd 8010 	str.w	r8, [sp, #16]
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	4658      	mov	r0, fp
 80089c6:	6859      	ldr	r1, [r3, #4]
 80089c8:	f001 fd16 	bl	800a3f8 <_Balloc>
 80089cc:	9006      	str	r0, [sp, #24]
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f43f aef0 	beq.w	80087b4 <_strtod_l+0x444>
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	300c      	adds	r0, #12
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	f103 010c 	add.w	r1, r3, #12
 80089de:	3202      	adds	r2, #2
 80089e0:	0092      	lsls	r2, r2, #2
 80089e2:	f7fe fe25 	bl	8007630 <memcpy>
 80089e6:	ab1e      	add	r3, sp, #120	; 0x78
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	ab1d      	add	r3, sp, #116	; 0x74
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	464a      	mov	r2, r9
 80089f0:	4653      	mov	r3, sl
 80089f2:	4658      	mov	r0, fp
 80089f4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80089f8:	f002 f83e 	bl	800aa78 <__d2b>
 80089fc:	901c      	str	r0, [sp, #112]	; 0x70
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f aed8 	beq.w	80087b4 <_strtod_l+0x444>
 8008a04:	2101      	movs	r1, #1
 8008a06:	4658      	mov	r0, fp
 8008a08:	f001 fe08 	bl	800a61c <__i2b>
 8008a0c:	9004      	str	r0, [sp, #16]
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f43f aecf 	beq.w	80087b4 <_strtod_l+0x444>
 8008a16:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008a18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	bfab      	itete	ge
 8008a1e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008a20:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008a22:	18ee      	addge	r6, r5, r3
 8008a24:	1b5c      	sublt	r4, r3, r5
 8008a26:	9b05      	ldr	r3, [sp, #20]
 8008a28:	bfa8      	it	ge
 8008a2a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008a2c:	eba5 0503 	sub.w	r5, r5, r3
 8008a30:	4415      	add	r5, r2
 8008a32:	4b64      	ldr	r3, [pc, #400]	; (8008bc4 <_strtod_l+0x854>)
 8008a34:	f105 35ff 	add.w	r5, r5, #4294967295
 8008a38:	bfb8      	it	lt
 8008a3a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008a3c:	429d      	cmp	r5, r3
 8008a3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a42:	f280 80af 	bge.w	8008ba4 <_strtod_l+0x834>
 8008a46:	1b5b      	subs	r3, r3, r5
 8008a48:	2b1f      	cmp	r3, #31
 8008a4a:	eba2 0203 	sub.w	r2, r2, r3
 8008a4e:	f04f 0701 	mov.w	r7, #1
 8008a52:	f300 809c 	bgt.w	8008b8e <_strtod_l+0x81e>
 8008a56:	2500      	movs	r5, #0
 8008a58:	fa07 f303 	lsl.w	r3, r7, r3
 8008a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a5e:	18b7      	adds	r7, r6, r2
 8008a60:	9b05      	ldr	r3, [sp, #20]
 8008a62:	42be      	cmp	r6, r7
 8008a64:	4414      	add	r4, r2
 8008a66:	441c      	add	r4, r3
 8008a68:	4633      	mov	r3, r6
 8008a6a:	bfa8      	it	ge
 8008a6c:	463b      	movge	r3, r7
 8008a6e:	42a3      	cmp	r3, r4
 8008a70:	bfa8      	it	ge
 8008a72:	4623      	movge	r3, r4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfc2      	ittt	gt
 8008a78:	1aff      	subgt	r7, r7, r3
 8008a7a:	1ae4      	subgt	r4, r4, r3
 8008a7c:	1af6      	subgt	r6, r6, r3
 8008a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a80:	b1bb      	cbz	r3, 8008ab2 <_strtod_l+0x742>
 8008a82:	461a      	mov	r2, r3
 8008a84:	9904      	ldr	r1, [sp, #16]
 8008a86:	4658      	mov	r0, fp
 8008a88:	f001 fe66 	bl	800a758 <__pow5mult>
 8008a8c:	9004      	str	r0, [sp, #16]
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f ae90 	beq.w	80087b4 <_strtod_l+0x444>
 8008a94:	4601      	mov	r1, r0
 8008a96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a98:	4658      	mov	r0, fp
 8008a9a:	f001 fdc8 	bl	800a62e <__multiply>
 8008a9e:	9009      	str	r0, [sp, #36]	; 0x24
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	f43f ae87 	beq.w	80087b4 <_strtod_l+0x444>
 8008aa6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	f001 fcd9 	bl	800a460 <_Bfree>
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	931c      	str	r3, [sp, #112]	; 0x70
 8008ab2:	2f00      	cmp	r7, #0
 8008ab4:	dc7a      	bgt.n	8008bac <_strtod_l+0x83c>
 8008ab6:	9b07      	ldr	r3, [sp, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dd08      	ble.n	8008ace <_strtod_l+0x75e>
 8008abc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008abe:	9906      	ldr	r1, [sp, #24]
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	f001 fe49 	bl	800a758 <__pow5mult>
 8008ac6:	9006      	str	r0, [sp, #24]
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f43f ae73 	beq.w	80087b4 <_strtod_l+0x444>
 8008ace:	2c00      	cmp	r4, #0
 8008ad0:	dd08      	ble.n	8008ae4 <_strtod_l+0x774>
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	9906      	ldr	r1, [sp, #24]
 8008ad6:	4658      	mov	r0, fp
 8008ad8:	f001 fe8c 	bl	800a7f4 <__lshift>
 8008adc:	9006      	str	r0, [sp, #24]
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f43f ae68 	beq.w	80087b4 <_strtod_l+0x444>
 8008ae4:	2e00      	cmp	r6, #0
 8008ae6:	dd08      	ble.n	8008afa <_strtod_l+0x78a>
 8008ae8:	4632      	mov	r2, r6
 8008aea:	9904      	ldr	r1, [sp, #16]
 8008aec:	4658      	mov	r0, fp
 8008aee:	f001 fe81 	bl	800a7f4 <__lshift>
 8008af2:	9004      	str	r0, [sp, #16]
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f43f ae5d 	beq.w	80087b4 <_strtod_l+0x444>
 8008afa:	9a06      	ldr	r2, [sp, #24]
 8008afc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008afe:	4658      	mov	r0, fp
 8008b00:	f001 fee6 	bl	800a8d0 <__mdiff>
 8008b04:	4680      	mov	r8, r0
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f43f ae54 	beq.w	80087b4 <_strtod_l+0x444>
 8008b0c:	2400      	movs	r4, #0
 8008b0e:	68c3      	ldr	r3, [r0, #12]
 8008b10:	9904      	ldr	r1, [sp, #16]
 8008b12:	60c4      	str	r4, [r0, #12]
 8008b14:	930c      	str	r3, [sp, #48]	; 0x30
 8008b16:	f001 fec1 	bl	800a89c <__mcmp>
 8008b1a:	42a0      	cmp	r0, r4
 8008b1c:	da54      	bge.n	8008bc8 <_strtod_l+0x858>
 8008b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b20:	b9f3      	cbnz	r3, 8008b60 <_strtod_l+0x7f0>
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d11b      	bne.n	8008b60 <_strtod_l+0x7f0>
 8008b28:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008b2c:	b9c3      	cbnz	r3, 8008b60 <_strtod_l+0x7f0>
 8008b2e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008b32:	0d1b      	lsrs	r3, r3, #20
 8008b34:	051b      	lsls	r3, r3, #20
 8008b36:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b3a:	d911      	bls.n	8008b60 <_strtod_l+0x7f0>
 8008b3c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008b40:	b91b      	cbnz	r3, 8008b4a <_strtod_l+0x7da>
 8008b42:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	dd0a      	ble.n	8008b60 <_strtod_l+0x7f0>
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	4658      	mov	r0, fp
 8008b50:	f001 fe50 	bl	800a7f4 <__lshift>
 8008b54:	9904      	ldr	r1, [sp, #16]
 8008b56:	4680      	mov	r8, r0
 8008b58:	f001 fea0 	bl	800a89c <__mcmp>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	dc68      	bgt.n	8008c32 <_strtod_l+0x8c2>
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d172      	bne.n	8008c4c <_strtod_l+0x8dc>
 8008b66:	e630      	b.n	80087ca <_strtod_l+0x45a>
 8008b68:	f018 0f01 	tst.w	r8, #1
 8008b6c:	d004      	beq.n	8008b78 <_strtod_l+0x808>
 8008b6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b72:	f7f7 fcb1 	bl	80004d8 <__aeabi_dmul>
 8008b76:	2301      	movs	r3, #1
 8008b78:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b7c:	3508      	adds	r5, #8
 8008b7e:	e6dc      	b.n	800893a <_strtod_l+0x5ca>
 8008b80:	f04f 32ff 	mov.w	r2, #4294967295
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	ea03 0909 	and.w	r9, r3, r9
 8008b8c:	e6f6      	b.n	800897c <_strtod_l+0x60c>
 8008b8e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008b92:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008b96:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008b9a:	35e2      	adds	r5, #226	; 0xe2
 8008b9c:	fa07 f505 	lsl.w	r5, r7, r5
 8008ba0:	970f      	str	r7, [sp, #60]	; 0x3c
 8008ba2:	e75c      	b.n	8008a5e <_strtod_l+0x6ee>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	2500      	movs	r5, #0
 8008ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008baa:	e758      	b.n	8008a5e <_strtod_l+0x6ee>
 8008bac:	463a      	mov	r2, r7
 8008bae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bb0:	4658      	mov	r0, fp
 8008bb2:	f001 fe1f 	bl	800a7f4 <__lshift>
 8008bb6:	901c      	str	r0, [sp, #112]	; 0x70
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f47f af7c 	bne.w	8008ab6 <_strtod_l+0x746>
 8008bbe:	e5f9      	b.n	80087b4 <_strtod_l+0x444>
 8008bc0:	0800b570 	.word	0x0800b570
 8008bc4:	fffffc02 	.word	0xfffffc02
 8008bc8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008bcc:	f040 8089 	bne.w	8008ce2 <_strtod_l+0x972>
 8008bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008bd6:	b342      	cbz	r2, 8008c2a <_strtod_l+0x8ba>
 8008bd8:	4aaf      	ldr	r2, [pc, #700]	; (8008e98 <_strtod_l+0xb28>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d156      	bne.n	8008c8c <_strtod_l+0x91c>
 8008bde:	9b05      	ldr	r3, [sp, #20]
 8008be0:	4648      	mov	r0, r9
 8008be2:	b1eb      	cbz	r3, 8008c20 <_strtod_l+0x8b0>
 8008be4:	4653      	mov	r3, sl
 8008be6:	4aad      	ldr	r2, [pc, #692]	; (8008e9c <_strtod_l+0xb2c>)
 8008be8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bec:	401a      	ands	r2, r3
 8008bee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008bf2:	d818      	bhi.n	8008c26 <_strtod_l+0x8b6>
 8008bf4:	0d12      	lsrs	r2, r2, #20
 8008bf6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfe:	4298      	cmp	r0, r3
 8008c00:	d144      	bne.n	8008c8c <_strtod_l+0x91c>
 8008c02:	4ba7      	ldr	r3, [pc, #668]	; (8008ea0 <_strtod_l+0xb30>)
 8008c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d102      	bne.n	8008c10 <_strtod_l+0x8a0>
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f43f add2 	beq.w	80087b4 <_strtod_l+0x444>
 8008c10:	4ba2      	ldr	r3, [pc, #648]	; (8008e9c <_strtod_l+0xb2c>)
 8008c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c14:	f04f 0900 	mov.w	r9, #0
 8008c18:	401a      	ands	r2, r3
 8008c1a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008c1e:	e79f      	b.n	8008b60 <_strtod_l+0x7f0>
 8008c20:	f04f 33ff 	mov.w	r3, #4294967295
 8008c24:	e7eb      	b.n	8008bfe <_strtod_l+0x88e>
 8008c26:	460b      	mov	r3, r1
 8008c28:	e7e9      	b.n	8008bfe <_strtod_l+0x88e>
 8008c2a:	bb7b      	cbnz	r3, 8008c8c <_strtod_l+0x91c>
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	d12c      	bne.n	8008c8c <_strtod_l+0x91c>
 8008c32:	9905      	ldr	r1, [sp, #20]
 8008c34:	4653      	mov	r3, sl
 8008c36:	4a99      	ldr	r2, [pc, #612]	; (8008e9c <_strtod_l+0xb2c>)
 8008c38:	b1f1      	cbz	r1, 8008c78 <_strtod_l+0x908>
 8008c3a:	ea02 010a 	and.w	r1, r2, sl
 8008c3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c42:	dc19      	bgt.n	8008c78 <_strtod_l+0x908>
 8008c44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c48:	f77f ae51 	ble.w	80088ee <_strtod_l+0x57e>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4a95      	ldr	r2, [pc, #596]	; (8008ea4 <_strtod_l+0xb34>)
 8008c50:	4648      	mov	r0, r9
 8008c52:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008c56:	4651      	mov	r1, sl
 8008c58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c5c:	f7f7 fc3c 	bl	80004d8 <__aeabi_dmul>
 8008c60:	4681      	mov	r9, r0
 8008c62:	468a      	mov	sl, r1
 8008c64:	2900      	cmp	r1, #0
 8008c66:	f47f adb0 	bne.w	80087ca <_strtod_l+0x45a>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f47f adad 	bne.w	80087ca <_strtod_l+0x45a>
 8008c70:	2322      	movs	r3, #34	; 0x22
 8008c72:	f8cb 3000 	str.w	r3, [fp]
 8008c76:	e5a8      	b.n	80087ca <_strtod_l+0x45a>
 8008c78:	4013      	ands	r3, r2
 8008c7a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c7e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008c82:	f04f 39ff 	mov.w	r9, #4294967295
 8008c86:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008c8a:	e769      	b.n	8008b60 <_strtod_l+0x7f0>
 8008c8c:	b19d      	cbz	r5, 8008cb6 <_strtod_l+0x946>
 8008c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c90:	421d      	tst	r5, r3
 8008c92:	f43f af65 	beq.w	8008b60 <_strtod_l+0x7f0>
 8008c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c98:	9a05      	ldr	r2, [sp, #20]
 8008c9a:	4648      	mov	r0, r9
 8008c9c:	4651      	mov	r1, sl
 8008c9e:	b173      	cbz	r3, 8008cbe <_strtod_l+0x94e>
 8008ca0:	f7ff fb42 	bl	8008328 <sulp>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cac:	f7f7 fa5e 	bl	800016c <__adddf3>
 8008cb0:	4681      	mov	r9, r0
 8008cb2:	468a      	mov	sl, r1
 8008cb4:	e754      	b.n	8008b60 <_strtod_l+0x7f0>
 8008cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cb8:	ea13 0f09 	tst.w	r3, r9
 8008cbc:	e7e9      	b.n	8008c92 <_strtod_l+0x922>
 8008cbe:	f7ff fb33 	bl	8008328 <sulp>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cca:	f7f7 fa4d 	bl	8000168 <__aeabi_dsub>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4681      	mov	r9, r0
 8008cd4:	468a      	mov	sl, r1
 8008cd6:	f7f7 fe67 	bl	80009a8 <__aeabi_dcmpeq>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f47f ae07 	bne.w	80088ee <_strtod_l+0x57e>
 8008ce0:	e73e      	b.n	8008b60 <_strtod_l+0x7f0>
 8008ce2:	9904      	ldr	r1, [sp, #16]
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	f001 ff16 	bl	800ab16 <__ratio>
 8008cea:	2200      	movs	r2, #0
 8008cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	f7f7 fe6c 	bl	80009d0 <__aeabi_dcmple>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d075      	beq.n	8008de8 <_strtod_l+0xa78>
 8008cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d047      	beq.n	8008d92 <_strtod_l+0xa22>
 8008d02:	2600      	movs	r6, #0
 8008d04:	4f68      	ldr	r7, [pc, #416]	; (8008ea8 <_strtod_l+0xb38>)
 8008d06:	4d68      	ldr	r5, [pc, #416]	; (8008ea8 <_strtod_l+0xb38>)
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d0e:	0d1b      	lsrs	r3, r3, #20
 8008d10:	051b      	lsls	r3, r3, #20
 8008d12:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d16:	4b65      	ldr	r3, [pc, #404]	; (8008eac <_strtod_l+0xb3c>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	f040 80cf 	bne.w	8008ebc <_strtod_l+0xb4c>
 8008d1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d22:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d28:	4648      	mov	r0, r9
 8008d2a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008d2e:	4651      	mov	r1, sl
 8008d30:	f001 fe2c 	bl	800a98c <__ulp>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 fbcc 	bl	80004d8 <__aeabi_dmul>
 8008d40:	464a      	mov	r2, r9
 8008d42:	4653      	mov	r3, sl
 8008d44:	f7f7 fa12 	bl	800016c <__adddf3>
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4954      	ldr	r1, [pc, #336]	; (8008e9c <_strtod_l+0xb2c>)
 8008d4c:	4a58      	ldr	r2, [pc, #352]	; (8008eb0 <_strtod_l+0xb40>)
 8008d4e:	4019      	ands	r1, r3
 8008d50:	4291      	cmp	r1, r2
 8008d52:	4681      	mov	r9, r0
 8008d54:	d95e      	bls.n	8008e14 <_strtod_l+0xaa4>
 8008d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d103      	bne.n	8008d68 <_strtod_l+0x9f8>
 8008d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d62:	3301      	adds	r3, #1
 8008d64:	f43f ad26 	beq.w	80087b4 <_strtod_l+0x444>
 8008d68:	f04f 39ff 	mov.w	r9, #4294967295
 8008d6c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008ea0 <_strtod_l+0xb30>
 8008d70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d72:	4658      	mov	r0, fp
 8008d74:	f001 fb74 	bl	800a460 <_Bfree>
 8008d78:	9906      	ldr	r1, [sp, #24]
 8008d7a:	4658      	mov	r0, fp
 8008d7c:	f001 fb70 	bl	800a460 <_Bfree>
 8008d80:	9904      	ldr	r1, [sp, #16]
 8008d82:	4658      	mov	r0, fp
 8008d84:	f001 fb6c 	bl	800a460 <_Bfree>
 8008d88:	4641      	mov	r1, r8
 8008d8a:	4658      	mov	r0, fp
 8008d8c:	f001 fb68 	bl	800a460 <_Bfree>
 8008d90:	e617      	b.n	80089c2 <_strtod_l+0x652>
 8008d92:	f1b9 0f00 	cmp.w	r9, #0
 8008d96:	d119      	bne.n	8008dcc <_strtod_l+0xa5c>
 8008d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d9e:	b9e3      	cbnz	r3, 8008dda <_strtod_l+0xa6a>
 8008da0:	2200      	movs	r2, #0
 8008da2:	4b41      	ldr	r3, [pc, #260]	; (8008ea8 <_strtod_l+0xb38>)
 8008da4:	4630      	mov	r0, r6
 8008da6:	4639      	mov	r1, r7
 8008da8:	f7f7 fe08 	bl	80009bc <__aeabi_dcmplt>
 8008dac:	b9c8      	cbnz	r0, 8008de2 <_strtod_l+0xa72>
 8008dae:	2200      	movs	r2, #0
 8008db0:	4b40      	ldr	r3, [pc, #256]	; (8008eb4 <_strtod_l+0xb44>)
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7f7 fb8f 	bl	80004d8 <__aeabi_dmul>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008dc2:	9418      	str	r4, [sp, #96]	; 0x60
 8008dc4:	9319      	str	r3, [sp, #100]	; 0x64
 8008dc6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008dca:	e79d      	b.n	8008d08 <_strtod_l+0x998>
 8008dcc:	f1b9 0f01 	cmp.w	r9, #1
 8008dd0:	d103      	bne.n	8008dda <_strtod_l+0xa6a>
 8008dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f43f ad8a 	beq.w	80088ee <_strtod_l+0x57e>
 8008dda:	2600      	movs	r6, #0
 8008ddc:	4f36      	ldr	r7, [pc, #216]	; (8008eb8 <_strtod_l+0xb48>)
 8008dde:	2400      	movs	r4, #0
 8008de0:	e791      	b.n	8008d06 <_strtod_l+0x996>
 8008de2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008de4:	4d33      	ldr	r5, [pc, #204]	; (8008eb4 <_strtod_l+0xb44>)
 8008de6:	e7ea      	b.n	8008dbe <_strtod_l+0xa4e>
 8008de8:	4b32      	ldr	r3, [pc, #200]	; (8008eb4 <_strtod_l+0xb44>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	4630      	mov	r0, r6
 8008dee:	4639      	mov	r1, r7
 8008df0:	f7f7 fb72 	bl	80004d8 <__aeabi_dmul>
 8008df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008df6:	4604      	mov	r4, r0
 8008df8:	460d      	mov	r5, r1
 8008dfa:	b933      	cbnz	r3, 8008e0a <_strtod_l+0xa9a>
 8008dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e00:	9010      	str	r0, [sp, #64]	; 0x40
 8008e02:	9311      	str	r3, [sp, #68]	; 0x44
 8008e04:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e08:	e77e      	b.n	8008d08 <_strtod_l+0x998>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008e12:	e7f7      	b.n	8008e04 <_strtod_l+0xa94>
 8008e14:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008e18:	9b05      	ldr	r3, [sp, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1a8      	bne.n	8008d70 <_strtod_l+0xa00>
 8008e1e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008e22:	0d1b      	lsrs	r3, r3, #20
 8008e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e26:	051b      	lsls	r3, r3, #20
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	4656      	mov	r6, sl
 8008e2c:	d1a0      	bne.n	8008d70 <_strtod_l+0xa00>
 8008e2e:	4629      	mov	r1, r5
 8008e30:	4620      	mov	r0, r4
 8008e32:	f7f7 fe01 	bl	8000a38 <__aeabi_d2iz>
 8008e36:	f7f7 fae5 	bl	8000404 <__aeabi_i2d>
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7f7 f991 	bl	8000168 <__aeabi_dsub>
 8008e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e48:	4604      	mov	r4, r0
 8008e4a:	460d      	mov	r5, r1
 8008e4c:	b933      	cbnz	r3, 8008e5c <_strtod_l+0xaec>
 8008e4e:	f1b9 0f00 	cmp.w	r9, #0
 8008e52:	d103      	bne.n	8008e5c <_strtod_l+0xaec>
 8008e54:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008e58:	2e00      	cmp	r6, #0
 8008e5a:	d06a      	beq.n	8008f32 <_strtod_l+0xbc2>
 8008e5c:	a30a      	add	r3, pc, #40	; (adr r3, 8008e88 <_strtod_l+0xb18>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7f7 fda9 	bl	80009bc <__aeabi_dcmplt>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f47f acad 	bne.w	80087ca <_strtod_l+0x45a>
 8008e70:	a307      	add	r3, pc, #28	; (adr r3, 8008e90 <_strtod_l+0xb20>)
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fdbd 	bl	80009f8 <__aeabi_dcmpgt>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f43f af76 	beq.w	8008d70 <_strtod_l+0xa00>
 8008e84:	e4a1      	b.n	80087ca <_strtod_l+0x45a>
 8008e86:	bf00      	nop
 8008e88:	94a03595 	.word	0x94a03595
 8008e8c:	3fdfffff 	.word	0x3fdfffff
 8008e90:	35afe535 	.word	0x35afe535
 8008e94:	3fe00000 	.word	0x3fe00000
 8008e98:	000fffff 	.word	0x000fffff
 8008e9c:	7ff00000 	.word	0x7ff00000
 8008ea0:	7fefffff 	.word	0x7fefffff
 8008ea4:	39500000 	.word	0x39500000
 8008ea8:	3ff00000 	.word	0x3ff00000
 8008eac:	7fe00000 	.word	0x7fe00000
 8008eb0:	7c9fffff 	.word	0x7c9fffff
 8008eb4:	3fe00000 	.word	0x3fe00000
 8008eb8:	bff00000 	.word	0xbff00000
 8008ebc:	9b05      	ldr	r3, [sp, #20]
 8008ebe:	b313      	cbz	r3, 8008f06 <_strtod_l+0xb96>
 8008ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ec2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ec6:	d81e      	bhi.n	8008f06 <_strtod_l+0xb96>
 8008ec8:	a325      	add	r3, pc, #148	; (adr r3, 8008f60 <_strtod_l+0xbf0>)
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	f7f7 fd7d 	bl	80009d0 <__aeabi_dcmple>
 8008ed6:	b190      	cbz	r0, 8008efe <_strtod_l+0xb8e>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4620      	mov	r0, r4
 8008edc:	f7f7 fdd4 	bl	8000a88 <__aeabi_d2uiz>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	bf08      	it	eq
 8008ee4:	2001      	moveq	r0, #1
 8008ee6:	f7f7 fa7d 	bl	80003e4 <__aeabi_ui2d>
 8008eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	b9d3      	cbnz	r3, 8008f28 <_strtod_l+0xbb8>
 8008ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ef6:	9012      	str	r0, [sp, #72]	; 0x48
 8008ef8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008efa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f00:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008f04:	1a9f      	subs	r7, r3, r2
 8008f06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f0a:	f001 fd3f 	bl	800a98c <__ulp>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4630      	mov	r0, r6
 8008f14:	4639      	mov	r1, r7
 8008f16:	f7f7 fadf 	bl	80004d8 <__aeabi_dmul>
 8008f1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f1e:	f7f7 f925 	bl	800016c <__adddf3>
 8008f22:	4681      	mov	r9, r0
 8008f24:	468a      	mov	sl, r1
 8008f26:	e777      	b.n	8008e18 <_strtod_l+0xaa8>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008f30:	e7e3      	b.n	8008efa <_strtod_l+0xb8a>
 8008f32:	a30d      	add	r3, pc, #52	; (adr r3, 8008f68 <_strtod_l+0xbf8>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 fd40 	bl	80009bc <__aeabi_dcmplt>
 8008f3c:	e79f      	b.n	8008e7e <_strtod_l+0xb0e>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	930d      	str	r3, [sp, #52]	; 0x34
 8008f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	f7ff ba55 	b.w	80083f6 <_strtod_l+0x86>
 8008f4c:	2b65      	cmp	r3, #101	; 0x65
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	f43f ab42 	beq.w	80085da <_strtod_l+0x26a>
 8008f56:	2101      	movs	r1, #1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	9105      	str	r1, [sp, #20]
 8008f5c:	f7ff babf 	b.w	80084de <_strtod_l+0x16e>
 8008f60:	ffc00000 	.word	0xffc00000
 8008f64:	41dfffff 	.word	0x41dfffff
 8008f68:	94a03595 	.word	0x94a03595
 8008f6c:	3fcfffff 	.word	0x3fcfffff

08008f70 <_strtod_r>:
 8008f70:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <_strtod_r+0x18>)
 8008f72:	b410      	push	{r4}
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4c05      	ldr	r4, [pc, #20]	; (8008f8c <_strtod_r+0x1c>)
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bf08      	it	eq
 8008f7e:	4623      	moveq	r3, r4
 8008f80:	bc10      	pop	{r4}
 8008f82:	f7ff b9f5 	b.w	8008370 <_strtod_l>
 8008f86:	bf00      	nop
 8008f88:	200000b0 	.word	0x200000b0
 8008f8c:	20000114 	.word	0x20000114

08008f90 <_strtol_l.isra.0>:
 8008f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f94:	4680      	mov	r8, r0
 8008f96:	4689      	mov	r9, r1
 8008f98:	4692      	mov	sl, r2
 8008f9a:	461e      	mov	r6, r3
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	463d      	mov	r5, r7
 8008fa0:	9808      	ldr	r0, [sp, #32]
 8008fa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fa6:	f001 f9eb 	bl	800a380 <__locale_ctype_ptr_l>
 8008faa:	4420      	add	r0, r4
 8008fac:	7843      	ldrb	r3, [r0, #1]
 8008fae:	f013 0308 	ands.w	r3, r3, #8
 8008fb2:	d132      	bne.n	800901a <_strtol_l.isra.0+0x8a>
 8008fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8008fb6:	d132      	bne.n	800901e <_strtol_l.isra.0+0x8e>
 8008fb8:	2201      	movs	r2, #1
 8008fba:	787c      	ldrb	r4, [r7, #1]
 8008fbc:	1cbd      	adds	r5, r7, #2
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	d05d      	beq.n	800907e <_strtol_l.isra.0+0xee>
 8008fc2:	2e10      	cmp	r6, #16
 8008fc4:	d109      	bne.n	8008fda <_strtol_l.isra.0+0x4a>
 8008fc6:	2c30      	cmp	r4, #48	; 0x30
 8008fc8:	d107      	bne.n	8008fda <_strtol_l.isra.0+0x4a>
 8008fca:	782b      	ldrb	r3, [r5, #0]
 8008fcc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008fd0:	2b58      	cmp	r3, #88	; 0x58
 8008fd2:	d14f      	bne.n	8009074 <_strtol_l.isra.0+0xe4>
 8008fd4:	2610      	movs	r6, #16
 8008fd6:	786c      	ldrb	r4, [r5, #1]
 8008fd8:	3502      	adds	r5, #2
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	bf14      	ite	ne
 8008fde:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008fe2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008fe6:	2700      	movs	r7, #0
 8008fe8:	fbb1 fcf6 	udiv	ip, r1, r6
 8008fec:	4638      	mov	r0, r7
 8008fee:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008ff2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	d817      	bhi.n	800902a <_strtol_l.isra.0+0x9a>
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	42a6      	cmp	r6, r4
 8008ffe:	dd23      	ble.n	8009048 <_strtol_l.isra.0+0xb8>
 8009000:	1c7b      	adds	r3, r7, #1
 8009002:	d007      	beq.n	8009014 <_strtol_l.isra.0+0x84>
 8009004:	4584      	cmp	ip, r0
 8009006:	d31c      	bcc.n	8009042 <_strtol_l.isra.0+0xb2>
 8009008:	d101      	bne.n	800900e <_strtol_l.isra.0+0x7e>
 800900a:	45a6      	cmp	lr, r4
 800900c:	db19      	blt.n	8009042 <_strtol_l.isra.0+0xb2>
 800900e:	2701      	movs	r7, #1
 8009010:	fb00 4006 	mla	r0, r0, r6, r4
 8009014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009018:	e7eb      	b.n	8008ff2 <_strtol_l.isra.0+0x62>
 800901a:	462f      	mov	r7, r5
 800901c:	e7bf      	b.n	8008f9e <_strtol_l.isra.0+0xe>
 800901e:	2c2b      	cmp	r4, #43	; 0x2b
 8009020:	bf04      	itt	eq
 8009022:	1cbd      	addeq	r5, r7, #2
 8009024:	787c      	ldrbeq	r4, [r7, #1]
 8009026:	461a      	mov	r2, r3
 8009028:	e7c9      	b.n	8008fbe <_strtol_l.isra.0+0x2e>
 800902a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800902e:	2b19      	cmp	r3, #25
 8009030:	d801      	bhi.n	8009036 <_strtol_l.isra.0+0xa6>
 8009032:	3c37      	subs	r4, #55	; 0x37
 8009034:	e7e2      	b.n	8008ffc <_strtol_l.isra.0+0x6c>
 8009036:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800903a:	2b19      	cmp	r3, #25
 800903c:	d804      	bhi.n	8009048 <_strtol_l.isra.0+0xb8>
 800903e:	3c57      	subs	r4, #87	; 0x57
 8009040:	e7dc      	b.n	8008ffc <_strtol_l.isra.0+0x6c>
 8009042:	f04f 37ff 	mov.w	r7, #4294967295
 8009046:	e7e5      	b.n	8009014 <_strtol_l.isra.0+0x84>
 8009048:	1c7b      	adds	r3, r7, #1
 800904a:	d108      	bne.n	800905e <_strtol_l.isra.0+0xce>
 800904c:	2322      	movs	r3, #34	; 0x22
 800904e:	4608      	mov	r0, r1
 8009050:	f8c8 3000 	str.w	r3, [r8]
 8009054:	f1ba 0f00 	cmp.w	sl, #0
 8009058:	d107      	bne.n	800906a <_strtol_l.isra.0+0xda>
 800905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905e:	b102      	cbz	r2, 8009062 <_strtol_l.isra.0+0xd2>
 8009060:	4240      	negs	r0, r0
 8009062:	f1ba 0f00 	cmp.w	sl, #0
 8009066:	d0f8      	beq.n	800905a <_strtol_l.isra.0+0xca>
 8009068:	b10f      	cbz	r7, 800906e <_strtol_l.isra.0+0xde>
 800906a:	f105 39ff 	add.w	r9, r5, #4294967295
 800906e:	f8ca 9000 	str.w	r9, [sl]
 8009072:	e7f2      	b.n	800905a <_strtol_l.isra.0+0xca>
 8009074:	2430      	movs	r4, #48	; 0x30
 8009076:	2e00      	cmp	r6, #0
 8009078:	d1af      	bne.n	8008fda <_strtol_l.isra.0+0x4a>
 800907a:	2608      	movs	r6, #8
 800907c:	e7ad      	b.n	8008fda <_strtol_l.isra.0+0x4a>
 800907e:	2c30      	cmp	r4, #48	; 0x30
 8009080:	d0a3      	beq.n	8008fca <_strtol_l.isra.0+0x3a>
 8009082:	260a      	movs	r6, #10
 8009084:	e7a9      	b.n	8008fda <_strtol_l.isra.0+0x4a>
	...

08009088 <_strtol_r>:
 8009088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800908a:	4c06      	ldr	r4, [pc, #24]	; (80090a4 <_strtol_r+0x1c>)
 800908c:	4d06      	ldr	r5, [pc, #24]	; (80090a8 <_strtol_r+0x20>)
 800908e:	6824      	ldr	r4, [r4, #0]
 8009090:	6a24      	ldr	r4, [r4, #32]
 8009092:	2c00      	cmp	r4, #0
 8009094:	bf08      	it	eq
 8009096:	462c      	moveq	r4, r5
 8009098:	9400      	str	r4, [sp, #0]
 800909a:	f7ff ff79 	bl	8008f90 <_strtol_l.isra.0>
 800909e:	b003      	add	sp, #12
 80090a0:	bd30      	pop	{r4, r5, pc}
 80090a2:	bf00      	nop
 80090a4:	200000b0 	.word	0x200000b0
 80090a8:	20000114 	.word	0x20000114

080090ac <quorem>:
 80090ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	6903      	ldr	r3, [r0, #16]
 80090b2:	690c      	ldr	r4, [r1, #16]
 80090b4:	4680      	mov	r8, r0
 80090b6:	42a3      	cmp	r3, r4
 80090b8:	f2c0 8084 	blt.w	80091c4 <quorem+0x118>
 80090bc:	3c01      	subs	r4, #1
 80090be:	f101 0714 	add.w	r7, r1, #20
 80090c2:	f100 0614 	add.w	r6, r0, #20
 80090c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80090ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80090ce:	3501      	adds	r5, #1
 80090d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80090d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80090d8:	eb06 030c 	add.w	r3, r6, ip
 80090dc:	eb07 090c 	add.w	r9, r7, ip
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	b39d      	cbz	r5, 800914c <quorem+0xa0>
 80090e4:	f04f 0a00 	mov.w	sl, #0
 80090e8:	4638      	mov	r0, r7
 80090ea:	46b6      	mov	lr, r6
 80090ec:	46d3      	mov	fp, sl
 80090ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80090f2:	b293      	uxth	r3, r2
 80090f4:	fb05 a303 	mla	r3, r5, r3, sl
 80090f8:	0c12      	lsrs	r2, r2, #16
 80090fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090fe:	fb05 a202 	mla	r2, r5, r2, sl
 8009102:	b29b      	uxth	r3, r3
 8009104:	ebab 0303 	sub.w	r3, fp, r3
 8009108:	f8de b000 	ldr.w	fp, [lr]
 800910c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009110:	fa1f fb8b 	uxth.w	fp, fp
 8009114:	445b      	add	r3, fp
 8009116:	fa1f fb82 	uxth.w	fp, r2
 800911a:	f8de 2000 	ldr.w	r2, [lr]
 800911e:	4581      	cmp	r9, r0
 8009120:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009128:	b29b      	uxth	r3, r3
 800912a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800912e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009132:	f84e 3b04 	str.w	r3, [lr], #4
 8009136:	d2da      	bcs.n	80090ee <quorem+0x42>
 8009138:	f856 300c 	ldr.w	r3, [r6, ip]
 800913c:	b933      	cbnz	r3, 800914c <quorem+0xa0>
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	3b04      	subs	r3, #4
 8009142:	429e      	cmp	r6, r3
 8009144:	461a      	mov	r2, r3
 8009146:	d331      	bcc.n	80091ac <quorem+0x100>
 8009148:	f8c8 4010 	str.w	r4, [r8, #16]
 800914c:	4640      	mov	r0, r8
 800914e:	f001 fba5 	bl	800a89c <__mcmp>
 8009152:	2800      	cmp	r0, #0
 8009154:	db26      	blt.n	80091a4 <quorem+0xf8>
 8009156:	4630      	mov	r0, r6
 8009158:	f04f 0c00 	mov.w	ip, #0
 800915c:	3501      	adds	r5, #1
 800915e:	f857 1b04 	ldr.w	r1, [r7], #4
 8009162:	f8d0 e000 	ldr.w	lr, [r0]
 8009166:	b28b      	uxth	r3, r1
 8009168:	ebac 0303 	sub.w	r3, ip, r3
 800916c:	fa1f f28e 	uxth.w	r2, lr
 8009170:	4413      	add	r3, r2
 8009172:	0c0a      	lsrs	r2, r1, #16
 8009174:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800917c:	b29b      	uxth	r3, r3
 800917e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009182:	45b9      	cmp	r9, r7
 8009184:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009188:	f840 3b04 	str.w	r3, [r0], #4
 800918c:	d2e7      	bcs.n	800915e <quorem+0xb2>
 800918e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009192:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009196:	b92a      	cbnz	r2, 80091a4 <quorem+0xf8>
 8009198:	3b04      	subs	r3, #4
 800919a:	429e      	cmp	r6, r3
 800919c:	461a      	mov	r2, r3
 800919e:	d30b      	bcc.n	80091b8 <quorem+0x10c>
 80091a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80091a4:	4628      	mov	r0, r5
 80091a6:	b003      	add	sp, #12
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	6812      	ldr	r2, [r2, #0]
 80091ae:	3b04      	subs	r3, #4
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d1c9      	bne.n	8009148 <quorem+0x9c>
 80091b4:	3c01      	subs	r4, #1
 80091b6:	e7c4      	b.n	8009142 <quorem+0x96>
 80091b8:	6812      	ldr	r2, [r2, #0]
 80091ba:	3b04      	subs	r3, #4
 80091bc:	2a00      	cmp	r2, #0
 80091be:	d1ef      	bne.n	80091a0 <quorem+0xf4>
 80091c0:	3c01      	subs	r4, #1
 80091c2:	e7ea      	b.n	800919a <quorem+0xee>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e7ee      	b.n	80091a6 <quorem+0xfa>

080091c8 <_dtoa_r>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	4616      	mov	r6, r2
 80091ce:	461f      	mov	r7, r3
 80091d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091d2:	b095      	sub	sp, #84	; 0x54
 80091d4:	4604      	mov	r4, r0
 80091d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80091da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80091de:	b93d      	cbnz	r5, 80091f0 <_dtoa_r+0x28>
 80091e0:	2010      	movs	r0, #16
 80091e2:	f001 f8e1 	bl	800a3a8 <malloc>
 80091e6:	6260      	str	r0, [r4, #36]	; 0x24
 80091e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091ec:	6005      	str	r5, [r0, #0]
 80091ee:	60c5      	str	r5, [r0, #12]
 80091f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	b151      	cbz	r1, 800920c <_dtoa_r+0x44>
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	2301      	movs	r3, #1
 80091fa:	4093      	lsls	r3, r2
 80091fc:	604a      	str	r2, [r1, #4]
 80091fe:	608b      	str	r3, [r1, #8]
 8009200:	4620      	mov	r0, r4
 8009202:	f001 f92d 	bl	800a460 <_Bfree>
 8009206:	2200      	movs	r2, #0
 8009208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	1e3b      	subs	r3, r7, #0
 800920e:	bfaf      	iteee	ge
 8009210:	2300      	movge	r3, #0
 8009212:	2201      	movlt	r2, #1
 8009214:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009218:	9303      	strlt	r3, [sp, #12]
 800921a:	bfac      	ite	ge
 800921c:	f8c8 3000 	strge.w	r3, [r8]
 8009220:	f8c8 2000 	strlt.w	r2, [r8]
 8009224:	4bae      	ldr	r3, [pc, #696]	; (80094e0 <_dtoa_r+0x318>)
 8009226:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800922a:	ea33 0308 	bics.w	r3, r3, r8
 800922e:	d11b      	bne.n	8009268 <_dtoa_r+0xa0>
 8009230:	f242 730f 	movw	r3, #9999	; 0x270f
 8009234:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	b923      	cbnz	r3, 8009246 <_dtoa_r+0x7e>
 800923c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009240:	2800      	cmp	r0, #0
 8009242:	f000 8545 	beq.w	8009cd0 <_dtoa_r+0xb08>
 8009246:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009248:	b953      	cbnz	r3, 8009260 <_dtoa_r+0x98>
 800924a:	4ba6      	ldr	r3, [pc, #664]	; (80094e4 <_dtoa_r+0x31c>)
 800924c:	e021      	b.n	8009292 <_dtoa_r+0xca>
 800924e:	4ba6      	ldr	r3, [pc, #664]	; (80094e8 <_dtoa_r+0x320>)
 8009250:	9306      	str	r3, [sp, #24]
 8009252:	3308      	adds	r3, #8
 8009254:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	9806      	ldr	r0, [sp, #24]
 800925a:	b015      	add	sp, #84	; 0x54
 800925c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009260:	4ba0      	ldr	r3, [pc, #640]	; (80094e4 <_dtoa_r+0x31c>)
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	3303      	adds	r3, #3
 8009266:	e7f5      	b.n	8009254 <_dtoa_r+0x8c>
 8009268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800926c:	2200      	movs	r2, #0
 800926e:	2300      	movs	r3, #0
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 fb98 	bl	80009a8 <__aeabi_dcmpeq>
 8009278:	4682      	mov	sl, r0
 800927a:	b160      	cbz	r0, 8009296 <_dtoa_r+0xce>
 800927c:	2301      	movs	r3, #1
 800927e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8520 	beq.w	8009cca <_dtoa_r+0xb02>
 800928a:	4b98      	ldr	r3, [pc, #608]	; (80094ec <_dtoa_r+0x324>)
 800928c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	3b01      	subs	r3, #1
 8009292:	9306      	str	r3, [sp, #24]
 8009294:	e7e0      	b.n	8009258 <_dtoa_r+0x90>
 8009296:	ab12      	add	r3, sp, #72	; 0x48
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	ab13      	add	r3, sp, #76	; 0x4c
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	4632      	mov	r2, r6
 80092a0:	463b      	mov	r3, r7
 80092a2:	4620      	mov	r0, r4
 80092a4:	f001 fbe8 	bl	800aa78 <__d2b>
 80092a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80092ac:	4683      	mov	fp, r0
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	d07d      	beq.n	80093ae <_dtoa_r+0x1e6>
 80092b2:	46b0      	mov	r8, r6
 80092b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80092bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80092c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80092c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80092c8:	2200      	movs	r2, #0
 80092ca:	4b89      	ldr	r3, [pc, #548]	; (80094f0 <_dtoa_r+0x328>)
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7f6 ff4a 	bl	8000168 <__aeabi_dsub>
 80092d4:	a37c      	add	r3, pc, #496	; (adr r3, 80094c8 <_dtoa_r+0x300>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f7 f8fd 	bl	80004d8 <__aeabi_dmul>
 80092de:	a37c      	add	r3, pc, #496	; (adr r3, 80094d0 <_dtoa_r+0x308>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f6 ff42 	bl	800016c <__adddf3>
 80092e8:	4606      	mov	r6, r0
 80092ea:	4628      	mov	r0, r5
 80092ec:	460f      	mov	r7, r1
 80092ee:	f7f7 f889 	bl	8000404 <__aeabi_i2d>
 80092f2:	a379      	add	r3, pc, #484	; (adr r3, 80094d8 <_dtoa_r+0x310>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7f7 f8ee 	bl	80004d8 <__aeabi_dmul>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f6 ff32 	bl	800016c <__adddf3>
 8009308:	4606      	mov	r6, r0
 800930a:	460f      	mov	r7, r1
 800930c:	f7f7 fb94 	bl	8000a38 <__aeabi_d2iz>
 8009310:	2200      	movs	r2, #0
 8009312:	4682      	mov	sl, r0
 8009314:	2300      	movs	r3, #0
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f7 fb4f 	bl	80009bc <__aeabi_dcmplt>
 800931e:	b148      	cbz	r0, 8009334 <_dtoa_r+0x16c>
 8009320:	4650      	mov	r0, sl
 8009322:	f7f7 f86f 	bl	8000404 <__aeabi_i2d>
 8009326:	4632      	mov	r2, r6
 8009328:	463b      	mov	r3, r7
 800932a:	f7f7 fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800932e:	b908      	cbnz	r0, 8009334 <_dtoa_r+0x16c>
 8009330:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009334:	f1ba 0f16 	cmp.w	sl, #22
 8009338:	d85a      	bhi.n	80093f0 <_dtoa_r+0x228>
 800933a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800933e:	496d      	ldr	r1, [pc, #436]	; (80094f4 <_dtoa_r+0x32c>)
 8009340:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009348:	f7f7 fb56 	bl	80009f8 <__aeabi_dcmpgt>
 800934c:	2800      	cmp	r0, #0
 800934e:	d051      	beq.n	80093f4 <_dtoa_r+0x22c>
 8009350:	2300      	movs	r3, #0
 8009352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009356:	930d      	str	r3, [sp, #52]	; 0x34
 8009358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800935a:	1b5d      	subs	r5, r3, r5
 800935c:	1e6b      	subs	r3, r5, #1
 800935e:	9307      	str	r3, [sp, #28]
 8009360:	bf43      	ittte	mi
 8009362:	2300      	movmi	r3, #0
 8009364:	f1c5 0901 	rsbmi	r9, r5, #1
 8009368:	9307      	strmi	r3, [sp, #28]
 800936a:	f04f 0900 	movpl.w	r9, #0
 800936e:	f1ba 0f00 	cmp.w	sl, #0
 8009372:	db41      	blt.n	80093f8 <_dtoa_r+0x230>
 8009374:	9b07      	ldr	r3, [sp, #28]
 8009376:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800937a:	4453      	add	r3, sl
 800937c:	9307      	str	r3, [sp, #28]
 800937e:	2300      	movs	r3, #0
 8009380:	9308      	str	r3, [sp, #32]
 8009382:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009384:	2b09      	cmp	r3, #9
 8009386:	f200 808f 	bhi.w	80094a8 <_dtoa_r+0x2e0>
 800938a:	2b05      	cmp	r3, #5
 800938c:	bfc4      	itt	gt
 800938e:	3b04      	subgt	r3, #4
 8009390:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009394:	bfc8      	it	gt
 8009396:	2500      	movgt	r5, #0
 8009398:	f1a3 0302 	sub.w	r3, r3, #2
 800939c:	bfd8      	it	le
 800939e:	2501      	movle	r5, #1
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	f200 808d 	bhi.w	80094c0 <_dtoa_r+0x2f8>
 80093a6:	e8df f003 	tbb	[pc, r3]
 80093aa:	7d7b      	.short	0x7d7b
 80093ac:	6f2f      	.short	0x6f2f
 80093ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80093b2:	441d      	add	r5, r3
 80093b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80093b8:	2820      	cmp	r0, #32
 80093ba:	dd13      	ble.n	80093e4 <_dtoa_r+0x21c>
 80093bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	fa08 f800 	lsl.w	r8, r8, r0
 80093c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80093ca:	fa23 f000 	lsr.w	r0, r3, r0
 80093ce:	ea48 0000 	orr.w	r0, r8, r0
 80093d2:	f7f7 f807 	bl	80003e4 <__aeabi_ui2d>
 80093d6:	2301      	movs	r3, #1
 80093d8:	4680      	mov	r8, r0
 80093da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80093de:	3d01      	subs	r5, #1
 80093e0:	9310      	str	r3, [sp, #64]	; 0x40
 80093e2:	e771      	b.n	80092c8 <_dtoa_r+0x100>
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	f1c0 0020 	rsb	r0, r0, #32
 80093ea:	fa03 f000 	lsl.w	r0, r3, r0
 80093ee:	e7f0      	b.n	80093d2 <_dtoa_r+0x20a>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e7b0      	b.n	8009356 <_dtoa_r+0x18e>
 80093f4:	900d      	str	r0, [sp, #52]	; 0x34
 80093f6:	e7af      	b.n	8009358 <_dtoa_r+0x190>
 80093f8:	f1ca 0300 	rsb	r3, sl, #0
 80093fc:	9308      	str	r3, [sp, #32]
 80093fe:	2300      	movs	r3, #0
 8009400:	eba9 090a 	sub.w	r9, r9, sl
 8009404:	930c      	str	r3, [sp, #48]	; 0x30
 8009406:	e7bc      	b.n	8009382 <_dtoa_r+0x1ba>
 8009408:	2301      	movs	r3, #1
 800940a:	9309      	str	r3, [sp, #36]	; 0x24
 800940c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800940e:	2b00      	cmp	r3, #0
 8009410:	dd74      	ble.n	80094fc <_dtoa_r+0x334>
 8009412:	4698      	mov	r8, r3
 8009414:	9304      	str	r3, [sp, #16]
 8009416:	2200      	movs	r2, #0
 8009418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800941a:	6072      	str	r2, [r6, #4]
 800941c:	2204      	movs	r2, #4
 800941e:	f102 0014 	add.w	r0, r2, #20
 8009422:	4298      	cmp	r0, r3
 8009424:	6871      	ldr	r1, [r6, #4]
 8009426:	d96e      	bls.n	8009506 <_dtoa_r+0x33e>
 8009428:	4620      	mov	r0, r4
 800942a:	f000 ffe5 	bl	800a3f8 <_Balloc>
 800942e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009430:	6030      	str	r0, [r6, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b8 0f0e 	cmp.w	r8, #14
 8009438:	9306      	str	r3, [sp, #24]
 800943a:	f200 80ed 	bhi.w	8009618 <_dtoa_r+0x450>
 800943e:	2d00      	cmp	r5, #0
 8009440:	f000 80ea 	beq.w	8009618 <_dtoa_r+0x450>
 8009444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009448:	f1ba 0f00 	cmp.w	sl, #0
 800944c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009450:	dd77      	ble.n	8009542 <_dtoa_r+0x37a>
 8009452:	4a28      	ldr	r2, [pc, #160]	; (80094f4 <_dtoa_r+0x32c>)
 8009454:	f00a 030f 	and.w	r3, sl, #15
 8009458:	ea4f 162a 	mov.w	r6, sl, asr #4
 800945c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009460:	06f0      	lsls	r0, r6, #27
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800946a:	d568      	bpl.n	800953e <_dtoa_r+0x376>
 800946c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009470:	4b21      	ldr	r3, [pc, #132]	; (80094f8 <_dtoa_r+0x330>)
 8009472:	2503      	movs	r5, #3
 8009474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009478:	f7f7 f958 	bl	800072c <__aeabi_ddiv>
 800947c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009480:	f006 060f 	and.w	r6, r6, #15
 8009484:	4f1c      	ldr	r7, [pc, #112]	; (80094f8 <_dtoa_r+0x330>)
 8009486:	e04f      	b.n	8009528 <_dtoa_r+0x360>
 8009488:	2301      	movs	r3, #1
 800948a:	9309      	str	r3, [sp, #36]	; 0x24
 800948c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800948e:	4453      	add	r3, sl
 8009490:	f103 0801 	add.w	r8, r3, #1
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	4643      	mov	r3, r8
 8009498:	2b01      	cmp	r3, #1
 800949a:	bfb8      	it	lt
 800949c:	2301      	movlt	r3, #1
 800949e:	e7ba      	b.n	8009416 <_dtoa_r+0x24e>
 80094a0:	2300      	movs	r3, #0
 80094a2:	e7b2      	b.n	800940a <_dtoa_r+0x242>
 80094a4:	2300      	movs	r3, #0
 80094a6:	e7f0      	b.n	800948a <_dtoa_r+0x2c2>
 80094a8:	2501      	movs	r5, #1
 80094aa:	2300      	movs	r3, #0
 80094ac:	9509      	str	r5, [sp, #36]	; 0x24
 80094ae:	931e      	str	r3, [sp, #120]	; 0x78
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	2200      	movs	r2, #0
 80094b6:	9304      	str	r3, [sp, #16]
 80094b8:	4698      	mov	r8, r3
 80094ba:	2312      	movs	r3, #18
 80094bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80094be:	e7aa      	b.n	8009416 <_dtoa_r+0x24e>
 80094c0:	2301      	movs	r3, #1
 80094c2:	9309      	str	r3, [sp, #36]	; 0x24
 80094c4:	e7f4      	b.n	80094b0 <_dtoa_r+0x2e8>
 80094c6:	bf00      	nop
 80094c8:	636f4361 	.word	0x636f4361
 80094cc:	3fd287a7 	.word	0x3fd287a7
 80094d0:	8b60c8b3 	.word	0x8b60c8b3
 80094d4:	3fc68a28 	.word	0x3fc68a28
 80094d8:	509f79fb 	.word	0x509f79fb
 80094dc:	3fd34413 	.word	0x3fd34413
 80094e0:	7ff00000 	.word	0x7ff00000
 80094e4:	0800b5a1 	.word	0x0800b5a1
 80094e8:	0800b598 	.word	0x0800b598
 80094ec:	0800b51d 	.word	0x0800b51d
 80094f0:	3ff80000 	.word	0x3ff80000
 80094f4:	0800b5d8 	.word	0x0800b5d8
 80094f8:	0800b5b0 	.word	0x0800b5b0
 80094fc:	2301      	movs	r3, #1
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	4698      	mov	r8, r3
 8009502:	461a      	mov	r2, r3
 8009504:	e7da      	b.n	80094bc <_dtoa_r+0x2f4>
 8009506:	3101      	adds	r1, #1
 8009508:	6071      	str	r1, [r6, #4]
 800950a:	0052      	lsls	r2, r2, #1
 800950c:	e787      	b.n	800941e <_dtoa_r+0x256>
 800950e:	07f1      	lsls	r1, r6, #31
 8009510:	d508      	bpl.n	8009524 <_dtoa_r+0x35c>
 8009512:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800951a:	f7f6 ffdd 	bl	80004d8 <__aeabi_dmul>
 800951e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009522:	3501      	adds	r5, #1
 8009524:	1076      	asrs	r6, r6, #1
 8009526:	3708      	adds	r7, #8
 8009528:	2e00      	cmp	r6, #0
 800952a:	d1f0      	bne.n	800950e <_dtoa_r+0x346>
 800952c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009534:	f7f7 f8fa 	bl	800072c <__aeabi_ddiv>
 8009538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800953c:	e01b      	b.n	8009576 <_dtoa_r+0x3ae>
 800953e:	2502      	movs	r5, #2
 8009540:	e7a0      	b.n	8009484 <_dtoa_r+0x2bc>
 8009542:	f000 80a4 	beq.w	800968e <_dtoa_r+0x4c6>
 8009546:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800954a:	f1ca 0600 	rsb	r6, sl, #0
 800954e:	4ba0      	ldr	r3, [pc, #640]	; (80097d0 <_dtoa_r+0x608>)
 8009550:	f006 020f 	and.w	r2, r6, #15
 8009554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f7f6 ffbc 	bl	80004d8 <__aeabi_dmul>
 8009560:	2502      	movs	r5, #2
 8009562:	2300      	movs	r3, #0
 8009564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009568:	4f9a      	ldr	r7, [pc, #616]	; (80097d4 <_dtoa_r+0x60c>)
 800956a:	1136      	asrs	r6, r6, #4
 800956c:	2e00      	cmp	r6, #0
 800956e:	f040 8083 	bne.w	8009678 <_dtoa_r+0x4b0>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e0      	bne.n	8009538 <_dtoa_r+0x370>
 8009576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 808a 	beq.w	8009692 <_dtoa_r+0x4ca>
 800957e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009582:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009586:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800958a:	2200      	movs	r2, #0
 800958c:	4b92      	ldr	r3, [pc, #584]	; (80097d8 <_dtoa_r+0x610>)
 800958e:	f7f7 fa15 	bl	80009bc <__aeabi_dcmplt>
 8009592:	2800      	cmp	r0, #0
 8009594:	d07d      	beq.n	8009692 <_dtoa_r+0x4ca>
 8009596:	f1b8 0f00 	cmp.w	r8, #0
 800959a:	d07a      	beq.n	8009692 <_dtoa_r+0x4ca>
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dd36      	ble.n	8009610 <_dtoa_r+0x448>
 80095a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095a6:	2200      	movs	r2, #0
 80095a8:	4b8c      	ldr	r3, [pc, #560]	; (80097dc <_dtoa_r+0x614>)
 80095aa:	f7f6 ff95 	bl	80004d8 <__aeabi_dmul>
 80095ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095b2:	9e04      	ldr	r6, [sp, #16]
 80095b4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80095b8:	3501      	adds	r5, #1
 80095ba:	4628      	mov	r0, r5
 80095bc:	f7f6 ff22 	bl	8000404 <__aeabi_i2d>
 80095c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095c4:	f7f6 ff88 	bl	80004d8 <__aeabi_dmul>
 80095c8:	2200      	movs	r2, #0
 80095ca:	4b85      	ldr	r3, [pc, #532]	; (80097e0 <_dtoa_r+0x618>)
 80095cc:	f7f6 fdce 	bl	800016c <__adddf3>
 80095d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80095d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80095d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80095da:	2e00      	cmp	r6, #0
 80095dc:	d15c      	bne.n	8009698 <_dtoa_r+0x4d0>
 80095de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	4b7f      	ldr	r3, [pc, #508]	; (80097e4 <_dtoa_r+0x61c>)
 80095e6:	f7f6 fdbf 	bl	8000168 <__aeabi_dsub>
 80095ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ec:	462b      	mov	r3, r5
 80095ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095f2:	f7f7 fa01 	bl	80009f8 <__aeabi_dcmpgt>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f040 8281 	bne.w	8009afe <_dtoa_r+0x936>
 80095fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009602:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009606:	f7f7 f9d9 	bl	80009bc <__aeabi_dcmplt>
 800960a:	2800      	cmp	r0, #0
 800960c:	f040 8275 	bne.w	8009afa <_dtoa_r+0x932>
 8009610:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800961a:	2b00      	cmp	r3, #0
 800961c:	f2c0 814b 	blt.w	80098b6 <_dtoa_r+0x6ee>
 8009620:	f1ba 0f0e 	cmp.w	sl, #14
 8009624:	f300 8147 	bgt.w	80098b6 <_dtoa_r+0x6ee>
 8009628:	4b69      	ldr	r3, [pc, #420]	; (80097d0 <_dtoa_r+0x608>)
 800962a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009636:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009638:	2b00      	cmp	r3, #0
 800963a:	f280 80d7 	bge.w	80097ec <_dtoa_r+0x624>
 800963e:	f1b8 0f00 	cmp.w	r8, #0
 8009642:	f300 80d3 	bgt.w	80097ec <_dtoa_r+0x624>
 8009646:	f040 8257 	bne.w	8009af8 <_dtoa_r+0x930>
 800964a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800964e:	2200      	movs	r2, #0
 8009650:	4b64      	ldr	r3, [pc, #400]	; (80097e4 <_dtoa_r+0x61c>)
 8009652:	f7f6 ff41 	bl	80004d8 <__aeabi_dmul>
 8009656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800965a:	f7f7 f9c3 	bl	80009e4 <__aeabi_dcmpge>
 800965e:	4646      	mov	r6, r8
 8009660:	4647      	mov	r7, r8
 8009662:	2800      	cmp	r0, #0
 8009664:	f040 822d 	bne.w	8009ac2 <_dtoa_r+0x8fa>
 8009668:	9b06      	ldr	r3, [sp, #24]
 800966a:	9a06      	ldr	r2, [sp, #24]
 800966c:	1c5d      	adds	r5, r3, #1
 800966e:	2331      	movs	r3, #49	; 0x31
 8009670:	f10a 0a01 	add.w	sl, sl, #1
 8009674:	7013      	strb	r3, [r2, #0]
 8009676:	e228      	b.n	8009aca <_dtoa_r+0x902>
 8009678:	07f2      	lsls	r2, r6, #31
 800967a:	d505      	bpl.n	8009688 <_dtoa_r+0x4c0>
 800967c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009680:	f7f6 ff2a 	bl	80004d8 <__aeabi_dmul>
 8009684:	2301      	movs	r3, #1
 8009686:	3501      	adds	r5, #1
 8009688:	1076      	asrs	r6, r6, #1
 800968a:	3708      	adds	r7, #8
 800968c:	e76e      	b.n	800956c <_dtoa_r+0x3a4>
 800968e:	2502      	movs	r5, #2
 8009690:	e771      	b.n	8009576 <_dtoa_r+0x3ae>
 8009692:	4657      	mov	r7, sl
 8009694:	4646      	mov	r6, r8
 8009696:	e790      	b.n	80095ba <_dtoa_r+0x3f2>
 8009698:	4b4d      	ldr	r3, [pc, #308]	; (80097d0 <_dtoa_r+0x608>)
 800969a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800969e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80096a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d048      	beq.n	800973a <_dtoa_r+0x572>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	2000      	movs	r0, #0
 80096ae:	494e      	ldr	r1, [pc, #312]	; (80097e8 <_dtoa_r+0x620>)
 80096b0:	f7f7 f83c 	bl	800072c <__aeabi_ddiv>
 80096b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096b8:	f7f6 fd56 	bl	8000168 <__aeabi_dsub>
 80096bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096c0:	9d06      	ldr	r5, [sp, #24]
 80096c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c6:	f7f7 f9b7 	bl	8000a38 <__aeabi_d2iz>
 80096ca:	9011      	str	r0, [sp, #68]	; 0x44
 80096cc:	f7f6 fe9a 	bl	8000404 <__aeabi_i2d>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096d8:	f7f6 fd46 	bl	8000168 <__aeabi_dsub>
 80096dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096e2:	3330      	adds	r3, #48	; 0x30
 80096e4:	f805 3b01 	strb.w	r3, [r5], #1
 80096e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096ec:	f7f7 f966 	bl	80009bc <__aeabi_dcmplt>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d163      	bne.n	80097bc <_dtoa_r+0x5f4>
 80096f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096f8:	2000      	movs	r0, #0
 80096fa:	4937      	ldr	r1, [pc, #220]	; (80097d8 <_dtoa_r+0x610>)
 80096fc:	f7f6 fd34 	bl	8000168 <__aeabi_dsub>
 8009700:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009704:	f7f7 f95a 	bl	80009bc <__aeabi_dcmplt>
 8009708:	2800      	cmp	r0, #0
 800970a:	f040 80b5 	bne.w	8009878 <_dtoa_r+0x6b0>
 800970e:	9b06      	ldr	r3, [sp, #24]
 8009710:	1aeb      	subs	r3, r5, r3
 8009712:	429e      	cmp	r6, r3
 8009714:	f77f af7c 	ble.w	8009610 <_dtoa_r+0x448>
 8009718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800971c:	2200      	movs	r2, #0
 800971e:	4b2f      	ldr	r3, [pc, #188]	; (80097dc <_dtoa_r+0x614>)
 8009720:	f7f6 feda 	bl	80004d8 <__aeabi_dmul>
 8009724:	2200      	movs	r2, #0
 8009726:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800972a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972e:	4b2b      	ldr	r3, [pc, #172]	; (80097dc <_dtoa_r+0x614>)
 8009730:	f7f6 fed2 	bl	80004d8 <__aeabi_dmul>
 8009734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009738:	e7c3      	b.n	80096c2 <_dtoa_r+0x4fa>
 800973a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800973e:	f7f6 fecb 	bl	80004d8 <__aeabi_dmul>
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009748:	199d      	adds	r5, r3, r6
 800974a:	461e      	mov	r6, r3
 800974c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009750:	f7f7 f972 	bl	8000a38 <__aeabi_d2iz>
 8009754:	9011      	str	r0, [sp, #68]	; 0x44
 8009756:	f7f6 fe55 	bl	8000404 <__aeabi_i2d>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009762:	f7f6 fd01 	bl	8000168 <__aeabi_dsub>
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800976c:	3330      	adds	r3, #48	; 0x30
 800976e:	f806 3b01 	strb.w	r3, [r6], #1
 8009772:	42ae      	cmp	r6, r5
 8009774:	f04f 0200 	mov.w	r2, #0
 8009778:	d124      	bne.n	80097c4 <_dtoa_r+0x5fc>
 800977a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800977e:	4b1a      	ldr	r3, [pc, #104]	; (80097e8 <_dtoa_r+0x620>)
 8009780:	f7f6 fcf4 	bl	800016c <__adddf3>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800978c:	f7f7 f934 	bl	80009f8 <__aeabi_dcmpgt>
 8009790:	2800      	cmp	r0, #0
 8009792:	d171      	bne.n	8009878 <_dtoa_r+0x6b0>
 8009794:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009798:	2000      	movs	r0, #0
 800979a:	4913      	ldr	r1, [pc, #76]	; (80097e8 <_dtoa_r+0x620>)
 800979c:	f7f6 fce4 	bl	8000168 <__aeabi_dsub>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a8:	f7f7 f908 	bl	80009bc <__aeabi_dcmplt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	f43f af2f 	beq.w	8009610 <_dtoa_r+0x448>
 80097b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097b6:	1e6a      	subs	r2, r5, #1
 80097b8:	2b30      	cmp	r3, #48	; 0x30
 80097ba:	d001      	beq.n	80097c0 <_dtoa_r+0x5f8>
 80097bc:	46ba      	mov	sl, r7
 80097be:	e04a      	b.n	8009856 <_dtoa_r+0x68e>
 80097c0:	4615      	mov	r5, r2
 80097c2:	e7f6      	b.n	80097b2 <_dtoa_r+0x5ea>
 80097c4:	4b05      	ldr	r3, [pc, #20]	; (80097dc <_dtoa_r+0x614>)
 80097c6:	f7f6 fe87 	bl	80004d8 <__aeabi_dmul>
 80097ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ce:	e7bd      	b.n	800974c <_dtoa_r+0x584>
 80097d0:	0800b5d8 	.word	0x0800b5d8
 80097d4:	0800b5b0 	.word	0x0800b5b0
 80097d8:	3ff00000 	.word	0x3ff00000
 80097dc:	40240000 	.word	0x40240000
 80097e0:	401c0000 	.word	0x401c0000
 80097e4:	40140000 	.word	0x40140000
 80097e8:	3fe00000 	.word	0x3fe00000
 80097ec:	9d06      	ldr	r5, [sp, #24]
 80097ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f6 ff97 	bl	800072c <__aeabi_ddiv>
 80097fe:	f7f7 f91b 	bl	8000a38 <__aeabi_d2iz>
 8009802:	4681      	mov	r9, r0
 8009804:	f7f6 fdfe 	bl	8000404 <__aeabi_i2d>
 8009808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800980c:	f7f6 fe64 	bl	80004d8 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4630      	mov	r0, r6
 8009816:	4639      	mov	r1, r7
 8009818:	f7f6 fca6 	bl	8000168 <__aeabi_dsub>
 800981c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009820:	f805 6b01 	strb.w	r6, [r5], #1
 8009824:	9e06      	ldr	r6, [sp, #24]
 8009826:	4602      	mov	r2, r0
 8009828:	1bae      	subs	r6, r5, r6
 800982a:	45b0      	cmp	r8, r6
 800982c:	460b      	mov	r3, r1
 800982e:	d135      	bne.n	800989c <_dtoa_r+0x6d4>
 8009830:	f7f6 fc9c 	bl	800016c <__adddf3>
 8009834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009838:	4606      	mov	r6, r0
 800983a:	460f      	mov	r7, r1
 800983c:	f7f7 f8dc 	bl	80009f8 <__aeabi_dcmpgt>
 8009840:	b9c8      	cbnz	r0, 8009876 <_dtoa_r+0x6ae>
 8009842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009846:	4630      	mov	r0, r6
 8009848:	4639      	mov	r1, r7
 800984a:	f7f7 f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 800984e:	b110      	cbz	r0, 8009856 <_dtoa_r+0x68e>
 8009850:	f019 0f01 	tst.w	r9, #1
 8009854:	d10f      	bne.n	8009876 <_dtoa_r+0x6ae>
 8009856:	4659      	mov	r1, fp
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fe01 	bl	800a460 <_Bfree>
 800985e:	2300      	movs	r3, #0
 8009860:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009862:	702b      	strb	r3, [r5, #0]
 8009864:	f10a 0301 	add.w	r3, sl, #1
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800986c:	2b00      	cmp	r3, #0
 800986e:	f43f acf3 	beq.w	8009258 <_dtoa_r+0x90>
 8009872:	601d      	str	r5, [r3, #0]
 8009874:	e4f0      	b.n	8009258 <_dtoa_r+0x90>
 8009876:	4657      	mov	r7, sl
 8009878:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800987c:	1e6b      	subs	r3, r5, #1
 800987e:	2a39      	cmp	r2, #57	; 0x39
 8009880:	d106      	bne.n	8009890 <_dtoa_r+0x6c8>
 8009882:	9a06      	ldr	r2, [sp, #24]
 8009884:	429a      	cmp	r2, r3
 8009886:	d107      	bne.n	8009898 <_dtoa_r+0x6d0>
 8009888:	2330      	movs	r3, #48	; 0x30
 800988a:	7013      	strb	r3, [r2, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	3701      	adds	r7, #1
 8009890:	781a      	ldrb	r2, [r3, #0]
 8009892:	3201      	adds	r2, #1
 8009894:	701a      	strb	r2, [r3, #0]
 8009896:	e791      	b.n	80097bc <_dtoa_r+0x5f4>
 8009898:	461d      	mov	r5, r3
 800989a:	e7ed      	b.n	8009878 <_dtoa_r+0x6b0>
 800989c:	2200      	movs	r2, #0
 800989e:	4b99      	ldr	r3, [pc, #612]	; (8009b04 <_dtoa_r+0x93c>)
 80098a0:	f7f6 fe1a 	bl	80004d8 <__aeabi_dmul>
 80098a4:	2200      	movs	r2, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4606      	mov	r6, r0
 80098aa:	460f      	mov	r7, r1
 80098ac:	f7f7 f87c 	bl	80009a8 <__aeabi_dcmpeq>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d09e      	beq.n	80097f2 <_dtoa_r+0x62a>
 80098b4:	e7cf      	b.n	8009856 <_dtoa_r+0x68e>
 80098b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	f000 8088 	beq.w	80099ce <_dtoa_r+0x806>
 80098be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098c0:	2a01      	cmp	r2, #1
 80098c2:	dc6d      	bgt.n	80099a0 <_dtoa_r+0x7d8>
 80098c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	d066      	beq.n	8009998 <_dtoa_r+0x7d0>
 80098ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098ce:	464d      	mov	r5, r9
 80098d0:	9e08      	ldr	r6, [sp, #32]
 80098d2:	9a07      	ldr	r2, [sp, #28]
 80098d4:	2101      	movs	r1, #1
 80098d6:	441a      	add	r2, r3
 80098d8:	4620      	mov	r0, r4
 80098da:	4499      	add	r9, r3
 80098dc:	9207      	str	r2, [sp, #28]
 80098de:	f000 fe9d 	bl	800a61c <__i2b>
 80098e2:	4607      	mov	r7, r0
 80098e4:	2d00      	cmp	r5, #0
 80098e6:	dd0b      	ble.n	8009900 <_dtoa_r+0x738>
 80098e8:	9b07      	ldr	r3, [sp, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dd08      	ble.n	8009900 <_dtoa_r+0x738>
 80098ee:	42ab      	cmp	r3, r5
 80098f0:	bfa8      	it	ge
 80098f2:	462b      	movge	r3, r5
 80098f4:	9a07      	ldr	r2, [sp, #28]
 80098f6:	eba9 0903 	sub.w	r9, r9, r3
 80098fa:	1aed      	subs	r5, r5, r3
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	9307      	str	r3, [sp, #28]
 8009900:	9b08      	ldr	r3, [sp, #32]
 8009902:	b1eb      	cbz	r3, 8009940 <_dtoa_r+0x778>
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	2b00      	cmp	r3, #0
 8009908:	d065      	beq.n	80099d6 <_dtoa_r+0x80e>
 800990a:	b18e      	cbz	r6, 8009930 <_dtoa_r+0x768>
 800990c:	4639      	mov	r1, r7
 800990e:	4632      	mov	r2, r6
 8009910:	4620      	mov	r0, r4
 8009912:	f000 ff21 	bl	800a758 <__pow5mult>
 8009916:	465a      	mov	r2, fp
 8009918:	4601      	mov	r1, r0
 800991a:	4607      	mov	r7, r0
 800991c:	4620      	mov	r0, r4
 800991e:	f000 fe86 	bl	800a62e <__multiply>
 8009922:	4659      	mov	r1, fp
 8009924:	900a      	str	r0, [sp, #40]	; 0x28
 8009926:	4620      	mov	r0, r4
 8009928:	f000 fd9a 	bl	800a460 <_Bfree>
 800992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992e:	469b      	mov	fp, r3
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	1b9a      	subs	r2, r3, r6
 8009934:	d004      	beq.n	8009940 <_dtoa_r+0x778>
 8009936:	4659      	mov	r1, fp
 8009938:	4620      	mov	r0, r4
 800993a:	f000 ff0d 	bl	800a758 <__pow5mult>
 800993e:	4683      	mov	fp, r0
 8009940:	2101      	movs	r1, #1
 8009942:	4620      	mov	r0, r4
 8009944:	f000 fe6a 	bl	800a61c <__i2b>
 8009948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800994a:	4606      	mov	r6, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 81c6 	beq.w	8009cde <_dtoa_r+0xb16>
 8009952:	461a      	mov	r2, r3
 8009954:	4601      	mov	r1, r0
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fefe 	bl	800a758 <__pow5mult>
 800995c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800995e:	4606      	mov	r6, r0
 8009960:	2b01      	cmp	r3, #1
 8009962:	dc3e      	bgt.n	80099e2 <_dtoa_r+0x81a>
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d137      	bne.n	80099da <_dtoa_r+0x812>
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009970:	2b00      	cmp	r3, #0
 8009972:	d134      	bne.n	80099de <_dtoa_r+0x816>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800997a:	0d1b      	lsrs	r3, r3, #20
 800997c:	051b      	lsls	r3, r3, #20
 800997e:	b12b      	cbz	r3, 800998c <_dtoa_r+0x7c4>
 8009980:	9b07      	ldr	r3, [sp, #28]
 8009982:	f109 0901 	add.w	r9, r9, #1
 8009986:	3301      	adds	r3, #1
 8009988:	9307      	str	r3, [sp, #28]
 800998a:	2301      	movs	r3, #1
 800998c:	9308      	str	r3, [sp, #32]
 800998e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009990:	2b00      	cmp	r3, #0
 8009992:	d128      	bne.n	80099e6 <_dtoa_r+0x81e>
 8009994:	2001      	movs	r0, #1
 8009996:	e02e      	b.n	80099f6 <_dtoa_r+0x82e>
 8009998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800999a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800999e:	e796      	b.n	80098ce <_dtoa_r+0x706>
 80099a0:	9b08      	ldr	r3, [sp, #32]
 80099a2:	f108 36ff 	add.w	r6, r8, #4294967295
 80099a6:	42b3      	cmp	r3, r6
 80099a8:	bfb7      	itett	lt
 80099aa:	9b08      	ldrlt	r3, [sp, #32]
 80099ac:	1b9e      	subge	r6, r3, r6
 80099ae:	1af2      	sublt	r2, r6, r3
 80099b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80099b2:	bfbf      	itttt	lt
 80099b4:	9608      	strlt	r6, [sp, #32]
 80099b6:	189b      	addlt	r3, r3, r2
 80099b8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80099ba:	2600      	movlt	r6, #0
 80099bc:	f1b8 0f00 	cmp.w	r8, #0
 80099c0:	bfb9      	ittee	lt
 80099c2:	eba9 0508 	sublt.w	r5, r9, r8
 80099c6:	2300      	movlt	r3, #0
 80099c8:	464d      	movge	r5, r9
 80099ca:	4643      	movge	r3, r8
 80099cc:	e781      	b.n	80098d2 <_dtoa_r+0x70a>
 80099ce:	9e08      	ldr	r6, [sp, #32]
 80099d0:	464d      	mov	r5, r9
 80099d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80099d4:	e786      	b.n	80098e4 <_dtoa_r+0x71c>
 80099d6:	9a08      	ldr	r2, [sp, #32]
 80099d8:	e7ad      	b.n	8009936 <_dtoa_r+0x76e>
 80099da:	2300      	movs	r3, #0
 80099dc:	e7d6      	b.n	800998c <_dtoa_r+0x7c4>
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	e7d4      	b.n	800998c <_dtoa_r+0x7c4>
 80099e2:	2300      	movs	r3, #0
 80099e4:	9308      	str	r3, [sp, #32]
 80099e6:	6933      	ldr	r3, [r6, #16]
 80099e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80099ec:	6918      	ldr	r0, [r3, #16]
 80099ee:	f000 fdc7 	bl	800a580 <__hi0bits>
 80099f2:	f1c0 0020 	rsb	r0, r0, #32
 80099f6:	9b07      	ldr	r3, [sp, #28]
 80099f8:	4418      	add	r0, r3
 80099fa:	f010 001f 	ands.w	r0, r0, #31
 80099fe:	d047      	beq.n	8009a90 <_dtoa_r+0x8c8>
 8009a00:	f1c0 0320 	rsb	r3, r0, #32
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	dd3b      	ble.n	8009a80 <_dtoa_r+0x8b8>
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	f1c0 001c 	rsb	r0, r0, #28
 8009a0e:	4481      	add	r9, r0
 8009a10:	4405      	add	r5, r0
 8009a12:	4403      	add	r3, r0
 8009a14:	9307      	str	r3, [sp, #28]
 8009a16:	f1b9 0f00 	cmp.w	r9, #0
 8009a1a:	dd05      	ble.n	8009a28 <_dtoa_r+0x860>
 8009a1c:	4659      	mov	r1, fp
 8009a1e:	464a      	mov	r2, r9
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 fee7 	bl	800a7f4 <__lshift>
 8009a26:	4683      	mov	fp, r0
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dd05      	ble.n	8009a3a <_dtoa_r+0x872>
 8009a2e:	4631      	mov	r1, r6
 8009a30:	461a      	mov	r2, r3
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fede 	bl	800a7f4 <__lshift>
 8009a38:	4606      	mov	r6, r0
 8009a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a3c:	b353      	cbz	r3, 8009a94 <_dtoa_r+0x8cc>
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4658      	mov	r0, fp
 8009a42:	f000 ff2b 	bl	800a89c <__mcmp>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	da24      	bge.n	8009a94 <_dtoa_r+0x8cc>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	220a      	movs	r2, #10
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fd1c 	bl	800a48e <__multadd>
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a5c:	4683      	mov	fp, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 8144 	beq.w	8009cec <_dtoa_r+0xb24>
 8009a64:	2300      	movs	r3, #0
 8009a66:	4639      	mov	r1, r7
 8009a68:	220a      	movs	r2, #10
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fd0f 	bl	800a48e <__multadd>
 8009a70:	9b04      	ldr	r3, [sp, #16]
 8009a72:	4607      	mov	r7, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc4d      	bgt.n	8009b14 <_dtoa_r+0x94c>
 8009a78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	dd4a      	ble.n	8009b14 <_dtoa_r+0x94c>
 8009a7e:	e011      	b.n	8009aa4 <_dtoa_r+0x8dc>
 8009a80:	d0c9      	beq.n	8009a16 <_dtoa_r+0x84e>
 8009a82:	9a07      	ldr	r2, [sp, #28]
 8009a84:	331c      	adds	r3, #28
 8009a86:	441a      	add	r2, r3
 8009a88:	4499      	add	r9, r3
 8009a8a:	441d      	add	r5, r3
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	e7c1      	b.n	8009a14 <_dtoa_r+0x84c>
 8009a90:	4603      	mov	r3, r0
 8009a92:	e7f6      	b.n	8009a82 <_dtoa_r+0x8ba>
 8009a94:	f1b8 0f00 	cmp.w	r8, #0
 8009a98:	dc36      	bgt.n	8009b08 <_dtoa_r+0x940>
 8009a9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	dd33      	ble.n	8009b08 <_dtoa_r+0x940>
 8009aa0:	f8cd 8010 	str.w	r8, [sp, #16]
 8009aa4:	9b04      	ldr	r3, [sp, #16]
 8009aa6:	b963      	cbnz	r3, 8009ac2 <_dtoa_r+0x8fa>
 8009aa8:	4631      	mov	r1, r6
 8009aaa:	2205      	movs	r2, #5
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fcee 	bl	800a48e <__multadd>
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	f000 fef0 	bl	800a89c <__mcmp>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	f73f add3 	bgt.w	8009668 <_dtoa_r+0x4a0>
 8009ac2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ac4:	9d06      	ldr	r5, [sp, #24]
 8009ac6:	ea6f 0a03 	mvn.w	sl, r3
 8009aca:	f04f 0900 	mov.w	r9, #0
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 fcc5 	bl	800a460 <_Bfree>
 8009ad6:	2f00      	cmp	r7, #0
 8009ad8:	f43f aebd 	beq.w	8009856 <_dtoa_r+0x68e>
 8009adc:	f1b9 0f00 	cmp.w	r9, #0
 8009ae0:	d005      	beq.n	8009aee <_dtoa_r+0x926>
 8009ae2:	45b9      	cmp	r9, r7
 8009ae4:	d003      	beq.n	8009aee <_dtoa_r+0x926>
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 fcb9 	bl	800a460 <_Bfree>
 8009aee:	4639      	mov	r1, r7
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fcb5 	bl	800a460 <_Bfree>
 8009af6:	e6ae      	b.n	8009856 <_dtoa_r+0x68e>
 8009af8:	2600      	movs	r6, #0
 8009afa:	4637      	mov	r7, r6
 8009afc:	e7e1      	b.n	8009ac2 <_dtoa_r+0x8fa>
 8009afe:	46ba      	mov	sl, r7
 8009b00:	4637      	mov	r7, r6
 8009b02:	e5b1      	b.n	8009668 <_dtoa_r+0x4a0>
 8009b04:	40240000 	.word	0x40240000
 8009b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80f3 	beq.w	8009cfa <_dtoa_r+0xb32>
 8009b14:	2d00      	cmp	r5, #0
 8009b16:	dd05      	ble.n	8009b24 <_dtoa_r+0x95c>
 8009b18:	4639      	mov	r1, r7
 8009b1a:	462a      	mov	r2, r5
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 fe69 	bl	800a7f4 <__lshift>
 8009b22:	4607      	mov	r7, r0
 8009b24:	9b08      	ldr	r3, [sp, #32]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d04c      	beq.n	8009bc4 <_dtoa_r+0x9fc>
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fc63 	bl	800a3f8 <_Balloc>
 8009b32:	4605      	mov	r5, r0
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	f107 010c 	add.w	r1, r7, #12
 8009b3a:	3202      	adds	r2, #2
 8009b3c:	0092      	lsls	r2, r2, #2
 8009b3e:	300c      	adds	r0, #12
 8009b40:	f7fd fd76 	bl	8007630 <memcpy>
 8009b44:	2201      	movs	r2, #1
 8009b46:	4629      	mov	r1, r5
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f000 fe53 	bl	800a7f4 <__lshift>
 8009b4e:	46b9      	mov	r9, r7
 8009b50:	4607      	mov	r7, r0
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	9b02      	ldr	r3, [sp, #8]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	9308      	str	r3, [sp, #32]
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4658      	mov	r0, fp
 8009b62:	f7ff faa3 	bl	80090ac <quorem>
 8009b66:	4649      	mov	r1, r9
 8009b68:	4605      	mov	r5, r0
 8009b6a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f000 fe94 	bl	800a89c <__mcmp>
 8009b74:	463a      	mov	r2, r7
 8009b76:	9002      	str	r0, [sp, #8]
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 fea8 	bl	800a8d0 <__mdiff>
 8009b80:	68c3      	ldr	r3, [r0, #12]
 8009b82:	4602      	mov	r2, r0
 8009b84:	bb03      	cbnz	r3, 8009bc8 <_dtoa_r+0xa00>
 8009b86:	4601      	mov	r1, r0
 8009b88:	9009      	str	r0, [sp, #36]	; 0x24
 8009b8a:	4658      	mov	r0, fp
 8009b8c:	f000 fe86 	bl	800a89c <__mcmp>
 8009b90:	4603      	mov	r3, r0
 8009b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b94:	4611      	mov	r1, r2
 8009b96:	4620      	mov	r0, r4
 8009b98:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9a:	f000 fc61 	bl	800a460 <_Bfree>
 8009b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba0:	b9a3      	cbnz	r3, 8009bcc <_dtoa_r+0xa04>
 8009ba2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ba4:	b992      	cbnz	r2, 8009bcc <_dtoa_r+0xa04>
 8009ba6:	9a08      	ldr	r2, [sp, #32]
 8009ba8:	b982      	cbnz	r2, 8009bcc <_dtoa_r+0xa04>
 8009baa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009bae:	d029      	beq.n	8009c04 <_dtoa_r+0xa3c>
 8009bb0:	9b02      	ldr	r3, [sp, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dd01      	ble.n	8009bba <_dtoa_r+0x9f2>
 8009bb6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009bba:	9b07      	ldr	r3, [sp, #28]
 8009bbc:	1c5d      	adds	r5, r3, #1
 8009bbe:	f883 8000 	strb.w	r8, [r3]
 8009bc2:	e784      	b.n	8009ace <_dtoa_r+0x906>
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	e7c2      	b.n	8009b4e <_dtoa_r+0x986>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e7e3      	b.n	8009b94 <_dtoa_r+0x9cc>
 8009bcc:	9a02      	ldr	r2, [sp, #8]
 8009bce:	2a00      	cmp	r2, #0
 8009bd0:	db04      	blt.n	8009bdc <_dtoa_r+0xa14>
 8009bd2:	d123      	bne.n	8009c1c <_dtoa_r+0xa54>
 8009bd4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009bd6:	bb0a      	cbnz	r2, 8009c1c <_dtoa_r+0xa54>
 8009bd8:	9a08      	ldr	r2, [sp, #32]
 8009bda:	b9fa      	cbnz	r2, 8009c1c <_dtoa_r+0xa54>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	ddec      	ble.n	8009bba <_dtoa_r+0x9f2>
 8009be0:	4659      	mov	r1, fp
 8009be2:	2201      	movs	r2, #1
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 fe05 	bl	800a7f4 <__lshift>
 8009bea:	4631      	mov	r1, r6
 8009bec:	4683      	mov	fp, r0
 8009bee:	f000 fe55 	bl	800a89c <__mcmp>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	dc03      	bgt.n	8009bfe <_dtoa_r+0xa36>
 8009bf6:	d1e0      	bne.n	8009bba <_dtoa_r+0x9f2>
 8009bf8:	f018 0f01 	tst.w	r8, #1
 8009bfc:	d0dd      	beq.n	8009bba <_dtoa_r+0x9f2>
 8009bfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c02:	d1d8      	bne.n	8009bb6 <_dtoa_r+0x9ee>
 8009c04:	9b07      	ldr	r3, [sp, #28]
 8009c06:	9a07      	ldr	r2, [sp, #28]
 8009c08:	1c5d      	adds	r5, r3, #1
 8009c0a:	2339      	movs	r3, #57	; 0x39
 8009c0c:	7013      	strb	r3, [r2, #0]
 8009c0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c12:	1e6a      	subs	r2, r5, #1
 8009c14:	2b39      	cmp	r3, #57	; 0x39
 8009c16:	d04d      	beq.n	8009cb4 <_dtoa_r+0xaec>
 8009c18:	3301      	adds	r3, #1
 8009c1a:	e052      	b.n	8009cc2 <_dtoa_r+0xafa>
 8009c1c:	9a07      	ldr	r2, [sp, #28]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f102 0501 	add.w	r5, r2, #1
 8009c24:	dd06      	ble.n	8009c34 <_dtoa_r+0xa6c>
 8009c26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c2a:	d0eb      	beq.n	8009c04 <_dtoa_r+0xa3c>
 8009c2c:	f108 0801 	add.w	r8, r8, #1
 8009c30:	9b07      	ldr	r3, [sp, #28]
 8009c32:	e7c4      	b.n	8009bbe <_dtoa_r+0x9f6>
 8009c34:	9b06      	ldr	r3, [sp, #24]
 8009c36:	9a04      	ldr	r2, [sp, #16]
 8009c38:	1aeb      	subs	r3, r5, r3
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009c40:	d021      	beq.n	8009c86 <_dtoa_r+0xabe>
 8009c42:	4659      	mov	r1, fp
 8009c44:	2300      	movs	r3, #0
 8009c46:	220a      	movs	r2, #10
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 fc20 	bl	800a48e <__multadd>
 8009c4e:	45b9      	cmp	r9, r7
 8009c50:	4683      	mov	fp, r0
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	f04f 020a 	mov.w	r2, #10
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	d105      	bne.n	8009c6c <_dtoa_r+0xaa4>
 8009c60:	f000 fc15 	bl	800a48e <__multadd>
 8009c64:	4681      	mov	r9, r0
 8009c66:	4607      	mov	r7, r0
 8009c68:	9507      	str	r5, [sp, #28]
 8009c6a:	e778      	b.n	8009b5e <_dtoa_r+0x996>
 8009c6c:	f000 fc0f 	bl	800a48e <__multadd>
 8009c70:	4639      	mov	r1, r7
 8009c72:	4681      	mov	r9, r0
 8009c74:	2300      	movs	r3, #0
 8009c76:	220a      	movs	r2, #10
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f000 fc08 	bl	800a48e <__multadd>
 8009c7e:	4607      	mov	r7, r0
 8009c80:	e7f2      	b.n	8009c68 <_dtoa_r+0xaa0>
 8009c82:	f04f 0900 	mov.w	r9, #0
 8009c86:	4659      	mov	r1, fp
 8009c88:	2201      	movs	r2, #1
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fdb2 	bl	800a7f4 <__lshift>
 8009c90:	4631      	mov	r1, r6
 8009c92:	4683      	mov	fp, r0
 8009c94:	f000 fe02 	bl	800a89c <__mcmp>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	dcb8      	bgt.n	8009c0e <_dtoa_r+0xa46>
 8009c9c:	d102      	bne.n	8009ca4 <_dtoa_r+0xadc>
 8009c9e:	f018 0f01 	tst.w	r8, #1
 8009ca2:	d1b4      	bne.n	8009c0e <_dtoa_r+0xa46>
 8009ca4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ca8:	1e6a      	subs	r2, r5, #1
 8009caa:	2b30      	cmp	r3, #48	; 0x30
 8009cac:	f47f af0f 	bne.w	8009ace <_dtoa_r+0x906>
 8009cb0:	4615      	mov	r5, r2
 8009cb2:	e7f7      	b.n	8009ca4 <_dtoa_r+0xadc>
 8009cb4:	9b06      	ldr	r3, [sp, #24]
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d105      	bne.n	8009cc6 <_dtoa_r+0xafe>
 8009cba:	2331      	movs	r3, #49	; 0x31
 8009cbc:	9a06      	ldr	r2, [sp, #24]
 8009cbe:	f10a 0a01 	add.w	sl, sl, #1
 8009cc2:	7013      	strb	r3, [r2, #0]
 8009cc4:	e703      	b.n	8009ace <_dtoa_r+0x906>
 8009cc6:	4615      	mov	r5, r2
 8009cc8:	e7a1      	b.n	8009c0e <_dtoa_r+0xa46>
 8009cca:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <_dtoa_r+0xb60>)
 8009ccc:	f7ff bae1 	b.w	8009292 <_dtoa_r+0xca>
 8009cd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f47f aabb 	bne.w	800924e <_dtoa_r+0x86>
 8009cd8:	4b14      	ldr	r3, [pc, #80]	; (8009d2c <_dtoa_r+0xb64>)
 8009cda:	f7ff bada 	b.w	8009292 <_dtoa_r+0xca>
 8009cde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	f77f ae3f 	ble.w	8009964 <_dtoa_r+0x79c>
 8009ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce8:	9308      	str	r3, [sp, #32]
 8009cea:	e653      	b.n	8009994 <_dtoa_r+0x7cc>
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dc03      	bgt.n	8009cfa <_dtoa_r+0xb32>
 8009cf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	f73f aed5 	bgt.w	8009aa4 <_dtoa_r+0x8dc>
 8009cfa:	9d06      	ldr	r5, [sp, #24]
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4658      	mov	r0, fp
 8009d00:	f7ff f9d4 	bl	80090ac <quorem>
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009d0a:	f805 8b01 	strb.w	r8, [r5], #1
 8009d0e:	9a04      	ldr	r2, [sp, #16]
 8009d10:	1aeb      	subs	r3, r5, r3
 8009d12:	429a      	cmp	r2, r3
 8009d14:	ddb5      	ble.n	8009c82 <_dtoa_r+0xaba>
 8009d16:	4659      	mov	r1, fp
 8009d18:	2300      	movs	r3, #0
 8009d1a:	220a      	movs	r2, #10
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f000 fbb6 	bl	800a48e <__multadd>
 8009d22:	4683      	mov	fp, r0
 8009d24:	e7ea      	b.n	8009cfc <_dtoa_r+0xb34>
 8009d26:	bf00      	nop
 8009d28:	0800b51c 	.word	0x0800b51c
 8009d2c:	0800b598 	.word	0x0800b598

08009d30 <rshift>:
 8009d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d32:	6906      	ldr	r6, [r0, #16]
 8009d34:	114b      	asrs	r3, r1, #5
 8009d36:	429e      	cmp	r6, r3
 8009d38:	f100 0414 	add.w	r4, r0, #20
 8009d3c:	dd31      	ble.n	8009da2 <rshift+0x72>
 8009d3e:	f011 011f 	ands.w	r1, r1, #31
 8009d42:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009d46:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009d4a:	d108      	bne.n	8009d5e <rshift+0x2e>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	42b2      	cmp	r2, r6
 8009d50:	460b      	mov	r3, r1
 8009d52:	d211      	bcs.n	8009d78 <rshift+0x48>
 8009d54:	f852 3b04 	ldr.w	r3, [r2], #4
 8009d58:	f841 3b04 	str.w	r3, [r1], #4
 8009d5c:	e7f7      	b.n	8009d4e <rshift+0x1e>
 8009d5e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009d62:	4623      	mov	r3, r4
 8009d64:	f1c1 0c20 	rsb	ip, r1, #32
 8009d68:	40cd      	lsrs	r5, r1
 8009d6a:	3204      	adds	r2, #4
 8009d6c:	42b2      	cmp	r2, r6
 8009d6e:	4617      	mov	r7, r2
 8009d70:	d30d      	bcc.n	8009d8e <rshift+0x5e>
 8009d72:	601d      	str	r5, [r3, #0]
 8009d74:	b105      	cbz	r5, 8009d78 <rshift+0x48>
 8009d76:	3304      	adds	r3, #4
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	eba3 0204 	sub.w	r2, r3, r4
 8009d7e:	bf08      	it	eq
 8009d80:	2300      	moveq	r3, #0
 8009d82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d86:	6102      	str	r2, [r0, #16]
 8009d88:	bf08      	it	eq
 8009d8a:	6143      	streq	r3, [r0, #20]
 8009d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d8e:	683f      	ldr	r7, [r7, #0]
 8009d90:	fa07 f70c 	lsl.w	r7, r7, ip
 8009d94:	433d      	orrs	r5, r7
 8009d96:	f843 5b04 	str.w	r5, [r3], #4
 8009d9a:	f852 5b04 	ldr.w	r5, [r2], #4
 8009d9e:	40cd      	lsrs	r5, r1
 8009da0:	e7e4      	b.n	8009d6c <rshift+0x3c>
 8009da2:	4623      	mov	r3, r4
 8009da4:	e7e8      	b.n	8009d78 <rshift+0x48>

08009da6 <__hexdig_fun>:
 8009da6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009daa:	2b09      	cmp	r3, #9
 8009dac:	d802      	bhi.n	8009db4 <__hexdig_fun+0xe>
 8009dae:	3820      	subs	r0, #32
 8009db0:	b2c0      	uxtb	r0, r0
 8009db2:	4770      	bx	lr
 8009db4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	d801      	bhi.n	8009dc0 <__hexdig_fun+0x1a>
 8009dbc:	3847      	subs	r0, #71	; 0x47
 8009dbe:	e7f7      	b.n	8009db0 <__hexdig_fun+0xa>
 8009dc0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009dc4:	2b05      	cmp	r3, #5
 8009dc6:	d801      	bhi.n	8009dcc <__hexdig_fun+0x26>
 8009dc8:	3827      	subs	r0, #39	; 0x27
 8009dca:	e7f1      	b.n	8009db0 <__hexdig_fun+0xa>
 8009dcc:	2000      	movs	r0, #0
 8009dce:	4770      	bx	lr

08009dd0 <__gethex>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	b08b      	sub	sp, #44	; 0x2c
 8009dd6:	9002      	str	r0, [sp, #8]
 8009dd8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009dda:	468a      	mov	sl, r1
 8009ddc:	4690      	mov	r8, r2
 8009dde:	9306      	str	r3, [sp, #24]
 8009de0:	f000 fad1 	bl	800a386 <__localeconv_l>
 8009de4:	6803      	ldr	r3, [r0, #0]
 8009de6:	f04f 0b00 	mov.w	fp, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	f7f6 f9af 	bl	8000150 <strlen>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	9001      	str	r0, [sp, #4]
 8009df6:	4403      	add	r3, r0
 8009df8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009dfc:	9307      	str	r3, [sp, #28]
 8009dfe:	f8da 3000 	ldr.w	r3, [sl]
 8009e02:	3302      	adds	r3, #2
 8009e04:	461f      	mov	r7, r3
 8009e06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e0a:	2830      	cmp	r0, #48	; 0x30
 8009e0c:	d06c      	beq.n	8009ee8 <__gethex+0x118>
 8009e0e:	f7ff ffca 	bl	8009da6 <__hexdig_fun>
 8009e12:	4604      	mov	r4, r0
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d16a      	bne.n	8009eee <__gethex+0x11e>
 8009e18:	9a01      	ldr	r2, [sp, #4]
 8009e1a:	9903      	ldr	r1, [sp, #12]
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f001 f8f9 	bl	800b014 <strncmp>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d166      	bne.n	8009ef4 <__gethex+0x124>
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	5cf8      	ldrb	r0, [r7, r3]
 8009e2a:	18fe      	adds	r6, r7, r3
 8009e2c:	f7ff ffbb 	bl	8009da6 <__hexdig_fun>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d062      	beq.n	8009efa <__gethex+0x12a>
 8009e34:	4633      	mov	r3, r6
 8009e36:	7818      	ldrb	r0, [r3, #0]
 8009e38:	461f      	mov	r7, r3
 8009e3a:	2830      	cmp	r0, #48	; 0x30
 8009e3c:	f103 0301 	add.w	r3, r3, #1
 8009e40:	d0f9      	beq.n	8009e36 <__gethex+0x66>
 8009e42:	f7ff ffb0 	bl	8009da6 <__hexdig_fun>
 8009e46:	fab0 f580 	clz	r5, r0
 8009e4a:	4634      	mov	r4, r6
 8009e4c:	f04f 0b01 	mov.w	fp, #1
 8009e50:	096d      	lsrs	r5, r5, #5
 8009e52:	463a      	mov	r2, r7
 8009e54:	4616      	mov	r6, r2
 8009e56:	7830      	ldrb	r0, [r6, #0]
 8009e58:	3201      	adds	r2, #1
 8009e5a:	f7ff ffa4 	bl	8009da6 <__hexdig_fun>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d1f8      	bne.n	8009e54 <__gethex+0x84>
 8009e62:	9a01      	ldr	r2, [sp, #4]
 8009e64:	9903      	ldr	r1, [sp, #12]
 8009e66:	4630      	mov	r0, r6
 8009e68:	f001 f8d4 	bl	800b014 <strncmp>
 8009e6c:	b950      	cbnz	r0, 8009e84 <__gethex+0xb4>
 8009e6e:	b954      	cbnz	r4, 8009e86 <__gethex+0xb6>
 8009e70:	9b01      	ldr	r3, [sp, #4]
 8009e72:	18f4      	adds	r4, r6, r3
 8009e74:	4622      	mov	r2, r4
 8009e76:	4616      	mov	r6, r2
 8009e78:	7830      	ldrb	r0, [r6, #0]
 8009e7a:	3201      	adds	r2, #1
 8009e7c:	f7ff ff93 	bl	8009da6 <__hexdig_fun>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d1f8      	bne.n	8009e76 <__gethex+0xa6>
 8009e84:	b10c      	cbz	r4, 8009e8a <__gethex+0xba>
 8009e86:	1ba4      	subs	r4, r4, r6
 8009e88:	00a4      	lsls	r4, r4, #2
 8009e8a:	7833      	ldrb	r3, [r6, #0]
 8009e8c:	2b50      	cmp	r3, #80	; 0x50
 8009e8e:	d001      	beq.n	8009e94 <__gethex+0xc4>
 8009e90:	2b70      	cmp	r3, #112	; 0x70
 8009e92:	d140      	bne.n	8009f16 <__gethex+0x146>
 8009e94:	7873      	ldrb	r3, [r6, #1]
 8009e96:	2b2b      	cmp	r3, #43	; 0x2b
 8009e98:	d031      	beq.n	8009efe <__gethex+0x12e>
 8009e9a:	2b2d      	cmp	r3, #45	; 0x2d
 8009e9c:	d033      	beq.n	8009f06 <__gethex+0x136>
 8009e9e:	f04f 0900 	mov.w	r9, #0
 8009ea2:	1c71      	adds	r1, r6, #1
 8009ea4:	7808      	ldrb	r0, [r1, #0]
 8009ea6:	f7ff ff7e 	bl	8009da6 <__hexdig_fun>
 8009eaa:	1e43      	subs	r3, r0, #1
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b18      	cmp	r3, #24
 8009eb0:	d831      	bhi.n	8009f16 <__gethex+0x146>
 8009eb2:	f1a0 0210 	sub.w	r2, r0, #16
 8009eb6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009eba:	f7ff ff74 	bl	8009da6 <__hexdig_fun>
 8009ebe:	1e43      	subs	r3, r0, #1
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b18      	cmp	r3, #24
 8009ec4:	d922      	bls.n	8009f0c <__gethex+0x13c>
 8009ec6:	f1b9 0f00 	cmp.w	r9, #0
 8009eca:	d000      	beq.n	8009ece <__gethex+0xfe>
 8009ecc:	4252      	negs	r2, r2
 8009ece:	4414      	add	r4, r2
 8009ed0:	f8ca 1000 	str.w	r1, [sl]
 8009ed4:	b30d      	cbz	r5, 8009f1a <__gethex+0x14a>
 8009ed6:	f1bb 0f00 	cmp.w	fp, #0
 8009eda:	bf0c      	ite	eq
 8009edc:	2706      	moveq	r7, #6
 8009ede:	2700      	movne	r7, #0
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	b00b      	add	sp, #44	; 0x2c
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	f10b 0b01 	add.w	fp, fp, #1
 8009eec:	e78a      	b.n	8009e04 <__gethex+0x34>
 8009eee:	2500      	movs	r5, #0
 8009ef0:	462c      	mov	r4, r5
 8009ef2:	e7ae      	b.n	8009e52 <__gethex+0x82>
 8009ef4:	463e      	mov	r6, r7
 8009ef6:	2501      	movs	r5, #1
 8009ef8:	e7c7      	b.n	8009e8a <__gethex+0xba>
 8009efa:	4604      	mov	r4, r0
 8009efc:	e7fb      	b.n	8009ef6 <__gethex+0x126>
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	1cb1      	adds	r1, r6, #2
 8009f04:	e7ce      	b.n	8009ea4 <__gethex+0xd4>
 8009f06:	f04f 0901 	mov.w	r9, #1
 8009f0a:	e7fa      	b.n	8009f02 <__gethex+0x132>
 8009f0c:	230a      	movs	r3, #10
 8009f0e:	fb03 0202 	mla	r2, r3, r2, r0
 8009f12:	3a10      	subs	r2, #16
 8009f14:	e7cf      	b.n	8009eb6 <__gethex+0xe6>
 8009f16:	4631      	mov	r1, r6
 8009f18:	e7da      	b.n	8009ed0 <__gethex+0x100>
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	1bf3      	subs	r3, r6, r7
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	2b07      	cmp	r3, #7
 8009f22:	dc49      	bgt.n	8009fb8 <__gethex+0x1e8>
 8009f24:	9802      	ldr	r0, [sp, #8]
 8009f26:	f000 fa67 	bl	800a3f8 <_Balloc>
 8009f2a:	f04f 0b00 	mov.w	fp, #0
 8009f2e:	4605      	mov	r5, r0
 8009f30:	46da      	mov	sl, fp
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	f100 0914 	add.w	r9, r0, #20
 8009f38:	f1c3 0301 	rsb	r3, r3, #1
 8009f3c:	f8cd 9010 	str.w	r9, [sp, #16]
 8009f40:	9308      	str	r3, [sp, #32]
 8009f42:	42b7      	cmp	r7, r6
 8009f44:	d33b      	bcc.n	8009fbe <__gethex+0x1ee>
 8009f46:	9804      	ldr	r0, [sp, #16]
 8009f48:	f840 ab04 	str.w	sl, [r0], #4
 8009f4c:	eba0 0009 	sub.w	r0, r0, r9
 8009f50:	1080      	asrs	r0, r0, #2
 8009f52:	6128      	str	r0, [r5, #16]
 8009f54:	0147      	lsls	r7, r0, #5
 8009f56:	4650      	mov	r0, sl
 8009f58:	f000 fb12 	bl	800a580 <__hi0bits>
 8009f5c:	f8d8 6000 	ldr.w	r6, [r8]
 8009f60:	1a3f      	subs	r7, r7, r0
 8009f62:	42b7      	cmp	r7, r6
 8009f64:	dd64      	ble.n	800a030 <__gethex+0x260>
 8009f66:	1bbf      	subs	r7, r7, r6
 8009f68:	4639      	mov	r1, r7
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 fe1b 	bl	800aba6 <__any_on>
 8009f70:	4682      	mov	sl, r0
 8009f72:	b178      	cbz	r0, 8009f94 <__gethex+0x1c4>
 8009f74:	f04f 0a01 	mov.w	sl, #1
 8009f78:	1e7b      	subs	r3, r7, #1
 8009f7a:	1159      	asrs	r1, r3, #5
 8009f7c:	f003 021f 	and.w	r2, r3, #31
 8009f80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f84:	fa0a f202 	lsl.w	r2, sl, r2
 8009f88:	420a      	tst	r2, r1
 8009f8a:	d003      	beq.n	8009f94 <__gethex+0x1c4>
 8009f8c:	4553      	cmp	r3, sl
 8009f8e:	dc46      	bgt.n	800a01e <__gethex+0x24e>
 8009f90:	f04f 0a02 	mov.w	sl, #2
 8009f94:	4639      	mov	r1, r7
 8009f96:	4628      	mov	r0, r5
 8009f98:	f7ff feca 	bl	8009d30 <rshift>
 8009f9c:	443c      	add	r4, r7
 8009f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	da52      	bge.n	800a04c <__gethex+0x27c>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	9802      	ldr	r0, [sp, #8]
 8009faa:	f000 fa59 	bl	800a460 <_Bfree>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fb2:	27a3      	movs	r7, #163	; 0xa3
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	e793      	b.n	8009ee0 <__gethex+0x110>
 8009fb8:	3101      	adds	r1, #1
 8009fba:	105b      	asrs	r3, r3, #1
 8009fbc:	e7b0      	b.n	8009f20 <__gethex+0x150>
 8009fbe:	1e73      	subs	r3, r6, #1
 8009fc0:	9305      	str	r3, [sp, #20]
 8009fc2:	9a07      	ldr	r2, [sp, #28]
 8009fc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d018      	beq.n	8009ffe <__gethex+0x22e>
 8009fcc:	f1bb 0f20 	cmp.w	fp, #32
 8009fd0:	d107      	bne.n	8009fe2 <__gethex+0x212>
 8009fd2:	9b04      	ldr	r3, [sp, #16]
 8009fd4:	f8c3 a000 	str.w	sl, [r3]
 8009fd8:	f04f 0a00 	mov.w	sl, #0
 8009fdc:	46d3      	mov	fp, sl
 8009fde:	3304      	adds	r3, #4
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fe6:	f7ff fede 	bl	8009da6 <__hexdig_fun>
 8009fea:	f000 000f 	and.w	r0, r0, #15
 8009fee:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ff2:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ff6:	f10b 0b04 	add.w	fp, fp, #4
 8009ffa:	9b05      	ldr	r3, [sp, #20]
 8009ffc:	e00d      	b.n	800a01a <__gethex+0x24a>
 8009ffe:	9b05      	ldr	r3, [sp, #20]
 800a000:	9a08      	ldr	r2, [sp, #32]
 800a002:	4413      	add	r3, r2
 800a004:	42bb      	cmp	r3, r7
 800a006:	d3e1      	bcc.n	8009fcc <__gethex+0x1fc>
 800a008:	4618      	mov	r0, r3
 800a00a:	9a01      	ldr	r2, [sp, #4]
 800a00c:	9903      	ldr	r1, [sp, #12]
 800a00e:	9309      	str	r3, [sp, #36]	; 0x24
 800a010:	f001 f800 	bl	800b014 <strncmp>
 800a014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a016:	2800      	cmp	r0, #0
 800a018:	d1d8      	bne.n	8009fcc <__gethex+0x1fc>
 800a01a:	461e      	mov	r6, r3
 800a01c:	e791      	b.n	8009f42 <__gethex+0x172>
 800a01e:	1eb9      	subs	r1, r7, #2
 800a020:	4628      	mov	r0, r5
 800a022:	f000 fdc0 	bl	800aba6 <__any_on>
 800a026:	2800      	cmp	r0, #0
 800a028:	d0b2      	beq.n	8009f90 <__gethex+0x1c0>
 800a02a:	f04f 0a03 	mov.w	sl, #3
 800a02e:	e7b1      	b.n	8009f94 <__gethex+0x1c4>
 800a030:	da09      	bge.n	800a046 <__gethex+0x276>
 800a032:	1bf7      	subs	r7, r6, r7
 800a034:	4629      	mov	r1, r5
 800a036:	463a      	mov	r2, r7
 800a038:	9802      	ldr	r0, [sp, #8]
 800a03a:	f000 fbdb 	bl	800a7f4 <__lshift>
 800a03e:	4605      	mov	r5, r0
 800a040:	1be4      	subs	r4, r4, r7
 800a042:	f100 0914 	add.w	r9, r0, #20
 800a046:	f04f 0a00 	mov.w	sl, #0
 800a04a:	e7a8      	b.n	8009f9e <__gethex+0x1ce>
 800a04c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a050:	42a0      	cmp	r0, r4
 800a052:	dd6b      	ble.n	800a12c <__gethex+0x35c>
 800a054:	1b04      	subs	r4, r0, r4
 800a056:	42a6      	cmp	r6, r4
 800a058:	dc2e      	bgt.n	800a0b8 <__gethex+0x2e8>
 800a05a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d022      	beq.n	800a0a8 <__gethex+0x2d8>
 800a062:	2b03      	cmp	r3, #3
 800a064:	d024      	beq.n	800a0b0 <__gethex+0x2e0>
 800a066:	2b01      	cmp	r3, #1
 800a068:	d115      	bne.n	800a096 <__gethex+0x2c6>
 800a06a:	42a6      	cmp	r6, r4
 800a06c:	d113      	bne.n	800a096 <__gethex+0x2c6>
 800a06e:	2e01      	cmp	r6, #1
 800a070:	dc0b      	bgt.n	800a08a <__gethex+0x2ba>
 800a072:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a076:	9a06      	ldr	r2, [sp, #24]
 800a078:	2762      	movs	r7, #98	; 0x62
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	2301      	movs	r3, #1
 800a07e:	612b      	str	r3, [r5, #16]
 800a080:	f8c9 3000 	str.w	r3, [r9]
 800a084:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a086:	601d      	str	r5, [r3, #0]
 800a088:	e72a      	b.n	8009ee0 <__gethex+0x110>
 800a08a:	1e71      	subs	r1, r6, #1
 800a08c:	4628      	mov	r0, r5
 800a08e:	f000 fd8a 	bl	800aba6 <__any_on>
 800a092:	2800      	cmp	r0, #0
 800a094:	d1ed      	bne.n	800a072 <__gethex+0x2a2>
 800a096:	4629      	mov	r1, r5
 800a098:	9802      	ldr	r0, [sp, #8]
 800a09a:	f000 f9e1 	bl	800a460 <_Bfree>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0a2:	2750      	movs	r7, #80	; 0x50
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	e71b      	b.n	8009ee0 <__gethex+0x110>
 800a0a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0e1      	beq.n	800a072 <__gethex+0x2a2>
 800a0ae:	e7f2      	b.n	800a096 <__gethex+0x2c6>
 800a0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1dd      	bne.n	800a072 <__gethex+0x2a2>
 800a0b6:	e7ee      	b.n	800a096 <__gethex+0x2c6>
 800a0b8:	1e67      	subs	r7, r4, #1
 800a0ba:	f1ba 0f00 	cmp.w	sl, #0
 800a0be:	d132      	bne.n	800a126 <__gethex+0x356>
 800a0c0:	b127      	cbz	r7, 800a0cc <__gethex+0x2fc>
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 fd6e 	bl	800aba6 <__any_on>
 800a0ca:	4682      	mov	sl, r0
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	117a      	asrs	r2, r7, #5
 800a0d0:	f007 071f 	and.w	r7, r7, #31
 800a0d4:	fa03 f707 	lsl.w	r7, r3, r7
 800a0d8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a0dc:	4621      	mov	r1, r4
 800a0de:	421f      	tst	r7, r3
 800a0e0:	f04f 0702 	mov.w	r7, #2
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	bf18      	it	ne
 800a0e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0ec:	1b36      	subs	r6, r6, r4
 800a0ee:	f7ff fe1f 	bl	8009d30 <rshift>
 800a0f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a0f6:	f1ba 0f00 	cmp.w	sl, #0
 800a0fa:	d048      	beq.n	800a18e <__gethex+0x3be>
 800a0fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a100:	2b02      	cmp	r3, #2
 800a102:	d015      	beq.n	800a130 <__gethex+0x360>
 800a104:	2b03      	cmp	r3, #3
 800a106:	d017      	beq.n	800a138 <__gethex+0x368>
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d109      	bne.n	800a120 <__gethex+0x350>
 800a10c:	f01a 0f02 	tst.w	sl, #2
 800a110:	d006      	beq.n	800a120 <__gethex+0x350>
 800a112:	f8d9 3000 	ldr.w	r3, [r9]
 800a116:	ea4a 0a03 	orr.w	sl, sl, r3
 800a11a:	f01a 0f01 	tst.w	sl, #1
 800a11e:	d10e      	bne.n	800a13e <__gethex+0x36e>
 800a120:	f047 0710 	orr.w	r7, r7, #16
 800a124:	e033      	b.n	800a18e <__gethex+0x3be>
 800a126:	f04f 0a01 	mov.w	sl, #1
 800a12a:	e7cf      	b.n	800a0cc <__gethex+0x2fc>
 800a12c:	2701      	movs	r7, #1
 800a12e:	e7e2      	b.n	800a0f6 <__gethex+0x326>
 800a130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a132:	f1c3 0301 	rsb	r3, r3, #1
 800a136:	9315      	str	r3, [sp, #84]	; 0x54
 800a138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0f0      	beq.n	800a120 <__gethex+0x350>
 800a13e:	f04f 0c00 	mov.w	ip, #0
 800a142:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a146:	f105 0314 	add.w	r3, r5, #20
 800a14a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a14e:	eb03 010a 	add.w	r1, r3, sl
 800a152:	4618      	mov	r0, r3
 800a154:	f853 2b04 	ldr.w	r2, [r3], #4
 800a158:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a15c:	d01c      	beq.n	800a198 <__gethex+0x3c8>
 800a15e:	3201      	adds	r2, #1
 800a160:	6002      	str	r2, [r0, #0]
 800a162:	2f02      	cmp	r7, #2
 800a164:	f105 0314 	add.w	r3, r5, #20
 800a168:	d138      	bne.n	800a1dc <__gethex+0x40c>
 800a16a:	f8d8 2000 	ldr.w	r2, [r8]
 800a16e:	3a01      	subs	r2, #1
 800a170:	42b2      	cmp	r2, r6
 800a172:	d10a      	bne.n	800a18a <__gethex+0x3ba>
 800a174:	2201      	movs	r2, #1
 800a176:	1171      	asrs	r1, r6, #5
 800a178:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a17c:	f006 061f 	and.w	r6, r6, #31
 800a180:	fa02 f606 	lsl.w	r6, r2, r6
 800a184:	421e      	tst	r6, r3
 800a186:	bf18      	it	ne
 800a188:	4617      	movne	r7, r2
 800a18a:	f047 0720 	orr.w	r7, r7, #32
 800a18e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a190:	601d      	str	r5, [r3, #0]
 800a192:	9b06      	ldr	r3, [sp, #24]
 800a194:	601c      	str	r4, [r3, #0]
 800a196:	e6a3      	b.n	8009ee0 <__gethex+0x110>
 800a198:	4299      	cmp	r1, r3
 800a19a:	f843 cc04 	str.w	ip, [r3, #-4]
 800a19e:	d8d8      	bhi.n	800a152 <__gethex+0x382>
 800a1a0:	68ab      	ldr	r3, [r5, #8]
 800a1a2:	4599      	cmp	r9, r3
 800a1a4:	db12      	blt.n	800a1cc <__gethex+0x3fc>
 800a1a6:	6869      	ldr	r1, [r5, #4]
 800a1a8:	9802      	ldr	r0, [sp, #8]
 800a1aa:	3101      	adds	r1, #1
 800a1ac:	f000 f924 	bl	800a3f8 <_Balloc>
 800a1b0:	4683      	mov	fp, r0
 800a1b2:	692a      	ldr	r2, [r5, #16]
 800a1b4:	f105 010c 	add.w	r1, r5, #12
 800a1b8:	3202      	adds	r2, #2
 800a1ba:	0092      	lsls	r2, r2, #2
 800a1bc:	300c      	adds	r0, #12
 800a1be:	f7fd fa37 	bl	8007630 <memcpy>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	9802      	ldr	r0, [sp, #8]
 800a1c6:	f000 f94b 	bl	800a460 <_Bfree>
 800a1ca:	465d      	mov	r5, fp
 800a1cc:	692b      	ldr	r3, [r5, #16]
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	612a      	str	r2, [r5, #16]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a1d8:	615a      	str	r2, [r3, #20]
 800a1da:	e7c2      	b.n	800a162 <__gethex+0x392>
 800a1dc:	692a      	ldr	r2, [r5, #16]
 800a1de:	454a      	cmp	r2, r9
 800a1e0:	dd0b      	ble.n	800a1fa <__gethex+0x42a>
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f7ff fda3 	bl	8009d30 <rshift>
 800a1ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1ee:	3401      	adds	r4, #1
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	f6ff aed8 	blt.w	8009fa6 <__gethex+0x1d6>
 800a1f6:	2701      	movs	r7, #1
 800a1f8:	e7c7      	b.n	800a18a <__gethex+0x3ba>
 800a1fa:	f016 061f 	ands.w	r6, r6, #31
 800a1fe:	d0fa      	beq.n	800a1f6 <__gethex+0x426>
 800a200:	449a      	add	sl, r3
 800a202:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a206:	f000 f9bb 	bl	800a580 <__hi0bits>
 800a20a:	f1c6 0620 	rsb	r6, r6, #32
 800a20e:	42b0      	cmp	r0, r6
 800a210:	dbe7      	blt.n	800a1e2 <__gethex+0x412>
 800a212:	e7f0      	b.n	800a1f6 <__gethex+0x426>

0800a214 <L_shift>:
 800a214:	f1c2 0208 	rsb	r2, r2, #8
 800a218:	0092      	lsls	r2, r2, #2
 800a21a:	b570      	push	{r4, r5, r6, lr}
 800a21c:	f1c2 0620 	rsb	r6, r2, #32
 800a220:	6843      	ldr	r3, [r0, #4]
 800a222:	6804      	ldr	r4, [r0, #0]
 800a224:	fa03 f506 	lsl.w	r5, r3, r6
 800a228:	432c      	orrs	r4, r5
 800a22a:	40d3      	lsrs	r3, r2
 800a22c:	6004      	str	r4, [r0, #0]
 800a22e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a232:	4288      	cmp	r0, r1
 800a234:	d3f4      	bcc.n	800a220 <L_shift+0xc>
 800a236:	bd70      	pop	{r4, r5, r6, pc}

0800a238 <__match>:
 800a238:	b530      	push	{r4, r5, lr}
 800a23a:	6803      	ldr	r3, [r0, #0]
 800a23c:	3301      	adds	r3, #1
 800a23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a242:	b914      	cbnz	r4, 800a24a <__match+0x12>
 800a244:	6003      	str	r3, [r0, #0]
 800a246:	2001      	movs	r0, #1
 800a248:	bd30      	pop	{r4, r5, pc}
 800a24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a252:	2d19      	cmp	r5, #25
 800a254:	bf98      	it	ls
 800a256:	3220      	addls	r2, #32
 800a258:	42a2      	cmp	r2, r4
 800a25a:	d0f0      	beq.n	800a23e <__match+0x6>
 800a25c:	2000      	movs	r0, #0
 800a25e:	e7f3      	b.n	800a248 <__match+0x10>

0800a260 <__hexnan>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	2500      	movs	r5, #0
 800a266:	680b      	ldr	r3, [r1, #0]
 800a268:	4682      	mov	sl, r0
 800a26a:	115f      	asrs	r7, r3, #5
 800a26c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a270:	f013 031f 	ands.w	r3, r3, #31
 800a274:	bf18      	it	ne
 800a276:	3704      	addne	r7, #4
 800a278:	1f3e      	subs	r6, r7, #4
 800a27a:	4690      	mov	r8, r2
 800a27c:	46b1      	mov	r9, r6
 800a27e:	4634      	mov	r4, r6
 800a280:	46ab      	mov	fp, r5
 800a282:	b087      	sub	sp, #28
 800a284:	6801      	ldr	r1, [r0, #0]
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	f847 5c04 	str.w	r5, [r7, #-4]
 800a28c:	9502      	str	r5, [sp, #8]
 800a28e:	784a      	ldrb	r2, [r1, #1]
 800a290:	1c4b      	adds	r3, r1, #1
 800a292:	9303      	str	r3, [sp, #12]
 800a294:	b342      	cbz	r2, 800a2e8 <__hexnan+0x88>
 800a296:	4610      	mov	r0, r2
 800a298:	9105      	str	r1, [sp, #20]
 800a29a:	9204      	str	r2, [sp, #16]
 800a29c:	f7ff fd83 	bl	8009da6 <__hexdig_fun>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d143      	bne.n	800a32c <__hexnan+0xcc>
 800a2a4:	9a04      	ldr	r2, [sp, #16]
 800a2a6:	9905      	ldr	r1, [sp, #20]
 800a2a8:	2a20      	cmp	r2, #32
 800a2aa:	d818      	bhi.n	800a2de <__hexnan+0x7e>
 800a2ac:	9b02      	ldr	r3, [sp, #8]
 800a2ae:	459b      	cmp	fp, r3
 800a2b0:	dd13      	ble.n	800a2da <__hexnan+0x7a>
 800a2b2:	454c      	cmp	r4, r9
 800a2b4:	d206      	bcs.n	800a2c4 <__hexnan+0x64>
 800a2b6:	2d07      	cmp	r5, #7
 800a2b8:	dc04      	bgt.n	800a2c4 <__hexnan+0x64>
 800a2ba:	462a      	mov	r2, r5
 800a2bc:	4649      	mov	r1, r9
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7ff ffa8 	bl	800a214 <L_shift>
 800a2c4:	4544      	cmp	r4, r8
 800a2c6:	d944      	bls.n	800a352 <__hexnan+0xf2>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a2ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2d2:	461d      	mov	r5, r3
 800a2d4:	464c      	mov	r4, r9
 800a2d6:	f8cd b008 	str.w	fp, [sp, #8]
 800a2da:	9903      	ldr	r1, [sp, #12]
 800a2dc:	e7d7      	b.n	800a28e <__hexnan+0x2e>
 800a2de:	2a29      	cmp	r2, #41	; 0x29
 800a2e0:	d14a      	bne.n	800a378 <__hexnan+0x118>
 800a2e2:	3102      	adds	r1, #2
 800a2e4:	f8ca 1000 	str.w	r1, [sl]
 800a2e8:	f1bb 0f00 	cmp.w	fp, #0
 800a2ec:	d044      	beq.n	800a378 <__hexnan+0x118>
 800a2ee:	454c      	cmp	r4, r9
 800a2f0:	d206      	bcs.n	800a300 <__hexnan+0xa0>
 800a2f2:	2d07      	cmp	r5, #7
 800a2f4:	dc04      	bgt.n	800a300 <__hexnan+0xa0>
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7ff ff8a 	bl	800a214 <L_shift>
 800a300:	4544      	cmp	r4, r8
 800a302:	d928      	bls.n	800a356 <__hexnan+0xf6>
 800a304:	4643      	mov	r3, r8
 800a306:	f854 2b04 	ldr.w	r2, [r4], #4
 800a30a:	42a6      	cmp	r6, r4
 800a30c:	f843 2b04 	str.w	r2, [r3], #4
 800a310:	d2f9      	bcs.n	800a306 <__hexnan+0xa6>
 800a312:	2200      	movs	r2, #0
 800a314:	f843 2b04 	str.w	r2, [r3], #4
 800a318:	429e      	cmp	r6, r3
 800a31a:	d2fb      	bcs.n	800a314 <__hexnan+0xb4>
 800a31c:	6833      	ldr	r3, [r6, #0]
 800a31e:	b91b      	cbnz	r3, 800a328 <__hexnan+0xc8>
 800a320:	4546      	cmp	r6, r8
 800a322:	d127      	bne.n	800a374 <__hexnan+0x114>
 800a324:	2301      	movs	r3, #1
 800a326:	6033      	str	r3, [r6, #0]
 800a328:	2005      	movs	r0, #5
 800a32a:	e026      	b.n	800a37a <__hexnan+0x11a>
 800a32c:	3501      	adds	r5, #1
 800a32e:	2d08      	cmp	r5, #8
 800a330:	f10b 0b01 	add.w	fp, fp, #1
 800a334:	dd06      	ble.n	800a344 <__hexnan+0xe4>
 800a336:	4544      	cmp	r4, r8
 800a338:	d9cf      	bls.n	800a2da <__hexnan+0x7a>
 800a33a:	2300      	movs	r3, #0
 800a33c:	2501      	movs	r5, #1
 800a33e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a342:	3c04      	subs	r4, #4
 800a344:	6822      	ldr	r2, [r4, #0]
 800a346:	f000 000f 	and.w	r0, r0, #15
 800a34a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a34e:	6020      	str	r0, [r4, #0]
 800a350:	e7c3      	b.n	800a2da <__hexnan+0x7a>
 800a352:	2508      	movs	r5, #8
 800a354:	e7c1      	b.n	800a2da <__hexnan+0x7a>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0df      	beq.n	800a31c <__hexnan+0xbc>
 800a35c:	f04f 32ff 	mov.w	r2, #4294967295
 800a360:	f1c3 0320 	rsb	r3, r3, #32
 800a364:	fa22 f303 	lsr.w	r3, r2, r3
 800a368:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a36c:	401a      	ands	r2, r3
 800a36e:	f847 2c04 	str.w	r2, [r7, #-4]
 800a372:	e7d3      	b.n	800a31c <__hexnan+0xbc>
 800a374:	3e04      	subs	r6, #4
 800a376:	e7d1      	b.n	800a31c <__hexnan+0xbc>
 800a378:	2004      	movs	r0, #4
 800a37a:	b007      	add	sp, #28
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a380 <__locale_ctype_ptr_l>:
 800a380:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a384:	4770      	bx	lr

0800a386 <__localeconv_l>:
 800a386:	30f0      	adds	r0, #240	; 0xf0
 800a388:	4770      	bx	lr
	...

0800a38c <_localeconv_r>:
 800a38c:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <_localeconv_r+0x14>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a18      	ldr	r0, [r3, #32]
 800a392:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <_localeconv_r+0x18>)
 800a394:	2800      	cmp	r0, #0
 800a396:	bf08      	it	eq
 800a398:	4618      	moveq	r0, r3
 800a39a:	30f0      	adds	r0, #240	; 0xf0
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	200000b0 	.word	0x200000b0
 800a3a4:	20000114 	.word	0x20000114

0800a3a8 <malloc>:
 800a3a8:	4b02      	ldr	r3, [pc, #8]	; (800a3b4 <malloc+0xc>)
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	f000 bc75 	b.w	800ac9c <_malloc_r>
 800a3b2:	bf00      	nop
 800a3b4:	200000b0 	.word	0x200000b0

0800a3b8 <__ascii_mbtowc>:
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	b901      	cbnz	r1, 800a3be <__ascii_mbtowc+0x6>
 800a3bc:	a901      	add	r1, sp, #4
 800a3be:	b142      	cbz	r2, 800a3d2 <__ascii_mbtowc+0x1a>
 800a3c0:	b14b      	cbz	r3, 800a3d6 <__ascii_mbtowc+0x1e>
 800a3c2:	7813      	ldrb	r3, [r2, #0]
 800a3c4:	600b      	str	r3, [r1, #0]
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	1c10      	adds	r0, r2, #0
 800a3ca:	bf18      	it	ne
 800a3cc:	2001      	movne	r0, #1
 800a3ce:	b002      	add	sp, #8
 800a3d0:	4770      	bx	lr
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	e7fb      	b.n	800a3ce <__ascii_mbtowc+0x16>
 800a3d6:	f06f 0001 	mvn.w	r0, #1
 800a3da:	e7f8      	b.n	800a3ce <__ascii_mbtowc+0x16>

0800a3dc <memchr>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	b2c9      	uxtb	r1, r1
 800a3e0:	4402      	add	r2, r0
 800a3e2:	4290      	cmp	r0, r2
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	d101      	bne.n	800a3ec <memchr+0x10>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e003      	b.n	800a3f4 <memchr+0x18>
 800a3ec:	781c      	ldrb	r4, [r3, #0]
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	428c      	cmp	r4, r1
 800a3f2:	d1f6      	bne.n	800a3e2 <memchr+0x6>
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	bd10      	pop	{r4, pc}

0800a3f8 <_Balloc>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	460e      	mov	r6, r1
 800a400:	b93d      	cbnz	r5, 800a412 <_Balloc+0x1a>
 800a402:	2010      	movs	r0, #16
 800a404:	f7ff ffd0 	bl	800a3a8 <malloc>
 800a408:	6260      	str	r0, [r4, #36]	; 0x24
 800a40a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a40e:	6005      	str	r5, [r0, #0]
 800a410:	60c5      	str	r5, [r0, #12]
 800a412:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a414:	68eb      	ldr	r3, [r5, #12]
 800a416:	b183      	cbz	r3, 800a43a <_Balloc+0x42>
 800a418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a420:	b9b8      	cbnz	r0, 800a452 <_Balloc+0x5a>
 800a422:	2101      	movs	r1, #1
 800a424:	fa01 f506 	lsl.w	r5, r1, r6
 800a428:	1d6a      	adds	r2, r5, #5
 800a42a:	0092      	lsls	r2, r2, #2
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 fbdb 	bl	800abe8 <_calloc_r>
 800a432:	b160      	cbz	r0, 800a44e <_Balloc+0x56>
 800a434:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a438:	e00e      	b.n	800a458 <_Balloc+0x60>
 800a43a:	2221      	movs	r2, #33	; 0x21
 800a43c:	2104      	movs	r1, #4
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 fbd2 	bl	800abe8 <_calloc_r>
 800a444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a446:	60e8      	str	r0, [r5, #12]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e4      	bne.n	800a418 <_Balloc+0x20>
 800a44e:	2000      	movs	r0, #0
 800a450:	bd70      	pop	{r4, r5, r6, pc}
 800a452:	6802      	ldr	r2, [r0, #0]
 800a454:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a458:	2300      	movs	r3, #0
 800a45a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a45e:	e7f7      	b.n	800a450 <_Balloc+0x58>

0800a460 <_Bfree>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a464:	4606      	mov	r6, r0
 800a466:	460d      	mov	r5, r1
 800a468:	b93c      	cbnz	r4, 800a47a <_Bfree+0x1a>
 800a46a:	2010      	movs	r0, #16
 800a46c:	f7ff ff9c 	bl	800a3a8 <malloc>
 800a470:	6270      	str	r0, [r6, #36]	; 0x24
 800a472:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a476:	6004      	str	r4, [r0, #0]
 800a478:	60c4      	str	r4, [r0, #12]
 800a47a:	b13d      	cbz	r5, 800a48c <_Bfree+0x2c>
 800a47c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a47e:	686a      	ldr	r2, [r5, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a486:	6029      	str	r1, [r5, #0]
 800a488:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a48c:	bd70      	pop	{r4, r5, r6, pc}

0800a48e <__multadd>:
 800a48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a492:	461f      	mov	r7, r3
 800a494:	4606      	mov	r6, r0
 800a496:	460c      	mov	r4, r1
 800a498:	2300      	movs	r3, #0
 800a49a:	690d      	ldr	r5, [r1, #16]
 800a49c:	f101 0c14 	add.w	ip, r1, #20
 800a4a0:	f8dc 0000 	ldr.w	r0, [ip]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	b281      	uxth	r1, r0
 800a4a8:	fb02 7101 	mla	r1, r2, r1, r7
 800a4ac:	0c00      	lsrs	r0, r0, #16
 800a4ae:	0c0f      	lsrs	r7, r1, #16
 800a4b0:	fb02 7000 	mla	r0, r2, r0, r7
 800a4b4:	b289      	uxth	r1, r1
 800a4b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a4ba:	429d      	cmp	r5, r3
 800a4bc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a4c0:	f84c 1b04 	str.w	r1, [ip], #4
 800a4c4:	dcec      	bgt.n	800a4a0 <__multadd+0x12>
 800a4c6:	b1d7      	cbz	r7, 800a4fe <__multadd+0x70>
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	42ab      	cmp	r3, r5
 800a4cc:	dc12      	bgt.n	800a4f4 <__multadd+0x66>
 800a4ce:	6861      	ldr	r1, [r4, #4]
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	3101      	adds	r1, #1
 800a4d4:	f7ff ff90 	bl	800a3f8 <_Balloc>
 800a4d8:	4680      	mov	r8, r0
 800a4da:	6922      	ldr	r2, [r4, #16]
 800a4dc:	f104 010c 	add.w	r1, r4, #12
 800a4e0:	3202      	adds	r2, #2
 800a4e2:	0092      	lsls	r2, r2, #2
 800a4e4:	300c      	adds	r0, #12
 800a4e6:	f7fd f8a3 	bl	8007630 <memcpy>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff ffb7 	bl	800a460 <_Bfree>
 800a4f2:	4644      	mov	r4, r8
 800a4f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	615f      	str	r7, [r3, #20]
 800a4fc:	6125      	str	r5, [r4, #16]
 800a4fe:	4620      	mov	r0, r4
 800a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a504 <__s2b>:
 800a504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a508:	4615      	mov	r5, r2
 800a50a:	2209      	movs	r2, #9
 800a50c:	461f      	mov	r7, r3
 800a50e:	3308      	adds	r3, #8
 800a510:	460c      	mov	r4, r1
 800a512:	fb93 f3f2 	sdiv	r3, r3, r2
 800a516:	4606      	mov	r6, r0
 800a518:	2201      	movs	r2, #1
 800a51a:	2100      	movs	r1, #0
 800a51c:	429a      	cmp	r2, r3
 800a51e:	db20      	blt.n	800a562 <__s2b+0x5e>
 800a520:	4630      	mov	r0, r6
 800a522:	f7ff ff69 	bl	800a3f8 <_Balloc>
 800a526:	9b08      	ldr	r3, [sp, #32]
 800a528:	2d09      	cmp	r5, #9
 800a52a:	6143      	str	r3, [r0, #20]
 800a52c:	f04f 0301 	mov.w	r3, #1
 800a530:	6103      	str	r3, [r0, #16]
 800a532:	dd19      	ble.n	800a568 <__s2b+0x64>
 800a534:	f104 0809 	add.w	r8, r4, #9
 800a538:	46c1      	mov	r9, r8
 800a53a:	442c      	add	r4, r5
 800a53c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a540:	4601      	mov	r1, r0
 800a542:	3b30      	subs	r3, #48	; 0x30
 800a544:	220a      	movs	r2, #10
 800a546:	4630      	mov	r0, r6
 800a548:	f7ff ffa1 	bl	800a48e <__multadd>
 800a54c:	45a1      	cmp	r9, r4
 800a54e:	d1f5      	bne.n	800a53c <__s2b+0x38>
 800a550:	eb08 0405 	add.w	r4, r8, r5
 800a554:	3c08      	subs	r4, #8
 800a556:	1b2d      	subs	r5, r5, r4
 800a558:	1963      	adds	r3, r4, r5
 800a55a:	42bb      	cmp	r3, r7
 800a55c:	db07      	blt.n	800a56e <__s2b+0x6a>
 800a55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a562:	0052      	lsls	r2, r2, #1
 800a564:	3101      	adds	r1, #1
 800a566:	e7d9      	b.n	800a51c <__s2b+0x18>
 800a568:	340a      	adds	r4, #10
 800a56a:	2509      	movs	r5, #9
 800a56c:	e7f3      	b.n	800a556 <__s2b+0x52>
 800a56e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a572:	4601      	mov	r1, r0
 800a574:	3b30      	subs	r3, #48	; 0x30
 800a576:	220a      	movs	r2, #10
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff ff88 	bl	800a48e <__multadd>
 800a57e:	e7eb      	b.n	800a558 <__s2b+0x54>

0800a580 <__hi0bits>:
 800a580:	0c02      	lsrs	r2, r0, #16
 800a582:	0412      	lsls	r2, r2, #16
 800a584:	4603      	mov	r3, r0
 800a586:	b9b2      	cbnz	r2, 800a5b6 <__hi0bits+0x36>
 800a588:	0403      	lsls	r3, r0, #16
 800a58a:	2010      	movs	r0, #16
 800a58c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a590:	bf04      	itt	eq
 800a592:	021b      	lsleq	r3, r3, #8
 800a594:	3008      	addeq	r0, #8
 800a596:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a59a:	bf04      	itt	eq
 800a59c:	011b      	lsleq	r3, r3, #4
 800a59e:	3004      	addeq	r0, #4
 800a5a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a5a4:	bf04      	itt	eq
 800a5a6:	009b      	lsleq	r3, r3, #2
 800a5a8:	3002      	addeq	r0, #2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	db06      	blt.n	800a5bc <__hi0bits+0x3c>
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	d503      	bpl.n	800a5ba <__hi0bits+0x3a>
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	4770      	bx	lr
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e7e8      	b.n	800a58c <__hi0bits+0xc>
 800a5ba:	2020      	movs	r0, #32
 800a5bc:	4770      	bx	lr

0800a5be <__lo0bits>:
 800a5be:	6803      	ldr	r3, [r0, #0]
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	f013 0207 	ands.w	r2, r3, #7
 800a5c6:	d00b      	beq.n	800a5e0 <__lo0bits+0x22>
 800a5c8:	07da      	lsls	r2, r3, #31
 800a5ca:	d423      	bmi.n	800a614 <__lo0bits+0x56>
 800a5cc:	0798      	lsls	r0, r3, #30
 800a5ce:	bf49      	itett	mi
 800a5d0:	085b      	lsrmi	r3, r3, #1
 800a5d2:	089b      	lsrpl	r3, r3, #2
 800a5d4:	2001      	movmi	r0, #1
 800a5d6:	600b      	strmi	r3, [r1, #0]
 800a5d8:	bf5c      	itt	pl
 800a5da:	600b      	strpl	r3, [r1, #0]
 800a5dc:	2002      	movpl	r0, #2
 800a5de:	4770      	bx	lr
 800a5e0:	b298      	uxth	r0, r3
 800a5e2:	b9a8      	cbnz	r0, 800a610 <__lo0bits+0x52>
 800a5e4:	2010      	movs	r0, #16
 800a5e6:	0c1b      	lsrs	r3, r3, #16
 800a5e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5ec:	bf04      	itt	eq
 800a5ee:	0a1b      	lsreq	r3, r3, #8
 800a5f0:	3008      	addeq	r0, #8
 800a5f2:	071a      	lsls	r2, r3, #28
 800a5f4:	bf04      	itt	eq
 800a5f6:	091b      	lsreq	r3, r3, #4
 800a5f8:	3004      	addeq	r0, #4
 800a5fa:	079a      	lsls	r2, r3, #30
 800a5fc:	bf04      	itt	eq
 800a5fe:	089b      	lsreq	r3, r3, #2
 800a600:	3002      	addeq	r0, #2
 800a602:	07da      	lsls	r2, r3, #31
 800a604:	d402      	bmi.n	800a60c <__lo0bits+0x4e>
 800a606:	085b      	lsrs	r3, r3, #1
 800a608:	d006      	beq.n	800a618 <__lo0bits+0x5a>
 800a60a:	3001      	adds	r0, #1
 800a60c:	600b      	str	r3, [r1, #0]
 800a60e:	4770      	bx	lr
 800a610:	4610      	mov	r0, r2
 800a612:	e7e9      	b.n	800a5e8 <__lo0bits+0x2a>
 800a614:	2000      	movs	r0, #0
 800a616:	4770      	bx	lr
 800a618:	2020      	movs	r0, #32
 800a61a:	4770      	bx	lr

0800a61c <__i2b>:
 800a61c:	b510      	push	{r4, lr}
 800a61e:	460c      	mov	r4, r1
 800a620:	2101      	movs	r1, #1
 800a622:	f7ff fee9 	bl	800a3f8 <_Balloc>
 800a626:	2201      	movs	r2, #1
 800a628:	6144      	str	r4, [r0, #20]
 800a62a:	6102      	str	r2, [r0, #16]
 800a62c:	bd10      	pop	{r4, pc}

0800a62e <__multiply>:
 800a62e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a632:	4614      	mov	r4, r2
 800a634:	690a      	ldr	r2, [r1, #16]
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	4688      	mov	r8, r1
 800a63a:	429a      	cmp	r2, r3
 800a63c:	bfbe      	ittt	lt
 800a63e:	460b      	movlt	r3, r1
 800a640:	46a0      	movlt	r8, r4
 800a642:	461c      	movlt	r4, r3
 800a644:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a648:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a64c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a650:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a654:	eb07 0609 	add.w	r6, r7, r9
 800a658:	42b3      	cmp	r3, r6
 800a65a:	bfb8      	it	lt
 800a65c:	3101      	addlt	r1, #1
 800a65e:	f7ff fecb 	bl	800a3f8 <_Balloc>
 800a662:	f100 0514 	add.w	r5, r0, #20
 800a666:	462b      	mov	r3, r5
 800a668:	2200      	movs	r2, #0
 800a66a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a66e:	4573      	cmp	r3, lr
 800a670:	d316      	bcc.n	800a6a0 <__multiply+0x72>
 800a672:	f104 0214 	add.w	r2, r4, #20
 800a676:	f108 0114 	add.w	r1, r8, #20
 800a67a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a67e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	9b00      	ldr	r3, [sp, #0]
 800a686:	9201      	str	r2, [sp, #4]
 800a688:	4293      	cmp	r3, r2
 800a68a:	d80c      	bhi.n	800a6a6 <__multiply+0x78>
 800a68c:	2e00      	cmp	r6, #0
 800a68e:	dd03      	ble.n	800a698 <__multiply+0x6a>
 800a690:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a694:	2b00      	cmp	r3, #0
 800a696:	d05d      	beq.n	800a754 <__multiply+0x126>
 800a698:	6106      	str	r6, [r0, #16]
 800a69a:	b003      	add	sp, #12
 800a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	f843 2b04 	str.w	r2, [r3], #4
 800a6a4:	e7e3      	b.n	800a66e <__multiply+0x40>
 800a6a6:	f8b2 b000 	ldrh.w	fp, [r2]
 800a6aa:	f1bb 0f00 	cmp.w	fp, #0
 800a6ae:	d023      	beq.n	800a6f8 <__multiply+0xca>
 800a6b0:	4689      	mov	r9, r1
 800a6b2:	46ac      	mov	ip, r5
 800a6b4:	f04f 0800 	mov.w	r8, #0
 800a6b8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a6bc:	f8dc a000 	ldr.w	sl, [ip]
 800a6c0:	b2a3      	uxth	r3, r4
 800a6c2:	fa1f fa8a 	uxth.w	sl, sl
 800a6c6:	fb0b a303 	mla	r3, fp, r3, sl
 800a6ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a6ce:	f8dc 4000 	ldr.w	r4, [ip]
 800a6d2:	4443      	add	r3, r8
 800a6d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a6d8:	fb0b 840a 	mla	r4, fp, sl, r8
 800a6dc:	46e2      	mov	sl, ip
 800a6de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6e8:	454f      	cmp	r7, r9
 800a6ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a6ee:	f84a 3b04 	str.w	r3, [sl], #4
 800a6f2:	d82b      	bhi.n	800a74c <__multiply+0x11e>
 800a6f4:	f8cc 8004 	str.w	r8, [ip, #4]
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	3204      	adds	r2, #4
 800a6fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a700:	f1ba 0f00 	cmp.w	sl, #0
 800a704:	d020      	beq.n	800a748 <__multiply+0x11a>
 800a706:	4689      	mov	r9, r1
 800a708:	46a8      	mov	r8, r5
 800a70a:	f04f 0b00 	mov.w	fp, #0
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	f8b9 c000 	ldrh.w	ip, [r9]
 800a714:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	fb0a 440c 	mla	r4, sl, ip, r4
 800a71e:	46c4      	mov	ip, r8
 800a720:	445c      	add	r4, fp
 800a722:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a726:	f84c 3b04 	str.w	r3, [ip], #4
 800a72a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a72e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a732:	0c1b      	lsrs	r3, r3, #16
 800a734:	fb0a b303 	mla	r3, sl, r3, fp
 800a738:	454f      	cmp	r7, r9
 800a73a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a73e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a742:	d805      	bhi.n	800a750 <__multiply+0x122>
 800a744:	f8c8 3004 	str.w	r3, [r8, #4]
 800a748:	3504      	adds	r5, #4
 800a74a:	e79b      	b.n	800a684 <__multiply+0x56>
 800a74c:	46d4      	mov	ip, sl
 800a74e:	e7b3      	b.n	800a6b8 <__multiply+0x8a>
 800a750:	46e0      	mov	r8, ip
 800a752:	e7dd      	b.n	800a710 <__multiply+0xe2>
 800a754:	3e01      	subs	r6, #1
 800a756:	e799      	b.n	800a68c <__multiply+0x5e>

0800a758 <__pow5mult>:
 800a758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a75c:	4615      	mov	r5, r2
 800a75e:	f012 0203 	ands.w	r2, r2, #3
 800a762:	4606      	mov	r6, r0
 800a764:	460f      	mov	r7, r1
 800a766:	d007      	beq.n	800a778 <__pow5mult+0x20>
 800a768:	4c21      	ldr	r4, [pc, #132]	; (800a7f0 <__pow5mult+0x98>)
 800a76a:	3a01      	subs	r2, #1
 800a76c:	2300      	movs	r3, #0
 800a76e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a772:	f7ff fe8c 	bl	800a48e <__multadd>
 800a776:	4607      	mov	r7, r0
 800a778:	10ad      	asrs	r5, r5, #2
 800a77a:	d035      	beq.n	800a7e8 <__pow5mult+0x90>
 800a77c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a77e:	b93c      	cbnz	r4, 800a790 <__pow5mult+0x38>
 800a780:	2010      	movs	r0, #16
 800a782:	f7ff fe11 	bl	800a3a8 <malloc>
 800a786:	6270      	str	r0, [r6, #36]	; 0x24
 800a788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a78c:	6004      	str	r4, [r0, #0]
 800a78e:	60c4      	str	r4, [r0, #12]
 800a790:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a798:	b94c      	cbnz	r4, 800a7ae <__pow5mult+0x56>
 800a79a:	f240 2171 	movw	r1, #625	; 0x271
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f7ff ff3c 	bl	800a61c <__i2b>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ac:	6003      	str	r3, [r0, #0]
 800a7ae:	f04f 0800 	mov.w	r8, #0
 800a7b2:	07eb      	lsls	r3, r5, #31
 800a7b4:	d50a      	bpl.n	800a7cc <__pow5mult+0x74>
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ff37 	bl	800a62e <__multiply>
 800a7c0:	4681      	mov	r9, r0
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff fe4b 	bl	800a460 <_Bfree>
 800a7ca:	464f      	mov	r7, r9
 800a7cc:	106d      	asrs	r5, r5, #1
 800a7ce:	d00b      	beq.n	800a7e8 <__pow5mult+0x90>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	b938      	cbnz	r0, 800a7e4 <__pow5mult+0x8c>
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff ff28 	bl	800a62e <__multiply>
 800a7de:	6020      	str	r0, [r4, #0]
 800a7e0:	f8c0 8000 	str.w	r8, [r0]
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	e7e4      	b.n	800a7b2 <__pow5mult+0x5a>
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	bf00      	nop
 800a7f0:	0800b6a0 	.word	0x0800b6a0

0800a7f4 <__lshift>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	6923      	ldr	r3, [r4, #16]
 800a800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a804:	eb0a 0903 	add.w	r9, sl, r3
 800a808:	6849      	ldr	r1, [r1, #4]
 800a80a:	68a3      	ldr	r3, [r4, #8]
 800a80c:	f109 0501 	add.w	r5, r9, #1
 800a810:	42ab      	cmp	r3, r5
 800a812:	db32      	blt.n	800a87a <__lshift+0x86>
 800a814:	4638      	mov	r0, r7
 800a816:	f7ff fdef 	bl	800a3f8 <_Balloc>
 800a81a:	2300      	movs	r3, #0
 800a81c:	4680      	mov	r8, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	f100 0114 	add.w	r1, r0, #20
 800a824:	4553      	cmp	r3, sl
 800a826:	db2b      	blt.n	800a880 <__lshift+0x8c>
 800a828:	6920      	ldr	r0, [r4, #16]
 800a82a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a82e:	f104 0314 	add.w	r3, r4, #20
 800a832:	f016 021f 	ands.w	r2, r6, #31
 800a836:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a83a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a83e:	d025      	beq.n	800a88c <__lshift+0x98>
 800a840:	2000      	movs	r0, #0
 800a842:	f1c2 0e20 	rsb	lr, r2, #32
 800a846:	468a      	mov	sl, r1
 800a848:	681e      	ldr	r6, [r3, #0]
 800a84a:	4096      	lsls	r6, r2
 800a84c:	4330      	orrs	r0, r6
 800a84e:	f84a 0b04 	str.w	r0, [sl], #4
 800a852:	f853 0b04 	ldr.w	r0, [r3], #4
 800a856:	459c      	cmp	ip, r3
 800a858:	fa20 f00e 	lsr.w	r0, r0, lr
 800a85c:	d814      	bhi.n	800a888 <__lshift+0x94>
 800a85e:	6048      	str	r0, [r1, #4]
 800a860:	b108      	cbz	r0, 800a866 <__lshift+0x72>
 800a862:	f109 0502 	add.w	r5, r9, #2
 800a866:	3d01      	subs	r5, #1
 800a868:	4638      	mov	r0, r7
 800a86a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a86e:	4621      	mov	r1, r4
 800a870:	f7ff fdf6 	bl	800a460 <_Bfree>
 800a874:	4640      	mov	r0, r8
 800a876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87a:	3101      	adds	r1, #1
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	e7c7      	b.n	800a810 <__lshift+0x1c>
 800a880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a884:	3301      	adds	r3, #1
 800a886:	e7cd      	b.n	800a824 <__lshift+0x30>
 800a888:	4651      	mov	r1, sl
 800a88a:	e7dc      	b.n	800a846 <__lshift+0x52>
 800a88c:	3904      	subs	r1, #4
 800a88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a892:	459c      	cmp	ip, r3
 800a894:	f841 2f04 	str.w	r2, [r1, #4]!
 800a898:	d8f9      	bhi.n	800a88e <__lshift+0x9a>
 800a89a:	e7e4      	b.n	800a866 <__lshift+0x72>

0800a89c <__mcmp>:
 800a89c:	6903      	ldr	r3, [r0, #16]
 800a89e:	690a      	ldr	r2, [r1, #16]
 800a8a0:	b530      	push	{r4, r5, lr}
 800a8a2:	1a9b      	subs	r3, r3, r2
 800a8a4:	d10c      	bne.n	800a8c0 <__mcmp+0x24>
 800a8a6:	0092      	lsls	r2, r2, #2
 800a8a8:	3014      	adds	r0, #20
 800a8aa:	3114      	adds	r1, #20
 800a8ac:	1884      	adds	r4, r0, r2
 800a8ae:	4411      	add	r1, r2
 800a8b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8b8:	4295      	cmp	r5, r2
 800a8ba:	d003      	beq.n	800a8c4 <__mcmp+0x28>
 800a8bc:	d305      	bcc.n	800a8ca <__mcmp+0x2e>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	bd30      	pop	{r4, r5, pc}
 800a8c4:	42a0      	cmp	r0, r4
 800a8c6:	d3f3      	bcc.n	800a8b0 <__mcmp+0x14>
 800a8c8:	e7fa      	b.n	800a8c0 <__mcmp+0x24>
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ce:	e7f7      	b.n	800a8c0 <__mcmp+0x24>

0800a8d0 <__mdiff>:
 800a8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4628      	mov	r0, r5
 800a8dc:	4614      	mov	r4, r2
 800a8de:	f7ff ffdd 	bl	800a89c <__mcmp>
 800a8e2:	1e06      	subs	r6, r0, #0
 800a8e4:	d108      	bne.n	800a8f8 <__mdiff+0x28>
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7ff fd85 	bl	800a3f8 <_Balloc>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f8:	bfa4      	itt	ge
 800a8fa:	4623      	movge	r3, r4
 800a8fc:	462c      	movge	r4, r5
 800a8fe:	4638      	mov	r0, r7
 800a900:	6861      	ldr	r1, [r4, #4]
 800a902:	bfa6      	itte	ge
 800a904:	461d      	movge	r5, r3
 800a906:	2600      	movge	r6, #0
 800a908:	2601      	movlt	r6, #1
 800a90a:	f7ff fd75 	bl	800a3f8 <_Balloc>
 800a90e:	f04f 0e00 	mov.w	lr, #0
 800a912:	60c6      	str	r6, [r0, #12]
 800a914:	692b      	ldr	r3, [r5, #16]
 800a916:	6926      	ldr	r6, [r4, #16]
 800a918:	f104 0214 	add.w	r2, r4, #20
 800a91c:	f105 0914 	add.w	r9, r5, #20
 800a920:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a924:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a928:	f100 0114 	add.w	r1, r0, #20
 800a92c:	f852 ab04 	ldr.w	sl, [r2], #4
 800a930:	f859 5b04 	ldr.w	r5, [r9], #4
 800a934:	fa1f f38a 	uxth.w	r3, sl
 800a938:	4473      	add	r3, lr
 800a93a:	b2ac      	uxth	r4, r5
 800a93c:	1b1b      	subs	r3, r3, r4
 800a93e:	0c2c      	lsrs	r4, r5, #16
 800a940:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a944:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a948:	b29b      	uxth	r3, r3
 800a94a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a94e:	45c8      	cmp	r8, r9
 800a950:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a954:	4694      	mov	ip, r2
 800a956:	f841 4b04 	str.w	r4, [r1], #4
 800a95a:	d8e7      	bhi.n	800a92c <__mdiff+0x5c>
 800a95c:	45bc      	cmp	ip, r7
 800a95e:	d304      	bcc.n	800a96a <__mdiff+0x9a>
 800a960:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a964:	b183      	cbz	r3, 800a988 <__mdiff+0xb8>
 800a966:	6106      	str	r6, [r0, #16]
 800a968:	e7c4      	b.n	800a8f4 <__mdiff+0x24>
 800a96a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a96e:	b2a2      	uxth	r2, r4
 800a970:	4472      	add	r2, lr
 800a972:	1413      	asrs	r3, r2, #16
 800a974:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a978:	b292      	uxth	r2, r2
 800a97a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a97e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a982:	f841 2b04 	str.w	r2, [r1], #4
 800a986:	e7e9      	b.n	800a95c <__mdiff+0x8c>
 800a988:	3e01      	subs	r6, #1
 800a98a:	e7e9      	b.n	800a960 <__mdiff+0x90>

0800a98c <__ulp>:
 800a98c:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <__ulp+0x44>)
 800a98e:	400b      	ands	r3, r1
 800a990:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd02      	ble.n	800a99e <__ulp+0x12>
 800a998:	2000      	movs	r0, #0
 800a99a:	4619      	mov	r1, r3
 800a99c:	4770      	bx	lr
 800a99e:	425b      	negs	r3, r3
 800a9a0:	151b      	asrs	r3, r3, #20
 800a9a2:	2b13      	cmp	r3, #19
 800a9a4:	f04f 0000 	mov.w	r0, #0
 800a9a8:	f04f 0100 	mov.w	r1, #0
 800a9ac:	dc04      	bgt.n	800a9b8 <__ulp+0x2c>
 800a9ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a9b2:	fa42 f103 	asr.w	r1, r2, r3
 800a9b6:	4770      	bx	lr
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	3b14      	subs	r3, #20
 800a9bc:	2b1e      	cmp	r3, #30
 800a9be:	bfce      	itee	gt
 800a9c0:	4613      	movgt	r3, r2
 800a9c2:	f1c3 031f 	rsble	r3, r3, #31
 800a9c6:	fa02 f303 	lslle.w	r3, r2, r3
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	7ff00000 	.word	0x7ff00000

0800a9d4 <__b2d>:
 800a9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d8:	6907      	ldr	r7, [r0, #16]
 800a9da:	f100 0914 	add.w	r9, r0, #20
 800a9de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a9e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a9e6:	f1a7 0804 	sub.w	r8, r7, #4
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7ff fdc8 	bl	800a580 <__hi0bits>
 800a9f0:	f1c0 0320 	rsb	r3, r0, #32
 800a9f4:	280a      	cmp	r0, #10
 800a9f6:	600b      	str	r3, [r1, #0]
 800a9f8:	491e      	ldr	r1, [pc, #120]	; (800aa74 <__b2d+0xa0>)
 800a9fa:	dc17      	bgt.n	800aa2c <__b2d+0x58>
 800a9fc:	45c1      	cmp	r9, r8
 800a9fe:	bf28      	it	cs
 800aa00:	2200      	movcs	r2, #0
 800aa02:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa06:	fa26 f30c 	lsr.w	r3, r6, ip
 800aa0a:	bf38      	it	cc
 800aa0c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa10:	ea43 0501 	orr.w	r5, r3, r1
 800aa14:	f100 0315 	add.w	r3, r0, #21
 800aa18:	fa06 f303 	lsl.w	r3, r6, r3
 800aa1c:	fa22 f20c 	lsr.w	r2, r2, ip
 800aa20:	ea43 0402 	orr.w	r4, r3, r2
 800aa24:	4620      	mov	r0, r4
 800aa26:	4629      	mov	r1, r5
 800aa28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2c:	45c1      	cmp	r9, r8
 800aa2e:	bf3a      	itte	cc
 800aa30:	f1a7 0808 	subcc.w	r8, r7, #8
 800aa34:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa38:	2200      	movcs	r2, #0
 800aa3a:	f1b0 030b 	subs.w	r3, r0, #11
 800aa3e:	d015      	beq.n	800aa6c <__b2d+0x98>
 800aa40:	409e      	lsls	r6, r3
 800aa42:	f1c3 0720 	rsb	r7, r3, #32
 800aa46:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800aa4a:	fa22 f107 	lsr.w	r1, r2, r7
 800aa4e:	45c8      	cmp	r8, r9
 800aa50:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800aa54:	ea46 0501 	orr.w	r5, r6, r1
 800aa58:	bf94      	ite	ls
 800aa5a:	2100      	movls	r1, #0
 800aa5c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800aa60:	fa02 f003 	lsl.w	r0, r2, r3
 800aa64:	40f9      	lsrs	r1, r7
 800aa66:	ea40 0401 	orr.w	r4, r0, r1
 800aa6a:	e7db      	b.n	800aa24 <__b2d+0x50>
 800aa6c:	ea46 0501 	orr.w	r5, r6, r1
 800aa70:	4614      	mov	r4, r2
 800aa72:	e7d7      	b.n	800aa24 <__b2d+0x50>
 800aa74:	3ff00000 	.word	0x3ff00000

0800aa78 <__d2b>:
 800aa78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa7c:	461c      	mov	r4, r3
 800aa7e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800aa82:	2101      	movs	r1, #1
 800aa84:	4690      	mov	r8, r2
 800aa86:	f7ff fcb7 	bl	800a3f8 <_Balloc>
 800aa8a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800aa8e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aa92:	4607      	mov	r7, r0
 800aa94:	bb34      	cbnz	r4, 800aae4 <__d2b+0x6c>
 800aa96:	9201      	str	r2, [sp, #4]
 800aa98:	f1b8 0200 	subs.w	r2, r8, #0
 800aa9c:	d027      	beq.n	800aaee <__d2b+0x76>
 800aa9e:	a802      	add	r0, sp, #8
 800aaa0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800aaa4:	f7ff fd8b 	bl	800a5be <__lo0bits>
 800aaa8:	9900      	ldr	r1, [sp, #0]
 800aaaa:	b1f0      	cbz	r0, 800aaea <__d2b+0x72>
 800aaac:	9a01      	ldr	r2, [sp, #4]
 800aaae:	f1c0 0320 	rsb	r3, r0, #32
 800aab2:	fa02 f303 	lsl.w	r3, r2, r3
 800aab6:	430b      	orrs	r3, r1
 800aab8:	40c2      	lsrs	r2, r0
 800aaba:	617b      	str	r3, [r7, #20]
 800aabc:	9201      	str	r2, [sp, #4]
 800aabe:	9b01      	ldr	r3, [sp, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	bf14      	ite	ne
 800aac4:	2102      	movne	r1, #2
 800aac6:	2101      	moveq	r1, #1
 800aac8:	61bb      	str	r3, [r7, #24]
 800aaca:	6139      	str	r1, [r7, #16]
 800aacc:	b1c4      	cbz	r4, 800ab00 <__d2b+0x88>
 800aace:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aad2:	4404      	add	r4, r0
 800aad4:	6034      	str	r4, [r6, #0]
 800aad6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aada:	6028      	str	r0, [r5, #0]
 800aadc:	4638      	mov	r0, r7
 800aade:	b002      	add	sp, #8
 800aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aae8:	e7d5      	b.n	800aa96 <__d2b+0x1e>
 800aaea:	6179      	str	r1, [r7, #20]
 800aaec:	e7e7      	b.n	800aabe <__d2b+0x46>
 800aaee:	a801      	add	r0, sp, #4
 800aaf0:	f7ff fd65 	bl	800a5be <__lo0bits>
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	6139      	str	r1, [r7, #16]
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	3020      	adds	r0, #32
 800aafe:	e7e5      	b.n	800aacc <__d2b+0x54>
 800ab00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab04:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ab08:	6030      	str	r0, [r6, #0]
 800ab0a:	6918      	ldr	r0, [r3, #16]
 800ab0c:	f7ff fd38 	bl	800a580 <__hi0bits>
 800ab10:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab14:	e7e1      	b.n	800aada <__d2b+0x62>

0800ab16 <__ratio>:
 800ab16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1a:	4688      	mov	r8, r1
 800ab1c:	4669      	mov	r1, sp
 800ab1e:	4681      	mov	r9, r0
 800ab20:	f7ff ff58 	bl	800a9d4 <__b2d>
 800ab24:	468b      	mov	fp, r1
 800ab26:	4606      	mov	r6, r0
 800ab28:	460f      	mov	r7, r1
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	a901      	add	r1, sp, #4
 800ab2e:	f7ff ff51 	bl	800a9d4 <__b2d>
 800ab32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	eba3 0c02 	sub.w	ip, r3, r2
 800ab40:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bfd5      	itete	le
 800ab4e:	460a      	movle	r2, r1
 800ab50:	463a      	movgt	r2, r7
 800ab52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ab5a:	bfd8      	it	le
 800ab5c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800ab60:	462b      	mov	r3, r5
 800ab62:	4602      	mov	r2, r0
 800ab64:	4659      	mov	r1, fp
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7f5 fde0 	bl	800072c <__aeabi_ddiv>
 800ab6c:	b003      	add	sp, #12
 800ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab72 <__copybits>:
 800ab72:	3901      	subs	r1, #1
 800ab74:	b510      	push	{r4, lr}
 800ab76:	1149      	asrs	r1, r1, #5
 800ab78:	6914      	ldr	r4, [r2, #16]
 800ab7a:	3101      	adds	r1, #1
 800ab7c:	f102 0314 	add.w	r3, r2, #20
 800ab80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	d303      	bcc.n	800ab96 <__copybits+0x24>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	428a      	cmp	r2, r1
 800ab92:	d305      	bcc.n	800aba0 <__copybits+0x2e>
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9a:	f840 2b04 	str.w	r2, [r0], #4
 800ab9e:	e7f3      	b.n	800ab88 <__copybits+0x16>
 800aba0:	f842 3b04 	str.w	r3, [r2], #4
 800aba4:	e7f4      	b.n	800ab90 <__copybits+0x1e>

0800aba6 <__any_on>:
 800aba6:	f100 0214 	add.w	r2, r0, #20
 800abaa:	6900      	ldr	r0, [r0, #16]
 800abac:	114b      	asrs	r3, r1, #5
 800abae:	4298      	cmp	r0, r3
 800abb0:	b510      	push	{r4, lr}
 800abb2:	db11      	blt.n	800abd8 <__any_on+0x32>
 800abb4:	dd0a      	ble.n	800abcc <__any_on+0x26>
 800abb6:	f011 011f 	ands.w	r1, r1, #31
 800abba:	d007      	beq.n	800abcc <__any_on+0x26>
 800abbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abc0:	fa24 f001 	lsr.w	r0, r4, r1
 800abc4:	fa00 f101 	lsl.w	r1, r0, r1
 800abc8:	428c      	cmp	r4, r1
 800abca:	d10b      	bne.n	800abe4 <__any_on+0x3e>
 800abcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d803      	bhi.n	800abdc <__any_on+0x36>
 800abd4:	2000      	movs	r0, #0
 800abd6:	bd10      	pop	{r4, pc}
 800abd8:	4603      	mov	r3, r0
 800abda:	e7f7      	b.n	800abcc <__any_on+0x26>
 800abdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abe0:	2900      	cmp	r1, #0
 800abe2:	d0f5      	beq.n	800abd0 <__any_on+0x2a>
 800abe4:	2001      	movs	r0, #1
 800abe6:	e7f6      	b.n	800abd6 <__any_on+0x30>

0800abe8 <_calloc_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	fb02 f401 	mul.w	r4, r2, r1
 800abee:	4621      	mov	r1, r4
 800abf0:	f000 f854 	bl	800ac9c <_malloc_r>
 800abf4:	4605      	mov	r5, r0
 800abf6:	b118      	cbz	r0, 800ac00 <_calloc_r+0x18>
 800abf8:	4622      	mov	r2, r4
 800abfa:	2100      	movs	r1, #0
 800abfc:	f7fc fd23 	bl	8007646 <memset>
 800ac00:	4628      	mov	r0, r5
 800ac02:	bd38      	pop	{r3, r4, r5, pc}

0800ac04 <_free_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4605      	mov	r5, r0
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	d043      	beq.n	800ac94 <_free_r+0x90>
 800ac0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac10:	1f0c      	subs	r4, r1, #4
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	bfb8      	it	lt
 800ac16:	18e4      	addlt	r4, r4, r3
 800ac18:	f000 fa34 	bl	800b084 <__malloc_lock>
 800ac1c:	4a1e      	ldr	r2, [pc, #120]	; (800ac98 <_free_r+0x94>)
 800ac1e:	6813      	ldr	r3, [r2, #0]
 800ac20:	4610      	mov	r0, r2
 800ac22:	b933      	cbnz	r3, 800ac32 <_free_r+0x2e>
 800ac24:	6063      	str	r3, [r4, #4]
 800ac26:	6014      	str	r4, [r2, #0]
 800ac28:	4628      	mov	r0, r5
 800ac2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac2e:	f000 ba2a 	b.w	800b086 <__malloc_unlock>
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	d90b      	bls.n	800ac4e <_free_r+0x4a>
 800ac36:	6821      	ldr	r1, [r4, #0]
 800ac38:	1862      	adds	r2, r4, r1
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	bf01      	itttt	eq
 800ac3e:	681a      	ldreq	r2, [r3, #0]
 800ac40:	685b      	ldreq	r3, [r3, #4]
 800ac42:	1852      	addeq	r2, r2, r1
 800ac44:	6022      	streq	r2, [r4, #0]
 800ac46:	6063      	str	r3, [r4, #4]
 800ac48:	6004      	str	r4, [r0, #0]
 800ac4a:	e7ed      	b.n	800ac28 <_free_r+0x24>
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	b10a      	cbz	r2, 800ac56 <_free_r+0x52>
 800ac52:	42a2      	cmp	r2, r4
 800ac54:	d9fa      	bls.n	800ac4c <_free_r+0x48>
 800ac56:	6819      	ldr	r1, [r3, #0]
 800ac58:	1858      	adds	r0, r3, r1
 800ac5a:	42a0      	cmp	r0, r4
 800ac5c:	d10b      	bne.n	800ac76 <_free_r+0x72>
 800ac5e:	6820      	ldr	r0, [r4, #0]
 800ac60:	4401      	add	r1, r0
 800ac62:	1858      	adds	r0, r3, r1
 800ac64:	4282      	cmp	r2, r0
 800ac66:	6019      	str	r1, [r3, #0]
 800ac68:	d1de      	bne.n	800ac28 <_free_r+0x24>
 800ac6a:	6810      	ldr	r0, [r2, #0]
 800ac6c:	6852      	ldr	r2, [r2, #4]
 800ac6e:	4401      	add	r1, r0
 800ac70:	6019      	str	r1, [r3, #0]
 800ac72:	605a      	str	r2, [r3, #4]
 800ac74:	e7d8      	b.n	800ac28 <_free_r+0x24>
 800ac76:	d902      	bls.n	800ac7e <_free_r+0x7a>
 800ac78:	230c      	movs	r3, #12
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	e7d4      	b.n	800ac28 <_free_r+0x24>
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	1821      	adds	r1, r4, r0
 800ac82:	428a      	cmp	r2, r1
 800ac84:	bf01      	itttt	eq
 800ac86:	6811      	ldreq	r1, [r2, #0]
 800ac88:	6852      	ldreq	r2, [r2, #4]
 800ac8a:	1809      	addeq	r1, r1, r0
 800ac8c:	6021      	streq	r1, [r4, #0]
 800ac8e:	6062      	str	r2, [r4, #4]
 800ac90:	605c      	str	r4, [r3, #4]
 800ac92:	e7c9      	b.n	800ac28 <_free_r+0x24>
 800ac94:	bd38      	pop	{r3, r4, r5, pc}
 800ac96:	bf00      	nop
 800ac98:	2000075c 	.word	0x2000075c

0800ac9c <_malloc_r>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	1ccd      	adds	r5, r1, #3
 800aca0:	f025 0503 	bic.w	r5, r5, #3
 800aca4:	3508      	adds	r5, #8
 800aca6:	2d0c      	cmp	r5, #12
 800aca8:	bf38      	it	cc
 800acaa:	250c      	movcc	r5, #12
 800acac:	2d00      	cmp	r5, #0
 800acae:	4606      	mov	r6, r0
 800acb0:	db01      	blt.n	800acb6 <_malloc_r+0x1a>
 800acb2:	42a9      	cmp	r1, r5
 800acb4:	d903      	bls.n	800acbe <_malloc_r+0x22>
 800acb6:	230c      	movs	r3, #12
 800acb8:	6033      	str	r3, [r6, #0]
 800acba:	2000      	movs	r0, #0
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	f000 f9e1 	bl	800b084 <__malloc_lock>
 800acc2:	4a21      	ldr	r2, [pc, #132]	; (800ad48 <_malloc_r+0xac>)
 800acc4:	6814      	ldr	r4, [r2, #0]
 800acc6:	4621      	mov	r1, r4
 800acc8:	b991      	cbnz	r1, 800acf0 <_malloc_r+0x54>
 800acca:	4c20      	ldr	r4, [pc, #128]	; (800ad4c <_malloc_r+0xb0>)
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	b91b      	cbnz	r3, 800acd8 <_malloc_r+0x3c>
 800acd0:	4630      	mov	r0, r6
 800acd2:	f000 f98f 	bl	800aff4 <_sbrk_r>
 800acd6:	6020      	str	r0, [r4, #0]
 800acd8:	4629      	mov	r1, r5
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 f98a 	bl	800aff4 <_sbrk_r>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d124      	bne.n	800ad2e <_malloc_r+0x92>
 800ace4:	230c      	movs	r3, #12
 800ace6:	4630      	mov	r0, r6
 800ace8:	6033      	str	r3, [r6, #0]
 800acea:	f000 f9cc 	bl	800b086 <__malloc_unlock>
 800acee:	e7e4      	b.n	800acba <_malloc_r+0x1e>
 800acf0:	680b      	ldr	r3, [r1, #0]
 800acf2:	1b5b      	subs	r3, r3, r5
 800acf4:	d418      	bmi.n	800ad28 <_malloc_r+0x8c>
 800acf6:	2b0b      	cmp	r3, #11
 800acf8:	d90f      	bls.n	800ad1a <_malloc_r+0x7e>
 800acfa:	600b      	str	r3, [r1, #0]
 800acfc:	18cc      	adds	r4, r1, r3
 800acfe:	50cd      	str	r5, [r1, r3]
 800ad00:	4630      	mov	r0, r6
 800ad02:	f000 f9c0 	bl	800b086 <__malloc_unlock>
 800ad06:	f104 000b 	add.w	r0, r4, #11
 800ad0a:	1d23      	adds	r3, r4, #4
 800ad0c:	f020 0007 	bic.w	r0, r0, #7
 800ad10:	1ac3      	subs	r3, r0, r3
 800ad12:	d0d3      	beq.n	800acbc <_malloc_r+0x20>
 800ad14:	425a      	negs	r2, r3
 800ad16:	50e2      	str	r2, [r4, r3]
 800ad18:	e7d0      	b.n	800acbc <_malloc_r+0x20>
 800ad1a:	684b      	ldr	r3, [r1, #4]
 800ad1c:	428c      	cmp	r4, r1
 800ad1e:	bf16      	itet	ne
 800ad20:	6063      	strne	r3, [r4, #4]
 800ad22:	6013      	streq	r3, [r2, #0]
 800ad24:	460c      	movne	r4, r1
 800ad26:	e7eb      	b.n	800ad00 <_malloc_r+0x64>
 800ad28:	460c      	mov	r4, r1
 800ad2a:	6849      	ldr	r1, [r1, #4]
 800ad2c:	e7cc      	b.n	800acc8 <_malloc_r+0x2c>
 800ad2e:	1cc4      	adds	r4, r0, #3
 800ad30:	f024 0403 	bic.w	r4, r4, #3
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	d005      	beq.n	800ad44 <_malloc_r+0xa8>
 800ad38:	1a21      	subs	r1, r4, r0
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f000 f95a 	bl	800aff4 <_sbrk_r>
 800ad40:	3001      	adds	r0, #1
 800ad42:	d0cf      	beq.n	800ace4 <_malloc_r+0x48>
 800ad44:	6025      	str	r5, [r4, #0]
 800ad46:	e7db      	b.n	800ad00 <_malloc_r+0x64>
 800ad48:	2000075c 	.word	0x2000075c
 800ad4c:	20000760 	.word	0x20000760

0800ad50 <__ssputs_r>:
 800ad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	688e      	ldr	r6, [r1, #8]
 800ad56:	4682      	mov	sl, r0
 800ad58:	429e      	cmp	r6, r3
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	4690      	mov	r8, r2
 800ad5e:	4699      	mov	r9, r3
 800ad60:	d837      	bhi.n	800add2 <__ssputs_r+0x82>
 800ad62:	898a      	ldrh	r2, [r1, #12]
 800ad64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad68:	d031      	beq.n	800adce <__ssputs_r+0x7e>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	6825      	ldr	r5, [r4, #0]
 800ad6e:	6909      	ldr	r1, [r1, #16]
 800ad70:	1a6f      	subs	r7, r5, r1
 800ad72:	6965      	ldr	r5, [r4, #20]
 800ad74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad78:	fb95 f5f3 	sdiv	r5, r5, r3
 800ad7c:	f109 0301 	add.w	r3, r9, #1
 800ad80:	443b      	add	r3, r7
 800ad82:	429d      	cmp	r5, r3
 800ad84:	bf38      	it	cc
 800ad86:	461d      	movcc	r5, r3
 800ad88:	0553      	lsls	r3, r2, #21
 800ad8a:	d530      	bpl.n	800adee <__ssputs_r+0x9e>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	f7ff ff85 	bl	800ac9c <_malloc_r>
 800ad92:	4606      	mov	r6, r0
 800ad94:	b950      	cbnz	r0, 800adac <__ssputs_r+0x5c>
 800ad96:	230c      	movs	r3, #12
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	f8ca 3000 	str.w	r3, [sl]
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adac:	463a      	mov	r2, r7
 800adae:	6921      	ldr	r1, [r4, #16]
 800adb0:	f7fc fc3e 	bl	8007630 <memcpy>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	6126      	str	r6, [r4, #16]
 800adc2:	443e      	add	r6, r7
 800adc4:	6026      	str	r6, [r4, #0]
 800adc6:	464e      	mov	r6, r9
 800adc8:	6165      	str	r5, [r4, #20]
 800adca:	1bed      	subs	r5, r5, r7
 800adcc:	60a5      	str	r5, [r4, #8]
 800adce:	454e      	cmp	r6, r9
 800add0:	d900      	bls.n	800add4 <__ssputs_r+0x84>
 800add2:	464e      	mov	r6, r9
 800add4:	4632      	mov	r2, r6
 800add6:	4641      	mov	r1, r8
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	f000 f93a 	bl	800b052 <memmove>
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	2000      	movs	r0, #0
 800ade2:	1b9b      	subs	r3, r3, r6
 800ade4:	60a3      	str	r3, [r4, #8]
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	441e      	add	r6, r3
 800adea:	6026      	str	r6, [r4, #0]
 800adec:	e7dc      	b.n	800ada8 <__ssputs_r+0x58>
 800adee:	462a      	mov	r2, r5
 800adf0:	f000 f94a 	bl	800b088 <_realloc_r>
 800adf4:	4606      	mov	r6, r0
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d1e2      	bne.n	800adc0 <__ssputs_r+0x70>
 800adfa:	6921      	ldr	r1, [r4, #16]
 800adfc:	4650      	mov	r0, sl
 800adfe:	f7ff ff01 	bl	800ac04 <_free_r>
 800ae02:	e7c8      	b.n	800ad96 <__ssputs_r+0x46>

0800ae04 <_svfiprintf_r>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	461d      	mov	r5, r3
 800ae0a:	898b      	ldrh	r3, [r1, #12]
 800ae0c:	b09d      	sub	sp, #116	; 0x74
 800ae0e:	061f      	lsls	r7, r3, #24
 800ae10:	4680      	mov	r8, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	4616      	mov	r6, r2
 800ae16:	d50f      	bpl.n	800ae38 <_svfiprintf_r+0x34>
 800ae18:	690b      	ldr	r3, [r1, #16]
 800ae1a:	b96b      	cbnz	r3, 800ae38 <_svfiprintf_r+0x34>
 800ae1c:	2140      	movs	r1, #64	; 0x40
 800ae1e:	f7ff ff3d 	bl	800ac9c <_malloc_r>
 800ae22:	6020      	str	r0, [r4, #0]
 800ae24:	6120      	str	r0, [r4, #16]
 800ae26:	b928      	cbnz	r0, 800ae34 <_svfiprintf_r+0x30>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	f8c8 3000 	str.w	r3, [r8]
 800ae2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae32:	e0c8      	b.n	800afc6 <_svfiprintf_r+0x1c2>
 800ae34:	2340      	movs	r3, #64	; 0x40
 800ae36:	6163      	str	r3, [r4, #20]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3c:	2320      	movs	r3, #32
 800ae3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae42:	2330      	movs	r3, #48	; 0x30
 800ae44:	f04f 0b01 	mov.w	fp, #1
 800ae48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae4c:	9503      	str	r5, [sp, #12]
 800ae4e:	4637      	mov	r7, r6
 800ae50:	463d      	mov	r5, r7
 800ae52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae56:	b10b      	cbz	r3, 800ae5c <_svfiprintf_r+0x58>
 800ae58:	2b25      	cmp	r3, #37	; 0x25
 800ae5a:	d13e      	bne.n	800aeda <_svfiprintf_r+0xd6>
 800ae5c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ae60:	d00b      	beq.n	800ae7a <_svfiprintf_r+0x76>
 800ae62:	4653      	mov	r3, sl
 800ae64:	4632      	mov	r2, r6
 800ae66:	4621      	mov	r1, r4
 800ae68:	4640      	mov	r0, r8
 800ae6a:	f7ff ff71 	bl	800ad50 <__ssputs_r>
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f000 80a4 	beq.w	800afbc <_svfiprintf_r+0x1b8>
 800ae74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae76:	4453      	add	r3, sl
 800ae78:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7a:	783b      	ldrb	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 809d 	beq.w	800afbc <_svfiprintf_r+0x1b8>
 800ae82:	2300      	movs	r3, #0
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	9307      	str	r3, [sp, #28]
 800ae90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae94:	931a      	str	r3, [sp, #104]	; 0x68
 800ae96:	462f      	mov	r7, r5
 800ae98:	2205      	movs	r2, #5
 800ae9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ae9e:	4850      	ldr	r0, [pc, #320]	; (800afe0 <_svfiprintf_r+0x1dc>)
 800aea0:	f7ff fa9c 	bl	800a3dc <memchr>
 800aea4:	9b04      	ldr	r3, [sp, #16]
 800aea6:	b9d0      	cbnz	r0, 800aede <_svfiprintf_r+0xda>
 800aea8:	06d9      	lsls	r1, r3, #27
 800aeaa:	bf44      	itt	mi
 800aeac:	2220      	movmi	r2, #32
 800aeae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aeb2:	071a      	lsls	r2, r3, #28
 800aeb4:	bf44      	itt	mi
 800aeb6:	222b      	movmi	r2, #43	; 0x2b
 800aeb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aebc:	782a      	ldrb	r2, [r5, #0]
 800aebe:	2a2a      	cmp	r2, #42	; 0x2a
 800aec0:	d015      	beq.n	800aeee <_svfiprintf_r+0xea>
 800aec2:	462f      	mov	r7, r5
 800aec4:	2000      	movs	r0, #0
 800aec6:	250a      	movs	r5, #10
 800aec8:	9a07      	ldr	r2, [sp, #28]
 800aeca:	4639      	mov	r1, r7
 800aecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed0:	3b30      	subs	r3, #48	; 0x30
 800aed2:	2b09      	cmp	r3, #9
 800aed4:	d94d      	bls.n	800af72 <_svfiprintf_r+0x16e>
 800aed6:	b1b8      	cbz	r0, 800af08 <_svfiprintf_r+0x104>
 800aed8:	e00f      	b.n	800aefa <_svfiprintf_r+0xf6>
 800aeda:	462f      	mov	r7, r5
 800aedc:	e7b8      	b.n	800ae50 <_svfiprintf_r+0x4c>
 800aede:	4a40      	ldr	r2, [pc, #256]	; (800afe0 <_svfiprintf_r+0x1dc>)
 800aee0:	463d      	mov	r5, r7
 800aee2:	1a80      	subs	r0, r0, r2
 800aee4:	fa0b f000 	lsl.w	r0, fp, r0
 800aee8:	4318      	orrs	r0, r3
 800aeea:	9004      	str	r0, [sp, #16]
 800aeec:	e7d3      	b.n	800ae96 <_svfiprintf_r+0x92>
 800aeee:	9a03      	ldr	r2, [sp, #12]
 800aef0:	1d11      	adds	r1, r2, #4
 800aef2:	6812      	ldr	r2, [r2, #0]
 800aef4:	9103      	str	r1, [sp, #12]
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	db01      	blt.n	800aefe <_svfiprintf_r+0xfa>
 800aefa:	9207      	str	r2, [sp, #28]
 800aefc:	e004      	b.n	800af08 <_svfiprintf_r+0x104>
 800aefe:	4252      	negs	r2, r2
 800af00:	f043 0302 	orr.w	r3, r3, #2
 800af04:	9207      	str	r2, [sp, #28]
 800af06:	9304      	str	r3, [sp, #16]
 800af08:	783b      	ldrb	r3, [r7, #0]
 800af0a:	2b2e      	cmp	r3, #46	; 0x2e
 800af0c:	d10c      	bne.n	800af28 <_svfiprintf_r+0x124>
 800af0e:	787b      	ldrb	r3, [r7, #1]
 800af10:	2b2a      	cmp	r3, #42	; 0x2a
 800af12:	d133      	bne.n	800af7c <_svfiprintf_r+0x178>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	3702      	adds	r7, #2
 800af18:	1d1a      	adds	r2, r3, #4
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	9203      	str	r2, [sp, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	bfb8      	it	lt
 800af22:	f04f 33ff 	movlt.w	r3, #4294967295
 800af26:	9305      	str	r3, [sp, #20]
 800af28:	4d2e      	ldr	r5, [pc, #184]	; (800afe4 <_svfiprintf_r+0x1e0>)
 800af2a:	2203      	movs	r2, #3
 800af2c:	7839      	ldrb	r1, [r7, #0]
 800af2e:	4628      	mov	r0, r5
 800af30:	f7ff fa54 	bl	800a3dc <memchr>
 800af34:	b138      	cbz	r0, 800af46 <_svfiprintf_r+0x142>
 800af36:	2340      	movs	r3, #64	; 0x40
 800af38:	1b40      	subs	r0, r0, r5
 800af3a:	fa03 f000 	lsl.w	r0, r3, r0
 800af3e:	9b04      	ldr	r3, [sp, #16]
 800af40:	3701      	adds	r7, #1
 800af42:	4303      	orrs	r3, r0
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	7839      	ldrb	r1, [r7, #0]
 800af48:	2206      	movs	r2, #6
 800af4a:	4827      	ldr	r0, [pc, #156]	; (800afe8 <_svfiprintf_r+0x1e4>)
 800af4c:	1c7e      	adds	r6, r7, #1
 800af4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af52:	f7ff fa43 	bl	800a3dc <memchr>
 800af56:	2800      	cmp	r0, #0
 800af58:	d038      	beq.n	800afcc <_svfiprintf_r+0x1c8>
 800af5a:	4b24      	ldr	r3, [pc, #144]	; (800afec <_svfiprintf_r+0x1e8>)
 800af5c:	bb13      	cbnz	r3, 800afa4 <_svfiprintf_r+0x1a0>
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	3307      	adds	r3, #7
 800af62:	f023 0307 	bic.w	r3, r3, #7
 800af66:	3308      	adds	r3, #8
 800af68:	9303      	str	r3, [sp, #12]
 800af6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6c:	444b      	add	r3, r9
 800af6e:	9309      	str	r3, [sp, #36]	; 0x24
 800af70:	e76d      	b.n	800ae4e <_svfiprintf_r+0x4a>
 800af72:	fb05 3202 	mla	r2, r5, r2, r3
 800af76:	2001      	movs	r0, #1
 800af78:	460f      	mov	r7, r1
 800af7a:	e7a6      	b.n	800aeca <_svfiprintf_r+0xc6>
 800af7c:	2300      	movs	r3, #0
 800af7e:	250a      	movs	r5, #10
 800af80:	4619      	mov	r1, r3
 800af82:	3701      	adds	r7, #1
 800af84:	9305      	str	r3, [sp, #20]
 800af86:	4638      	mov	r0, r7
 800af88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af8c:	3a30      	subs	r2, #48	; 0x30
 800af8e:	2a09      	cmp	r2, #9
 800af90:	d903      	bls.n	800af9a <_svfiprintf_r+0x196>
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0c8      	beq.n	800af28 <_svfiprintf_r+0x124>
 800af96:	9105      	str	r1, [sp, #20]
 800af98:	e7c6      	b.n	800af28 <_svfiprintf_r+0x124>
 800af9a:	fb05 2101 	mla	r1, r5, r1, r2
 800af9e:	2301      	movs	r3, #1
 800afa0:	4607      	mov	r7, r0
 800afa2:	e7f0      	b.n	800af86 <_svfiprintf_r+0x182>
 800afa4:	ab03      	add	r3, sp, #12
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4622      	mov	r2, r4
 800afaa:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <_svfiprintf_r+0x1ec>)
 800afac:	a904      	add	r1, sp, #16
 800afae:	4640      	mov	r0, r8
 800afb0:	f7fc fbe2 	bl	8007778 <_printf_float>
 800afb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800afb8:	4681      	mov	r9, r0
 800afba:	d1d6      	bne.n	800af6a <_svfiprintf_r+0x166>
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	065b      	lsls	r3, r3, #25
 800afc0:	f53f af35 	bmi.w	800ae2e <_svfiprintf_r+0x2a>
 800afc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afc6:	b01d      	add	sp, #116	; 0x74
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	ab03      	add	r3, sp, #12
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	4622      	mov	r2, r4
 800afd2:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <_svfiprintf_r+0x1ec>)
 800afd4:	a904      	add	r1, sp, #16
 800afd6:	4640      	mov	r0, r8
 800afd8:	f7fc fe7a 	bl	8007cd0 <_printf_i>
 800afdc:	e7ea      	b.n	800afb4 <_svfiprintf_r+0x1b0>
 800afde:	bf00      	nop
 800afe0:	0800b6ac 	.word	0x0800b6ac
 800afe4:	0800b6b2 	.word	0x0800b6b2
 800afe8:	0800b6b6 	.word	0x0800b6b6
 800afec:	08007779 	.word	0x08007779
 800aff0:	0800ad51 	.word	0x0800ad51

0800aff4 <_sbrk_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	2300      	movs	r3, #0
 800aff8:	4c05      	ldr	r4, [pc, #20]	; (800b010 <_sbrk_r+0x1c>)
 800affa:	4605      	mov	r5, r0
 800affc:	4608      	mov	r0, r1
 800affe:	6023      	str	r3, [r4, #0]
 800b000:	f7f7 ffac 	bl	8002f5c <_sbrk>
 800b004:	1c43      	adds	r3, r0, #1
 800b006:	d102      	bne.n	800b00e <_sbrk_r+0x1a>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	b103      	cbz	r3, 800b00e <_sbrk_r+0x1a>
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	20000768 	.word	0x20000768

0800b014 <strncmp>:
 800b014:	b510      	push	{r4, lr}
 800b016:	b16a      	cbz	r2, 800b034 <strncmp+0x20>
 800b018:	3901      	subs	r1, #1
 800b01a:	1884      	adds	r4, r0, r2
 800b01c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b020:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b024:	4293      	cmp	r3, r2
 800b026:	d103      	bne.n	800b030 <strncmp+0x1c>
 800b028:	42a0      	cmp	r0, r4
 800b02a:	d001      	beq.n	800b030 <strncmp+0x1c>
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1f5      	bne.n	800b01c <strncmp+0x8>
 800b030:	1a98      	subs	r0, r3, r2
 800b032:	bd10      	pop	{r4, pc}
 800b034:	4610      	mov	r0, r2
 800b036:	e7fc      	b.n	800b032 <strncmp+0x1e>

0800b038 <__ascii_wctomb>:
 800b038:	b149      	cbz	r1, 800b04e <__ascii_wctomb+0x16>
 800b03a:	2aff      	cmp	r2, #255	; 0xff
 800b03c:	bf8b      	itete	hi
 800b03e:	238a      	movhi	r3, #138	; 0x8a
 800b040:	700a      	strbls	r2, [r1, #0]
 800b042:	6003      	strhi	r3, [r0, #0]
 800b044:	2001      	movls	r0, #1
 800b046:	bf88      	it	hi
 800b048:	f04f 30ff 	movhi.w	r0, #4294967295
 800b04c:	4770      	bx	lr
 800b04e:	4608      	mov	r0, r1
 800b050:	4770      	bx	lr

0800b052 <memmove>:
 800b052:	4288      	cmp	r0, r1
 800b054:	b510      	push	{r4, lr}
 800b056:	eb01 0302 	add.w	r3, r1, r2
 800b05a:	d807      	bhi.n	800b06c <memmove+0x1a>
 800b05c:	1e42      	subs	r2, r0, #1
 800b05e:	4299      	cmp	r1, r3
 800b060:	d00a      	beq.n	800b078 <memmove+0x26>
 800b062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b066:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b06a:	e7f8      	b.n	800b05e <memmove+0xc>
 800b06c:	4283      	cmp	r3, r0
 800b06e:	d9f5      	bls.n	800b05c <memmove+0xa>
 800b070:	1881      	adds	r1, r0, r2
 800b072:	1ad2      	subs	r2, r2, r3
 800b074:	42d3      	cmn	r3, r2
 800b076:	d100      	bne.n	800b07a <memmove+0x28>
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b07e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b082:	e7f7      	b.n	800b074 <memmove+0x22>

0800b084 <__malloc_lock>:
 800b084:	4770      	bx	lr

0800b086 <__malloc_unlock>:
 800b086:	4770      	bx	lr

0800b088 <_realloc_r>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	4607      	mov	r7, r0
 800b08c:	4614      	mov	r4, r2
 800b08e:	460e      	mov	r6, r1
 800b090:	b921      	cbnz	r1, 800b09c <_realloc_r+0x14>
 800b092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b096:	4611      	mov	r1, r2
 800b098:	f7ff be00 	b.w	800ac9c <_malloc_r>
 800b09c:	b922      	cbnz	r2, 800b0a8 <_realloc_r+0x20>
 800b09e:	f7ff fdb1 	bl	800ac04 <_free_r>
 800b0a2:	4625      	mov	r5, r4
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a8:	f000 f814 	bl	800b0d4 <_malloc_usable_size_r>
 800b0ac:	42a0      	cmp	r0, r4
 800b0ae:	d20f      	bcs.n	800b0d0 <_realloc_r+0x48>
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	f7ff fdf2 	bl	800ac9c <_malloc_r>
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d0f2      	beq.n	800b0a4 <_realloc_r+0x1c>
 800b0be:	4631      	mov	r1, r6
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	f7fc fab5 	bl	8007630 <memcpy>
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f7ff fd9b 	bl	800ac04 <_free_r>
 800b0ce:	e7e9      	b.n	800b0a4 <_realloc_r+0x1c>
 800b0d0:	4635      	mov	r5, r6
 800b0d2:	e7e7      	b.n	800b0a4 <_realloc_r+0x1c>

0800b0d4 <_malloc_usable_size_r>:
 800b0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d8:	1f18      	subs	r0, r3, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfbc      	itt	lt
 800b0de:	580b      	ldrlt	r3, [r1, r0]
 800b0e0:	18c0      	addlt	r0, r0, r3
 800b0e2:	4770      	bx	lr

0800b0e4 <_init>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	bf00      	nop
 800b0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ea:	bc08      	pop	{r3}
 800b0ec:	469e      	mov	lr, r3
 800b0ee:	4770      	bx	lr

0800b0f0 <_fini>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	bf00      	nop
 800b0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f6:	bc08      	pop	{r3}
 800b0f8:	469e      	mov	lr, r3
 800b0fa:	4770      	bx	lr
